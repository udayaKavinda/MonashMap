
original_board_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ea8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005d0c  08013fe8  08013fe8  00014fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019cf4  08019cf4  0001acf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019cfc  08019cfc  0001acfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019d00  08019d00  0001ad00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000230  20000008  08019d04  0001b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000238  08019f34  0001b238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000270  08019f69  0001b270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  20000284  08019f7a  0001b284  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a04  08019f7a  0001ba04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001ca67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0001d000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0001d000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08019f7a  0001c1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0006216c  00000000  00000000  0001ca97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000db32  00000000  00000000  0007ec03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003bb8  00000000  00000000  0008c738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000022fb  00000000  00000000  000902f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e192  00000000  00000000  000925eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00043466  00000000  00000000  000c077d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00108b42  00000000  00000000  00103be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      0000008f  00000000  00000000  0020c725  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000f93c  00000000  00000000  0020c7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000053  00000000  00000000  0021c0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    0001947a  00000000  00000000  0021c143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_ranges 00003908  00000000  00000000  002355bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000284 	.word	0x20000284
 800015c:	00000000 	.word	0x00000000
 8000160:	08013fd0 	.word	0x08013fd0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000288 	.word	0x20000288
 800017c:	08013fd0 	.word	0x08013fd0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b98a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f826 	bl	8000c08 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_f2ulz>:
 8000bc8:	b5d0      	push	{r4, r6, r7, lr}
 8000bca:	f7ff fc95 	bl	80004f8 <__aeabi_f2d>
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <__aeabi_f2ulz+0x38>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4606      	mov	r6, r0
 8000bd4:	460f      	mov	r7, r1
 8000bd6:	f7ff fce7 	bl	80005a8 <__aeabi_dmul>
 8000bda:	f7ff ffbd 	bl	8000b58 <__aeabi_d2uiz>
 8000bde:	4604      	mov	r4, r0
 8000be0:	f7ff fc68 	bl	80004b4 <__aeabi_ui2d>
 8000be4:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <__aeabi_f2ulz+0x3c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f7ff fcde 	bl	80005a8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	4639      	mov	r1, r7
 8000bf4:	f7ff fb20 	bl	8000238 <__aeabi_dsub>
 8000bf8:	f7ff ffae 	bl	8000b58 <__aeabi_d2uiz>
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <disable_interrupts>:
//	{SEN_EN5_GPIO_Port, SEN_EN5_Pin, SEN_INT5_GPIO_Port, SEN_INT5_Pin},
};


static inline void disable_interrupts(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
	__disable_irq();
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <enable_interrupts>:


static inline void enable_interrupts(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000ede:	b662      	cpsie	i
}
 8000ee0:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000ee2:	f3bf 8f6f 	isb	sy
}
 8000ee6:	bf00      	nop
	__enable_irq();
	__ISB();
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <spi_select>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void spi_select(acc_sensor_id_t sensor_id)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	GPIO_PinState sel0 = GPIO_PIN_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState sel1 = GPIO_PIN_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState sel2 = GPIO_PIN_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	737b      	strb	r3, [r7, #13]

	switch (sensor_id)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d81b      	bhi.n	8000f48 <spi_select+0x54>
 8000f10:	a201      	add	r2, pc, #4	@ (adr r2, 8000f18 <spi_select+0x24>)
 8000f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f16:	bf00      	nop
 8000f18:	08000f49 	.word	0x08000f49
 8000f1c:	08000f2d 	.word	0x08000f2d
 8000f20:	08000f33 	.word	0x08000f33
 8000f24:	08000f39 	.word	0x08000f39
 8000f28:	08000f43 	.word	0x08000f43
	{
		case 1:
			break;
		case 2:
			sel0 = GPIO_PIN_SET;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
			break;
 8000f30:	e00b      	b.n	8000f4a <spi_select+0x56>
		case 3:
			sel1 = GPIO_PIN_SET;
 8000f32:	2301      	movs	r3, #1
 8000f34:	73bb      	strb	r3, [r7, #14]
			break;
 8000f36:	e008      	b.n	8000f4a <spi_select+0x56>
		case 4:
			sel0 = GPIO_PIN_SET;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
			sel1 = GPIO_PIN_SET;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73bb      	strb	r3, [r7, #14]
			break;
 8000f40:	e003      	b.n	8000f4a <spi_select+0x56>
		case 5:
			sel2 = GPIO_PIN_SET;
 8000f42:	2301      	movs	r3, #1
 8000f44:	737b      	strb	r3, [r7, #13]
			break;
 8000f46:	e000      	b.n	8000f4a <spi_select+0x56>
		default:
			break;
 8000f48:	bf00      	nop
	}

	HAL_GPIO_WritePin(SPI_SEL0_GPIO_Port, SPI_SEL0_Pin, sel0);
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2102      	movs	r1, #2
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f54:	f003 fdf6 	bl	8004b44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_SEL1_GPIO_Port, SPI_SEL1_Pin, sel1);
 8000f58:	7bbb      	ldrb	r3, [r7, #14]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	4806      	ldr	r0, [pc, #24]	@ (8000f78 <spi_select+0x84>)
 8000f60:	f003 fdf0 	bl	8004b44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_SEL2_GPIO_Port, SPI_SEL2_Pin, sel2);
 8000f64:	7b7b      	ldrb	r3, [r7, #13]
 8000f66:	461a      	mov	r2, r3
 8000f68:	2101      	movs	r1, #1
 8000f6a:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <spi_select+0x84>)
 8000f6c:	f003 fdea 	bl	8004b44 <HAL_GPIO_WritePin>
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	48000800 	.word	0x48000800

08000f7c <acc_hal_integration_sensor_transfer>:


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <acc_hal_integration_sensor_transfer+0x18>
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2b05      	cmp	r3, #5
 8000f92:	d901      	bls.n	8000f98 <acc_hal_integration_sensor_transfer+0x1c>
	{
		Error_Handler();
 8000f94:	f002 ff62 	bl	8003e5c <Error_Handler>
	}

	spi_select(sensor_id);
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f7ff ffab 	bl	8000ef4 <spi_select>

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 8000f9e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000fa2:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(A121_SPI_SS_GPIO_Port, A121_SPI_SS_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2110      	movs	r1, #16
 8000fa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fac:	f003 fdca 	bl	8004b44 <HAL_GPIO_WritePin>
		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}

#else
	HAL_SPI_TransmitReceive(&A121_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	4806      	ldr	r0, [pc, #24]	@ (8000fd8 <acc_hal_integration_sensor_transfer+0x5c>)
 8000fc0:	f005 feeb 	bl	8006d9a <HAL_SPI_TransmitReceive>
#endif

	HAL_GPIO_WritePin(A121_SPI_SS_GPIO_Port, A121_SPI_SS_Pin, GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fcc:	f003 fdba 	bl	8004b44 <HAL_GPIO_WritePin>
}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200003d4 	.word	0x200003d4

08000fdc <acc_hal_integration_sensor_supply_on>:


void acc_hal_integration_sensor_supply_on(acc_sensor_id_t sensor_id)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d002      	beq.n	8000ff0 <acc_hal_integration_sensor_supply_on+0x14>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b05      	cmp	r3, #5
 8000fee:	d901      	bls.n	8000ff4 <acc_hal_integration_sensor_supply_on+0x18>
	{
		Error_Handler();
 8000ff0:	f002 ff34 	bl	8003e5c <Error_Handler>
	}

	// There is no power supply control on the XE121
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <acc_hal_integration_sensor_supply_off>:


void acc_hal_integration_sensor_supply_off(acc_sensor_id_t sensor_id)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d002      	beq.n	8001010 <acc_hal_integration_sensor_supply_off+0x14>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b05      	cmp	r3, #5
 800100e:	d901      	bls.n	8001014 <acc_hal_integration_sensor_supply_off+0x18>
	{
		Error_Handler();
 8001010:	f002 ff24 	bl	8003e5c <Error_Handler>
	}

	// There is no power supply control on the XE121
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <acc_hal_integration_sensor_enable>:


void acc_hal_integration_sensor_enable(acc_sensor_id_t sensor_id)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d002      	beq.n	8001030 <acc_hal_integration_sensor_enable+0x14>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b05      	cmp	r3, #5
 800102e:	d901      	bls.n	8001034 <acc_hal_integration_sensor_enable+0x18>
	{
		Error_Handler();
 8001030:	f002 ff14 	bl	8003e5c <Error_Handler>
	}

	const acc_sensor_info_t *sensor_info = &sensor_infos[sensor_id - 1];
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <acc_hal_integration_sensor_enable+0x48>)
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(sensor_info->en_port, sensor_info->en_pin_mask, GPIO_PIN_SET);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	b29b      	uxth	r3, r3
 800104a:	2201      	movs	r2, #1
 800104c:	4619      	mov	r1, r3
 800104e:	f003 fd79 	bl	8004b44 <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal has time to stabilize
	acc_integration_sleep_us(2000);
 8001052:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001056:	f000 f91d 	bl	8001294 <acc_integration_sleep_us>
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	08014398 	.word	0x08014398

08001068 <acc_hal_integration_sensor_disable>:


void acc_hal_integration_sensor_disable(acc_sensor_id_t sensor_id)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <acc_hal_integration_sensor_disable+0x14>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b05      	cmp	r3, #5
 800107a:	d901      	bls.n	8001080 <acc_hal_integration_sensor_disable+0x18>
	{
		Error_Handler();
 800107c:	f002 feee 	bl	8003e5c <Error_Handler>
	}

	const acc_sensor_info_t *sensor_info = &sensor_infos[sensor_id - 1];
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <acc_hal_integration_sensor_disable+0x48>)
 8001088:	4413      	add	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(sensor_info->en_port, sensor_info->en_pin_mask, GPIO_PIN_RESET);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	b29b      	uxth	r3, r3
 8001096:	2200      	movs	r2, #0
 8001098:	4619      	mov	r1, r3
 800109a:	f003 fd53 	bl	8004b44 <HAL_GPIO_WritePin>

	// Wait after disable to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	acc_integration_sleep_us(2000);
 800109e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010a2:	f000 f8f7 	bl	8001294 <acc_integration_sleep_us>
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	08014398 	.word	0x08014398

080010b4 <acc_hal_integration_wait_for_sensor_interrupt>:


bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
	bool status = false;
 80010be:	2300      	movs	r3, #0
 80010c0:	77fb      	strb	r3, [r7, #31]

	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <acc_hal_integration_wait_for_sensor_interrupt+0x1a>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b05      	cmp	r3, #5
 80010cc:	d901      	bls.n	80010d2 <acc_hal_integration_wait_for_sensor_interrupt+0x1e>
	{
		Error_Handler();
 80010ce:	f002 fec5 	bl	8003e5c <Error_Handler>
	}

	const acc_sensor_info_t *sensor_info  = &sensor_infos[sensor_id - 1];
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001154 <acc_hal_integration_wait_for_sensor_interrupt+0xa0>)
 80010da:	4413      	add	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
	GPIO_TypeDef            *int_port     = sensor_info->int_port;
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	617b      	str	r3, [r7, #20]
	uint32_t                int_pin_mask  = sensor_info->int_pin_mask;
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	613b      	str	r3, [r7, #16]
	const uint32_t          wait_begin_ms = HAL_GetTick();
 80010ea:	f003 f9e5 	bl	80044b8 <HAL_GetTick>
 80010ee:	60f8      	str	r0, [r7, #12]

	while ((HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET) &&
 80010f0:	e00d      	b.n	800110e <acc_hal_integration_wait_for_sensor_interrupt+0x5a>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 80010f2:	f7ff fee9 	bl	8000ec8 <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	6978      	ldr	r0, [r7, #20]
 80010fe:	f003 fd09 	bl	8004b14 <HAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
 8001104:	2b01      	cmp	r3, #1
 8001106:	d000      	beq.n	800110a <acc_hal_integration_wait_for_sensor_interrupt+0x56>
		{
			__WFI();
 8001108:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 800110a:	f7ff fee6 	bl	8000eda <enable_interrupts>
	while ((HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET) &&
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	b29b      	uxth	r3, r3
 8001112:	4619      	mov	r1, r3
 8001114:	6978      	ldr	r0, [r7, #20]
 8001116:	f003 fcfd 	bl	8004b14 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b01      	cmp	r3, #1
 800111e:	d007      	beq.n	8001130 <acc_hal_integration_wait_for_sensor_interrupt+0x7c>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8001120:	f003 f9ca 	bl	80044b8 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET) &&
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8e0      	bhi.n	80010f2 <acc_hal_integration_wait_for_sensor_interrupt+0x3e>
	}

	status = HAL_GPIO_ReadPin(int_port, int_pin_mask) == GPIO_PIN_SET;
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	b29b      	uxth	r3, r3
 8001134:	4619      	mov	r1, r3
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f003 fcec 	bl	8004b14 <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	bf0c      	ite	eq
 8001142:	2301      	moveq	r3, #1
 8001144:	2300      	movne	r3, #0
 8001146:	77fb      	strb	r3, [r7, #31]

	return status;
 8001148:	7ffb      	ldrb	r3, [r7, #31]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	08014398 	.word	0x08014398

08001158 <acc_hal_rss_integration_get_implementation>:
	return SENSOR_COUNT;
}


const acc_hal_a121_t *acc_hal_rss_integration_get_implementation(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
		.log      = acc_integration_log,

		.optimization.transfer16 = NULL,
	};

	return &val;
 800115c:	4b02      	ldr	r3, [pc, #8]	@ (8001168 <acc_hal_rss_integration_get_implementation+0x10>)
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	080143e8 	.word	0x080143e8

0800116c <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 800116c:	b40c      	push	{r2, r3}
 800116e:	b580      	push	{r7, lr}
 8001170:	b0b4      	sub	sp, #208	@ 0xd0
 8001172:	af04      	add	r7, sp, #16
 8001174:	4603      	mov	r3, r0
 8001176:	6039      	str	r1, [r7, #0]
 8001178:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 800117a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800117e:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8001180:	f107 000c 	add.w	r0, r7, #12
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800118a:	2196      	movs	r1, #150	@ 0x96
 800118c:	f010 fdf0 	bl	8011d70 <vsniprintf>
 8001190:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 8001194:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001198:	2b95      	cmp	r3, #149	@ 0x95
 800119a:	dd0b      	ble.n	80011b4 <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 800119c:	232e      	movs	r3, #46	@ 0x2e
 800119e:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 80011a2:	232e      	movs	r3, #46	@ 0x2e
 80011a4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 80011a8:	232e      	movs	r3, #46	@ 0x2e
 80011aa:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 80011b4:	f000 f882 	bl	80012bc <acc_integration_get_time>
 80011b8:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 80011bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 80011c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80011c8:	4a2c      	ldr	r2, [pc, #176]	@ (800127c <acc_integration_log+0x110>)
 80011ca:	fba2 2303 	umull	r2, r3, r2, r3
 80011ce:	0d5b      	lsrs	r3, r3, #21
 80011d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 80011d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80011d8:	4a29      	ldr	r2, [pc, #164]	@ (8001280 <acc_integration_log+0x114>)
 80011da:	fba2 2303 	umull	r2, r3, r2, r3
 80011de:	0b9a      	lsrs	r2, r3, #14
 80011e0:	4b28      	ldr	r3, [pc, #160]	@ (8001284 <acc_integration_log+0x118>)
 80011e2:	fba3 1302 	umull	r1, r3, r3, r2
 80011e6:	0959      	lsrs	r1, r3, #5
 80011e8:	460b      	mov	r3, r1
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	1a5b      	subs	r3, r3, r1
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 80011f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80011fa:	4a23      	ldr	r2, [pc, #140]	@ (8001288 <acc_integration_log+0x11c>)
 80011fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001200:	099a      	lsrs	r2, r3, #6
 8001202:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <acc_integration_log+0x118>)
 8001204:	fba3 1302 	umull	r1, r3, r3, r2
 8001208:	0959      	lsrs	r1, r3, #5
 800120a:	460b      	mov	r3, r1
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	1a5b      	subs	r3, r3, r1
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	unsigned int milliseconds = timestamp % 1000;
 8001218:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800121c:	4a1a      	ldr	r2, [pc, #104]	@ (8001288 <acc_integration_log+0x11c>)
 800121e:	fba2 1203 	umull	r1, r2, r2, r3
 8001222:	0992      	lsrs	r2, r2, #6
 8001224:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001228:	fb01 f202 	mul.w	r2, r1, r2
 800122c:	1a9b      	subs	r3, r3, r2
 800122e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b04      	cmp	r3, #4
 8001236:	d803      	bhi.n	8001240 <acc_integration_log+0xd4>
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	4a14      	ldr	r2, [pc, #80]	@ (800128c <acc_integration_log+0x120>)
 800123c:	5cd3      	ldrb	r3, [r2, r3]
 800123e:	e000      	b.n	8001242 <acc_integration_log+0xd6>
 8001240:	233f      	movs	r3, #63	@ 0x3f
 8001242:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 8001246:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800124a:	f107 020c 	add.w	r2, r7, #12
 800124e:	9203      	str	r2, [sp, #12]
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	9202      	str	r2, [sp, #8]
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001260:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001264:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8001268:	4809      	ldr	r0, [pc, #36]	@ (8001290 <acc_integration_log+0x124>)
 800126a:	f010 fc57 	bl	8011b1c <iprintf>

	va_end(ap);
}
 800126e:	bf00      	nop
 8001270:	37c0      	adds	r7, #192	@ 0xc0
 8001272:	46bd      	mov	sp, r7
 8001274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001278:	b002      	add	sp, #8
 800127a:	4770      	bx	lr
 800127c:	95217cb1 	.word	0x95217cb1
 8001280:	45e7b273 	.word	0x45e7b273
 8001284:	88888889 	.word	0x88888889
 8001288:	10624dd3 	.word	0x10624dd3
 800128c:	0801400c 	.word	0x0801400c
 8001290:	08013fe8 	.word	0x08013fe8

08001294 <acc_integration_sleep_us>:
	HAL_Delay(time_msec);
}


void acc_integration_sleep_us(uint32_t time_usec)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	uint32_t time_msec = (time_usec / 1000);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a06      	ldr	r2, [pc, #24]	@ (80012b8 <acc_integration_sleep_us+0x24>)
 80012a0:	fba2 2303 	umull	r2, r3, r2, r3
 80012a4:	099b      	lsrs	r3, r3, #6
 80012a6:	60fb      	str	r3, [r7, #12]

	HAL_Delay(time_msec);
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 fa34 	bl	8001716 <HAL_Delay>
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	10624dd3 	.word	0x10624dd3

080012bc <acc_integration_get_time>:


uint32_t acc_integration_get_time(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80012c0:	f003 f8fa 	bl	80044b8 <HAL_GetTick>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	bd80      	pop	{r7, pc}

080012ca <acc_integration_mem_alloc>:


void *acc_integration_mem_alloc(size_t size)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
	return malloc(size);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f010 fa6c 	bl	80117b0 <malloc>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <acc_integration_mem_free>:
	return calloc(nmemb, size);
}


void acc_integration_mem_free(void *ptr)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
	free(ptr);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f010 fa68 	bl	80117c0 <free>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80012fe:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <APPD_EnableCPU2+0x34>)
 8001300:	1d3c      	adds	r4, r7, #4
 8001302:	461d      	mov	r5, r3
 8001304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001308:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800130c:	c403      	stmia	r4!, {r0, r1}
 800130e:	8022      	strh	r2, [r4, #0]
 8001310:	3402      	adds	r4, #2
 8001312:	0c13      	lsrs	r3, r2, #16
 8001314:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001316:	f008 fef7 	bl	800a108 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4618      	mov	r0, r3
 800131e:	f008 f988 	bl	8009632 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001322:	bf00      	nop
}
 8001324:	3720      	adds	r7, #32
 8001326:	46bd      	mov	sp, r7
 8001328:	bdb0      	pop	{r4, r5, r7, pc}
 800132a:	bf00      	nop
 800132c:	08014014 	.word	0x08014014

08001330 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001338:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <LL_C2_PWR_SetPowerMode+0x28>)
 800133a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800133e:	f023 0207 	bic.w	r2, r3, #7
 8001342:	4905      	ldr	r1, [pc, #20]	@ (8001358 <LL_C2_PWR_SetPowerMode+0x28>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4313      	orrs	r3, r2
 8001348:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	58000400 	.word	0x58000400

0800135c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <LL_EXTI_EnableIT_32_63+0x24>)
 8001366:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800136a:	4905      	ldr	r1, [pc, #20]	@ (8001380 <LL_EXTI_EnableIT_32_63+0x24>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4313      	orrs	r3, r2
 8001370:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	58000800 	.word	0x58000800

08001384 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800138c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001390:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001392:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001396:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800139a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800139e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013aa:	4313      	orrs	r3, r2
 80013ac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	cafecafe 	.word	0xcafecafe

080013c0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80013d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4313      	orrs	r3, r2
 80013da:	608b      	str	r3, [r1, #8]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80013ec:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <LL_DBGMCU_GetDeviceID+0x18>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e0042000 	.word	0xe0042000

08001404 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001408:	4b04      	ldr	r3, [pc, #16]	@ (800141c <LL_DBGMCU_GetRevisionID+0x18>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	0c1b      	lsrs	r3, r3, #16
 800140e:	b29b      	uxth	r3, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e0042000 	.word	0xe0042000

08001420 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <LL_LPM_EnableSleep+0x1c>)
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	4a04      	ldr	r2, [pc, #16]	@ (800143c <LL_LPM_EnableSleep+0x1c>)
 800142a:	f023 0304 	bic.w	r3, r3, #4
 800142e:	6113      	str	r3, [r2, #16]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	22ff      	movs	r2, #255	@ 0xff
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	22ca      	movs	r2, #202	@ 0xca
 8001466:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2253      	movs	r2, #83	@ 0x53
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f023 0207 	bic.w	r2, r3, #7
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	609a      	str	r2, [r3, #8]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80014a4:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <MX_APPE_Config+0x18>)
 80014a6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014aa:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80014ac:	f000 f824 	bl	80014f8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80014b0:	f000 f829 	bl	8001506 <Config_HSE>

  return;
 80014b4:	bf00      	nop
}
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	58004000 	.word	0x58004000

080014bc <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80014c0:	f000 f835 	bl	800152e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80014c4:	f000 f84e 	bl	8001564 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80014c8:	4903      	ldr	r1, [pc, #12]	@ (80014d8 <MX_APPE_Init+0x1c>)
 80014ca:	2000      	movs	r0, #0
 80014cc:	f002 f8a6 	bl	800361c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80014d0:	f000 f856 	bl	8001580 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80014d4:	bf00      	nop
}
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200003b0 	.word	0x200003b0

080014dc <Init_Smps>:

void Init_Smps(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80014e0:	bf00      	nop
}
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <Init_Exti>:

void Init_Exti(void)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80014ee:	2050      	movs	r0, #80	@ 0x50
 80014f0:	f7ff ff34 	bl	800135c <LL_EXTI_EnableIT_32_63>

  return;
 80014f4:	bf00      	nop
}
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80014fc:	bf00      	nop
}
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800150c:	2000      	movs	r0, #0
 800150e:	f008 fe87 	bl	800a220 <OTP_Read>
 8001512:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	799b      	ldrb	r3, [r3, #6]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ff30 	bl	8001384 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001524:	bf00      	nop
 8001526:	bf00      	nop
}
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <System_Init>:

static void System_Init(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	af00      	add	r7, sp, #0
  Init_Smps();
 8001532:	f7ff ffd3 	bl	80014dc <Init_Smps>

  Init_Exti();
 8001536:	f7ff ffd8 	bl	80014ea <Init_Exti>

  Init_Rtc();
 800153a:	f000 f803 	bl	8001544 <Init_Rtc>

  return;
 800153e:	bf00      	nop
}
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001548:	4805      	ldr	r0, [pc, #20]	@ (8001560 <Init_Rtc+0x1c>)
 800154a:	f7ff ff86 	bl	800145a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800154e:	2100      	movs	r1, #0
 8001550:	4803      	ldr	r0, [pc, #12]	@ (8001560 <Init_Rtc+0x1c>)
 8001552:	f7ff ff92 	bl	800147a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001556:	4802      	ldr	r0, [pc, #8]	@ (8001560 <Init_Rtc+0x1c>)
 8001558:	f7ff ff72 	bl	8001440 <LL_RTC_EnableWriteProtection>

  return;
 800155c:	bf00      	nop
}
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40002800 	.word	0x40002800

08001564 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001568:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800156c:	f7ff ff28 	bl	80013c0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001570:	f009 fe4a 	bl	800b208 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001574:	2004      	movs	r0, #4
 8001576:	f7ff fedb 	bl	8001330 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800157a:	bf00      	nop
}
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001586:	f008 fc09 	bl	8009d9c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800158a:	4a11      	ldr	r2, [pc, #68]	@ (80015d0 <appe_Tl_Init+0x50>)
 800158c:	2100      	movs	r1, #0
 800158e:	2008      	movs	r0, #8
 8001590:	f009 ff78 	bl	800b484 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <appe_Tl_Init+0x54>)
 8001596:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <appe_Tl_Init+0x58>)
 800159a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800159c:	463b      	mov	r3, r7
 800159e:	4619      	mov	r1, r3
 80015a0:	480e      	ldr	r0, [pc, #56]	@ (80015dc <appe_Tl_Init+0x5c>)
 80015a2:	f008 fabd 	bl	8009b20 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <appe_Tl_Init+0x60>)
 80015a8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <appe_Tl_Init+0x64>)
 80015ac:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <appe_Tl_Init+0x68>)
 80015b0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80015b2:	f240 533c 	movw	r3, #1340	@ 0x53c
 80015b6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	4618      	mov	r0, r3
 80015be:	f008 fd2f 	bl	800a020 <TL_MM_Init>

  TL_Enable();
 80015c2:	f008 fbe5 	bl	8009d90 <TL_Enable>

  return;
 80015c6:	bf00      	nop
}
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	08009b59 	.word	0x08009b59
 80015d4:	20030734 	.word	0x20030734
 80015d8:	080015ed 	.word	0x080015ed
 80015dc:	08001605 	.word	0x08001605
 80015e0:	2003094c 	.word	0x2003094c
 80015e4:	20030840 	.word	0x20030840
 80015e8:	200301f8 	.word	0x200301f8

080015ec <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80015f6:	bf00      	nop
}
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	330b      	adds	r3, #11
 8001612:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	b29b      	uxth	r3, r3
 800161a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800161e:	2b07      	cmp	r3, #7
 8001620:	d81f      	bhi.n	8001662 <APPE_SysUserEvtRx+0x5e>
 8001622:	a201      	add	r2, pc, #4	@ (adr r2, 8001628 <APPE_SysUserEvtRx+0x24>)
 8001624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001628:	08001649 	.word	0x08001649
 800162c:	0800165b 	.word	0x0800165b
 8001630:	08001663 	.word	0x08001663
 8001634:	08001663 	.word	0x08001663
 8001638:	08001663 	.word	0x08001663
 800163c:	08001663 	.word	0x08001663
 8001640:	08001663 	.word	0x08001663
 8001644:	08001663 	.word	0x08001663
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	4618      	mov	r0, r3
 800164e:	f008 f81d 	bl	800968c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f81b 	bl	800168e <APPE_SysEvtReadyProcessing>
    break;
 8001658:	e004      	b.n	8001664 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f806 	bl	800166c <APPE_SysEvtError>
    break;
 8001660:	e000      	b.n	8001664 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8001662:	bf00      	nop
  }

  return;
 8001664:	bf00      	nop
}
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	330b      	adds	r3, #11
 800167a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3302      	adds	r3, #2
 8001680:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001682:	bf00      	nop
}
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b08a      	sub	sp, #40	@ 0x28
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	330b      	adds	r3, #11
 80016b2:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	3302      	adds	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d11d      	bne.n	80016fe <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80016c2:	f7ff fe19 	bl	80012f8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80016c6:	230f      	movs	r3, #15
 80016c8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80016ca:	237f      	movs	r3, #127	@ 0x7f
 80016cc:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80016ce:	f7ff fe99 	bl	8001404 <LL_DBGMCU_GetRevisionID>
 80016d2:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80016d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80016da:	f7ff fe85 	bl	80013e8 <LL_DBGMCU_GetDeviceID>
 80016de:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	4618      	mov	r0, r3
 80016ec:	f007 ffb8 	bl	8009660 <SHCI_C2_Config>

    APP_BLE_Init();
 80016f0:	f008 fea0 	bl	800a434 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80016f4:	2100      	movs	r1, #0
 80016f6:	2001      	movs	r0, #1
 80016f8:	f009 fd98 	bl	800b22c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80016fc:	e007      	b.n	800170e <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d103      	bne.n	800170e <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
  return;
 800170c:	bf00      	nop
 800170e:	bf00      	nop
}
 8001710:	3728      	adds	r7, #40	@ 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800171e:	f002 fecb 	bl	80044b8 <HAL_GetTick>
 8001722:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172e:	d00a      	beq.n	8001746 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001730:	f002 feda 	bl	80044e8 <HAL_GetTickFreq>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173e:	e002      	b.n	8001746 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001740:	f7ff fe6e 	bl	8001420 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8001744:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001746:	f002 feb7 	bl	80044b8 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	429a      	cmp	r2, r3
 8001754:	d8f4      	bhi.n	8001740 <HAL_Delay+0x2a>
  }
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f009 fd90 	bl	800b28c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001774:	bf00      	nop
}
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f009 fd7e 	bl	800b28c <UTIL_SEQ_Run>
  return;
 8001790:	bf00      	nop
}
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80017a0:	2100      	movs	r1, #0
 80017a2:	2008      	movs	r0, #8
 80017a4:	f009 fe90 	bl	800b4c8 <UTIL_SEQ_SetTask>
  return;
 80017a8:	bf00      	nop
}
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017b8:	2002      	movs	r0, #2
 80017ba:	f009 fef1 	bl	800b5a0 <UTIL_SEQ_SetEvt>
  return;
 80017be:	bf00      	nop
}
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017ce:	2002      	movs	r0, #2
 80017d0:	f009 ff06 	bl	800b5e0 <UTIL_SEQ_WaitEvt>
  return;
 80017d4:	bf00      	nop
}
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <cJSON_strdup+0x1c>
    {
        return NULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e015      	b.n	8001824 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7fe fcc1 	bl	8000180 <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	3301      	adds	r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	4798      	blx	r3
 800180c:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <cJSON_strdup+0x3c>
    {
        return NULL;
 8001814:	2300      	movs	r3, #0
 8001816:	e005      	b.n	8001824 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	68b8      	ldr	r0, [r7, #8]
 800181e:	f010 fc02 	bl	8012026 <memcpy>

    return copy;
 8001822:	68bb      	ldr	r3, [r7, #8]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2028      	movs	r0, #40	@ 0x28
 800183a:	4798      	blx	r3
 800183c:	60f8      	str	r0, [r7, #12]
    if (node)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d004      	beq.n	800184e <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001844:	2228      	movs	r2, #40	@ 0x28
 8001846:	2100      	movs	r1, #0
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f010 fb4d 	bl	8011ee8 <memset>
    }

    return node;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001864:	e03d      	b.n	80018e2 <cJSON_Delete+0x8a>
    {
        next = item->next;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d108      	bne.n	800188a <cJSON_Delete+0x32>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d004      	beq.n	800188a <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ffe7 	bl	8001858 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10c      	bne.n	80018b0 <cJSON_Delete+0x58>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d008      	beq.n	80018b0 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <cJSON_Delete+0x9c>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6912      	ldr	r2, [r2, #16]
 80018a6:	4610      	mov	r0, r2
 80018a8:	4798      	blx	r3
            item->valuestring = NULL;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10c      	bne.n	80018d6 <cJSON_Delete+0x7e>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d008      	beq.n	80018d6 <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <cJSON_Delete+0x9c>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6a12      	ldr	r2, [r2, #32]
 80018cc:	4610      	mov	r0, r2
 80018ce:	4798      	blx	r3
            item->string = NULL;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 80018d6:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <cJSON_Delete+0x9c>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	4798      	blx	r3
        item = next;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1be      	bne.n	8001866 <cJSON_Delete+0xe>
    }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000008 	.word	0x20000008

080018f8 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80018fc:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <ensure+0x20>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <ensure+0x24>
    {
        return NULL;
 8001928:	2300      	movs	r3, #0
 800192a:	e083      	b.n	8001a34 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d007      	beq.n	8001944 <ensure+0x3c>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	429a      	cmp	r2, r3
 800193e:	d301      	bcc.n	8001944 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8001940:	2300      	movs	r3, #0
 8001942:	e077      	b.n	8001a34 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	da01      	bge.n	800194e <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800194a:	2300      	movs	r3, #0
 800194c:	e072      	b.n	8001a34 <ensure+0x12c>
    }

    needed += p->offset + 1;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	4413      	add	r3, r2
 8001956:	3301      	adds	r3, #1
 8001958:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d805      	bhi.n	8001970 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4413      	add	r3, r2
 800196e:	e061      	b.n	8001a34 <ensure+0x12c>
    }

    if (p->noalloc) {
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <ensure+0x74>
        return NULL;
 8001978:	2300      	movs	r3, #0
 800197a:	e05b      	b.n	8001a34 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001982:	d308      	bcc.n	8001996 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	db03      	blt.n	8001992 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800198a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	e004      	b.n	800199c <ensure+0x94>
        }
        else
        {
            return NULL;
 8001992:	2300      	movs	r3, #0
 8001994:	e04e      	b.n	8001a34 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d018      	beq.n	80019d6 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	4610      	mov	r0, r2
 80019b0:	4798      	blx	r3
 80019b2:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d132      	bne.n	8001a20 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	4610      	mov	r0, r2
 80019c4:	4798      	blx	r3
            p->length = 0;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]

            return NULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e02e      	b.n	8001a34 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	68b8      	ldr	r0, [r7, #8]
 80019dc:	4798      	blx	r3
 80019de:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10d      	bne.n	8001a02 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	4610      	mov	r0, r2
 80019f0:	4798      	blx	r3
            p->length = 0;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]

            return NULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e018      	b.n	8001a34 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6819      	ldr	r1, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f010 fb09 	bl	8012026 <memcpy>
        p->hooks.deallocate(p->buffer);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4798      	blx	r3
    }
    p->length = newsize;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4413      	add	r3, r2
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d013      	beq.n	8001a76 <update_offset+0x3a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00f      	beq.n	8001a76 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	4413      	add	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689c      	ldr	r4, [r3, #8]
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f7fe fb8a 	bl	8000180 <strlen>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	18e2      	adds	r2, r4, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	e000      	b.n	8001a78 <update_offset+0x3c>
        return;
 8001a76:	bf00      	nop
}
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}
	...

08001a80 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8001a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a84:	b087      	sub	sp, #28
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	ed87 0b02 	vstr	d0, [r7, #8]
 8001a8c:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8001a90:	68b8      	ldr	r0, [r7, #8]
 8001a92:	68fe      	ldr	r6, [r7, #12]
 8001a94:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	687e      	ldr	r6, [r7, #4]
 8001a9c:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8001aa0:	f7ff f812 	bl	8000ac8 <__aeabi_dcmpgt>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d004      	beq.n	8001ab4 <compare_double+0x34>
 8001aaa:	68bc      	ldr	r4, [r7, #8]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001ab2:	e003      	b.n	8001abc <compare_double+0x3c>
 8001ab4:	683c      	ldr	r4, [r7, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001abc:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8001ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ac4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ac8:	f7fe fbb6 	bl	8000238 <__aeabi_dsub>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4690      	mov	r8, r2
 8001ad2:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <compare_double+0x8c>)
 8001adc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ae0:	f7fe fd62 	bl	80005a8 <__aeabi_dmul>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	2101      	movs	r1, #1
 8001aea:	460c      	mov	r4, r1
 8001aec:	4640      	mov	r0, r8
 8001aee:	4649      	mov	r1, r9
 8001af0:	f7fe ffd6 	bl	8000aa0 <__aeabi_dcmple>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <compare_double+0x7e>
 8001afa:	2300      	movs	r3, #0
 8001afc:	461c      	mov	r4, r3
 8001afe:	b2e3      	uxtb	r3, r4
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	371c      	adds	r7, #28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b0a:	bf00      	nop
 8001b0c:	3cb00000 	.word	0x3cb00000

08001b10 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b12:	b093      	sub	sp, #76	@ 0x4c
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b24:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
 8001b44:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 8001b46:	f7ff fed7 	bl	80018f8 <get_decimal_point>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <print_number+0x56>
    {
        return false;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e0b4      	b.n	8001cd0 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8001b66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001b6e:	f7fe ffb5 	bl	8000adc <__aeabi_dcmpun>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d121      	bne.n	8001bbc <print_number+0xac>
 8001b78:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8001b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b7c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001b80:	2301      	movs	r3, #1
 8001b82:	461e      	mov	r6, r3
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	4b53      	ldr	r3, [pc, #332]	@ (8001cd8 <print_number+0x1c8>)
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	f7fe ffa5 	bl	8000adc <__aeabi_dcmpun>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10b      	bne.n	8001bb0 <print_number+0xa0>
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	4b4e      	ldr	r3, [pc, #312]	@ (8001cd8 <print_number+0x1c8>)
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	4629      	mov	r1, r5
 8001ba2:	f7fe ff7d 	bl	8000aa0 <__aeabi_dcmple>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <print_number+0xa0>
 8001bac:	2300      	movs	r3, #0
 8001bae:	461e      	mov	r6, r3
 8001bb0:	b2f3      	uxtb	r3, r6
 8001bb2:	f083 0301 	eor.w	r3, r3, #1
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4946      	ldr	r1, [pc, #280]	@ (8001cdc <print_number+0x1cc>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f010 f81a 	bl	8011bfc <siprintf>
 8001bc8:	6478      	str	r0, [r7, #68]	@ 0x44
 8001bca:	e03f      	b.n	8001c4c <print_number+0x13c>
    }
    else if(d == (double)item->valueint)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fc7f 	bl	80004d4 <__aeabi_i2d>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001bde:	f7fe ff4b 	bl	8000a78 <__aeabi_dcmpeq>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d009      	beq.n	8001bfc <print_number+0xec>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	695a      	ldr	r2, [r3, #20]
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	493b      	ldr	r1, [pc, #236]	@ (8001ce0 <print_number+0x1d0>)
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f010 f802 	bl	8011bfc <siprintf>
 8001bf8:	6478      	str	r0, [r7, #68]	@ 0x44
 8001bfa:	e027      	b.n	8001c4c <print_number+0x13c>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8001bfc:	f107 0014 	add.w	r0, r7, #20
 8001c00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c04:	4937      	ldr	r1, [pc, #220]	@ (8001ce4 <print_number+0x1d4>)
 8001c06:	f00f fff9 	bl	8011bfc <siprintf>
 8001c0a:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8001c0c:	f107 0208 	add.w	r2, r7, #8
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4934      	ldr	r1, [pc, #208]	@ (8001ce8 <print_number+0x1d8>)
 8001c16:	4618      	mov	r0, r3
 8001c18:	f010 f810 	bl	8011c3c <siscanf>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d10c      	bne.n	8001c3c <print_number+0x12c>
 8001c22:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c26:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001c2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c2e:	eef0 0a67 	vmov.f32	s1, s15
 8001c32:	f7ff ff25 	bl	8001a80 <compare_double>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d107      	bne.n	8001c4c <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8001c3c:	f107 0014 	add.w	r0, r7, #20
 8001c40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c44:	4929      	ldr	r1, [pc, #164]	@ (8001cec <print_number+0x1dc>)
 8001c46:	f00f ffd9 	bl	8011bfc <siprintf>
 8001c4a:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8001c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	db02      	blt.n	8001c58 <print_number+0x148>
 8001c52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c54:	2b19      	cmp	r3, #25
 8001c56:	dd01      	ble.n	8001c5c <print_number+0x14c>
    {
        return false;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	e039      	b.n	8001cd0 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c5e:	3301      	adds	r3, #1
 8001c60:	4619      	mov	r1, r3
 8001c62:	6838      	ldr	r0, [r7, #0]
 8001c64:	f7ff fe50 	bl	8001908 <ensure>
 8001c68:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 8001c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <print_number+0x164>
    {
        return false;
 8001c70:	2300      	movs	r3, #0
 8001c72:	e02d      	b.n	8001cd0 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c78:	e01a      	b.n	8001cb0 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 8001c7a:	f107 0214 	add.w	r2, r7, #20
 8001c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c80:	4413      	add	r3, r2
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d105      	bne.n	8001c98 <print_number+0x188>
        {
            output_pointer[i] = '.';
 8001c8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c90:	4413      	add	r3, r2
 8001c92:	222e      	movs	r2, #46	@ 0x2e
 8001c94:	701a      	strb	r2, [r3, #0]
            continue;
 8001c96:	e008      	b.n	8001caa <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 8001c98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f107 0114 	add.w	r1, r7, #20
 8001ca2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001ca4:	440a      	add	r2, r1
 8001ca6:	7812      	ldrb	r2, [r2, #0]
 8001ca8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8001caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cac:	3301      	adds	r3, #1
 8001cae:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d3e0      	bcc.n	8001c7a <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 8001cb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001cba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cbc:	4413      	add	r3, r2
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cc8:	441a      	add	r2, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	609a      	str	r2, [r3, #8]

    return true;
 8001cce:	2301      	movs	r3, #1
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	374c      	adds	r7, #76	@ 0x4c
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd8:	7fefffff 	.word	0x7fefffff
 8001cdc:	0801403c 	.word	0x0801403c
 8001ce0:	08014044 	.word	0x08014044
 8001ce4:	08014048 	.word	0x08014048
 8001ce8:	08014050 	.word	0x08014050
 8001cec:	08014054 	.word	0x08014054

08001cf0 <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <print_string_ptr+0x28>
    {
        return false;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e110      	b.n	8001f3a <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d111      	bne.n	8001d42 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8001d1e:	2103      	movs	r1, #3
 8001d20:	6838      	ldr	r0, [r7, #0]
 8001d22:	f7ff fdf1 	bl	8001908 <ensure>
 8001d26:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <print_string_ptr+0x42>
        {
            return false;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e103      	b.n	8001f3a <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4a83      	ldr	r2, [pc, #524]	@ (8001f44 <print_string_ptr+0x254>)
 8001d36:	8811      	ldrh	r1, [r2, #0]
 8001d38:	7892      	ldrb	r2, [r2, #2]
 8001d3a:	8019      	strh	r1, [r3, #0]
 8001d3c:	709a      	strb	r2, [r3, #2]

        return true;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0fb      	b.n	8001f3a <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	e024      	b.n	8001d92 <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b22      	cmp	r3, #34	@ 0x22
 8001d4e:	dc0f      	bgt.n	8001d70 <print_string_ptr+0x80>
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	db13      	blt.n	8001d7c <print_string_ptr+0x8c>
 8001d54:	3b08      	subs	r3, #8
 8001d56:	4a7c      	ldr	r2, [pc, #496]	@ (8001f48 <print_string_ptr+0x258>)
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf14      	ite	ne
 8001d64:	2301      	movne	r3, #1
 8001d66:	2300      	moveq	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d102      	bne.n	8001d74 <print_string_ptr+0x84>
 8001d6e:	e005      	b.n	8001d7c <print_string_ptr+0x8c>
 8001d70:	2b5c      	cmp	r3, #92	@ 0x5c
 8001d72:	d103      	bne.n	8001d7c <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	3301      	adds	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
                break;
 8001d7a:	e007      	b.n	8001d8c <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b1f      	cmp	r3, #31
 8001d82:	d802      	bhi.n	8001d8a <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3305      	adds	r3, #5
 8001d88:	617b      	str	r3, [r7, #20]
                }
                break;
 8001d8a:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1d6      	bne.n	8001d48 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	4413      	add	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3303      	adds	r3, #3
 8001dac:	4619      	mov	r1, r3
 8001dae:	6838      	ldr	r0, [r7, #0]
 8001db0:	f7ff fdaa 	bl	8001908 <ensure>
 8001db4:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <print_string_ptr+0xd0>
    {
        return false;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e0bc      	b.n	8001f3a <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d117      	bne.n	8001df6 <print_string_ptr+0x106>
    {
        output[0] = '\"';
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	2222      	movs	r2, #34	@ 0x22
 8001dca:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f010 f926 	bl	8012026 <memcpy>
        output[output_length + 1] = '\"';
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4413      	add	r3, r2
 8001de2:	2222      	movs	r2, #34	@ 0x22
 8001de4:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3302      	adds	r3, #2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]

        return true;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0a1      	b.n	8001f3a <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2222      	movs	r2, #34	@ 0x22
 8001dfa:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	e086      	b.n	8001f16 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b1f      	cmp	r3, #31
 8001e0e:	d90c      	bls.n	8001e2a <print_string_ptr+0x13a>
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b22      	cmp	r3, #34	@ 0x22
 8001e16:	d008      	beq.n	8001e2a <print_string_ptr+0x13a>
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b5c      	cmp	r3, #92	@ 0x5c
 8001e1e:	d004      	beq.n	8001e2a <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	781a      	ldrb	r2, [r3, #0]
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e06f      	b.n	8001f0a <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	61ba      	str	r2, [r7, #24]
 8001e30:	225c      	movs	r2, #92	@ 0x5c
 8001e32:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b22      	cmp	r3, #34	@ 0x22
 8001e3a:	dc3d      	bgt.n	8001eb8 <print_string_ptr+0x1c8>
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	db59      	blt.n	8001ef4 <print_string_ptr+0x204>
 8001e40:	3b08      	subs	r3, #8
 8001e42:	2b1a      	cmp	r3, #26
 8001e44:	d856      	bhi.n	8001ef4 <print_string_ptr+0x204>
 8001e46:	a201      	add	r2, pc, #4	@ (adr r2, 8001e4c <print_string_ptr+0x15c>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001ecd 	.word	0x08001ecd
 8001e50:	08001eed 	.word	0x08001eed
 8001e54:	08001edd 	.word	0x08001edd
 8001e58:	08001ef5 	.word	0x08001ef5
 8001e5c:	08001ed5 	.word	0x08001ed5
 8001e60:	08001ee5 	.word	0x08001ee5
 8001e64:	08001ef5 	.word	0x08001ef5
 8001e68:	08001ef5 	.word	0x08001ef5
 8001e6c:	08001ef5 	.word	0x08001ef5
 8001e70:	08001ef5 	.word	0x08001ef5
 8001e74:	08001ef5 	.word	0x08001ef5
 8001e78:	08001ef5 	.word	0x08001ef5
 8001e7c:	08001ef5 	.word	0x08001ef5
 8001e80:	08001ef5 	.word	0x08001ef5
 8001e84:	08001ef5 	.word	0x08001ef5
 8001e88:	08001ef5 	.word	0x08001ef5
 8001e8c:	08001ef5 	.word	0x08001ef5
 8001e90:	08001ef5 	.word	0x08001ef5
 8001e94:	08001ef5 	.word	0x08001ef5
 8001e98:	08001ef5 	.word	0x08001ef5
 8001e9c:	08001ef5 	.word	0x08001ef5
 8001ea0:	08001ef5 	.word	0x08001ef5
 8001ea4:	08001ef5 	.word	0x08001ef5
 8001ea8:	08001ef5 	.word	0x08001ef5
 8001eac:	08001ef5 	.word	0x08001ef5
 8001eb0:	08001ef5 	.word	0x08001ef5
 8001eb4:	08001ec5 	.word	0x08001ec5
 8001eb8:	2b5c      	cmp	r3, #92	@ 0x5c
 8001eba:	d11b      	bne.n	8001ef4 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	225c      	movs	r2, #92	@ 0x5c
 8001ec0:	701a      	strb	r2, [r3, #0]
                    break;
 8001ec2:	e022      	b.n	8001f0a <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2222      	movs	r2, #34	@ 0x22
 8001ec8:	701a      	strb	r2, [r3, #0]
                    break;
 8001eca:	e01e      	b.n	8001f0a <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2262      	movs	r2, #98	@ 0x62
 8001ed0:	701a      	strb	r2, [r3, #0]
                    break;
 8001ed2:	e01a      	b.n	8001f0a <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2266      	movs	r2, #102	@ 0x66
 8001ed8:	701a      	strb	r2, [r3, #0]
                    break;
 8001eda:	e016      	b.n	8001f0a <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	226e      	movs	r2, #110	@ 0x6e
 8001ee0:	701a      	strb	r2, [r3, #0]
                    break;
 8001ee2:	e012      	b.n	8001f0a <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2272      	movs	r2, #114	@ 0x72
 8001ee8:	701a      	strb	r2, [r3, #0]
                    break;
 8001eea:	e00e      	b.n	8001f0a <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2274      	movs	r2, #116	@ 0x74
 8001ef0:	701a      	strb	r2, [r3, #0]
                    break;
 8001ef2:	e00a      	b.n	8001f0a <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4914      	ldr	r1, [pc, #80]	@ (8001f4c <print_string_ptr+0x25c>)
 8001efc:	69b8      	ldr	r0, [r7, #24]
 8001efe:	f00f fe7d 	bl	8011bfc <siprintf>
                    output_pointer += 4;
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	3304      	adds	r3, #4
 8001f06:	61bb      	str	r3, [r7, #24]
                    break;
 8001f08:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	3301      	adds	r3, #1
 8001f14:	61bb      	str	r3, [r7, #24]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f47f af74 	bne.w	8001e08 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3301      	adds	r3, #1
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	2222      	movs	r2, #34	@ 0x22
 8001f2a:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3302      	adds	r3, #2
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]

    return true;
 8001f38:	2301      	movs	r3, #1
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	0801405c 	.word	0x0801405c
 8001f48:	04000037 	.word	0x04000037
 8001f4c:	08014060 	.word	0x08014060

08001f50 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	6839      	ldr	r1, [r7, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fec5 	bl	8001cf0 <print_string_ptr>
 8001f66:	4603      	mov	r3, r0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08e      	sub	sp, #56	@ 0x38
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	2224      	movs	r2, #36	@ 0x24
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f00f ffad 	bl	8011ee8 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a3b      	ldr	r2, [pc, #236]	@ (8002080 <print+0x110>)
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	4610      	mov	r0, r2
 8001f98:	4798      	blx	r3
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8001f9e:	4b38      	ldr	r3, [pc, #224]	@ (8002080 <print+0x110>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fae:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d042      	beq.n	8002040 <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8001fba:	f107 0310 	add.w	r3, r7, #16
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 f86f 	bl	80020a4 <print_value>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d03b      	beq.n	8002044 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fd33 	bl	8001a3c <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00d      	beq.n	8001ffa <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	6938      	ldr	r0, [r7, #16]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	3201      	adds	r2, #1
 8001fe8:	4611      	mov	r1, r2
 8001fea:	4798      	blx	r3
 8001fec:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 8001fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d029      	beq.n	8002048 <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	e020      	b.n	800203c <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	3201      	adds	r2, #1
 8002002:	4610      	mov	r0, r2
 8002004:	4798      	blx	r3
 8002006:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 8002008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800200a:	2b00      	cmp	r3, #0
 800200c:	d01e      	beq.n	800204c <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800200e:	6939      	ldr	r1, [r7, #16]
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	4293      	cmp	r3, r2
 8002018:	bf28      	it	cs
 800201a:	4613      	movcs	r3, r2
 800201c:	461a      	mov	r2, r3
 800201e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002020:	f010 f801 	bl	8012026 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002028:	4413      	add	r3, r2
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4610      	mov	r0, r2
 8002036:	4798      	blx	r3
        buffer->buffer = NULL;
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
    }

    return printed;
 800203c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800203e:	e01a      	b.n	8002076 <print+0x106>
        goto fail;
 8002040:	bf00      	nop
 8002042:	e004      	b.n	800204e <print+0xde>
        goto fail;
 8002044:	bf00      	nop
 8002046:	e002      	b.n	800204e <print+0xde>
            goto fail;
 8002048:	bf00      	nop
 800204a:	e000      	b.n	800204e <print+0xde>
            goto fail;
 800204c:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4610      	mov	r0, r2
 800205c:	4798      	blx	r3
        buffer->buffer = NULL;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 8002062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <print+0x104>
    {
        hooks->deallocate(printed);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800206e:	4798      	blx	r3
        printed = NULL;
 8002070:	2300      	movs	r3, #0
 8002072:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3738      	adds	r7, #56	@ 0x38
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	08014530 	.word	0x08014530

08002084 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 800208c:	4a04      	ldr	r2, [pc, #16]	@ (80020a0 <cJSON_PrintUnformatted+0x1c>)
 800208e:	2100      	movs	r1, #0
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ff6d 	bl	8001f70 <print>
 8002096:	4603      	mov	r3, r0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000008 	.word	0x20000008

080020a4 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <print_value+0x1a>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <print_value+0x1e>
    {
        return false;
 80020be:	2300      	movs	r3, #0
 80020c0:	e0c9      	b.n	8002256 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b80      	cmp	r3, #128	@ 0x80
 80020ca:	f000 808e 	beq.w	80021ea <print_value+0x146>
 80020ce:	2b80      	cmp	r3, #128	@ 0x80
 80020d0:	f300 80c0 	bgt.w	8002254 <print_value+0x1b0>
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	dc49      	bgt.n	800216c <print_value+0xc8>
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f340 80bb 	ble.w	8002254 <print_value+0x1b0>
 80020de:	3b01      	subs	r3, #1
 80020e0:	2b1f      	cmp	r3, #31
 80020e2:	f200 80b7 	bhi.w	8002254 <print_value+0x1b0>
 80020e6:	a201      	add	r2, pc, #4	@ (adr r2, 80020ec <print_value+0x48>)
 80020e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ec:	08002197 	.word	0x08002197
 80020f0:	080021bb 	.word	0x080021bb
 80020f4:	08002255 	.word	0x08002255
 80020f8:	08002173 	.word	0x08002173
 80020fc:	08002255 	.word	0x08002255
 8002100:	08002255 	.word	0x08002255
 8002104:	08002255 	.word	0x08002255
 8002108:	080021df 	.word	0x080021df
 800210c:	08002255 	.word	0x08002255
 8002110:	08002255 	.word	0x08002255
 8002114:	08002255 	.word	0x08002255
 8002118:	08002255 	.word	0x08002255
 800211c:	08002255 	.word	0x08002255
 8002120:	08002255 	.word	0x08002255
 8002124:	08002255 	.word	0x08002255
 8002128:	08002231 	.word	0x08002231
 800212c:	08002255 	.word	0x08002255
 8002130:	08002255 	.word	0x08002255
 8002134:	08002255 	.word	0x08002255
 8002138:	08002255 	.word	0x08002255
 800213c:	08002255 	.word	0x08002255
 8002140:	08002255 	.word	0x08002255
 8002144:	08002255 	.word	0x08002255
 8002148:	08002255 	.word	0x08002255
 800214c:	08002255 	.word	0x08002255
 8002150:	08002255 	.word	0x08002255
 8002154:	08002255 	.word	0x08002255
 8002158:	08002255 	.word	0x08002255
 800215c:	08002255 	.word	0x08002255
 8002160:	08002255 	.word	0x08002255
 8002164:	08002255 	.word	0x08002255
 8002168:	0800223d 	.word	0x0800223d
 800216c:	2b40      	cmp	r3, #64	@ 0x40
 800216e:	d06b      	beq.n	8002248 <print_value+0x1a4>
 8002170:	e070      	b.n	8002254 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8002172:	2105      	movs	r1, #5
 8002174:	6838      	ldr	r0, [r7, #0]
 8002176:	f7ff fbc7 	bl	8001908 <ensure>
 800217a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <print_value+0xe2>
            {
                return false;
 8002182:	2300      	movs	r3, #0
 8002184:	e067      	b.n	8002256 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4a35      	ldr	r2, [pc, #212]	@ (8002260 <print_value+0x1bc>)
 800218a:	6810      	ldr	r0, [r2, #0]
 800218c:	6018      	str	r0, [r3, #0]
 800218e:	7912      	ldrb	r2, [r2, #4]
 8002190:	711a      	strb	r2, [r3, #4]
            return true;
 8002192:	2301      	movs	r3, #1
 8002194:	e05f      	b.n	8002256 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8002196:	2106      	movs	r1, #6
 8002198:	6838      	ldr	r0, [r7, #0]
 800219a:	f7ff fbb5 	bl	8001908 <ensure>
 800219e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <print_value+0x106>
            {
                return false;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e055      	b.n	8002256 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002264 <print_value+0x1c0>)
 80021ae:	6810      	ldr	r0, [r2, #0]
 80021b0:	6018      	str	r0, [r3, #0]
 80021b2:	8892      	ldrh	r2, [r2, #4]
 80021b4:	809a      	strh	r2, [r3, #4]
            return true;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e04d      	b.n	8002256 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 80021ba:	2105      	movs	r1, #5
 80021bc:	6838      	ldr	r0, [r7, #0]
 80021be:	f7ff fba3 	bl	8001908 <ensure>
 80021c2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <print_value+0x12a>
            {
                return false;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e043      	b.n	8002256 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4a25      	ldr	r2, [pc, #148]	@ (8002268 <print_value+0x1c4>)
 80021d2:	6810      	ldr	r0, [r2, #0]
 80021d4:	6018      	str	r0, [r3, #0]
 80021d6:	7912      	ldrb	r2, [r2, #4]
 80021d8:	711a      	strb	r2, [r3, #4]
            return true;
 80021da:	2301      	movs	r3, #1
 80021dc:	e03b      	b.n	8002256 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 80021de:	6839      	ldr	r1, [r7, #0]
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff fc95 	bl	8001b10 <print_number>
 80021e6:	4603      	mov	r3, r0
 80021e8:	e035      	b.n	8002256 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <print_value+0x156>
            {
                return false;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e02d      	b.n	8002256 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fd ffbe 	bl	8000180 <strlen>
 8002204:	4603      	mov	r3, r0
 8002206:	3301      	adds	r3, #1
 8002208:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	6838      	ldr	r0, [r7, #0]
 800220e:	f7ff fb7b 	bl	8001908 <ensure>
 8002212:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <print_value+0x17a>
            {
                return false;
 800221a:	2300      	movs	r3, #0
 800221c:	e01b      	b.n	8002256 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	4619      	mov	r1, r3
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f00f fefd 	bl	8012026 <memcpy>
            return true;
 800222c:	2301      	movs	r3, #1
 800222e:	e012      	b.n	8002256 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8002230:	6839      	ldr	r1, [r7, #0]
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff fe8c 	bl	8001f50 <print_string>
 8002238:	4603      	mov	r3, r0
 800223a:	e00c      	b.n	8002256 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 800223c:	6839      	ldr	r1, [r7, #0]
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f814 	bl	800226c <print_array>
 8002244:	4603      	mov	r3, r0
 8002246:	e006      	b.n	8002256 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8002248:	6839      	ldr	r1, [r7, #0]
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f894 	bl	8002378 <print_object>
 8002250:	4603      	mov	r3, r0
 8002252:	e000      	b.n	8002256 <print_value+0x1b2>

        default:
            return false;
 8002254:	2300      	movs	r3, #0
    }
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	0801403c 	.word	0x0801403c
 8002264:	0801406c 	.word	0x0801406c
 8002268:	08014074 	.word	0x08014074

0800226c <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <print_array+0x22>
    {
        return false;
 800228a:	2300      	movs	r3, #0
 800228c:	e070      	b.n	8002370 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800228e:	2101      	movs	r1, #1
 8002290:	6838      	ldr	r0, [r7, #0]
 8002292:	f7ff fb39 	bl	8001908 <ensure>
 8002296:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <print_array+0x36>
    {
        return false;
 800229e:	2300      	movs	r3, #0
 80022a0:	e066      	b.n	8002370 <print_array+0x104>
    }

    *output_pointer = '[';
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	225b      	movs	r2, #91	@ 0x5b
 80022a6:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 80022bc:	e03d      	b.n	800233a <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 80022be:	6839      	ldr	r1, [r7, #0]
 80022c0:	6938      	ldr	r0, [r7, #16]
 80022c2:	f7ff feef 	bl	80020a4 <print_value>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <print_array+0x64>
        {
            return false;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e04f      	b.n	8002370 <print_array+0x104>
        }
        update_offset(output_buffer);
 80022d0:	6838      	ldr	r0, [r7, #0]
 80022d2:	f7ff fbb3 	bl	8001a3c <update_offset>
        if (current_element->next)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d02a      	beq.n	8002334 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <print_array+0x7e>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e000      	b.n	80022ec <print_array+0x80>
 80022ea:	2301      	movs	r3, #1
 80022ec:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3301      	adds	r3, #1
 80022f2:	4619      	mov	r1, r3
 80022f4:	6838      	ldr	r0, [r7, #0]
 80022f6:	f7ff fb07 	bl	8001908 <ensure>
 80022fa:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <print_array+0x9a>
            {
                return false;
 8002302:	2300      	movs	r3, #0
 8002304:	e034      	b.n	8002370 <print_array+0x104>
            }
            *output_pointer++ = ',';
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	617a      	str	r2, [r7, #20]
 800230c:	222c      	movs	r2, #44	@ 0x2c
 800230e:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d004      	beq.n	8002322 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	617a      	str	r2, [r7, #20]
 800231e:	2220      	movs	r2, #32
 8002320:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	441a      	add	r2, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1be      	bne.n	80022be <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8002340:	2102      	movs	r1, #2
 8002342:	6838      	ldr	r0, [r7, #0]
 8002344:	f7ff fae0 	bl	8001908 <ensure>
 8002348:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <print_array+0xe8>
    {
        return false;
 8002350:	2300      	movs	r3, #0
 8002352:	e00d      	b.n	8002370 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	617a      	str	r2, [r7, #20]
 800235a:	225d      	movs	r2, #93	@ 0x5d
 800235c:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	1e5a      	subs	r2, r3, #1
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	60da      	str	r2, [r3, #12]

    return true;
 800236e:	2301      	movs	r3, #1
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <print_object+0x22>
    {
        return false;
 8002396:	2300      	movs	r3, #0
 8002398:	e108      	b.n	80025ac <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <print_object+0x2e>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e000      	b.n	80023a8 <print_object+0x30>
 80023a6:	2301      	movs	r3, #1
 80023a8:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	3301      	adds	r3, #1
 80023ae:	4619      	mov	r1, r3
 80023b0:	6838      	ldr	r0, [r7, #0]
 80023b2:	f7ff faa9 	bl	8001908 <ensure>
 80023b6:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <print_object+0x4a>
    {
        return false;
 80023be:	2300      	movs	r3, #0
 80023c0:	e0f4      	b.n	80025ac <print_object+0x234>
    }

    *output_pointer++ = '{';
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	61fa      	str	r2, [r7, #28]
 80023c8:	227b      	movs	r2, #123	@ 0x7b
 80023ca:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d004      	beq.n	80023e8 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	61fa      	str	r2, [r7, #28]
 80023e4:	220a      	movs	r2, #10
 80023e6:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	441a      	add	r2, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	609a      	str	r2, [r3, #8]

    while (current_item)
 80023f4:	e0a0      	b.n	8002538 <print_object+0x1c0>
    {
        if (output_buffer->format)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d022      	beq.n	8002444 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	4619      	mov	r1, r3
 8002404:	6838      	ldr	r0, [r7, #0]
 8002406:	f7ff fa7f 	bl	8001908 <ensure>
 800240a:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <print_object+0x9e>
            {
                return false;
 8002412:	2300      	movs	r3, #0
 8002414:	e0ca      	b.n	80025ac <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	e007      	b.n	800242c <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	61fa      	str	r2, [r7, #28]
 8002422:	2209      	movs	r2, #9
 8002424:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3301      	adds	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	429a      	cmp	r2, r3
 8002434:	d3f2      	bcc.n	800241c <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	441a      	add	r2, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	6839      	ldr	r1, [r7, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fc50 	bl	8001cf0 <print_string_ptr>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <print_object+0xe2>
        {
            return false;
 8002456:	2300      	movs	r3, #0
 8002458:	e0a8      	b.n	80025ac <print_object+0x234>
        }
        update_offset(output_buffer);
 800245a:	6838      	ldr	r0, [r7, #0]
 800245c:	f7ff faee 	bl	8001a3c <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <print_object+0xf4>
 8002468:	2302      	movs	r3, #2
 800246a:	e000      	b.n	800246e <print_object+0xf6>
 800246c:	2301      	movs	r3, #1
 800246e:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8002470:	68f9      	ldr	r1, [r7, #12]
 8002472:	6838      	ldr	r0, [r7, #0]
 8002474:	f7ff fa48 	bl	8001908 <ensure>
 8002478:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <print_object+0x10c>
        {
            return false;
 8002480:	2300      	movs	r3, #0
 8002482:	e093      	b.n	80025ac <print_object+0x234>
        }
        *output_pointer++ = ':';
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	61fa      	str	r2, [r7, #28]
 800248a:	223a      	movs	r2, #58	@ 0x3a
 800248c:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d004      	beq.n	80024a0 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	61fa      	str	r2, [r7, #28]
 800249c:	2209      	movs	r2, #9
 800249e:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	441a      	add	r2, r3
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 80024ac:	6839      	ldr	r1, [r7, #0]
 80024ae:	69b8      	ldr	r0, [r7, #24]
 80024b0:	f7ff fdf8 	bl	80020a4 <print_value>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <print_object+0x146>
        {
            return false;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e076      	b.n	80025ac <print_object+0x234>
        }
        update_offset(output_buffer);
 80024be:	6838      	ldr	r0, [r7, #0]
 80024c0:	f7ff fabc 	bl	8001a3c <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <print_object+0x158>
 80024cc:	2201      	movs	r2, #1
 80024ce:	e000      	b.n	80024d2 <print_object+0x15a>
 80024d0:	2200      	movs	r2, #0
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <print_object+0x166>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <print_object+0x168>
 80024de:	2300      	movs	r3, #0
 80024e0:	4413      	add	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	3301      	adds	r3, #1
 80024e8:	4619      	mov	r1, r3
 80024ea:	6838      	ldr	r0, [r7, #0]
 80024ec:	f7ff fa0c 	bl	8001908 <ensure>
 80024f0:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <print_object+0x184>
        {
            return false;
 80024f8:	2300      	movs	r3, #0
 80024fa:	e057      	b.n	80025ac <print_object+0x234>
        }
        if (current_item->next)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d004      	beq.n	800250e <print_object+0x196>
        {
            *output_pointer++ = ',';
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	61fa      	str	r2, [r7, #28]
 800250a:	222c      	movs	r2, #44	@ 0x2c
 800250c:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d004      	beq.n	8002520 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	61fa      	str	r2, [r7, #28]
 800251c:	220a      	movs	r2, #10
 800251e:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	441a      	add	r2, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f47f af5b 	bne.w	80023f6 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <print_object+0x1d8>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	3301      	adds	r3, #1
 800254e:	e000      	b.n	8002552 <print_object+0x1da>
 8002550:	2302      	movs	r3, #2
 8002552:	4619      	mov	r1, r3
 8002554:	6838      	ldr	r0, [r7, #0]
 8002556:	f7ff f9d7 	bl	8001908 <ensure>
 800255a:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <print_object+0x1ee>
    {
        return false;
 8002562:	2300      	movs	r3, #0
 8002564:	e022      	b.n	80025ac <print_object+0x234>
    }
    if (output_buffer->format)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d010      	beq.n	8002590 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	e007      	b.n	8002584 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	61fa      	str	r2, [r7, #28]
 800257a:	2209      	movs	r2, #9
 800257c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	3301      	adds	r3, #1
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	3b01      	subs	r3, #1
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	429a      	cmp	r2, r3
 800258e:	d3f1      	bcc.n	8002574 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	61fa      	str	r2, [r7, #28]
 8002596:	227d      	movs	r2, #125	@ 0x7d
 8002598:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	1e5a      	subs	r2, r3, #1
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	60da      	str	r2, [r3, #12]

    return true;
 80025aa:	2301      	movs	r3, #1
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
    prev->next = item;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	605a      	str	r2, [r3, #4]
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d006      	beq.n	80025f8 <add_item_to_array+0x22>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <add_item_to_array+0x22>
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d101      	bne.n	80025fc <add_item_to_array+0x26>
    {
        return false;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e01e      	b.n	800263a <add_item_to_array+0x64>
    }

    child = array->child;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d109      	bne.n	800261c <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	e00d      	b.n	8002638 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d009      	beq.n	8002638 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	6839      	ldr	r1, [r7, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ffc2 	bl	80025b4 <suffix_object>
            array->child->prev = item;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8002638:	2301      	movs	r3, #1
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <cJSON_AddItemToArray>:

/* Add item to array/object. */
CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
    return add_item_to_array(array, item);
 800264c:	6839      	ldr	r1, [r7, #0]
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ffc1 	bl	80025d6 <add_item_to_array>
 8002654:	4603      	mov	r3, r0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8002666:	687b      	ldr	r3, [r7, #4]
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d009      	beq.n	80026a4 <add_item_to_object+0x30>
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d006      	beq.n	80026a4 <add_item_to_object+0x30>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <add_item_to_object+0x30>
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d101      	bne.n	80026a8 <add_item_to_object+0x34>
    {
        return false;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e036      	b.n	8002716 <add_item_to_object+0xa2>
    }

    if (constant_key)
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 80026ae:	68b8      	ldr	r0, [r7, #8]
 80026b0:	f7ff ffd5 	bl	800265e <cast_away_const>
 80026b4:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	e00e      	b.n	80026e0 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 80026c2:	6839      	ldr	r1, [r7, #0]
 80026c4:	68b8      	ldr	r0, [r7, #8]
 80026c6:	f7ff f889 	bl	80017dc <cJSON_strdup>
 80026ca:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <add_item_to_object+0x62>
        {
            return false;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e01f      	b.n	8002716 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026de:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d109      	bne.n	8002700 <add_item_to_object+0x8c>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6a12      	ldr	r2, [r2, #32]
 80026fc:	4610      	mov	r0, r2
 80026fe:	4798      	blx	r3
    }

    item->string = new_key;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f7ff ff61 	bl	80025d6 <add_item_to_array>
 8002714:	4603      	mov	r3, r0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af02      	add	r7, sp, #8
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 800272c:	2300      	movs	r3, #0
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	4b05      	ldr	r3, [pc, #20]	@ (8002748 <cJSON_AddItemToObject+0x28>)
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68b9      	ldr	r1, [r7, #8]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f7ff ff9c 	bl	8002674 <add_item_to_object>
 800273c:	4603      	mov	r3, r0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000008 	.word	0x20000008

0800274c <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 800275a:	ed97 0b00 	vldr	d0, [r7]
 800275e:	f000 f81b 	bl	8002798 <cJSON_CreateNumber>
 8002762:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8002764:	2300      	movs	r3, #0
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	4b09      	ldr	r3, [pc, #36]	@ (8002790 <cJSON_AddNumberToObject+0x44>)
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f7ff ff80 	bl	8002674 <add_item_to_object>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	e003      	b.n	8002786 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 800277e:	6978      	ldr	r0, [r7, #20]
 8002780:	f7ff f86a 	bl	8001858 <cJSON_Delete>
    return NULL;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000008 	.word	0x20000008
 8002794:	00000000 	.word	0x00000000

08002798 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 80027a2:	481f      	ldr	r0, [pc, #124]	@ (8002820 <cJSON_CreateNumber+0x88>)
 80027a4:	f7ff f842 	bl	800182c <cJSON_New_Item>
 80027a8:	60f8      	str	r0, [r7, #12]
    if(item)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d02c      	beq.n	800280a <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2208      	movs	r2, #8
 80027b4:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 80027b6:	68f9      	ldr	r1, [r7, #12]
 80027b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027bc:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 80027c0:	a315      	add	r3, pc, #84	@ (adr r3, 8002818 <cJSON_CreateNumber+0x80>)
 80027c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027ca:	f7fe f973 	bl	8000ab4 <__aeabi_dcmpge>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80027da:	615a      	str	r2, [r3, #20]
 80027dc:	e015      	b.n	800280a <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <cJSON_CreateNumber+0x8c>)
 80027e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027e8:	f7fe f95a 	bl	8000aa0 <__aeabi_dcmple>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80027f8:	615a      	str	r2, [r3, #20]
 80027fa:	e006      	b.n	800280a <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 80027fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002800:	f7fe f982 	bl	8000b08 <__aeabi_d2iz>
 8002804:	4602      	mov	r2, r0
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 800280a:	68fb      	ldr	r3, [r7, #12]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	f3af 8000 	nop.w
 8002818:	ffc00000 	.word	0xffc00000
 800281c:	41dfffff 	.word	0x41dfffff
 8002820:	20000008 	.word	0x20000008
 8002824:	c1e00000 	.word	0xc1e00000

08002828 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800282e:	4807      	ldr	r0, [pc, #28]	@ (800284c <cJSON_CreateArray+0x24>)
 8002830:	f7fe fffc 	bl	800182c <cJSON_New_Item>
 8002834:	6078      	str	r0, [r7, #4]
    if(item)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <cJSON_CreateArray+0x1a>
    {
        item->type=cJSON_Array;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	60da      	str	r2, [r3, #12]
    }

    return item;
 8002842:	687b      	ldr	r3, [r7, #4]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000008 	.word	0x20000008

08002850 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8002856:	4807      	ldr	r0, [pc, #28]	@ (8002874 <cJSON_CreateObject+0x24>)
 8002858:	f7fe ffe8 	bl	800182c <cJSON_New_Item>
 800285c:	6078      	str	r0, [r7, #4]
    if (item)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2240      	movs	r2, #64	@ 0x40
 8002868:	60da      	str	r2, [r3, #12]
    }

    return item;
 800286a:	687b      	ldr	r3, [r7, #4]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000008 	.word	0x20000008

08002878 <acc_example_service_init>:

bool acc_example_service_init();
int acc_example_service(int argc, char *argv[]);

bool acc_example_service_init()
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
    const acc_hal_a121_t *hal = acc_hal_rss_integration_get_implementation();
 800287e:	f7fe fc6b 	bl	8001158 <acc_hal_rss_integration_get_implementation>
 8002882:	6078      	str	r0, [r7, #4]

    if (!acc_rss_hal_register(hal))
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f008 ff3b 	bl	800b700 <acc_rss_hal_register>
 800288a:	4603      	mov	r3, r0
 800288c:	f083 0301 	eor.w	r3, r3, #1
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <acc_example_service_init+0x22>
    {
        return false;
 8002896:	2300      	movs	r3, #0
 8002898:	e08a      	b.n	80029b0 <acc_example_service_init+0x138>
    }

    config = acc_config_create();
 800289a:	f009 f919 	bl	800bad0 <acc_config_create>
 800289e:	4603      	mov	r3, r0
 80028a0:	4a45      	ldr	r2, [pc, #276]	@ (80029b8 <acc_example_service_init+0x140>)
 80028a2:	6013      	str	r3, [r2, #0]
    if (config == NULL)
 80028a4:	4b44      	ldr	r3, [pc, #272]	@ (80029b8 <acc_example_service_init+0x140>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d106      	bne.n	80028ba <acc_example_service_init+0x42>
    {
        printf("acc_config_create() failed\n");
 80028ac:	4843      	ldr	r0, [pc, #268]	@ (80029bc <acc_example_service_init+0x144>)
 80028ae:	f00f f99d 	bl	8011bec <puts>
        cleanup();
 80028b2:	f000 fa57 	bl	8002d64 <cleanup>
        return false;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e07a      	b.n	80029b0 <acc_example_service_init+0x138>
    }

    set_config(config);
 80028ba:	4b3f      	ldr	r3, [pc, #252]	@ (80029b8 <acc_example_service_init+0x140>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f9a4 	bl	8002c0c <set_config>

    // Print the configuration
    acc_config_log(config);
 80028c4:	4b3c      	ldr	r3, [pc, #240]	@ (80029b8 <acc_example_service_init+0x140>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f008 ff47 	bl	800b75c <acc_config_log>

    processing = acc_processing_create(config, &proc_meta);
 80028ce:	4b3a      	ldr	r3, [pc, #232]	@ (80029b8 <acc_example_service_init+0x140>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	493b      	ldr	r1, [pc, #236]	@ (80029c0 <acc_example_service_init+0x148>)
 80028d4:	4618      	mov	r0, r3
 80028d6:	f009 fb15 	bl	800bf04 <acc_processing_create>
 80028da:	4603      	mov	r3, r0
 80028dc:	4a39      	ldr	r2, [pc, #228]	@ (80029c4 <acc_example_service_init+0x14c>)
 80028de:	6013      	str	r3, [r2, #0]
    if (processing == NULL)
 80028e0:	4b38      	ldr	r3, [pc, #224]	@ (80029c4 <acc_example_service_init+0x14c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d106      	bne.n	80028f6 <acc_example_service_init+0x7e>
    {
        printf("acc_processing_create() failed\n");
 80028e8:	4837      	ldr	r0, [pc, #220]	@ (80029c8 <acc_example_service_init+0x150>)
 80028ea:	f00f f97f 	bl	8011bec <puts>
        cleanup();
 80028ee:	f000 fa39 	bl	8002d64 <cleanup>
        return false;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e05c      	b.n	80029b0 <acc_example_service_init+0x138>
    }

    if (!acc_rss_get_buffer_size(config, &buffer_size))
 80028f6:	4b30      	ldr	r3, [pc, #192]	@ (80029b8 <acc_example_service_init+0x140>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4934      	ldr	r1, [pc, #208]	@ (80029cc <acc_example_service_init+0x154>)
 80028fc:	4618      	mov	r0, r3
 80028fe:	f008 ff03 	bl	800b708 <acc_rss_get_buffer_size>
 8002902:	4603      	mov	r3, r0
 8002904:	f083 0301 	eor.w	r3, r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d006      	beq.n	800291c <acc_example_service_init+0xa4>
    {
        printf("acc_rss_get_buffer_size() failed\n");
 800290e:	4830      	ldr	r0, [pc, #192]	@ (80029d0 <acc_example_service_init+0x158>)
 8002910:	f00f f96c 	bl	8011bec <puts>
        cleanup();
 8002914:	f000 fa26 	bl	8002d64 <cleanup>
        return false;
 8002918:	2300      	movs	r3, #0
 800291a:	e049      	b.n	80029b0 <acc_example_service_init+0x138>
    }

    buffer = acc_integration_mem_alloc(buffer_size);
 800291c:	4b2b      	ldr	r3, [pc, #172]	@ (80029cc <acc_example_service_init+0x154>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe fcd2 	bl	80012ca <acc_integration_mem_alloc>
 8002926:	4603      	mov	r3, r0
 8002928:	4a2a      	ldr	r2, [pc, #168]	@ (80029d4 <acc_example_service_init+0x15c>)
 800292a:	6013      	str	r3, [r2, #0]
    if (buffer == NULL)
 800292c:	4b29      	ldr	r3, [pc, #164]	@ (80029d4 <acc_example_service_init+0x15c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d106      	bne.n	8002942 <acc_example_service_init+0xca>
    {
        printf("Buffer allocation failed\n");
 8002934:	4828      	ldr	r0, [pc, #160]	@ (80029d8 <acc_example_service_init+0x160>)
 8002936:	f00f f959 	bl	8011bec <puts>
        cleanup();
 800293a:	f000 fa13 	bl	8002d64 <cleanup>
        return false;
 800293e:	2300      	movs	r3, #0
 8002940:	e036      	b.n	80029b0 <acc_example_service_init+0x138>
    }

    acc_hal_integration_sensor_supply_on(SENSOR_ID);
 8002942:	2002      	movs	r0, #2
 8002944:	f7fe fb4a 	bl	8000fdc <acc_hal_integration_sensor_supply_on>
    acc_hal_integration_sensor_enable(SENSOR_ID);
 8002948:	2002      	movs	r0, #2
 800294a:	f7fe fb67 	bl	800101c <acc_hal_integration_sensor_enable>

    sensor = acc_sensor_create(SENSOR_ID);
 800294e:	2002      	movs	r0, #2
 8002950:	f009 fb6c 	bl	800c02c <acc_sensor_create>
 8002954:	4603      	mov	r3, r0
 8002956:	4a21      	ldr	r2, [pc, #132]	@ (80029dc <acc_example_service_init+0x164>)
 8002958:	6013      	str	r3, [r2, #0]
    if (sensor == NULL)
 800295a:	4b20      	ldr	r3, [pc, #128]	@ (80029dc <acc_example_service_init+0x164>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <acc_example_service_init+0xf8>
    {
        printf("acc_sensor_create() failed\n");
 8002962:	481f      	ldr	r0, [pc, #124]	@ (80029e0 <acc_example_service_init+0x168>)
 8002964:	f00f f942 	bl	8011bec <puts>
        cleanup();
 8002968:	f000 f9fc 	bl	8002d64 <cleanup>
        return false;
 800296c:	2300      	movs	r3, #0
 800296e:	e01f      	b.n	80029b0 <acc_example_service_init+0x138>
    }

    if (!do_sensor_calibration_and_prepare(sensor, config, buffer, buffer_size))
 8002970:	4b1a      	ldr	r3, [pc, #104]	@ (80029dc <acc_example_service_init+0x164>)
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	4b10      	ldr	r3, [pc, #64]	@ (80029b8 <acc_example_service_init+0x140>)
 8002976:	6819      	ldr	r1, [r3, #0]
 8002978:	4b16      	ldr	r3, [pc, #88]	@ (80029d4 <acc_example_service_init+0x15c>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b13      	ldr	r3, [pc, #76]	@ (80029cc <acc_example_service_init+0x154>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f000 f97c 	bl	8002c7c <do_sensor_calibration_and_prepare>
 8002984:	4603      	mov	r3, r0
 8002986:	f083 0301 	eor.w	r3, r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00b      	beq.n	80029a8 <acc_example_service_init+0x130>
    {
        printf("do_sensor_calibration_and_prepare() failed\n");
 8002990:	4814      	ldr	r0, [pc, #80]	@ (80029e4 <acc_example_service_init+0x16c>)
 8002992:	f00f f92b 	bl	8011bec <puts>
        acc_sensor_status(sensor);
 8002996:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <acc_example_service_init+0x164>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f009 fc80 	bl	800c2a0 <acc_sensor_status>
        cleanup();
 80029a0:	f000 f9e0 	bl	8002d64 <cleanup>
        return false;
 80029a4:	2300      	movs	r3, #0
 80029a6:	e003      	b.n	80029b0 <acc_example_service_init+0x138>
    }

    is_initialized = true; // Mark as initialized
 80029a8:	4b0f      	ldr	r3, [pc, #60]	@ (80029e8 <acc_example_service_init+0x170>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
    return true;
 80029ae:	2301      	movs	r3, #1
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	200002a0 	.word	0x200002a0
 80029bc:	0801407c 	.word	0x0801407c
 80029c0:	200002b4 	.word	0x200002b4
 80029c4:	200002a4 	.word	0x200002a4
 80029c8:	08014098 	.word	0x08014098
 80029cc:	200002b0 	.word	0x200002b0
 80029d0:	080140b8 	.word	0x080140b8
 80029d4:	200002ac 	.word	0x200002ac
 80029d8:	080140dc 	.word	0x080140dc
 80029dc:	200002a8 	.word	0x200002a8
 80029e0:	080140f8 	.word	0x080140f8
 80029e4:	08014114 	.word	0x08014114
 80029e8:	200002d0 	.word	0x200002d0

080029ec <acc_example_service>:

int acc_example_service(int argc, char *argv[])
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	@ 0x28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
     //Initialize on first run
    if (!is_initialized)
 80029f6:	4b74      	ldr	r3, [pc, #464]	@ (8002bc8 <acc_example_service+0x1dc>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	f083 0301 	eor.w	r3, r3, #1
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d009      	beq.n	8002a18 <acc_example_service+0x2c>
    {
        if (!acc_example_service_init())
 8002a04:	f7ff ff38 	bl	8002878 <acc_example_service_init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f083 0301 	eor.w	r3, r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <acc_example_service+0x2c>
        {
            return EXIT_FAILURE;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0d2      	b.n	8002bbe <acc_example_service+0x1d2>
        }
    }

    acc_processing_result_t proc_result;

    if (!acc_sensor_measure(sensor))
 8002a18:	4b6c      	ldr	r3, [pc, #432]	@ (8002bcc <acc_example_service+0x1e0>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f009 fbd7 	bl	800c1d0 <acc_sensor_measure>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f083 0301 	eor.w	r3, r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00b      	beq.n	8002a46 <acc_example_service+0x5a>
    {
        printf("acc_sensor_measure failed\n");
 8002a2e:	4868      	ldr	r0, [pc, #416]	@ (8002bd0 <acc_example_service+0x1e4>)
 8002a30:	f00f f8dc 	bl	8011bec <puts>
        acc_sensor_status(sensor);
 8002a34:	4b65      	ldr	r3, [pc, #404]	@ (8002bcc <acc_example_service+0x1e0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f009 fc31 	bl	800c2a0 <acc_sensor_status>
        cleanup();
 8002a3e:	f000 f991 	bl	8002d64 <cleanup>
        return EXIT_FAILURE;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e0bb      	b.n	8002bbe <acc_example_service+0x1d2>
    }

    if (!acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID, SENSOR_TIMEOUT_MS))
 8002a46:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002a4a:	2002      	movs	r0, #2
 8002a4c:	f7fe fb32 	bl	80010b4 <acc_hal_integration_wait_for_sensor_interrupt>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f083 0301 	eor.w	r3, r3, #1
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00b      	beq.n	8002a74 <acc_example_service+0x88>
    {
        printf("Sensor interrupt timeout\n");
 8002a5c:	485d      	ldr	r0, [pc, #372]	@ (8002bd4 <acc_example_service+0x1e8>)
 8002a5e:	f00f f8c5 	bl	8011bec <puts>
        acc_sensor_status(sensor);
 8002a62:	4b5a      	ldr	r3, [pc, #360]	@ (8002bcc <acc_example_service+0x1e0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f009 fc1a 	bl	800c2a0 <acc_sensor_status>
        cleanup();
 8002a6c:	f000 f97a 	bl	8002d64 <cleanup>
        return EXIT_FAILURE;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0a4      	b.n	8002bbe <acc_example_service+0x1d2>
    }

    if (!acc_sensor_read(sensor, buffer, buffer_size))
 8002a74:	4b55      	ldr	r3, [pc, #340]	@ (8002bcc <acc_example_service+0x1e0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a57      	ldr	r2, [pc, #348]	@ (8002bd8 <acc_example_service+0x1ec>)
 8002a7a:	6811      	ldr	r1, [r2, #0]
 8002a7c:	4a57      	ldr	r2, [pc, #348]	@ (8002bdc <acc_example_service+0x1f0>)
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f009 fbcd 	bl	800c220 <acc_sensor_read>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f083 0301 	eor.w	r3, r3, #1
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00b      	beq.n	8002aaa <acc_example_service+0xbe>
    {
        printf("acc_sensor_read failed\n");
 8002a92:	4853      	ldr	r0, [pc, #332]	@ (8002be0 <acc_example_service+0x1f4>)
 8002a94:	f00f f8aa 	bl	8011bec <puts>
        acc_sensor_status(sensor);
 8002a98:	4b4c      	ldr	r3, [pc, #304]	@ (8002bcc <acc_example_service+0x1e0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f009 fbff 	bl	800c2a0 <acc_sensor_status>
        cleanup();
 8002aa2:	f000 f95f 	bl	8002d64 <cleanup>
        return EXIT_FAILURE;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e089      	b.n	8002bbe <acc_example_service+0x1d2>
    }

    acc_processing_execute(processing, buffer, &proc_result);
 8002aaa:	4b4e      	ldr	r3, [pc, #312]	@ (8002be4 <acc_example_service+0x1f8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a4a      	ldr	r2, [pc, #296]	@ (8002bd8 <acc_example_service+0x1ec>)
 8002ab0:	6811      	ldr	r1, [r2, #0]
 8002ab2:	f107 0208 	add.w	r2, r7, #8
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f009 f9c4 	bl	800be44 <acc_processing_execute>

    if (proc_result.calibration_needed)
 8002abc:	7abb      	ldrb	r3, [r7, #10]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d025      	beq.n	8002b0e <acc_example_service+0x122>
    {
        printf("The current calibration is not valid for the current temperature.\n");
 8002ac2:	4849      	ldr	r0, [pc, #292]	@ (8002be8 <acc_example_service+0x1fc>)
 8002ac4:	f00f f892 	bl	8011bec <puts>
        printf("The sensor needs to be re-calibrated.\n");
 8002ac8:	4848      	ldr	r0, [pc, #288]	@ (8002bec <acc_example_service+0x200>)
 8002aca:	f00f f88f 	bl	8011bec <puts>

        if (!do_sensor_calibration_and_prepare(sensor, config, buffer, buffer_size))
 8002ace:	4b3f      	ldr	r3, [pc, #252]	@ (8002bcc <acc_example_service+0x1e0>)
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	4b47      	ldr	r3, [pc, #284]	@ (8002bf0 <acc_example_service+0x204>)
 8002ad4:	6819      	ldr	r1, [r3, #0]
 8002ad6:	4b40      	ldr	r3, [pc, #256]	@ (8002bd8 <acc_example_service+0x1ec>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4b40      	ldr	r3, [pc, #256]	@ (8002bdc <acc_example_service+0x1f0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f000 f8cd 	bl	8002c7c <do_sensor_calibration_and_prepare>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f083 0301 	eor.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <acc_example_service+0x11a>
        {
            printf("do_sensor_calibration_and_prepare() failed\n");
 8002aee:	4841      	ldr	r0, [pc, #260]	@ (8002bf4 <acc_example_service+0x208>)
 8002af0:	f00f f87c 	bl	8011bec <puts>
            acc_sensor_status(sensor);
 8002af4:	4b35      	ldr	r3, [pc, #212]	@ (8002bcc <acc_example_service+0x1e0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f009 fbd1 	bl	800c2a0 <acc_sensor_status>
            cleanup();
 8002afe:	f000 f931 	bl	8002d64 <cleanup>
            return EXIT_FAILURE;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e05b      	b.n	8002bbe <acc_example_service+0x1d2>
        }

        printf("The sensor was successfully re-calibrated.\n");
 8002b06:	483c      	ldr	r0, [pc, #240]	@ (8002bf8 <acc_example_service+0x20c>)
 8002b08:	f00f f870 	bl	8011bec <puts>
 8002b0c:	e056      	b.n	8002bbc <acc_example_service+0x1d0>
    }
    else
    {
        cJSON *json_root = cJSON_CreateObject();
 8002b0e:	f7ff fe9f 	bl	8002850 <cJSON_CreateObject>
 8002b12:	6238      	str	r0, [r7, #32]
        cJSON *json_array = cJSON_CreateArray();
 8002b14:	f7ff fe88 	bl	8002828 <cJSON_CreateArray>
 8002b18:	61f8      	str	r0, [r7, #28]

        for (uint16_t j = 0; j < proc_meta.frame_data_length; j++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002b1e:	e02b      	b.n	8002b78 <acc_example_service+0x18c>
        {
            cJSON *json_point = cJSON_CreateObject();
 8002b20:	f7ff fe96 	bl	8002850 <cJSON_CreateObject>
 8002b24:	6178      	str	r0, [r7, #20]
            cJSON_AddNumberToObject(json_point, "real", proc_result.frame[j].real);
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fcce 	bl	80004d4 <__aeabi_i2d>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	ec43 2b10 	vmov	d0, r2, r3
 8002b40:	492e      	ldr	r1, [pc, #184]	@ (8002bfc <acc_example_service+0x210>)
 8002b42:	6978      	ldr	r0, [r7, #20]
 8002b44:	f7ff fe02 	bl	800274c <cJSON_AddNumberToObject>
            cJSON_AddNumberToObject(json_point, "imag", proc_result.frame[j].imag);
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fd fcbd 	bl	80004d4 <__aeabi_i2d>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	ec43 2b10 	vmov	d0, r2, r3
 8002b62:	4927      	ldr	r1, [pc, #156]	@ (8002c00 <acc_example_service+0x214>)
 8002b64:	6978      	ldr	r0, [r7, #20]
 8002b66:	f7ff fdf1 	bl	800274c <cJSON_AddNumberToObject>
            cJSON_AddItemToArray(json_array, json_point);
 8002b6a:	6979      	ldr	r1, [r7, #20]
 8002b6c:	69f8      	ldr	r0, [r7, #28]
 8002b6e:	f7ff fd68 	bl	8002642 <cJSON_AddItemToArray>
        for (uint16_t j = 0; j < proc_meta.frame_data_length; j++)
 8002b72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b74:	3301      	adds	r3, #1
 8002b76:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002b78:	4b22      	ldr	r3, [pc, #136]	@ (8002c04 <acc_example_service+0x218>)
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d3ce      	bcc.n	8002b20 <acc_example_service+0x134>
        }

        cJSON_AddItemToObject(json_root, "sensor_data", json_array);
 8002b82:	69fa      	ldr	r2, [r7, #28]
 8002b84:	4920      	ldr	r1, [pc, #128]	@ (8002c08 <acc_example_service+0x21c>)
 8002b86:	6a38      	ldr	r0, [r7, #32]
 8002b88:	f7ff fdca 	bl	8002720 <cJSON_AddItemToObject>

        // Convert the JSON object to a string
        char *json_str = cJSON_PrintUnformatted(json_array);
 8002b8c:	69f8      	ldr	r0, [r7, #28]
 8002b8e:	f7ff fa79 	bl	8002084 <cJSON_PrintUnformatted>
 8002b92:	61b8      	str	r0, [r7, #24]

        strncpy((char *)argv, json_str, 512 - 1);
 8002b94:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002b98:	69b9      	ldr	r1, [r7, #24]
 8002b9a:	6838      	ldr	r0, [r7, #0]
 8002b9c:	f00f f9ac 	bl	8011ef8 <strncpy>
        argv[512 - 1] = '\0'; // Ensure null termination
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	f203 73fc 	addw	r3, r3, #2044	@ 0x7fc
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]

        cJSON_Delete(json_root);
 8002baa:	6a38      	ldr	r0, [r7, #32]
 8002bac:	f7fe fe54 	bl	8001858 <cJSON_Delete>
        printf("%s\n",json_str);
 8002bb0:	69b8      	ldr	r0, [r7, #24]
 8002bb2:	f00f f81b 	bl	8011bec <puts>
        free(json_str);
 8002bb6:	69b8      	ldr	r0, [r7, #24]
 8002bb8:	f00e fe02 	bl	80117c0 <free>

//        print_data(proc_result.frame, proc_meta.frame_data_length);
    }

    return EXIT_SUCCESS;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3728      	adds	r7, #40	@ 0x28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200002d0 	.word	0x200002d0
 8002bcc:	200002a8 	.word	0x200002a8
 8002bd0:	08014140 	.word	0x08014140
 8002bd4:	0801415c 	.word	0x0801415c
 8002bd8:	200002ac 	.word	0x200002ac
 8002bdc:	200002b0 	.word	0x200002b0
 8002be0:	08014178 	.word	0x08014178
 8002be4:	200002a4 	.word	0x200002a4
 8002be8:	08014190 	.word	0x08014190
 8002bec:	080141d4 	.word	0x080141d4
 8002bf0:	200002a0 	.word	0x200002a0
 8002bf4:	08014114 	.word	0x08014114
 8002bf8:	080141fc 	.word	0x080141fc
 8002bfc:	08014228 	.word	0x08014228
 8002c00:	08014230 	.word	0x08014230
 8002c04:	200002b4 	.word	0x200002b4
 8002c08:	08014238 	.word	0x08014238

08002c0c <set_config>:

static void set_config(acc_config_t *config)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	acc_config_sweep_rate_set(config,150.0f);
 8002c14:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8002c78 <set_config+0x6c>
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f009 f86d 	bl	800bcf8 <acc_config_sweep_rate_set>
    acc_config_hwaas_set(config,50);
 8002c1e:	2132      	movs	r1, #50	@ 0x32
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f009 f861 	bl	800bce8 <acc_config_hwaas_set>
    acc_config_start_point_set(config, 40);
 8002c26:	2128      	movs	r1, #40	@ 0x28
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f009 f84d 	bl	800bcc8 <acc_config_start_point_set>
    acc_config_num_points_set(config, 80);
 8002c2e:	2150      	movs	r1, #80	@ 0x50
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f009 f84d 	bl	800bcd0 <acc_config_num_points_set>
    acc_config_step_length_set(config,1);
 8002c36:	2101      	movs	r1, #1
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f009 f84d 	bl	800bcd8 <acc_config_step_length_set>
    acc_config_profile_set (config , ACC_CONFIG_PROFILE_1);
 8002c3e:	2101      	movs	r1, #1
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f009 f84d 	bl	800bce0 <acc_config_profile_set>
    acc_config_continuous_sweep_mode_set(config,true);
 8002c46:	2101      	movs	r1, #1
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f009 f86b 	bl	800bd24 <acc_config_continuous_sweep_mode_set>
//    acc_config_receiver_gain_set(config,16);
    acc_config_inter_sweep_idle_state_set(config,ACC_CONFIG_IDLE_STATE_READY);
 8002c4e:	2102      	movs	r1, #2
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f009 f893 	bl	800bd7c <acc_config_inter_sweep_idle_state_set>
    acc_config_inter_frame_idle_state_set(config,ACC_CONFIG_IDLE_STATE_READY);
 8002c56:	2102      	movs	r1, #2
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f009 f879 	bl	800bd50 <acc_config_inter_frame_idle_state_set>
    acc_config_prf_set(config,ACC_CONFIG_PRF_19_5_MHZ);
 8002c5e:	2100      	movs	r1, #0
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f009 f8db 	bl	800be1c <acc_config_prf_set>
    acc_config_phase_enhancement_set(config,true);
 8002c66:	2101      	movs	r1, #1
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f009 f841 	bl	800bcf0 <acc_config_phase_enhancement_set>

//    acc_config_double_buffering_set(config,true);
//    acc_config_enable_loopback_set(config,true);
//    acc_detector_distance_config_start_set()

}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	43160000 	.word	0x43160000

08002c7c <do_sensor_calibration_and_prepare>:

static bool do_sensor_calibration_and_prepare(acc_sensor_t *sensor, acc_config_t *config, void *buffer, uint32_t buffer_size)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b0b8      	sub	sp, #224	@ 0xe0
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
    bool status = false;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    bool cal_complete = false;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    acc_cal_result_t cal_result;
    const uint16_t calibration_retries = 1U;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2

    // Random disturbances may cause the calibration to fail. At failure, retry at least once.
    for (uint16_t i = 0; !status && (i <= calibration_retries); i++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
 8002ca2:	e035      	b.n	8002d10 <do_sensor_calibration_and_prepare+0x94>
    {
        // Reset sensor before calibration by disabling/enabling it
        acc_hal_integration_sensor_disable(SENSOR_ID);
 8002ca4:	2002      	movs	r0, #2
 8002ca6:	f7fe f9df 	bl	8001068 <acc_hal_integration_sensor_disable>
        acc_hal_integration_sensor_enable(SENSOR_ID);
 8002caa:	2002      	movs	r0, #2
 8002cac:	f7fe f9b6 	bl	800101c <acc_hal_integration_sensor_enable>

        do
        {
            status = acc_sensor_calibrate(sensor, &cal_complete, &cal_result, buffer, buffer_size);
 8002cb0:	f107 0210 	add.w	r2, r7, #16
 8002cb4:	f107 01d1 	add.w	r1, r7, #209	@ 0xd1
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f009 f9fe 	bl	800c0c0 <acc_sensor_calibrate>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7

            if (status && !cal_complete)
 8002cca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00e      	beq.n	8002cf0 <do_sensor_calibration_and_prepare+0x74>
 8002cd2:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8002cd6:	f083 0301 	eor.w	r3, r3, #1
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <do_sensor_calibration_and_prepare+0x74>
            {
                status = acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID, SENSOR_TIMEOUT_MS);
 8002ce0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002ce4:	2002      	movs	r0, #2
 8002ce6:	f7fe f9e5 	bl	80010b4 <acc_hal_integration_wait_for_sensor_interrupt>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
            }
        } while (status && !cal_complete);
 8002cf0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d006      	beq.n	8002d06 <do_sensor_calibration_and_prepare+0x8a>
 8002cf8:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8002cfc:	f083 0301 	eor.w	r3, r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1d4      	bne.n	8002cb0 <do_sensor_calibration_and_prepare+0x34>
    for (uint16_t i = 0; !status && (i <= calibration_retries); i++)
 8002d06:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
 8002d10:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8002d14:	f083 0301 	eor.w	r3, r3, #1
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <do_sensor_calibration_and_prepare+0xae>
 8002d1e:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	@ 0xd4
 8002d22:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d9bc      	bls.n	8002ca4 <do_sensor_calibration_and_prepare+0x28>
    }

    if (status)
 8002d2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d011      	beq.n	8002d56 <do_sensor_calibration_and_prepare+0xda>
    {
        // Reset sensor after calibration by disabling/enabling it
        acc_hal_integration_sensor_disable(SENSOR_ID);
 8002d32:	2002      	movs	r0, #2
 8002d34:	f7fe f998 	bl	8001068 <acc_hal_integration_sensor_disable>
        acc_hal_integration_sensor_enable(SENSOR_ID);
 8002d38:	2002      	movs	r0, #2
 8002d3a:	f7fe f96f 	bl	800101c <acc_hal_integration_sensor_enable>

        status = acc_sensor_prepare(sensor, config, &cal_result, buffer, buffer_size);
 8002d3e:	f107 0210 	add.w	r2, r7, #16
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f009 f9ea 	bl	800c124 <acc_sensor_prepare>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    }

    return status;
 8002d56:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	37d8      	adds	r7, #216	@ 0xd8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <cleanup>:

    printf("\n");
}

static void cleanup()
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
    acc_hal_integration_sensor_disable(SENSOR_ID);
 8002d68:	2002      	movs	r0, #2
 8002d6a:	f7fe f97d 	bl	8001068 <acc_hal_integration_sensor_disable>
    acc_hal_integration_sensor_supply_off(SENSOR_ID);
 8002d6e:	2002      	movs	r0, #2
 8002d70:	f7fe f944 	bl	8000ffc <acc_hal_integration_sensor_supply_off>

    if (sensor != NULL)
 8002d74:	4b1a      	ldr	r3, [pc, #104]	@ (8002de0 <cleanup+0x7c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d007      	beq.n	8002d8c <cleanup+0x28>
    {
        acc_sensor_destroy(sensor);
 8002d7c:	4b18      	ldr	r3, [pc, #96]	@ (8002de0 <cleanup+0x7c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f009 f931 	bl	800bfe8 <acc_sensor_destroy>
        sensor = NULL;
 8002d86:	4b16      	ldr	r3, [pc, #88]	@ (8002de0 <cleanup+0x7c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
    }

    if (processing != NULL)
 8002d8c:	4b15      	ldr	r3, [pc, #84]	@ (8002de4 <cleanup+0x80>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d007      	beq.n	8002da4 <cleanup+0x40>
    {
        acc_processing_destroy(processing);
 8002d94:	4b13      	ldr	r3, [pc, #76]	@ (8002de4 <cleanup+0x80>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f009 f88f 	bl	800bebc <acc_processing_destroy>
        processing = NULL;
 8002d9e:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <cleanup+0x80>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
    }

    if (config != NULL)
 8002da4:	4b10      	ldr	r3, [pc, #64]	@ (8002de8 <cleanup+0x84>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d007      	beq.n	8002dbc <cleanup+0x58>
    {
        acc_config_destroy(config);
 8002dac:	4b0e      	ldr	r3, [pc, #56]	@ (8002de8 <cleanup+0x84>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f008 fea5 	bl	800bb00 <acc_config_destroy>
        config = NULL;
 8002db6:	4b0c      	ldr	r3, [pc, #48]	@ (8002de8 <cleanup+0x84>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
    }

    if (buffer != NULL)
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <cleanup+0x88>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d007      	beq.n	8002dd4 <cleanup+0x70>
    {
        acc_integration_mem_free(buffer);
 8002dc4:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <cleanup+0x88>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fe fa8a 	bl	80012e2 <acc_integration_mem_free>
        buffer = NULL;
 8002dce:	4b07      	ldr	r3, [pc, #28]	@ (8002dec <cleanup+0x88>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
    }

    is_initialized = false; // Reset initialization flag
 8002dd4:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <cleanup+0x8c>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	200002a8 	.word	0x200002a8
 8002de4:	200002a4 	.word	0x200002a4
 8002de8:	200002a0 	.word	0x200002a0
 8002dec:	200002ac 	.word	0x200002ac
 8002df0:	200002d0 	.word	0x200002d0

08002df4 <LL_EXTI_EnableIT_0_31>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002dfc:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <LL_EXTI_EnableIT_0_31+0x24>)
 8002dfe:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002e02:	4905      	ldr	r1, [pc, #20]	@ (8002e18 <LL_EXTI_EnableIT_0_31+0x24>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	58000800 	.word	0x58000800

08002e1c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002e24:	4b05      	ldr	r3, [pc, #20]	@ (8002e3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4904      	ldr	r1, [pc, #16]	@ (8002e3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	600b      	str	r3, [r1, #0]

}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	58000800 	.word	0x58000800

08002e40 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002e46:	4b0d      	ldr	r3, [pc, #52]	@ (8002e7c <ReadRtcSsrValue+0x3c>)
 8002e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <ReadRtcSsrValue+0x3c>)
 8002e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002e56:	e005      	b.n	8002e64 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002e5c:	4b07      	ldr	r3, [pc, #28]	@ (8002e7c <ReadRtcSsrValue+0x3c>)
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d1f5      	bne.n	8002e58 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002e6c:	683b      	ldr	r3, [r7, #0]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40002800 	.word	0x40002800

08002e80 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	460a      	mov	r2, r1
 8002e8a:	71fb      	strb	r3, [r7, #7]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002e90:	79ba      	ldrb	r2, [r7, #6]
 8002e92:	491d      	ldr	r1, [pc, #116]	@ (8002f08 <LinkTimerAfter+0x88>)
 8002e94:	4613      	mov	r3, r2
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	4413      	add	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	440b      	add	r3, r1
 8002e9e:	3315      	adds	r3, #21
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2b06      	cmp	r3, #6
 8002ea8:	d009      	beq.n	8002ebe <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002eaa:	7bfa      	ldrb	r2, [r7, #15]
 8002eac:	4916      	ldr	r1, [pc, #88]	@ (8002f08 <LinkTimerAfter+0x88>)
 8002eae:	4613      	mov	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3314      	adds	r3, #20
 8002eba:	79fa      	ldrb	r2, [r7, #7]
 8002ebc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002ebe:	79fa      	ldrb	r2, [r7, #7]
 8002ec0:	4911      	ldr	r1, [pc, #68]	@ (8002f08 <LinkTimerAfter+0x88>)
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	3315      	adds	r3, #21
 8002ece:	7bfa      	ldrb	r2, [r7, #15]
 8002ed0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002ed2:	79fa      	ldrb	r2, [r7, #7]
 8002ed4:	490c      	ldr	r1, [pc, #48]	@ (8002f08 <LinkTimerAfter+0x88>)
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	440b      	add	r3, r1
 8002ee0:	3314      	adds	r3, #20
 8002ee2:	79ba      	ldrb	r2, [r7, #6]
 8002ee4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002ee6:	79ba      	ldrb	r2, [r7, #6]
 8002ee8:	4907      	ldr	r1, [pc, #28]	@ (8002f08 <LinkTimerAfter+0x88>)
 8002eea:	4613      	mov	r3, r2
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4413      	add	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3315      	adds	r3, #21
 8002ef6:	79fa      	ldrb	r2, [r7, #7]
 8002ef8:	701a      	strb	r2, [r3, #0]

  return;
 8002efa:	bf00      	nop
}
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	200002d4 	.word	0x200002d4

08002f0c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	460a      	mov	r2, r1
 8002f16:	71fb      	strb	r3, [r7, #7]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002f1c:	4b29      	ldr	r3, [pc, #164]	@ (8002fc4 <LinkTimerBefore+0xb8>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	79ba      	ldrb	r2, [r7, #6]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d032      	beq.n	8002f8e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002f28:	79ba      	ldrb	r2, [r7, #6]
 8002f2a:	4927      	ldr	r1, [pc, #156]	@ (8002fc8 <LinkTimerBefore+0xbc>)
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	440b      	add	r3, r1
 8002f36:	3314      	adds	r3, #20
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	4922      	ldr	r1, [pc, #136]	@ (8002fc8 <LinkTimerBefore+0xbc>)
 8002f40:	4613      	mov	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4413      	add	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	440b      	add	r3, r1
 8002f4a:	3315      	adds	r3, #21
 8002f4c:	79fa      	ldrb	r2, [r7, #7]
 8002f4e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002f50:	79fa      	ldrb	r2, [r7, #7]
 8002f52:	491d      	ldr	r1, [pc, #116]	@ (8002fc8 <LinkTimerBefore+0xbc>)
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	440b      	add	r3, r1
 8002f5e:	3315      	adds	r3, #21
 8002f60:	79ba      	ldrb	r2, [r7, #6]
 8002f62:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002f64:	79fa      	ldrb	r2, [r7, #7]
 8002f66:	4918      	ldr	r1, [pc, #96]	@ (8002fc8 <LinkTimerBefore+0xbc>)
 8002f68:	4613      	mov	r3, r2
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	4413      	add	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	440b      	add	r3, r1
 8002f72:	3314      	adds	r3, #20
 8002f74:	7bfa      	ldrb	r2, [r7, #15]
 8002f76:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002f78:	79ba      	ldrb	r2, [r7, #6]
 8002f7a:	4913      	ldr	r1, [pc, #76]	@ (8002fc8 <LinkTimerBefore+0xbc>)
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	440b      	add	r3, r1
 8002f86:	3314      	adds	r3, #20
 8002f88:	79fa      	ldrb	r2, [r7, #7]
 8002f8a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002f8c:	e014      	b.n	8002fb8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002f8e:	79fa      	ldrb	r2, [r7, #7]
 8002f90:	490d      	ldr	r1, [pc, #52]	@ (8002fc8 <LinkTimerBefore+0xbc>)
 8002f92:	4613      	mov	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	440b      	add	r3, r1
 8002f9c:	3315      	adds	r3, #21
 8002f9e:	79ba      	ldrb	r2, [r7, #6]
 8002fa0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002fa2:	79ba      	ldrb	r2, [r7, #6]
 8002fa4:	4908      	ldr	r1, [pc, #32]	@ (8002fc8 <LinkTimerBefore+0xbc>)
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	440b      	add	r3, r1
 8002fb0:	3314      	adds	r3, #20
 8002fb2:	79fa      	ldrb	r2, [r7, #7]
 8002fb4:	701a      	strb	r2, [r3, #0]
  return;
 8002fb6:	bf00      	nop
}
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20000364 	.word	0x20000364
 8002fc8:	200002d4 	.word	0x200002d4

08002fcc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002fd6:	4b4e      	ldr	r3, [pc, #312]	@ (8003110 <linkTimer+0x144>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b06      	cmp	r3, #6
 8002fde:	d118      	bne.n	8003012 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002fe0:	4b4b      	ldr	r3, [pc, #300]	@ (8003110 <linkTimer+0x144>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4b4b      	ldr	r3, [pc, #300]	@ (8003114 <linkTimer+0x148>)
 8002fe8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002fea:	4a49      	ldr	r2, [pc, #292]	@ (8003110 <linkTimer+0x144>)
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002ff0:	79fa      	ldrb	r2, [r7, #7]
 8002ff2:	4949      	ldr	r1, [pc, #292]	@ (8003118 <linkTimer+0x14c>)
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3315      	adds	r3, #21
 8003000:	2206      	movs	r2, #6
 8003002:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003004:	4b45      	ldr	r3, [pc, #276]	@ (800311c <linkTimer+0x150>)
 8003006:	f04f 32ff 	mov.w	r2, #4294967295
 800300a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	81fb      	strh	r3, [r7, #14]
 8003010:	e078      	b.n	8003104 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8003012:	f000 f909 	bl	8003228 <ReturnTimeElapsed>
 8003016:	4603      	mov	r3, r0
 8003018:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800301a:	79fa      	ldrb	r2, [r7, #7]
 800301c:	493e      	ldr	r1, [pc, #248]	@ (8003118 <linkTimer+0x14c>)
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	440b      	add	r3, r1
 8003028:	3308      	adds	r3, #8
 800302a:	6819      	ldr	r1, [r3, #0]
 800302c:	89fb      	ldrh	r3, [r7, #14]
 800302e:	79fa      	ldrb	r2, [r7, #7]
 8003030:	4419      	add	r1, r3
 8003032:	4839      	ldr	r0, [pc, #228]	@ (8003118 <linkTimer+0x14c>)
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4403      	add	r3, r0
 800303e:	3308      	adds	r3, #8
 8003040:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8003042:	79fa      	ldrb	r2, [r7, #7]
 8003044:	4934      	ldr	r1, [pc, #208]	@ (8003118 <linkTimer+0x14c>)
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	440b      	add	r3, r1
 8003050:	3308      	adds	r3, #8
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8003056:	4b2e      	ldr	r3, [pc, #184]	@ (8003110 <linkTimer+0x144>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	4619      	mov	r1, r3
 800305e:	4a2e      	ldr	r2, [pc, #184]	@ (8003118 <linkTimer+0x14c>)
 8003060:	460b      	mov	r3, r1
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	440b      	add	r3, r1
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	3308      	adds	r3, #8
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	429a      	cmp	r2, r3
 8003072:	d337      	bcc.n	80030e4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8003074:	4b26      	ldr	r3, [pc, #152]	@ (8003110 <linkTimer+0x144>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800307a:	7b7a      	ldrb	r2, [r7, #13]
 800307c:	4926      	ldr	r1, [pc, #152]	@ (8003118 <linkTimer+0x14c>)
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	440b      	add	r3, r1
 8003088:	3315      	adds	r3, #21
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800308e:	e013      	b.n	80030b8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8003090:	7b7a      	ldrb	r2, [r7, #13]
 8003092:	4921      	ldr	r1, [pc, #132]	@ (8003118 <linkTimer+0x14c>)
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	440b      	add	r3, r1
 800309e:	3315      	adds	r3, #21
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80030a4:	7b7a      	ldrb	r2, [r7, #13]
 80030a6:	491c      	ldr	r1, [pc, #112]	@ (8003118 <linkTimer+0x14c>)
 80030a8:	4613      	mov	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	440b      	add	r3, r1
 80030b2:	3315      	adds	r3, #21
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80030b8:	7b3b      	ldrb	r3, [r7, #12]
 80030ba:	2b06      	cmp	r3, #6
 80030bc:	d00b      	beq.n	80030d6 <linkTimer+0x10a>
 80030be:	7b3a      	ldrb	r2, [r7, #12]
 80030c0:	4915      	ldr	r1, [pc, #84]	@ (8003118 <linkTimer+0x14c>)
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	440b      	add	r3, r1
 80030cc:	3308      	adds	r3, #8
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d2dc      	bcs.n	8003090 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80030d6:	7b7a      	ldrb	r2, [r7, #13]
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fecf 	bl	8002e80 <LinkTimerAfter>
 80030e2:	e00f      	b.n	8003104 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80030e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003110 <linkTimer+0x144>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	4611      	mov	r1, r2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff ff0c 	bl	8002f0c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80030f4:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <linkTimer+0x144>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4b06      	ldr	r3, [pc, #24]	@ (8003114 <linkTimer+0x148>)
 80030fc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80030fe:	4a04      	ldr	r2, [pc, #16]	@ (8003110 <linkTimer+0x144>)
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8003104:	89fb      	ldrh	r3, [r7, #14]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000364 	.word	0x20000364
 8003114:	20000365 	.word	0x20000365
 8003118:	200002d4 	.word	0x200002d4
 800311c:	20000368 	.word	0x20000368

08003120 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	460a      	mov	r2, r1
 800312a:	71fb      	strb	r3, [r7, #7]
 800312c:	4613      	mov	r3, r2
 800312e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8003130:	4b39      	ldr	r3, [pc, #228]	@ (8003218 <UnlinkTimer+0xf8>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	79fa      	ldrb	r2, [r7, #7]
 8003138:	429a      	cmp	r2, r3
 800313a:	d111      	bne.n	8003160 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800313c:	4b36      	ldr	r3, [pc, #216]	@ (8003218 <UnlinkTimer+0xf8>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4b36      	ldr	r3, [pc, #216]	@ (800321c <UnlinkTimer+0xfc>)
 8003144:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8003146:	79fa      	ldrb	r2, [r7, #7]
 8003148:	4935      	ldr	r1, [pc, #212]	@ (8003220 <UnlinkTimer+0x100>)
 800314a:	4613      	mov	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4413      	add	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	440b      	add	r3, r1
 8003154:	3315      	adds	r3, #21
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4b2f      	ldr	r3, [pc, #188]	@ (8003218 <UnlinkTimer+0xf8>)
 800315c:	701a      	strb	r2, [r3, #0]
 800315e:	e03e      	b.n	80031de <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8003160:	79fa      	ldrb	r2, [r7, #7]
 8003162:	492f      	ldr	r1, [pc, #188]	@ (8003220 <UnlinkTimer+0x100>)
 8003164:	4613      	mov	r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	440b      	add	r3, r1
 800316e:	3314      	adds	r3, #20
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8003174:	79fa      	ldrb	r2, [r7, #7]
 8003176:	492a      	ldr	r1, [pc, #168]	@ (8003220 <UnlinkTimer+0x100>)
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	440b      	add	r3, r1
 8003182:	3315      	adds	r3, #21
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8003188:	79f9      	ldrb	r1, [r7, #7]
 800318a:	7bfa      	ldrb	r2, [r7, #15]
 800318c:	4824      	ldr	r0, [pc, #144]	@ (8003220 <UnlinkTimer+0x100>)
 800318e:	460b      	mov	r3, r1
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	440b      	add	r3, r1
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4403      	add	r3, r0
 8003198:	3315      	adds	r3, #21
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	b2d8      	uxtb	r0, r3
 800319e:	4920      	ldr	r1, [pc, #128]	@ (8003220 <UnlinkTimer+0x100>)
 80031a0:	4613      	mov	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	440b      	add	r3, r1
 80031aa:	3315      	adds	r3, #21
 80031ac:	4602      	mov	r2, r0
 80031ae:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80031b0:	7bbb      	ldrb	r3, [r7, #14]
 80031b2:	2b06      	cmp	r3, #6
 80031b4:	d013      	beq.n	80031de <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80031b6:	79f9      	ldrb	r1, [r7, #7]
 80031b8:	7bba      	ldrb	r2, [r7, #14]
 80031ba:	4819      	ldr	r0, [pc, #100]	@ (8003220 <UnlinkTimer+0x100>)
 80031bc:	460b      	mov	r3, r1
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	440b      	add	r3, r1
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4403      	add	r3, r0
 80031c6:	3314      	adds	r3, #20
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	b2d8      	uxtb	r0, r3
 80031cc:	4914      	ldr	r1, [pc, #80]	@ (8003220 <UnlinkTimer+0x100>)
 80031ce:	4613      	mov	r3, r2
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	4413      	add	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	440b      	add	r3, r1
 80031d8:	3314      	adds	r3, #20
 80031da:	4602      	mov	r2, r0
 80031dc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80031de:	79fa      	ldrb	r2, [r7, #7]
 80031e0:	490f      	ldr	r1, [pc, #60]	@ (8003220 <UnlinkTimer+0x100>)
 80031e2:	4613      	mov	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	440b      	add	r3, r1
 80031ec:	330c      	adds	r3, #12
 80031ee:	2201      	movs	r2, #1
 80031f0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80031f2:	4b09      	ldr	r3, [pc, #36]	@ (8003218 <UnlinkTimer+0xf8>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b06      	cmp	r3, #6
 80031fa:	d107      	bne.n	800320c <UnlinkTimer+0xec>
 80031fc:	79bb      	ldrb	r3, [r7, #6]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d104      	bne.n	800320c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003202:	4b08      	ldr	r3, [pc, #32]	@ (8003224 <UnlinkTimer+0x104>)
 8003204:	f04f 32ff 	mov.w	r2, #4294967295
 8003208:	601a      	str	r2, [r3, #0]
  }

  return;
 800320a:	bf00      	nop
 800320c:	bf00      	nop
}
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	20000364 	.word	0x20000364
 800321c:	20000365 	.word	0x20000365
 8003220:	200002d4 	.word	0x200002d4
 8003224:	20000368 	.word	0x20000368

08003228 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800322e:	4b1a      	ldr	r3, [pc, #104]	@ (8003298 <ReturnTimeElapsed+0x70>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003236:	d026      	beq.n	8003286 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8003238:	f7ff fe02 	bl	8002e40 <ReadRtcSsrValue>
 800323c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800323e:	4b16      	ldr	r3, [pc, #88]	@ (8003298 <ReturnTimeElapsed+0x70>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	d805      	bhi.n	8003254 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8003248:	4b13      	ldr	r3, [pc, #76]	@ (8003298 <ReturnTimeElapsed+0x70>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	e00a      	b.n	800326a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8003254:	4b11      	ldr	r3, [pc, #68]	@ (800329c <ReturnTimeElapsed+0x74>)
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	461a      	mov	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8003260:	4b0d      	ldr	r3, [pc, #52]	@ (8003298 <ReturnTimeElapsed+0x70>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	4413      	add	r3, r2
 8003268:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800326a:	4b0d      	ldr	r3, [pc, #52]	@ (80032a0 <ReturnTimeElapsed+0x78>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	fb02 f303 	mul.w	r3, r2, r3
 8003276:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8003278:	4b0a      	ldr	r3, [pc, #40]	@ (80032a4 <ReturnTimeElapsed+0x7c>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	40d3      	lsrs	r3, r2
 8003282:	607b      	str	r3, [r7, #4]
 8003284:	e001      	b.n	800328a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	b29b      	uxth	r3, r3
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000368 	.word	0x20000368
 800329c:	20000370 	.word	0x20000370
 80032a0:	2000036e 	.word	0x2000036e
 80032a4:	2000036d 	.word	0x2000036d

080032a8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80032b2:	88fb      	ldrh	r3, [r7, #6]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d108      	bne.n	80032ca <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80032b8:	f7ff fdc2 	bl	8002e40 <ReadRtcSsrValue>
 80032bc:	4603      	mov	r3, r0
 80032be:	4a21      	ldr	r2, [pc, #132]	@ (8003344 <RestartWakeupCounter+0x9c>)
 80032c0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80032c2:	2003      	movs	r0, #3
 80032c4:	f001 fa99 	bl	80047fa <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80032c8:	e039      	b.n	800333e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d803      	bhi.n	80032d8 <RestartWakeupCounter+0x30>
 80032d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003348 <RestartWakeupCounter+0xa0>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d002      	beq.n	80032de <RestartWakeupCounter+0x36>
      Value -= 1;
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	3b01      	subs	r3, #1
 80032dc:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80032de:	bf00      	nop
 80032e0:	4b1a      	ldr	r3, [pc, #104]	@ (800334c <RestartWakeupCounter+0xa4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f8      	beq.n	80032e0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80032ee:	4b17      	ldr	r3, [pc, #92]	@ (800334c <RestartWakeupCounter+0xa4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4b15      	ldr	r3, [pc, #84]	@ (800334c <RestartWakeupCounter+0xa4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80032fe:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003300:	4b13      	ldr	r3, [pc, #76]	@ (8003350 <RestartWakeupCounter+0xa8>)
 8003302:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003306:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003308:	2003      	movs	r0, #3
 800330a:	f001 fa84 	bl	8004816 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800330e:	4b11      	ldr	r3, [pc, #68]	@ (8003354 <RestartWakeupCounter+0xac>)
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	0c1b      	lsrs	r3, r3, #16
 8003314:	041b      	lsls	r3, r3, #16
 8003316:	88fa      	ldrh	r2, [r7, #6]
 8003318:	490e      	ldr	r1, [pc, #56]	@ (8003354 <RestartWakeupCounter+0xac>)
 800331a:	4313      	orrs	r3, r2
 800331c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800331e:	f7ff fd8f 	bl	8002e40 <ReadRtcSsrValue>
 8003322:	4603      	mov	r3, r0
 8003324:	4a07      	ldr	r2, [pc, #28]	@ (8003344 <RestartWakeupCounter+0x9c>)
 8003326:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8003328:	4b08      	ldr	r3, [pc, #32]	@ (800334c <RestartWakeupCounter+0xa4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	4b07      	ldr	r3, [pc, #28]	@ (800334c <RestartWakeupCounter+0xa4>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003336:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003338:	f3af 8000 	nop.w
  return ;
 800333c:	bf00      	nop
}
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20000368 	.word	0x20000368
 8003348:	2000036d 	.word	0x2000036d
 800334c:	200003b0 	.word	0x200003b0
 8003350:	58000800 	.word	0x58000800
 8003354:	40002800 	.word	0x40002800

08003358 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800335e:	4b45      	ldr	r3, [pc, #276]	@ (8003474 <RescheduleTimerList+0x11c>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800336a:	d107      	bne.n	800337c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800336c:	bf00      	nop
 800336e:	4b42      	ldr	r3, [pc, #264]	@ (8003478 <RescheduleTimerList+0x120>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f8      	bne.n	800336e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800337c:	4b3e      	ldr	r3, [pc, #248]	@ (8003478 <RescheduleTimerList+0x120>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	4b3d      	ldr	r3, [pc, #244]	@ (8003478 <RescheduleTimerList+0x120>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800338a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800338c:	4b3b      	ldr	r3, [pc, #236]	@ (800347c <RescheduleTimerList+0x124>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8003392:	7bfa      	ldrb	r2, [r7, #15]
 8003394:	493a      	ldr	r1, [pc, #232]	@ (8003480 <RescheduleTimerList+0x128>)
 8003396:	4613      	mov	r3, r2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4413      	add	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	440b      	add	r3, r1
 80033a0:	3308      	adds	r3, #8
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80033a6:	f7ff ff3f 	bl	8003228 <ReturnTimeElapsed>
 80033aa:	4603      	mov	r3, r0
 80033ac:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d205      	bcs.n	80033c2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80033ba:	4b32      	ldr	r3, [pc, #200]	@ (8003484 <RescheduleTimerList+0x12c>)
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
 80033c0:	e04d      	b.n	800345e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	4a30      	ldr	r2, [pc, #192]	@ (8003488 <RescheduleTimerList+0x130>)
 80033c6:	8812      	ldrh	r2, [r2, #0]
 80033c8:	b292      	uxth	r2, r2
 80033ca:	4413      	add	r3, r2
 80033cc:	461a      	mov	r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d906      	bls.n	80033e2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80033d4:	4b2c      	ldr	r3, [pc, #176]	@ (8003488 <RescheduleTimerList+0x130>)
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80033da:	4b2a      	ldr	r3, [pc, #168]	@ (8003484 <RescheduleTimerList+0x12c>)
 80033dc:	2200      	movs	r2, #0
 80033de:	701a      	strb	r2, [r3, #0]
 80033e0:	e03d      	b.n	800345e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80033ec:	4b25      	ldr	r3, [pc, #148]	@ (8003484 <RescheduleTimerList+0x12c>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80033f2:	e034      	b.n	800345e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	4922      	ldr	r1, [pc, #136]	@ (8003480 <RescheduleTimerList+0x128>)
 80033f8:	4613      	mov	r3, r2
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	4413      	add	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	440b      	add	r3, r1
 8003402:	3308      	adds	r3, #8
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	429a      	cmp	r2, r3
 800340a:	d20a      	bcs.n	8003422 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800340c:	7bfa      	ldrb	r2, [r7, #15]
 800340e:	491c      	ldr	r1, [pc, #112]	@ (8003480 <RescheduleTimerList+0x128>)
 8003410:	4613      	mov	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	4413      	add	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	440b      	add	r3, r1
 800341a:	3308      	adds	r3, #8
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	e013      	b.n	800344a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8003422:	7bfa      	ldrb	r2, [r7, #15]
 8003424:	4916      	ldr	r1, [pc, #88]	@ (8003480 <RescheduleTimerList+0x128>)
 8003426:	4613      	mov	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	4413      	add	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	440b      	add	r3, r1
 8003430:	3308      	adds	r3, #8
 8003432:	6819      	ldr	r1, [r3, #0]
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	7bfa      	ldrb	r2, [r7, #15]
 8003438:	1ac9      	subs	r1, r1, r3
 800343a:	4811      	ldr	r0, [pc, #68]	@ (8003480 <RescheduleTimerList+0x128>)
 800343c:	4613      	mov	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4403      	add	r3, r0
 8003446:	3308      	adds	r3, #8
 8003448:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800344a:	7bfa      	ldrb	r2, [r7, #15]
 800344c:	490c      	ldr	r1, [pc, #48]	@ (8003480 <RescheduleTimerList+0x128>)
 800344e:	4613      	mov	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	440b      	add	r3, r1
 8003458:	3315      	adds	r3, #21
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	2b06      	cmp	r3, #6
 8003462:	d1c7      	bne.n	80033f4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8003464:	89bb      	ldrh	r3, [r7, #12]
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff ff1e 	bl	80032a8 <RestartWakeupCounter>

  return ;
 800346c:	bf00      	nop
}
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40002800 	.word	0x40002800
 8003478:	200003b0 	.word	0x200003b0
 800347c:	20000364 	.word	0x20000364
 8003480:	200002d4 	.word	0x200002d4
 8003484:	2000036c 	.word	0x2000036c
 8003488:	20000372 	.word	0x20000372

0800348c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	@ 0x28
 8003490:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003492:	f3ef 8310 	mrs	r3, PRIMASK
 8003496:	617b      	str	r3, [r7, #20]
  return(result);
 8003498:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800349a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800349c:	b672      	cpsid	i
}
 800349e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80034a0:	4b59      	ldr	r3, [pc, #356]	@ (8003608 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	22ca      	movs	r2, #202	@ 0xca
 80034a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80034a8:	4b57      	ldr	r3, [pc, #348]	@ (8003608 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2253      	movs	r2, #83	@ 0x53
 80034ae:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80034b0:	4b55      	ldr	r3, [pc, #340]	@ (8003608 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	4b54      	ldr	r3, [pc, #336]	@ (8003608 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034be:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80034c0:	4b52      	ldr	r3, [pc, #328]	@ (800360c <HW_TS_RTC_Wakeup_Handler+0x180>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80034c8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80034cc:	4950      	ldr	r1, [pc, #320]	@ (8003610 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80034ce:	4613      	mov	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	440b      	add	r3, r1
 80034d8:	330c      	adds	r3, #12
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d16e      	bne.n	80035c0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80034e2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80034e6:	494a      	ldr	r1, [pc, #296]	@ (8003610 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80034e8:	4613      	mov	r3, r2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4413      	add	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	440b      	add	r3, r1
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80034f6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80034fa:	4945      	ldr	r1, [pc, #276]	@ (8003610 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80034fc:	4613      	mov	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	4413      	add	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	440b      	add	r3, r1
 8003506:	3310      	adds	r3, #16
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800350c:	4b41      	ldr	r3, [pc, #260]	@ (8003614 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d04c      	beq.n	80035b0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8003516:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800351a:	493d      	ldr	r1, [pc, #244]	@ (8003610 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800351c:	4613      	mov	r3, r2
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	4413      	add	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	440b      	add	r3, r1
 8003526:	330d      	adds	r3, #13
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	d124      	bne.n	800357a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8003530:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003534:	2101      	movs	r1, #1
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fdf2 	bl	8003120 <UnlinkTimer>
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f383 8810 	msr	PRIMASK, r3
}
 8003546:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8003548:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800354c:	4930      	ldr	r1, [pc, #192]	@ (8003610 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800354e:	4613      	mov	r3, r2
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	4413      	add	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	440b      	add	r3, r1
 8003558:	3304      	adds	r3, #4
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003560:	4611      	mov	r1, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f000 f9b8 	bl	80038d8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003568:	4b27      	ldr	r3, [pc, #156]	@ (8003608 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	22ca      	movs	r2, #202	@ 0xca
 800356e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003570:	4b25      	ldr	r3, [pc, #148]	@ (8003608 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2253      	movs	r2, #83	@ 0x53
 8003576:	625a      	str	r2, [r3, #36]	@ 0x24
 8003578:	e012      	b.n	80035a0 <HW_TS_RTC_Wakeup_Handler+0x114>
 800357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f383 8810 	msr	PRIMASK, r3
}
 8003584:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8003586:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f920 	bl	80037d0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003590:	4b1d      	ldr	r3, [pc, #116]	@ (8003608 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	22ca      	movs	r2, #202	@ 0xca
 8003596:	625a      	str	r2, [r3, #36]	@ 0x24
 8003598:	4b1b      	ldr	r3, [pc, #108]	@ (8003608 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2253      	movs	r2, #83	@ 0x53
 800359e:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80035a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	4619      	mov	r1, r3
 80035a8:	69b8      	ldr	r0, [r7, #24]
 80035aa:	f000 fa1b 	bl	80039e4 <HW_TS_RTC_Int_AppNot>
 80035ae:	e022      	b.n	80035f6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80035b0:	f7ff fed2 	bl	8003358 <RescheduleTimerList>
 80035b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f383 8810 	msr	PRIMASK, r3
}
 80035be:	e01a      	b.n	80035f6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80035c0:	bf00      	nop
 80035c2:	4b11      	ldr	r3, [pc, #68]	@ (8003608 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f8      	beq.n	80035c2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80035d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003608 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003608 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80035e0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80035e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003618 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80035e4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f383 8810 	msr	PRIMASK, r3
}
 80035f4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80035f6:	4b04      	ldr	r3, [pc, #16]	@ (8003608 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	22ff      	movs	r2, #255	@ 0xff
 80035fc:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80035fe:	bf00      	nop
}
 8003600:	3728      	adds	r7, #40	@ 0x28
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	200003b0 	.word	0x200003b0
 800360c:	20000364 	.word	0x20000364
 8003610:	200002d4 	.word	0x200002d4
 8003614:	2000036c 	.word	0x2000036c
 8003618:	58000800 	.word	0x58000800

0800361c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	6039      	str	r1, [r7, #0]
 8003626:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003628:	4b5e      	ldr	r3, [pc, #376]	@ (80037a4 <HW_TS_Init+0x188>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	22ca      	movs	r2, #202	@ 0xca
 800362e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003630:	4b5c      	ldr	r3, [pc, #368]	@ (80037a4 <HW_TS_Init+0x188>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2253      	movs	r2, #83	@ 0x53
 8003636:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003638:	4b5b      	ldr	r3, [pc, #364]	@ (80037a8 <HW_TS_Init+0x18c>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	4a5a      	ldr	r2, [pc, #360]	@ (80037a8 <HW_TS_Init+0x18c>)
 800363e:	f043 0320 	orr.w	r3, r3, #32
 8003642:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8003644:	4b58      	ldr	r3, [pc, #352]	@ (80037a8 <HW_TS_Init+0x18c>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f1c3 0304 	rsb	r3, r3, #4
 8003654:	b2da      	uxtb	r2, r3
 8003656:	4b55      	ldr	r3, [pc, #340]	@ (80037ac <HW_TS_Init+0x190>)
 8003658:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800365a:	4b53      	ldr	r3, [pc, #332]	@ (80037a8 <HW_TS_Init+0x18c>)
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003662:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8003666:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	fa92 f2a2 	rbit	r2, r2
 800366e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	2a00      	cmp	r2, #0
 8003678:	d101      	bne.n	800367e <HW_TS_Init+0x62>
  {
    return 32U;
 800367a:	2220      	movs	r2, #32
 800367c:	e003      	b.n	8003686 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	fab2 f282 	clz	r2, r2
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	40d3      	lsrs	r3, r2
 8003688:	b2db      	uxtb	r3, r3
 800368a:	3301      	adds	r3, #1
 800368c:	b2da      	uxtb	r2, r3
 800368e:	4b48      	ldr	r3, [pc, #288]	@ (80037b0 <HW_TS_Init+0x194>)
 8003690:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8003692:	4b45      	ldr	r3, [pc, #276]	@ (80037a8 <HW_TS_Init+0x18c>)
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	b29b      	uxth	r3, r3
 8003698:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800369c:	b29b      	uxth	r3, r3
 800369e:	3301      	adds	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	4b44      	ldr	r3, [pc, #272]	@ (80037b4 <HW_TS_Init+0x198>)
 80036a4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80036a6:	4b43      	ldr	r3, [pc, #268]	@ (80037b4 <HW_TS_Init+0x198>)
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	4a40      	ldr	r2, [pc, #256]	@ (80037b0 <HW_TS_Init+0x194>)
 80036ae:	7812      	ldrb	r2, [r2, #0]
 80036b0:	fb02 f303 	mul.w	r3, r2, r3
 80036b4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80036b8:	4a3c      	ldr	r2, [pc, #240]	@ (80037ac <HW_TS_Init+0x190>)
 80036ba:	7812      	ldrb	r2, [r2, #0]
 80036bc:	40d3      	lsrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d904      	bls.n	80036d4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80036ca:	4b3b      	ldr	r3, [pc, #236]	@ (80037b8 <HW_TS_Init+0x19c>)
 80036cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80036d0:	801a      	strh	r2, [r3, #0]
 80036d2:	e003      	b.n	80036dc <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	4b37      	ldr	r3, [pc, #220]	@ (80037b8 <HW_TS_Init+0x19c>)
 80036da:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80036dc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80036e0:	f7ff fb9c 	bl	8002e1c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80036e4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80036e8:	f7ff fb84 	bl	8002df4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d13d      	bne.n	800376e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80036f2:	4b32      	ldr	r3, [pc, #200]	@ (80037bc <HW_TS_Init+0x1a0>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80036f8:	4b31      	ldr	r3, [pc, #196]	@ (80037c0 <HW_TS_Init+0x1a4>)
 80036fa:	f04f 32ff 	mov.w	r2, #4294967295
 80036fe:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003700:	2300      	movs	r3, #0
 8003702:	77fb      	strb	r3, [r7, #31]
 8003704:	e00c      	b.n	8003720 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003706:	7ffa      	ldrb	r2, [r7, #31]
 8003708:	492e      	ldr	r1, [pc, #184]	@ (80037c4 <HW_TS_Init+0x1a8>)
 800370a:	4613      	mov	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	4413      	add	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	440b      	add	r3, r1
 8003714:	330c      	adds	r3, #12
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800371a:	7ffb      	ldrb	r3, [r7, #31]
 800371c:	3301      	adds	r3, #1
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	7ffb      	ldrb	r3, [r7, #31]
 8003722:	2b05      	cmp	r3, #5
 8003724:	d9ef      	bls.n	8003706 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003726:	4b28      	ldr	r3, [pc, #160]	@ (80037c8 <HW_TS_Init+0x1ac>)
 8003728:	2206      	movs	r2, #6
 800372a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800372c:	4b1d      	ldr	r3, [pc, #116]	@ (80037a4 <HW_TS_Init+0x188>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	4b1c      	ldr	r3, [pc, #112]	@ (80037a4 <HW_TS_Init+0x188>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800373a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800373c:	4b19      	ldr	r3, [pc, #100]	@ (80037a4 <HW_TS_Init+0x188>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	4b17      	ldr	r3, [pc, #92]	@ (80037a4 <HW_TS_Init+0x188>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800374c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800374e:	4b1f      	ldr	r3, [pc, #124]	@ (80037cc <HW_TS_Init+0x1b0>)
 8003750:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003754:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8003756:	2003      	movs	r0, #3
 8003758:	f001 f85d 	bl	8004816 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800375c:	4b11      	ldr	r3, [pc, #68]	@ (80037a4 <HW_TS_Init+0x188>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	4b10      	ldr	r3, [pc, #64]	@ (80037a4 <HW_TS_Init+0x188>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	e009      	b.n	8003782 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800376e:	4b0d      	ldr	r3, [pc, #52]	@ (80037a4 <HW_TS_Init+0x188>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800377c:	2003      	movs	r0, #3
 800377e:	f001 f83c 	bl	80047fa <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003782:	4b08      	ldr	r3, [pc, #32]	@ (80037a4 <HW_TS_Init+0x188>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	22ff      	movs	r2, #255	@ 0xff
 8003788:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800378a:	2200      	movs	r2, #0
 800378c:	2103      	movs	r1, #3
 800378e:	2003      	movs	r0, #3
 8003790:	f000 fff1 	bl	8004776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003794:	2003      	movs	r0, #3
 8003796:	f001 f808 	bl	80047aa <HAL_NVIC_EnableIRQ>

  return;
 800379a:	bf00      	nop
}
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	200003b0 	.word	0x200003b0
 80037a8:	40002800 	.word	0x40002800
 80037ac:	2000036d 	.word	0x2000036d
 80037b0:	2000036e 	.word	0x2000036e
 80037b4:	20000370 	.word	0x20000370
 80037b8:	20000372 	.word	0x20000372
 80037bc:	2000036c 	.word	0x2000036c
 80037c0:	20000368 	.word	0x20000368
 80037c4:	200002d4 	.word	0x200002d4
 80037c8:	20000364 	.word	0x20000364
 80037cc:	58000800 	.word	0x58000800

080037d0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037da:	f3ef 8310 	mrs	r3, PRIMASK
 80037de:	60fb      	str	r3, [r7, #12]
  return(result);
 80037e0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80037e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80037e4:	b672      	cpsid	i
}
 80037e6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80037e8:	2003      	movs	r0, #3
 80037ea:	f000 ffec 	bl	80047c6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80037ee:	4b34      	ldr	r3, [pc, #208]	@ (80038c0 <HW_TS_Stop+0xf0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	22ca      	movs	r2, #202	@ 0xca
 80037f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80037f6:	4b32      	ldr	r3, [pc, #200]	@ (80038c0 <HW_TS_Stop+0xf0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2253      	movs	r2, #83	@ 0x53
 80037fc:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80037fe:	79fa      	ldrb	r2, [r7, #7]
 8003800:	4930      	ldr	r1, [pc, #192]	@ (80038c4 <HW_TS_Stop+0xf4>)
 8003802:	4613      	mov	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	440b      	add	r3, r1
 800380c:	330c      	adds	r3, #12
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d142      	bne.n	800389c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	2100      	movs	r1, #0
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fc80 	bl	8003120 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8003820:	4b29      	ldr	r3, [pc, #164]	@ (80038c8 <HW_TS_Stop+0xf8>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	2b06      	cmp	r3, #6
 800382a:	d12f      	bne.n	800388c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800382c:	4b27      	ldr	r3, [pc, #156]	@ (80038cc <HW_TS_Stop+0xfc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003838:	d107      	bne.n	800384a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800383a:	bf00      	nop
 800383c:	4b20      	ldr	r3, [pc, #128]	@ (80038c0 <HW_TS_Stop+0xf0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f8      	bne.n	800383c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800384a:	4b1d      	ldr	r3, [pc, #116]	@ (80038c0 <HW_TS_Stop+0xf0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	4b1b      	ldr	r3, [pc, #108]	@ (80038c0 <HW_TS_Stop+0xf0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003858:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800385a:	bf00      	nop
 800385c:	4b18      	ldr	r3, [pc, #96]	@ (80038c0 <HW_TS_Stop+0xf0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f8      	beq.n	800385c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800386a:	4b15      	ldr	r3, [pc, #84]	@ (80038c0 <HW_TS_Stop+0xf0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4b13      	ldr	r3, [pc, #76]	@ (80038c0 <HW_TS_Stop+0xf0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800387a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800387c:	4b14      	ldr	r3, [pc, #80]	@ (80038d0 <HW_TS_Stop+0x100>)
 800387e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003882:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003884:	2003      	movs	r0, #3
 8003886:	f000 ffc6 	bl	8004816 <HAL_NVIC_ClearPendingIRQ>
 800388a:	e007      	b.n	800389c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800388c:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <HW_TS_Stop+0x104>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	7cfa      	ldrb	r2, [r7, #19]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8003898:	f7ff fd5e 	bl	8003358 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800389c:	4b08      	ldr	r3, [pc, #32]	@ (80038c0 <HW_TS_Stop+0xf0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	22ff      	movs	r2, #255	@ 0xff
 80038a2:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80038a4:	2003      	movs	r0, #3
 80038a6:	f000 ff80 	bl	80047aa <HAL_NVIC_EnableIRQ>
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f383 8810 	msr	PRIMASK, r3
}
 80038b4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80038b6:	bf00      	nop
}
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200003b0 	.word	0x200003b0
 80038c4:	200002d4 	.word	0x200002d4
 80038c8:	20000364 	.word	0x20000364
 80038cc:	40002800 	.word	0x40002800
 80038d0:	58000800 	.word	0x58000800
 80038d4:	20000365 	.word	0x20000365

080038d8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	6039      	str	r1, [r7, #0]
 80038e2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80038e4:	79fa      	ldrb	r2, [r7, #7]
 80038e6:	493b      	ldr	r1, [pc, #236]	@ (80039d4 <HW_TS_Start+0xfc>)
 80038e8:	4613      	mov	r3, r2
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4413      	add	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	440b      	add	r3, r1
 80038f2:	330c      	adds	r3, #12
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d103      	bne.n	8003904 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff ff66 	bl	80037d0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003904:	f3ef 8310 	mrs	r3, PRIMASK
 8003908:	60fb      	str	r3, [r7, #12]
  return(result);
 800390a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800390c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800390e:	b672      	cpsid	i
}
 8003910:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003912:	2003      	movs	r0, #3
 8003914:	f000 ff57 	bl	80047c6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003918:	4b2f      	ldr	r3, [pc, #188]	@ (80039d8 <HW_TS_Start+0x100>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	22ca      	movs	r2, #202	@ 0xca
 800391e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003920:	4b2d      	ldr	r3, [pc, #180]	@ (80039d8 <HW_TS_Start+0x100>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2253      	movs	r2, #83	@ 0x53
 8003926:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003928:	79fa      	ldrb	r2, [r7, #7]
 800392a:	492a      	ldr	r1, [pc, #168]	@ (80039d4 <HW_TS_Start+0xfc>)
 800392c:	4613      	mov	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4413      	add	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	440b      	add	r3, r1
 8003936:	330c      	adds	r3, #12
 8003938:	2202      	movs	r2, #2
 800393a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800393c:	79fa      	ldrb	r2, [r7, #7]
 800393e:	4925      	ldr	r1, [pc, #148]	@ (80039d4 <HW_TS_Start+0xfc>)
 8003940:	4613      	mov	r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	4413      	add	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	440b      	add	r3, r1
 800394a:	3308      	adds	r3, #8
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003950:	79fa      	ldrb	r2, [r7, #7]
 8003952:	4920      	ldr	r1, [pc, #128]	@ (80039d4 <HW_TS_Start+0xfc>)
 8003954:	4613      	mov	r3, r2
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	4413      	add	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	440b      	add	r3, r1
 800395e:	3304      	adds	r3, #4
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff fb30 	bl	8002fcc <linkTimer>
 800396c:	4603      	mov	r3, r0
 800396e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003970:	4b1a      	ldr	r3, [pc, #104]	@ (80039dc <HW_TS_Start+0x104>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003976:	4b1a      	ldr	r3, [pc, #104]	@ (80039e0 <HW_TS_Start+0x108>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	7c7a      	ldrb	r2, [r7, #17]
 800397e:	429a      	cmp	r2, r3
 8003980:	d002      	beq.n	8003988 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8003982:	f7ff fce9 	bl	8003358 <RescheduleTimerList>
 8003986:	e013      	b.n	80039b0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003988:	79fa      	ldrb	r2, [r7, #7]
 800398a:	4912      	ldr	r1, [pc, #72]	@ (80039d4 <HW_TS_Start+0xfc>)
 800398c:	4613      	mov	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4413      	add	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	440b      	add	r3, r1
 8003996:	3308      	adds	r3, #8
 8003998:	6819      	ldr	r1, [r3, #0]
 800399a:	8a7b      	ldrh	r3, [r7, #18]
 800399c:	79fa      	ldrb	r2, [r7, #7]
 800399e:	1ac9      	subs	r1, r1, r3
 80039a0:	480c      	ldr	r0, [pc, #48]	@ (80039d4 <HW_TS_Start+0xfc>)
 80039a2:	4613      	mov	r3, r2
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	4413      	add	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4403      	add	r3, r0
 80039ac:	3308      	adds	r3, #8
 80039ae:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80039b0:	4b09      	ldr	r3, [pc, #36]	@ (80039d8 <HW_TS_Start+0x100>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	22ff      	movs	r2, #255	@ 0xff
 80039b6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80039b8:	2003      	movs	r0, #3
 80039ba:	f000 fef6 	bl	80047aa <HAL_NVIC_EnableIRQ>
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f383 8810 	msr	PRIMASK, r3
}
 80039c8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80039ca:	bf00      	nop
}
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	200002d4 	.word	0x200002d4
 80039d8:	200003b0 	.word	0x200003b0
 80039dc:	20000364 	.word	0x20000364
 80039e0:	20000365 	.word	0x20000365

080039e4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	460b      	mov	r3, r1
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4798      	blx	r3

  return;
 80039f6:	bf00      	nop
}
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <LL_RCC_LSE_SetDriveCapability>:
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a0e:	f023 0218 	bic.w	r2, r3, #24
 8003a12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b085      	sub	sp, #20
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003a42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
    (void)file;
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 0xFFFF);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	4804      	ldr	r0, [pc, #16]	@ (8003a84 <_write+0x28>)
 8003a74:	f003 fd88 	bl	8007588 <HAL_UART_Transmit>
    return len;
 8003a78:	687b      	ldr	r3, [r7, #4]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000438 	.word	0x20000438

08003a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a8c:	f000 fca6 	bl	80043dc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8003a90:	f7fd fd06 	bl	80014a0 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a94:	f000 f814 	bl	8003ac0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003a98:	f000 f874 	bl	8003b84 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8003a9c:	f000 f892 	bl	8003bc4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003aa0:	f000 f96a 	bl	8003d78 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003aa4:	f000 f8de 	bl	8003c64 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003aa8:	f000 f91a 	bl	8003ce0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8003aac:	f000 f8a6 	bl	8003bfc <MX_RTC_Init>
  MX_RF_Init();
 8003ab0:	f000 f89c 	bl	8003bec <MX_RF_Init>
  /* USER CODE BEGIN 2 */
//  acc_example_service (0 , NULL ) ;
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8003ab4:	f7fd fd02 	bl	80014bc <MX_APPE_Init>
  {
//	  HAL_GPIO_TogglePin(SEN_EN5_GPIO_Port,SEN_EN5_Pin);
//	  HAL_Delay(1000);
//	  printf("sFGSSSSSDF\n");
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8003ab8:	f7fd fe52 	bl	8001760 <MX_APPE_Process>
 8003abc:	e7fc      	b.n	8003ab8 <main+0x30>
	...

08003ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b09a      	sub	sp, #104	@ 0x68
 8003ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ac6:	f107 0320 	add.w	r3, r7, #32
 8003aca:	2248      	movs	r2, #72	@ 0x48
 8003acc:	2100      	movs	r1, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f00e fa0a 	bl	8011ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ad4:	1d3b      	adds	r3, r7, #4
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	605a      	str	r2, [r3, #4]
 8003adc:	609a      	str	r2, [r3, #8]
 8003ade:	60da      	str	r2, [r3, #12]
 8003ae0:	611a      	str	r2, [r3, #16]
 8003ae2:	615a      	str	r2, [r3, #20]
 8003ae4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003ae6:	f001 f92d 	bl	8004d44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8003aea:	2010      	movs	r0, #16
 8003aec:	f7ff ff87 	bl	80039fe <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003af0:	4b23      	ldr	r3, [pc, #140]	@ (8003b80 <SystemClock_Config+0xc0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003af8:	4a21      	ldr	r2, [pc, #132]	@ (8003b80 <SystemClock_Config+0xc0>)
 8003afa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	4b1f      	ldr	r3, [pc, #124]	@ (8003b80 <SystemClock_Config+0xc0>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8003b0c:	2327      	movs	r3, #39	@ 0x27
 8003b0e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003b16:	2301      	movs	r3, #1
 8003b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003b20:	2301      	movs	r3, #1
 8003b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b24:	2340      	movs	r3, #64	@ 0x40
 8003b26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8003b2c:	23a0      	movs	r3, #160	@ 0xa0
 8003b2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b34:	f107 0320 	add.w	r3, r7, #32
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f001 fc97 	bl	800546c <HAL_RCC_OscConfig>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003b44:	f000 f98a 	bl	8003e5c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003b48:	236f      	movs	r3, #111	@ 0x6f
 8003b4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b54:	2300      	movs	r3, #0
 8003b56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003b64:	1d3b      	adds	r3, r7, #4
 8003b66:	2101      	movs	r1, #1
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 fff3 	bl	8005b54 <HAL_RCC_ClockConfig>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003b74:	f000 f972 	bl	8003e5c <Error_Handler>
  }
}
 8003b78:	bf00      	nop
 8003b7a:	3768      	adds	r7, #104	@ 0x68
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	58000400 	.word	0x58000400

08003b84 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b094      	sub	sp, #80	@ 0x50
 8003b88:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b8a:	463b      	mov	r3, r7
 8003b8c:	2250      	movs	r2, #80	@ 0x50
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f00e f9a9 	bl	8011ee8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8003b96:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003b9a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003b9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ba0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003baa:	463b      	mov	r3, r7
 8003bac:	4618      	mov	r0, r3
 8003bae:	f002 fc0e 	bl	80063ce <HAL_RCCEx_PeriphCLKConfig>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8003bb8:	f000 f950 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8003bbc:	bf00      	nop
 8003bbe:	3750      	adds	r7, #80	@ 0x50
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8003bc8:	4b06      	ldr	r3, [pc, #24]	@ (8003be4 <MX_IPCC_Init+0x20>)
 8003bca:	4a07      	ldr	r2, [pc, #28]	@ (8003be8 <MX_IPCC_Init+0x24>)
 8003bcc:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8003bce:	4805      	ldr	r0, [pc, #20]	@ (8003be4 <MX_IPCC_Init+0x20>)
 8003bd0:	f001 f832 	bl	8004c38 <HAL_IPCC_Init>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8003bda:	f000 f93f 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000374 	.word	0x20000374
 8003be8:	58000c00 	.word	0x58000c00

08003bec <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
	...

08003bfc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003c00:	4b16      	ldr	r3, [pc, #88]	@ (8003c5c <MX_RTC_Init+0x60>)
 8003c02:	4a17      	ldr	r2, [pc, #92]	@ (8003c60 <MX_RTC_Init+0x64>)
 8003c04:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003c06:	4b15      	ldr	r3, [pc, #84]	@ (8003c5c <MX_RTC_Init+0x60>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003c0c:	4b13      	ldr	r3, [pc, #76]	@ (8003c5c <MX_RTC_Init+0x60>)
 8003c0e:	220f      	movs	r2, #15
 8003c10:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003c12:	4b12      	ldr	r3, [pc, #72]	@ (8003c5c <MX_RTC_Init+0x60>)
 8003c14:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003c18:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003c1a:	4b10      	ldr	r3, [pc, #64]	@ (8003c5c <MX_RTC_Init+0x60>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003c20:	4b0e      	ldr	r3, [pc, #56]	@ (8003c5c <MX_RTC_Init+0x60>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003c26:	4b0d      	ldr	r3, [pc, #52]	@ (8003c5c <MX_RTC_Init+0x60>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c5c <MX_RTC_Init+0x60>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003c32:	480a      	ldr	r0, [pc, #40]	@ (8003c5c <MX_RTC_Init+0x60>)
 8003c34:	f002 fe52 	bl	80068dc <HAL_RTC_Init>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003c3e:	f000 f90d 	bl	8003e5c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003c42:	2200      	movs	r2, #0
 8003c44:	2100      	movs	r1, #0
 8003c46:	4805      	ldr	r0, [pc, #20]	@ (8003c5c <MX_RTC_Init+0x60>)
 8003c48:	f002 ff48 	bl	8006adc <HAL_RTCEx_SetWakeUpTimer_IT>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003c52:	f000 f903 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	200003b0 	.word	0x200003b0
 8003c60:	40002800 	.word	0x40002800

08003c64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003c68:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd8 <MX_SPI1_Init+0x74>)
 8003c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003cdc <MX_SPI1_Init+0x78>)
 8003c6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd8 <MX_SPI1_Init+0x74>)
 8003c70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003c74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c76:	4b18      	ldr	r3, [pc, #96]	@ (8003cd8 <MX_SPI1_Init+0x74>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c7c:	4b16      	ldr	r3, [pc, #88]	@ (8003cd8 <MX_SPI1_Init+0x74>)
 8003c7e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003c82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c84:	4b14      	ldr	r3, [pc, #80]	@ (8003cd8 <MX_SPI1_Init+0x74>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c8a:	4b13      	ldr	r3, [pc, #76]	@ (8003cd8 <MX_SPI1_Init+0x74>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c90:	4b11      	ldr	r3, [pc, #68]	@ (8003cd8 <MX_SPI1_Init+0x74>)
 8003c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003c98:	4b0f      	ldr	r3, [pc, #60]	@ (8003cd8 <MX_SPI1_Init+0x74>)
 8003c9a:	2218      	movs	r2, #24
 8003c9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd8 <MX_SPI1_Init+0x74>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd8 <MX_SPI1_Init+0x74>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003caa:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <MX_SPI1_Init+0x74>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003cb0:	4b09      	ldr	r3, [pc, #36]	@ (8003cd8 <MX_SPI1_Init+0x74>)
 8003cb2:	2207      	movs	r2, #7
 8003cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003cb6:	4b08      	ldr	r3, [pc, #32]	@ (8003cd8 <MX_SPI1_Init+0x74>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003cbc:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <MX_SPI1_Init+0x74>)
 8003cbe:	2208      	movs	r2, #8
 8003cc0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003cc2:	4805      	ldr	r0, [pc, #20]	@ (8003cd8 <MX_SPI1_Init+0x74>)
 8003cc4:	f002 ffc6 	bl	8006c54 <HAL_SPI_Init>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003cce:	f000 f8c5 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003cd2:	bf00      	nop
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	200003d4 	.word	0x200003d4
 8003cdc:	40013000 	.word	0x40013000

08003ce0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ce4:	4b22      	ldr	r3, [pc, #136]	@ (8003d70 <MX_USART1_UART_Init+0x90>)
 8003ce6:	4a23      	ldr	r2, [pc, #140]	@ (8003d74 <MX_USART1_UART_Init+0x94>)
 8003ce8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003cea:	4b21      	ldr	r3, [pc, #132]	@ (8003d70 <MX_USART1_UART_Init+0x90>)
 8003cec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003cf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8003d70 <MX_USART1_UART_Init+0x90>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d70 <MX_USART1_UART_Init+0x90>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8003d70 <MX_USART1_UART_Init+0x90>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d04:	4b1a      	ldr	r3, [pc, #104]	@ (8003d70 <MX_USART1_UART_Init+0x90>)
 8003d06:	220c      	movs	r2, #12
 8003d08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d0a:	4b19      	ldr	r3, [pc, #100]	@ (8003d70 <MX_USART1_UART_Init+0x90>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d10:	4b17      	ldr	r3, [pc, #92]	@ (8003d70 <MX_USART1_UART_Init+0x90>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d16:	4b16      	ldr	r3, [pc, #88]	@ (8003d70 <MX_USART1_UART_Init+0x90>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d1c:	4b14      	ldr	r3, [pc, #80]	@ (8003d70 <MX_USART1_UART_Init+0x90>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d22:	4b13      	ldr	r3, [pc, #76]	@ (8003d70 <MX_USART1_UART_Init+0x90>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d28:	4811      	ldr	r0, [pc, #68]	@ (8003d70 <MX_USART1_UART_Init+0x90>)
 8003d2a:	f003 fbdd 	bl	80074e8 <HAL_UART_Init>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003d34:	f000 f892 	bl	8003e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d38:	2100      	movs	r1, #0
 8003d3a:	480d      	ldr	r0, [pc, #52]	@ (8003d70 <MX_USART1_UART_Init+0x90>)
 8003d3c:	f004 f932 	bl	8007fa4 <HAL_UARTEx_SetTxFifoThreshold>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003d46:	f000 f889 	bl	8003e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4808      	ldr	r0, [pc, #32]	@ (8003d70 <MX_USART1_UART_Init+0x90>)
 8003d4e:	f004 f967 	bl	8008020 <HAL_UARTEx_SetRxFifoThreshold>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003d58:	f000 f880 	bl	8003e5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003d5c:	4804      	ldr	r0, [pc, #16]	@ (8003d70 <MX_USART1_UART_Init+0x90>)
 8003d5e:	f004 f8e8 	bl	8007f32 <HAL_UARTEx_DisableFifoMode>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003d68:	f000 f878 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d6c:	bf00      	nop
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000438 	.word	0x20000438
 8003d74:	40013800 	.word	0x40013800

08003d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7e:	1d3b      	adds	r3, r7, #4
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	60da      	str	r2, [r3, #12]
 8003d8a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d8c:	2004      	movs	r0, #4
 8003d8e:	f7ff fe4c 	bl	8003a2a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d92:	2001      	movs	r0, #1
 8003d94:	f7ff fe49 	bl	8003a2a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d98:	2002      	movs	r0, #2
 8003d9a:	f7ff fe46 	bl	8003a2a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI_SEL2_Pin|SPI_SEL1_Pin|SEN_EN4_Pin|SEN_EN2_Pin, GPIO_PIN_RESET);
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f240 4143 	movw	r1, #1091	@ 0x443
 8003da4:	482b      	ldr	r0, [pc, #172]	@ (8003e54 <MX_GPIO_Init+0xdc>)
 8003da6:	f000 fecd 	bl	8004b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEN_EN1_Pin|SPI_SEL0_Pin|SEN_EN3_Pin, GPIO_PIN_RESET);
 8003daa:	2200      	movs	r2, #0
 8003dac:	f240 4103 	movw	r1, #1027	@ 0x403
 8003db0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003db4:	f000 fec6 	bl	8004b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A121_SPI_SS_GPIO_Port, A121_SPI_SS_Pin, GPIO_PIN_SET);
 8003db8:	2201      	movs	r2, #1
 8003dba:	2110      	movs	r1, #16
 8003dbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dc0:	f000 fec0 	bl	8004b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2120      	movs	r1, #32
 8003dc8:	4823      	ldr	r0, [pc, #140]	@ (8003e58 <MX_GPIO_Init+0xe0>)
 8003dca:	f000 febb 	bl	8004b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEN_INT2_Pin SEN_INT1_Pin */
  GPIO_InitStruct.Pin = SEN_INT2_Pin|SEN_INT1_Pin;
 8003dce:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003dd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003dd4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003dd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dde:	1d3b      	adds	r3, r7, #4
 8003de0:	4619      	mov	r1, r3
 8003de2:	481c      	ldr	r0, [pc, #112]	@ (8003e54 <MX_GPIO_Init+0xdc>)
 8003de4:	f000 fd26 	bl	8004834 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_SEL2_Pin SPI_SEL1_Pin SEN_EN4_Pin SEN_EN2_Pin */
  GPIO_InitStruct.Pin = SPI_SEL2_Pin|SPI_SEL1_Pin|SEN_EN4_Pin|SEN_EN2_Pin;
 8003de8:	f240 4343 	movw	r3, #1091	@ 0x443
 8003dec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dee:	2301      	movs	r3, #1
 8003df0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df6:	2303      	movs	r3, #3
 8003df8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dfa:	1d3b      	adds	r3, r7, #4
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4815      	ldr	r0, [pc, #84]	@ (8003e54 <MX_GPIO_Init+0xdc>)
 8003e00:	f000 fd18 	bl	8004834 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEN_EN1_Pin SPI_SEL0_Pin A121_SPI_SS_Pin SEN_EN3_Pin */
  GPIO_InitStruct.Pin = SEN_EN1_Pin|SPI_SEL0_Pin|A121_SPI_SS_Pin|SEN_EN3_Pin;
 8003e04:	f240 4313 	movw	r3, #1043	@ 0x413
 8003e08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e12:	2303      	movs	r3, #3
 8003e14:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e16:	1d3b      	adds	r3, r7, #4
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e1e:	f000 fd09 	bl	8004834 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8003e22:	2320      	movs	r3, #32
 8003e24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e26:	2301      	movs	r3, #1
 8003e28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8003e32:	1d3b      	adds	r3, r7, #4
 8003e34:	4619      	mov	r1, r3
 8003e36:	4808      	ldr	r0, [pc, #32]	@ (8003e58 <MX_GPIO_Init+0xe0>)
 8003e38:	f000 fcfc 	bl	8004834 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2100      	movs	r1, #0
 8003e40:	2028      	movs	r0, #40	@ 0x28
 8003e42:	f000 fc98 	bl	8004776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e46:	2028      	movs	r0, #40	@ 0x28
 8003e48:	f000 fcaf 	bl	80047aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003e4c:	bf00      	nop
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	48000800 	.word	0x48000800
 8003e58:	48000400 	.word	0x48000400

08003e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e60:	b672      	cpsid	i
}
 8003e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <Error_Handler+0x8>

08003e68 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e80:	bf00      	nop
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <LL_AHB2_GRP1_EnableClock>:
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003ea2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ea6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003eae:	68fb      	ldr	r3, [r7, #12]
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003eca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ed8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4013      	ands	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
}
 8003ee2:	bf00      	nop
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b085      	sub	sp, #20
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003efa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003efc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003f06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f0a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003f12:	68fb      	ldr	r3, [r7, #12]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f3c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4013      	ands	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003f44:	68fb      	ldr	r3, [r7, #12]
}
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003f56:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003f5a:	f7ff ffaf 	bl	8003ebc <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2100      	movs	r1, #0
 8003f62:	202e      	movs	r0, #46	@ 0x2e
 8003f64:	f000 fc07 	bl	8004776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003f68:	202e      	movs	r0, #46	@ 0x2e
 8003f6a:	f000 fc1e 	bl	80047aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f6e:	bf00      	nop
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb8 <HAL_IPCC_MspInit+0x44>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d113      	bne.n	8003fae <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003f86:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003f8a:	f7ff ff97 	bl	8003ebc <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2100      	movs	r1, #0
 8003f92:	202c      	movs	r0, #44	@ 0x2c
 8003f94:	f000 fbef 	bl	8004776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003f98:	202c      	movs	r0, #44	@ 0x2c
 8003f9a:	f000 fc06 	bl	80047aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	202d      	movs	r0, #45	@ 0x2d
 8003fa4:	f000 fbe7 	bl	8004776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003fa8:	202d      	movs	r0, #45	@ 0x2d
 8003faa:	f000 fbfe 	bl	80047aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	58000c00 	.word	0x58000c00

08003fbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b096      	sub	sp, #88	@ 0x58
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fc4:	f107 0308 	add.w	r3, r7, #8
 8003fc8:	2250      	movs	r2, #80	@ 0x50
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f00d ff8b 	bl	8011ee8 <memset>
  if(hrtc->Instance==RTC)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a12      	ldr	r2, [pc, #72]	@ (8004020 <HAL_RTC_MspInit+0x64>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d11d      	bne.n	8004018 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003fdc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003fe0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003fe2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fe8:	f107 0308 	add.w	r3, r7, #8
 8003fec:	4618      	mov	r0, r3
 8003fee:	f002 f9ee 	bl	80063ce <HAL_RCCEx_PeriphCLKConfig>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003ff8:	f7ff ff30 	bl	8003e5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003ffc:	f7ff ff34 	bl	8003e68 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004000:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004004:	f7ff ff73 	bl	8003eee <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8004008:	2200      	movs	r2, #0
 800400a:	2100      	movs	r1, #0
 800400c:	2003      	movs	r0, #3
 800400e:	f000 fbb2 	bl	8004776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8004012:	2003      	movs	r0, #3
 8004014:	f000 fbc9 	bl	80047aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8004018:	bf00      	nop
 800401a:	3758      	adds	r7, #88	@ 0x58
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40002800 	.word	0x40002800

08004024 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402c:	f107 030c 	add.w	r3, r7, #12
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a0f      	ldr	r2, [pc, #60]	@ (8004080 <HAL_SPI_MspInit+0x5c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d117      	bne.n	8004076 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004046:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800404a:	f7ff ff69 	bl	8003f20 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800404e:	2001      	movs	r0, #1
 8004050:	f7ff ff1b 	bl	8003e8a <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004054:	23e0      	movs	r3, #224	@ 0xe0
 8004056:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004058:	2302      	movs	r3, #2
 800405a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004060:	2300      	movs	r3, #0
 8004062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004064:	2305      	movs	r3, #5
 8004066:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004068:	f107 030c 	add.w	r3, r7, #12
 800406c:	4619      	mov	r1, r3
 800406e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004072:	f000 fbdf 	bl	8004834 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004076:	bf00      	nop
 8004078:	3720      	adds	r7, #32
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40013000 	.word	0x40013000

08004084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b09c      	sub	sp, #112	@ 0x70
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800408c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	60da      	str	r2, [r3, #12]
 800409a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800409c:	f107 030c 	add.w	r3, r7, #12
 80040a0:	2250      	movs	r2, #80	@ 0x50
 80040a2:	2100      	movs	r1, #0
 80040a4:	4618      	mov	r0, r3
 80040a6:	f00d ff1f 	bl	8011ee8 <memset>
  if(huart->Instance==USART1)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a16      	ldr	r2, [pc, #88]	@ (8004108 <HAL_UART_MspInit+0x84>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d124      	bne.n	80040fe <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80040b4:	2301      	movs	r3, #1
 80040b6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80040b8:	2300      	movs	r3, #0
 80040ba:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040bc:	f107 030c 	add.w	r3, r7, #12
 80040c0:	4618      	mov	r0, r3
 80040c2:	f002 f984 	bl	80063ce <HAL_RCCEx_PeriphCLKConfig>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80040cc:	f7ff fec6 	bl	8003e5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040d0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80040d4:	f7ff ff24 	bl	8003f20 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040d8:	2002      	movs	r0, #2
 80040da:	f7ff fed6 	bl	8003e8a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80040de:	23c0      	movs	r3, #192	@ 0xc0
 80040e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e2:	2302      	movs	r3, #2
 80040e4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ea:	2300      	movs	r3, #0
 80040ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040ee:	2307      	movs	r3, #7
 80040f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80040f6:	4619      	mov	r1, r3
 80040f8:	4804      	ldr	r0, [pc, #16]	@ (800410c <HAL_UART_MspInit+0x88>)
 80040fa:	f000 fb9b 	bl	8004834 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80040fe:	bf00      	nop
 8004100:	3770      	adds	r7, #112	@ 0x70
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40013800 	.word	0x40013800
 800410c:	48000400 	.word	0x48000400

08004110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004114:	bf00      	nop
 8004116:	e7fd      	b.n	8004114 <NMI_Handler+0x4>

08004118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800411c:	bf00      	nop
 800411e:	e7fd      	b.n	800411c <HardFault_Handler+0x4>

08004120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004124:	bf00      	nop
 8004126:	e7fd      	b.n	8004124 <MemManage_Handler+0x4>

08004128 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800412c:	bf00      	nop
 800412e:	e7fd      	b.n	800412c <BusFault_Handler+0x4>

08004130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004134:	bf00      	nop
 8004136:	e7fd      	b.n	8004134 <UsageFault_Handler+0x4>

08004138 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800413c:	bf00      	nop
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004146:	b480      	push	{r7}
 8004148:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004158:	bf00      	nop
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004166:	f000 f993 	bl	8004490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800416a:	bf00      	nop
 800416c:	bd80      	pop	{r7, pc}

0800416e <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004172:	f7ff f98b 	bl	800348c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}

0800417a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEN_INT1_Pin);
 800417e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004182:	f000 fd11 	bl	8004ba8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SEN_INT2_Pin);
 8004186:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800418a:	f000 fd0d 	bl	8004ba8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800418e:	bf00      	nop
 8004190:	bd80      	pop	{r7, pc}

08004192 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8004196:	f006 fef9 	bl	800af8c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800419a:	bf00      	nop
 800419c:	bd80      	pop	{r7, pc}

0800419e <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80041a2:	f006 ff29 	bl	800aff8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80041ae:	f000 fd1f 	bl	8004bf0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80041b2:	bf00      	nop
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	e00a      	b.n	80041de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041c8:	f3af 8000 	nop.w
 80041cc:	4601      	mov	r1, r0
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	60ba      	str	r2, [r7, #8]
 80041d4:	b2ca      	uxtb	r2, r1
 80041d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	3301      	adds	r3, #1
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	dbf0      	blt.n	80041c8 <_read+0x12>
  }

  return len;
 80041e6:	687b      	ldr	r3, [r7, #4]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80041f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004218:	605a      	str	r2, [r3, #4]
  return 0;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <_isatty>:

int _isatty(int file)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004230:	2301      	movs	r3, #1
}
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800423e:	b480      	push	{r7}
 8004240:	b085      	sub	sp, #20
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004260:	4a14      	ldr	r2, [pc, #80]	@ (80042b4 <_sbrk+0x5c>)
 8004262:	4b15      	ldr	r3, [pc, #84]	@ (80042b8 <_sbrk+0x60>)
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800426c:	4b13      	ldr	r3, [pc, #76]	@ (80042bc <_sbrk+0x64>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d102      	bne.n	800427a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004274:	4b11      	ldr	r3, [pc, #68]	@ (80042bc <_sbrk+0x64>)
 8004276:	4a12      	ldr	r2, [pc, #72]	@ (80042c0 <_sbrk+0x68>)
 8004278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800427a:	4b10      	ldr	r3, [pc, #64]	@ (80042bc <_sbrk+0x64>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4413      	add	r3, r2
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	429a      	cmp	r2, r3
 8004286:	d207      	bcs.n	8004298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004288:	f00d fea0 	bl	8011fcc <__errno>
 800428c:	4603      	mov	r3, r0
 800428e:	220c      	movs	r2, #12
 8004290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004292:	f04f 33ff 	mov.w	r3, #4294967295
 8004296:	e009      	b.n	80042ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004298:	4b08      	ldr	r3, [pc, #32]	@ (80042bc <_sbrk+0x64>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800429e:	4b07      	ldr	r3, [pc, #28]	@ (80042bc <_sbrk+0x64>)
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4413      	add	r3, r2
 80042a6:	4a05      	ldr	r2, [pc, #20]	@ (80042bc <_sbrk+0x64>)
 80042a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042aa:	68fb      	ldr	r3, [r7, #12]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20030000 	.word	0x20030000
 80042b8:	00000400 	.word	0x00000400
 80042bc:	200004cc 	.word	0x200004cc
 80042c0:	20000a08 	.word	0x20000a08

080042c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80042c8:	4b24      	ldr	r3, [pc, #144]	@ (800435c <SystemInit+0x98>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ce:	4a23      	ldr	r2, [pc, #140]	@ (800435c <SystemInit+0x98>)
 80042d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80042d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80042e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ec:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80042f0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80042f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042fc:	4b18      	ldr	r3, [pc, #96]	@ (8004360 <SystemInit+0x9c>)
 80042fe:	4013      	ands	r3, r2
 8004300:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800430a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800430e:	f023 0305 	bic.w	r3, r3, #5
 8004312:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800431a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800431e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004322:	f023 0301 	bic.w	r3, r3, #1
 8004326:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800432a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800432e:	4a0d      	ldr	r2, [pc, #52]	@ (8004364 <SystemInit+0xa0>)
 8004330:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004336:	4a0b      	ldr	r2, [pc, #44]	@ (8004364 <SystemInit+0xa0>)
 8004338:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800433a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004344:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004348:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800434a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800434e:	2200      	movs	r2, #0
 8004350:	619a      	str	r2, [r3, #24]
}
 8004352:	bf00      	nop
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	e000ed00 	.word	0xe000ed00
 8004360:	faf6fefb 	.word	0xfaf6fefb
 8004364:	22041000 	.word	0x22041000

08004368 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004368:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800436a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800436c:	3304      	adds	r3, #4

0800436e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800436e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004370:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004372:	d3f9      	bcc.n	8004368 <CopyDataInit>
  bx lr
 8004374:	4770      	bx	lr

08004376 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004376:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004378:	3004      	adds	r0, #4

0800437a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800437a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800437c:	d3fb      	bcc.n	8004376 <FillZerobss>
  bx lr
 800437e:	4770      	bx	lr

08004380 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004380:	480c      	ldr	r0, [pc, #48]	@ (80043b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004382:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004384:	f7ff ff9e 	bl	80042c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004388:	480b      	ldr	r0, [pc, #44]	@ (80043b8 <LoopForever+0x6>)
 800438a:	490c      	ldr	r1, [pc, #48]	@ (80043bc <LoopForever+0xa>)
 800438c:	4a0c      	ldr	r2, [pc, #48]	@ (80043c0 <LoopForever+0xe>)
 800438e:	2300      	movs	r3, #0
 8004390:	f7ff ffed 	bl	800436e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004394:	480b      	ldr	r0, [pc, #44]	@ (80043c4 <LoopForever+0x12>)
 8004396:	490c      	ldr	r1, [pc, #48]	@ (80043c8 <LoopForever+0x16>)
 8004398:	4a0c      	ldr	r2, [pc, #48]	@ (80043cc <LoopForever+0x1a>)
 800439a:	2300      	movs	r3, #0
 800439c:	f7ff ffe7 	bl	800436e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80043a0:	480b      	ldr	r0, [pc, #44]	@ (80043d0 <LoopForever+0x1e>)
 80043a2:	490c      	ldr	r1, [pc, #48]	@ (80043d4 <LoopForever+0x22>)
 80043a4:	2300      	movs	r3, #0
 80043a6:	f7ff ffe8 	bl	800437a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80043aa:	f00d fe15 	bl	8011fd8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80043ae:	f7ff fb6b 	bl	8003a88 <main>

080043b2 <LoopForever>:

LoopForever:
  b LoopForever
 80043b2:	e7fe      	b.n	80043b2 <LoopForever>
  ldr   r0, =_estack
 80043b4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80043b8:	20000008 	.word	0x20000008
 80043bc:	20000238 	.word	0x20000238
 80043c0:	08019d04 	.word	0x08019d04
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80043c4:	200301e4 	.word	0x200301e4
 80043c8:	20030a67 	.word	0x20030a67
 80043cc:	08019f7a 	.word	0x08019f7a
  INIT_BSS _sbss, _ebss
 80043d0:	20000284 	.word	0x20000284
 80043d4:	20000a04 	.word	0x20000a04

080043d8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043d8:	e7fe      	b.n	80043d8 <ADC1_IRQHandler>
	...

080043dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004418 <HAL_Init+0x3c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a0b      	ldr	r2, [pc, #44]	@ (8004418 <HAL_Init+0x3c>)
 80043ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043f2:	2003      	movs	r0, #3
 80043f4:	f000 f9b4 	bl	8004760 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043f8:	2000      	movs	r0, #0
 80043fa:	f000 f80f 	bl	800441c <HAL_InitTick>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	71fb      	strb	r3, [r7, #7]
 8004408:	e001      	b.n	800440e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800440a:	f7ff fda2 	bl	8003f52 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800440e:	79fb      	ldrb	r3, [r7, #7]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	58004000 	.word	0x58004000

0800441c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004428:	4b17      	ldr	r3, [pc, #92]	@ (8004488 <HAL_InitTick+0x6c>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d024      	beq.n	800447a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004430:	f001 fd3c 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b14      	ldr	r3, [pc, #80]	@ (8004488 <HAL_InitTick+0x6c>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	4619      	mov	r1, r3
 800443c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004440:	fbb3 f3f1 	udiv	r3, r3, r1
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	4618      	mov	r0, r3
 800444a:	f000 f9ca 	bl	80047e2 <HAL_SYSTICK_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10f      	bne.n	8004474 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b0f      	cmp	r3, #15
 8004458:	d809      	bhi.n	800446e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800445a:	2200      	movs	r2, #0
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	f04f 30ff 	mov.w	r0, #4294967295
 8004462:	f000 f988 	bl	8004776 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004466:	4a09      	ldr	r2, [pc, #36]	@ (800448c <HAL_InitTick+0x70>)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	e007      	b.n	800447e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
 8004472:	e004      	b.n	800447e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
 8004478:	e001      	b.n	800447e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800447e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	2000001c 	.word	0x2000001c
 800448c:	20000018 	.word	0x20000018

08004490 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004494:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <HAL_IncTick+0x20>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	4b06      	ldr	r3, [pc, #24]	@ (80044b4 <HAL_IncTick+0x24>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4413      	add	r3, r2
 80044a0:	4a04      	ldr	r2, [pc, #16]	@ (80044b4 <HAL_IncTick+0x24>)
 80044a2:	6013      	str	r3, [r2, #0]
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	2000001c 	.word	0x2000001c
 80044b4:	200004d0 	.word	0x200004d0

080044b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return uwTick;
 80044bc:	4b03      	ldr	r3, [pc, #12]	@ (80044cc <HAL_GetTick+0x14>)
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	200004d0 	.word	0x200004d0

080044d0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80044d4:	4b03      	ldr	r3, [pc, #12]	@ (80044e4 <HAL_GetTickPrio+0x14>)
 80044d6:	681b      	ldr	r3, [r3, #0]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	20000018 	.word	0x20000018

080044e8 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80044ec:	4b03      	ldr	r3, [pc, #12]	@ (80044fc <HAL_GetTickFreq+0x14>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	2000001c 	.word	0x2000001c

08004500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004510:	4b0c      	ldr	r3, [pc, #48]	@ (8004544 <__NVIC_SetPriorityGrouping+0x44>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800451c:	4013      	ands	r3, r2
 800451e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004528:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800452c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004532:	4a04      	ldr	r2, [pc, #16]	@ (8004544 <__NVIC_SetPriorityGrouping+0x44>)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	60d3      	str	r3, [r2, #12]
}
 8004538:	bf00      	nop
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	e000ed00 	.word	0xe000ed00

08004548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800454c:	4b04      	ldr	r3, [pc, #16]	@ (8004560 <__NVIC_GetPriorityGrouping+0x18>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	0a1b      	lsrs	r3, r3, #8
 8004552:	f003 0307 	and.w	r3, r3, #7
}
 8004556:	4618      	mov	r0, r3
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	e000ed00 	.word	0xe000ed00

08004564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	4603      	mov	r3, r0
 800456c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800456e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004572:	2b00      	cmp	r3, #0
 8004574:	db0b      	blt.n	800458e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	f003 021f 	and.w	r2, r3, #31
 800457c:	4907      	ldr	r1, [pc, #28]	@ (800459c <__NVIC_EnableIRQ+0x38>)
 800457e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	2001      	movs	r0, #1
 8004586:	fa00 f202 	lsl.w	r2, r0, r2
 800458a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	e000e100 	.word	0xe000e100

080045a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	db12      	blt.n	80045d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	f003 021f 	and.w	r2, r3, #31
 80045b8:	490a      	ldr	r1, [pc, #40]	@ (80045e4 <__NVIC_DisableIRQ+0x44>)
 80045ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	2001      	movs	r0, #1
 80045c2:	fa00 f202 	lsl.w	r2, r0, r2
 80045c6:	3320      	adds	r3, #32
 80045c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80045cc:	f3bf 8f4f 	dsb	sy
}
 80045d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80045d2:	f3bf 8f6f 	isb	sy
}
 80045d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	e000e100 	.word	0xe000e100

080045e8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	db0c      	blt.n	8004614 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	f003 021f 	and.w	r2, r3, #31
 8004600:	4907      	ldr	r1, [pc, #28]	@ (8004620 <__NVIC_SetPendingIRQ+0x38>)
 8004602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	2001      	movs	r0, #1
 800460a:	fa00 f202 	lsl.w	r2, r0, r2
 800460e:	3340      	adds	r3, #64	@ 0x40
 8004610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	e000e100 	.word	0xe000e100

08004624 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800462e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004632:	2b00      	cmp	r3, #0
 8004634:	db0c      	blt.n	8004650 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	f003 021f 	and.w	r2, r3, #31
 800463c:	4907      	ldr	r1, [pc, #28]	@ (800465c <__NVIC_ClearPendingIRQ+0x38>)
 800463e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	2001      	movs	r0, #1
 8004646:	fa00 f202 	lsl.w	r2, r0, r2
 800464a:	3360      	adds	r3, #96	@ 0x60
 800464c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	e000e100 	.word	0xe000e100

08004660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	6039      	str	r1, [r7, #0]
 800466a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800466c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004670:	2b00      	cmp	r3, #0
 8004672:	db0a      	blt.n	800468a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	b2da      	uxtb	r2, r3
 8004678:	490c      	ldr	r1, [pc, #48]	@ (80046ac <__NVIC_SetPriority+0x4c>)
 800467a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467e:	0112      	lsls	r2, r2, #4
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	440b      	add	r3, r1
 8004684:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004688:	e00a      	b.n	80046a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	4908      	ldr	r1, [pc, #32]	@ (80046b0 <__NVIC_SetPriority+0x50>)
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	3b04      	subs	r3, #4
 8004698:	0112      	lsls	r2, r2, #4
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	440b      	add	r3, r1
 800469e:	761a      	strb	r2, [r3, #24]
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	e000e100 	.word	0xe000e100
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b089      	sub	sp, #36	@ 0x24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f1c3 0307 	rsb	r3, r3, #7
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	bf28      	it	cs
 80046d2:	2304      	movcs	r3, #4
 80046d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	3304      	adds	r3, #4
 80046da:	2b06      	cmp	r3, #6
 80046dc:	d902      	bls.n	80046e4 <NVIC_EncodePriority+0x30>
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3b03      	subs	r3, #3
 80046e2:	e000      	b.n	80046e6 <NVIC_EncodePriority+0x32>
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e8:	f04f 32ff 	mov.w	r2, #4294967295
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43da      	mvns	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	401a      	ands	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	fa01 f303 	lsl.w	r3, r1, r3
 8004706:	43d9      	mvns	r1, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800470c:	4313      	orrs	r3, r2
         );
}
 800470e:	4618      	mov	r0, r3
 8004710:	3724      	adds	r7, #36	@ 0x24
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3b01      	subs	r3, #1
 8004728:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800472c:	d301      	bcc.n	8004732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800472e:	2301      	movs	r3, #1
 8004730:	e00f      	b.n	8004752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004732:	4a0a      	ldr	r2, [pc, #40]	@ (800475c <SysTick_Config+0x40>)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3b01      	subs	r3, #1
 8004738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800473a:	210f      	movs	r1, #15
 800473c:	f04f 30ff 	mov.w	r0, #4294967295
 8004740:	f7ff ff8e 	bl	8004660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004744:	4b05      	ldr	r3, [pc, #20]	@ (800475c <SysTick_Config+0x40>)
 8004746:	2200      	movs	r2, #0
 8004748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800474a:	4b04      	ldr	r3, [pc, #16]	@ (800475c <SysTick_Config+0x40>)
 800474c:	2207      	movs	r2, #7
 800474e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	e000e010 	.word	0xe000e010

08004760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff fec9 	bl	8004500 <__NVIC_SetPriorityGrouping>
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af00      	add	r7, sp, #0
 800477c:	4603      	mov	r3, r0
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004784:	f7ff fee0 	bl	8004548 <__NVIC_GetPriorityGrouping>
 8004788:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	68b9      	ldr	r1, [r7, #8]
 800478e:	6978      	ldr	r0, [r7, #20]
 8004790:	f7ff ff90 	bl	80046b4 <NVIC_EncodePriority>
 8004794:	4602      	mov	r2, r0
 8004796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800479a:	4611      	mov	r1, r2
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff ff5f 	bl	8004660 <__NVIC_SetPriority>
}
 80047a2:	bf00      	nop
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	4603      	mov	r3, r0
 80047b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff fed3 	bl	8004564 <__NVIC_EnableIRQ>
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	4603      	mov	r3, r0
 80047ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80047d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fee3 	bl	80045a0 <__NVIC_DisableIRQ>
}
 80047da:	bf00      	nop
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff ff96 	bl	800471c <SysTick_Config>
 80047f0:	4603      	mov	r3, r0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	4603      	mov	r3, r0
 8004802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff feed 	bl	80045e8 <__NVIC_SetPendingIRQ>
}
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	4603      	mov	r3, r0
 800481e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fefd 	bl	8004624 <__NVIC_ClearPendingIRQ>
}
 800482a:	bf00      	nop
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004842:	e14c      	b.n	8004ade <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	2101      	movs	r1, #1
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	fa01 f303 	lsl.w	r3, r1, r3
 8004850:	4013      	ands	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 813e 	beq.w	8004ad8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	2b01      	cmp	r3, #1
 8004866:	d005      	beq.n	8004874 <HAL_GPIO_Init+0x40>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 0303 	and.w	r3, r3, #3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d130      	bne.n	80048d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	2203      	movs	r2, #3
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	43db      	mvns	r3, r3
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4013      	ands	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048aa:	2201      	movs	r2, #1
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43db      	mvns	r3, r3
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4013      	ands	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	091b      	lsrs	r3, r3, #4
 80048c0:	f003 0201 	and.w	r2, r3, #1
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d017      	beq.n	8004912 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	2203      	movs	r2, #3
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43db      	mvns	r3, r3
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4013      	ands	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d123      	bne.n	8004966 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	08da      	lsrs	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3208      	adds	r2, #8
 8004926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800492a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	220f      	movs	r2, #15
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43db      	mvns	r3, r3
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4013      	ands	r3, r2
 8004940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	08da      	lsrs	r2, r3, #3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3208      	adds	r2, #8
 8004960:	6939      	ldr	r1, [r7, #16]
 8004962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	2203      	movs	r2, #3
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43db      	mvns	r3, r3
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4013      	ands	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f003 0203 	and.w	r2, r3, #3
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 8098 	beq.w	8004ad8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80049a8:	4a54      	ldr	r2, [pc, #336]	@ (8004afc <HAL_GPIO_Init+0x2c8>)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	089b      	lsrs	r3, r3, #2
 80049ae:	3302      	adds	r3, #2
 80049b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	220f      	movs	r2, #15
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	43db      	mvns	r3, r3
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4013      	ands	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80049d2:	d019      	beq.n	8004a08 <HAL_GPIO_Init+0x1d4>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a4a      	ldr	r2, [pc, #296]	@ (8004b00 <HAL_GPIO_Init+0x2cc>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d013      	beq.n	8004a04 <HAL_GPIO_Init+0x1d0>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a49      	ldr	r2, [pc, #292]	@ (8004b04 <HAL_GPIO_Init+0x2d0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d00d      	beq.n	8004a00 <HAL_GPIO_Init+0x1cc>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a48      	ldr	r2, [pc, #288]	@ (8004b08 <HAL_GPIO_Init+0x2d4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d007      	beq.n	80049fc <HAL_GPIO_Init+0x1c8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a47      	ldr	r2, [pc, #284]	@ (8004b0c <HAL_GPIO_Init+0x2d8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d101      	bne.n	80049f8 <HAL_GPIO_Init+0x1c4>
 80049f4:	2304      	movs	r3, #4
 80049f6:	e008      	b.n	8004a0a <HAL_GPIO_Init+0x1d6>
 80049f8:	2307      	movs	r3, #7
 80049fa:	e006      	b.n	8004a0a <HAL_GPIO_Init+0x1d6>
 80049fc:	2303      	movs	r3, #3
 80049fe:	e004      	b.n	8004a0a <HAL_GPIO_Init+0x1d6>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e002      	b.n	8004a0a <HAL_GPIO_Init+0x1d6>
 8004a04:	2301      	movs	r3, #1
 8004a06:	e000      	b.n	8004a0a <HAL_GPIO_Init+0x1d6>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	f002 0203 	and.w	r2, r2, #3
 8004a10:	0092      	lsls	r2, r2, #2
 8004a12:	4093      	lsls	r3, r2
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a1a:	4938      	ldr	r1, [pc, #224]	@ (8004afc <HAL_GPIO_Init+0x2c8>)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	089b      	lsrs	r3, r3, #2
 8004a20:	3302      	adds	r3, #2
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a28:	4b39      	ldr	r3, [pc, #228]	@ (8004b10 <HAL_GPIO_Init+0x2dc>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	43db      	mvns	r3, r3
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4013      	ands	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a4c:	4a30      	ldr	r2, [pc, #192]	@ (8004b10 <HAL_GPIO_Init+0x2dc>)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a52:	4b2f      	ldr	r3, [pc, #188]	@ (8004b10 <HAL_GPIO_Init+0x2dc>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a76:	4a26      	ldr	r2, [pc, #152]	@ (8004b10 <HAL_GPIO_Init+0x2dc>)
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a7c:	4b24      	ldr	r3, [pc, #144]	@ (8004b10 <HAL_GPIO_Init+0x2dc>)
 8004a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	43db      	mvns	r3, r3
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8004b10 <HAL_GPIO_Init+0x2dc>)
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8004aaa:	4b19      	ldr	r3, [pc, #100]	@ (8004b10 <HAL_GPIO_Init+0x2dc>)
 8004aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ad0:	4a0f      	ldr	r2, [pc, #60]	@ (8004b10 <HAL_GPIO_Init+0x2dc>)
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	3301      	adds	r3, #1
 8004adc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f47f aeab 	bne.w	8004844 <HAL_GPIO_Init+0x10>
  }
}
 8004aee:	bf00      	nop
 8004af0:	bf00      	nop
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	40010000 	.word	0x40010000
 8004b00:	48000400 	.word	0x48000400
 8004b04:	48000800 	.word	0x48000800
 8004b08:	48000c00 	.word	0x48000c00
 8004b0c:	48001000 	.word	0x48001000
 8004b10:	58000800 	.word	0x58000800

08004b14 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	887b      	ldrh	r3, [r7, #2]
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
 8004b30:	e001      	b.n	8004b36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b32:	2300      	movs	r3, #0
 8004b34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	807b      	strh	r3, [r7, #2]
 8004b50:	4613      	mov	r3, r2
 8004b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b54:	787b      	ldrb	r3, [r7, #1]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b5a:	887a      	ldrh	r2, [r7, #2]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b60:	e002      	b.n	8004b68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b62:	887a      	ldrh	r2, [r7, #2]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b86:	887a      	ldrh	r2, [r7, #2]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	041a      	lsls	r2, r3, #16
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	43d9      	mvns	r1, r3
 8004b92:	887b      	ldrh	r3, [r7, #2]
 8004b94:	400b      	ands	r3, r1
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	619a      	str	r2, [r3, #24]
}
 8004b9c:	bf00      	nop
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004bb2:	4b08      	ldr	r3, [pc, #32]	@ (8004bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d006      	beq.n	8004bcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bbe:	4a05      	ldr	r2, [pc, #20]	@ (8004bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bc4:	88fb      	ldrh	r3, [r7, #6]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 f806 	bl	8004bd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004bcc:	bf00      	nop
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	58000800 	.word	0x58000800

08004bd8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8004c20 <HAL_HSEM_IRQHandler+0x30>)
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004bfc:	4b08      	ldr	r3, [pc, #32]	@ (8004c20 <HAL_HSEM_IRQHandler+0x30>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	4906      	ldr	r1, [pc, #24]	@ (8004c20 <HAL_HSEM_IRQHandler+0x30>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004c0a:	4a05      	ldr	r2, [pc, #20]	@ (8004c20 <HAL_HSEM_IRQHandler+0x30>)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f807 	bl	8004c24 <HAL_HSEM_FreeCallback>
}
 8004c16:	bf00      	nop
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	58001500 	.word	0x58001500

08004c24 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01e      	beq.n	8004c88 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004c4a:	4b13      	ldr	r3, [pc, #76]	@ (8004c98 <HAL_IPCC_Init+0x60>)
 8004c4c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d102      	bne.n	8004c60 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff f98a 	bl	8003f74 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004c60:	68b8      	ldr	r0, [r7, #8]
 8004c62:	f000 f85b 	bl	8004d1c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f82c 	bl	8004cd0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8004c86:	e001      	b.n	8004c8c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	58000c00 	.word	0x58000c00

08004c9c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004caa:	bf00      	nop
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b085      	sub	sp, #20
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	e00f      	b.n	8004cfe <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	4a0b      	ldr	r2, [pc, #44]	@ (8004d14 <IPCC_SetDefaultCallbacks+0x44>)
 8004ce8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	3306      	adds	r3, #6
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	4a08      	ldr	r2, [pc, #32]	@ (8004d18 <IPCC_SetDefaultCallbacks+0x48>)
 8004cf6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b05      	cmp	r3, #5
 8004d02:	d9ec      	bls.n	8004cde <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	08004c9d 	.word	0x08004c9d
 8004d18:	08004cb7 	.word	0x08004cb7

08004d1c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8004d30:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	223f      	movs	r2, #63	@ 0x3f
 8004d36:	609a      	str	r2, [r3, #8]
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d48:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a04      	ldr	r2, [pc, #16]	@ (8004d60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d52:	6013      	str	r3, [r2, #0]
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	58000400 	.word	0x58000400

08004d64 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004d68:	4b04      	ldr	r3, [pc, #16]	@ (8004d7c <HAL_PWREx_GetVoltageRange+0x18>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	58000400 	.word	0x58000400

08004d80 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d92:	d101      	bne.n	8004d98 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <LL_RCC_HSE_Enable>:
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004db6:	6013      	str	r3, [r2, #0]
}
 8004db8:	bf00      	nop
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <LL_RCC_HSE_Disable>:
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dd4:	6013      	str	r3, [r2, #0]
}
 8004dd6:	bf00      	nop
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <LL_RCC_HSE_IsReady>:
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004df2:	d101      	bne.n	8004df8 <LL_RCC_HSE_IsReady+0x18>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <LL_RCC_HSE_IsReady+0x1a>
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <LL_RCC_HSI_Enable>:
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004e08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e16:	6013      	str	r3, [r2, #0]
}
 8004e18:	bf00      	nop
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <LL_RCC_HSI_Disable>:
{
 8004e22:	b480      	push	{r7}
 8004e24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004e26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e34:	6013      	str	r3, [r2, #0]
}
 8004e36:	bf00      	nop
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <LL_RCC_HSI_IsReady>:
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004e44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e52:	d101      	bne.n	8004e58 <LL_RCC_HSI_IsReady+0x18>
 8004e54:	2301      	movs	r3, #1
 8004e56:	e000      	b.n	8004e5a <LL_RCC_HSI_IsReady+0x1a>
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	061b      	lsls	r3, r3, #24
 8004e7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	604b      	str	r3, [r1, #4]
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <LL_RCC_HSI48_Enable>:
{
 8004e8e:	b480      	push	{r7}
 8004e90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e9e:	f043 0301 	orr.w	r3, r3, #1
 8004ea2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004ea6:	bf00      	nop
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <LL_RCC_HSI48_Disable>:
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ebc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004ec8:	bf00      	nop
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <LL_RCC_HSI48_IsReady>:
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d101      	bne.n	8004eea <LL_RCC_HSI48_IsReady+0x18>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <LL_RCC_HSI48_IsReady+0x1a>
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <LL_RCC_LSE_Enable>:
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004f0e:	bf00      	nop
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <LL_RCC_LSE_Disable>:
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f28:	f023 0301 	bic.w	r3, r3, #1
 8004f2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004f30:	bf00      	nop
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <LL_RCC_LSE_EnableBypass>:
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f4a:	f043 0304 	orr.w	r3, r3, #4
 8004f4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004f52:	bf00      	nop
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <LL_RCC_LSE_DisableBypass>:
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f6c:	f023 0304 	bic.w	r3, r3, #4
 8004f70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004f74:	bf00      	nop
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <LL_RCC_LSE_IsReady>:
{
 8004f7e:	b480      	push	{r7}
 8004f80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d101      	bne.n	8004f96 <LL_RCC_LSE_IsReady+0x18>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <LL_RCC_LSE_IsReady+0x1a>
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <LL_RCC_LSI1_Enable>:
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004fba:	bf00      	nop
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <LL_RCC_LSI1_Disable>:
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fd4:	f023 0301 	bic.w	r3, r3, #1
 8004fd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004fdc:	bf00      	nop
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <LL_RCC_LSI1_IsReady>:
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004fea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d101      	bne.n	8004ffe <LL_RCC_LSI1_IsReady+0x18>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <LL_RCC_LSI1_IsReady+0x1a>
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <LL_RCC_LSI2_Enable>:
{
 800500a:	b480      	push	{r7}
 800500c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800500e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005016:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800501a:	f043 0304 	orr.w	r3, r3, #4
 800501e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005022:	bf00      	nop
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <LL_RCC_LSI2_Disable>:
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005038:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800503c:	f023 0304 	bic.w	r3, r3, #4
 8005040:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005044:	bf00      	nop
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <LL_RCC_LSI2_IsReady>:
{
 800504e:	b480      	push	{r7}
 8005050:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005052:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b08      	cmp	r3, #8
 8005060:	d101      	bne.n	8005066 <LL_RCC_LSI2_IsReady+0x18>
 8005062:	2301      	movs	r3, #1
 8005064:	e000      	b.n	8005068 <LL_RCC_LSI2_IsReady+0x1a>
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <LL_RCC_LSI2_SetTrimming>:
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800507a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800507e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005082:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	021b      	lsls	r3, r3, #8
 800508a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <LL_RCC_MSI_Enable>:
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80050a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	6013      	str	r3, [r2, #0]
}
 80050b4:	bf00      	nop
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <LL_RCC_MSI_Disable>:
{
 80050be:	b480      	push	{r7}
 80050c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80050c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050cc:	f023 0301 	bic.w	r3, r3, #1
 80050d0:	6013      	str	r3, [r2, #0]
}
 80050d2:	bf00      	nop
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <LL_RCC_MSI_IsReady>:
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80050e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d101      	bne.n	80050f2 <LL_RCC_MSI_IsReady+0x16>
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <LL_RCC_MSI_IsReady+0x18>
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <LL_RCC_MSI_SetRange>:
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005110:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4313      	orrs	r3, r2
 8005118:	600b      	str	r3, [r1, #0]
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <LL_RCC_MSI_GetRange>:
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800512c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005136:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2bb0      	cmp	r3, #176	@ 0xb0
 800513c:	d901      	bls.n	8005142 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800513e:	23b0      	movs	r3, #176	@ 0xb0
 8005140:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005142:	687b      	ldr	r3, [r7, #4]
}
 8005144:	4618      	mov	r0, r3
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	021b      	lsls	r3, r3, #8
 8005166:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800516a:	4313      	orrs	r3, r2
 800516c:	604b      	str	r3, [r1, #4]
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <LL_RCC_SetSysClkSource>:
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f023 0203 	bic.w	r2, r3, #3
 800518c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4313      	orrs	r3, r2
 8005194:	608b      	str	r3, [r1, #8]
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <LL_RCC_GetSysClkSource>:
{
 80051a2:	b480      	push	{r7}
 80051a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80051a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 030c 	and.w	r3, r3, #12
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <LL_RCC_SetAHBPrescaler>:
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80051c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	608b      	str	r3, [r1, #8]
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80051ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80051f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <LL_RCC_SetAHB4Prescaler>:
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800521a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800521e:	f023 020f 	bic.w	r2, r3, #15
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	091b      	lsrs	r3, r3, #4
 8005226:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <LL_RCC_SetAPB1Prescaler>:
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800524e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4313      	orrs	r3, r2
 8005256:	608b      	str	r3, [r1, #8]
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <LL_RCC_SetAPB2Prescaler>:
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800526c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005276:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4313      	orrs	r3, r2
 800527e:	608b      	str	r3, [r1, #8]
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <LL_RCC_GetAHBPrescaler>:
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800529a:	4618      	mov	r0, r3
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <LL_RCC_GetAHB4Prescaler>:
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80052a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <LL_RCC_GetAPB1Prescaler>:
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80052c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <LL_RCC_GetAPB2Prescaler>:
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80052dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80052f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005302:	6013      	str	r3, [r2, #0]
}
 8005304:	bf00      	nop
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800530e:	b480      	push	{r7}
 8005310:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800531c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005320:	6013      	str	r3, [r2, #0]
}
 8005322:	bf00      	nop
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800533a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800533e:	d101      	bne.n	8005344 <LL_RCC_PLL_IsReady+0x18>
 8005340:	2301      	movs	r3, #1
 8005342:	e000      	b.n	8005346 <LL_RCC_PLL_IsReady+0x1a>
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	0a1b      	lsrs	r3, r3, #8
 800535c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005360:	4618      	mov	r0, r3
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800536a:	b480      	push	{r7}
 800536c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800536e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005378:	4618      	mov	r0, r3
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005382:	b480      	push	{r7}
 8005384:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005390:	4618      	mov	r0, r3
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800539a:	b480      	push	{r7}
 800539c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800539e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0303 	and.w	r3, r3, #3
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80053b2:	b480      	push	{r7}
 80053b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80053b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053c4:	d101      	bne.n	80053ca <LL_RCC_IsActiveFlag_HPRE+0x18>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80053d6:	b480      	push	{r7}
 80053d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80053da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053de:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80053e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053ea:	d101      	bne.n	80053f0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005404:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800540c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005410:	d101      	bne.n	8005416 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005422:	b480      	push	{r7}
 8005424:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005430:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005434:	d101      	bne.n	800543a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005446:	b480      	push	{r7}
 8005448:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800544a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005454:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005458:	d101      	bne.n	800545e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800545a:	2301      	movs	r3, #1
 800545c:	e000      	b.n	8005460 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
	...

0800546c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800546c:	b590      	push	{r4, r7, lr}
 800546e:	b08d      	sub	sp, #52	@ 0x34
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e363      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 808d 	beq.w	80055a6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800548c:	f7ff fe89 	bl	80051a2 <LL_RCC_GetSysClkSource>
 8005490:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005492:	f7ff ff82 	bl	800539a <LL_RCC_PLL_GetMainSource>
 8005496:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <HAL_RCC_OscConfig+0x3e>
 800549e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a0:	2b0c      	cmp	r3, #12
 80054a2:	d147      	bne.n	8005534 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80054a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d144      	bne.n	8005534 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e347      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80054ba:	f7ff fe34 	bl	8005126 <LL_RCC_MSI_GetRange>
 80054be:	4603      	mov	r3, r0
 80054c0:	429c      	cmp	r4, r3
 80054c2:	d914      	bls.n	80054ee <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 fd2f 	bl	8005f2c <RCC_SetFlashLatencyFromMSIRange>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e336      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff fe0e 	bl	80050fe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff fe32 	bl	8005150 <LL_RCC_MSI_SetCalibTrimming>
 80054ec:	e013      	b.n	8005516 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff fe03 	bl	80050fe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff fe27 	bl	8005150 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fd10 	bl	8005f2c <RCC_SetFlashLatencyFromMSIRange>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e317      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005516:	f000 fcc9 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 800551a:	4603      	mov	r3, r0
 800551c:	4aa4      	ldr	r2, [pc, #656]	@ (80057b0 <HAL_RCC_OscConfig+0x344>)
 800551e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005520:	4ba4      	ldr	r3, [pc, #656]	@ (80057b4 <HAL_RCC_OscConfig+0x348>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f7fe ff79 	bl	800441c <HAL_InitTick>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d039      	beq.n	80055a4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e308      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01e      	beq.n	800557a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800553c:	f7ff fdb0 	bl	80050a0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005540:	f7fe ffba 	bl	80044b8 <HAL_GetTick>
 8005544:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005548:	f7fe ffb6 	bl	80044b8 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e2f5      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800555a:	f7ff fdbf 	bl	80050dc <LL_RCC_MSI_IsReady>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f1      	beq.n	8005548 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff fdc8 	bl	80050fe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff fdec 	bl	8005150 <LL_RCC_MSI_SetCalibTrimming>
 8005578:	e015      	b.n	80055a6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800557a:	f7ff fda0 	bl	80050be <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800557e:	f7fe ff9b 	bl	80044b8 <HAL_GetTick>
 8005582:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005586:	f7fe ff97 	bl	80044b8 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e2d6      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005598:	f7ff fda0 	bl	80050dc <LL_RCC_MSI_IsReady>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f1      	bne.n	8005586 <HAL_RCC_OscConfig+0x11a>
 80055a2:	e000      	b.n	80055a6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80055a4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d047      	beq.n	8005642 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055b2:	f7ff fdf6 	bl	80051a2 <LL_RCC_GetSysClkSource>
 80055b6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055b8:	f7ff feef 	bl	800539a <LL_RCC_PLL_GetMainSource>
 80055bc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d005      	beq.n	80055d0 <HAL_RCC_OscConfig+0x164>
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	2b0c      	cmp	r3, #12
 80055c8:	d108      	bne.n	80055dc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d105      	bne.n	80055dc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d134      	bne.n	8005642 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e2b4      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e4:	d102      	bne.n	80055ec <HAL_RCC_OscConfig+0x180>
 80055e6:	f7ff fbdd 	bl	8004da4 <LL_RCC_HSE_Enable>
 80055ea:	e001      	b.n	80055f0 <HAL_RCC_OscConfig+0x184>
 80055ec:	f7ff fbe9 	bl	8004dc2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d012      	beq.n	800561e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f8:	f7fe ff5e 	bl	80044b8 <HAL_GetTick>
 80055fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005600:	f7fe ff5a 	bl	80044b8 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b64      	cmp	r3, #100	@ 0x64
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e299      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005612:	f7ff fbe5 	bl	8004de0 <LL_RCC_HSE_IsReady>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f1      	beq.n	8005600 <HAL_RCC_OscConfig+0x194>
 800561c:	e011      	b.n	8005642 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561e:	f7fe ff4b 	bl	80044b8 <HAL_GetTick>
 8005622:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005626:	f7fe ff47 	bl	80044b8 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b64      	cmp	r3, #100	@ 0x64
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e286      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005638:	f7ff fbd2 	bl	8004de0 <LL_RCC_HSE_IsReady>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f1      	bne.n	8005626 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d04c      	beq.n	80056e8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800564e:	f7ff fda8 	bl	80051a2 <LL_RCC_GetSysClkSource>
 8005652:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005654:	f7ff fea1 	bl	800539a <LL_RCC_PLL_GetMainSource>
 8005658:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b04      	cmp	r3, #4
 800565e:	d005      	beq.n	800566c <HAL_RCC_OscConfig+0x200>
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	2b0c      	cmp	r3, #12
 8005664:	d10e      	bne.n	8005684 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b02      	cmp	r3, #2
 800566a:	d10b      	bne.n	8005684 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e266      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff fbf1 	bl	8004e64 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005682:	e031      	b.n	80056e8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d019      	beq.n	80056c0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800568c:	f7ff fbba 	bl	8004e04 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005690:	f7fe ff12 	bl	80044b8 <HAL_GetTick>
 8005694:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005698:	f7fe ff0e 	bl	80044b8 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e24d      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80056aa:	f7ff fbc9 	bl	8004e40 <LL_RCC_HSI_IsReady>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0f1      	beq.n	8005698 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff fbd3 	bl	8004e64 <LL_RCC_HSI_SetCalibTrimming>
 80056be:	e013      	b.n	80056e8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056c0:	f7ff fbaf 	bl	8004e22 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c4:	f7fe fef8 	bl	80044b8 <HAL_GetTick>
 80056c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056cc:	f7fe fef4 	bl	80044b8 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e233      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80056de:	f7ff fbaf 	bl	8004e40 <LL_RCC_HSI_IsReady>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1f1      	bne.n	80056cc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d106      	bne.n	8005702 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80a3 	beq.w	8005848 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d076      	beq.n	80057f8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0310 	and.w	r3, r3, #16
 8005712:	2b00      	cmp	r3, #0
 8005714:	d046      	beq.n	80057a4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005716:	f7ff fc66 	bl	8004fe6 <LL_RCC_LSI1_IsReady>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d113      	bne.n	8005748 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005720:	f7ff fc3f 	bl	8004fa2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005724:	f7fe fec8 	bl	80044b8 <HAL_GetTick>
 8005728:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800572c:	f7fe fec4 	bl	80044b8 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e203      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800573e:	f7ff fc52 	bl	8004fe6 <LL_RCC_LSI1_IsReady>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0f1      	beq.n	800572c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005748:	f7ff fc5f 	bl	800500a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574c:	f7fe feb4 	bl	80044b8 <HAL_GetTick>
 8005750:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005754:	f7fe feb0 	bl	80044b8 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b03      	cmp	r3, #3
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e1ef      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005766:	f7ff fc72 	bl	800504e <LL_RCC_LSI2_IsReady>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0f1      	beq.n	8005754 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff fc7c 	bl	8005072 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800577a:	f7ff fc23 	bl	8004fc4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577e:	f7fe fe9b 	bl	80044b8 <HAL_GetTick>
 8005782:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005786:	f7fe fe97 	bl	80044b8 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e1d6      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005798:	f7ff fc25 	bl	8004fe6 <LL_RCC_LSI1_IsReady>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f1      	bne.n	8005786 <HAL_RCC_OscConfig+0x31a>
 80057a2:	e051      	b.n	8005848 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80057a4:	f7ff fbfd 	bl	8004fa2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a8:	f7fe fe86 	bl	80044b8 <HAL_GetTick>
 80057ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80057ae:	e00c      	b.n	80057ca <HAL_RCC_OscConfig+0x35e>
 80057b0:	20000014 	.word	0x20000014
 80057b4:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80057b8:	f7fe fe7e 	bl	80044b8 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e1bd      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80057ca:	f7ff fc0c 	bl	8004fe6 <LL_RCC_LSI1_IsReady>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0f1      	beq.n	80057b8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80057d4:	f7ff fc2a 	bl	800502c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80057da:	f7fe fe6d 	bl	80044b8 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e1ac      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80057ec:	f7ff fc2f 	bl	800504e <LL_RCC_LSI2_IsReady>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1f1      	bne.n	80057da <HAL_RCC_OscConfig+0x36e>
 80057f6:	e027      	b.n	8005848 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80057f8:	f7ff fc18 	bl	800502c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fc:	f7fe fe5c 	bl	80044b8 <HAL_GetTick>
 8005800:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005804:	f7fe fe58 	bl	80044b8 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b03      	cmp	r3, #3
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e197      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005816:	f7ff fc1a 	bl	800504e <LL_RCC_LSI2_IsReady>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1f1      	bne.n	8005804 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005820:	f7ff fbd0 	bl	8004fc4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005824:	f7fe fe48 	bl	80044b8 <HAL_GetTick>
 8005828:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800582c:	f7fe fe44 	bl	80044b8 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e183      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800583e:	f7ff fbd2 	bl	8004fe6 <LL_RCC_LSI1_IsReady>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f1      	bne.n	800582c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d05b      	beq.n	800590c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005854:	4ba7      	ldr	r3, [pc, #668]	@ (8005af4 <HAL_RCC_OscConfig+0x688>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800585c:	2b00      	cmp	r3, #0
 800585e:	d114      	bne.n	800588a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005860:	f7ff fa70 	bl	8004d44 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005864:	f7fe fe28 	bl	80044b8 <HAL_GetTick>
 8005868:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800586c:	f7fe fe24 	bl	80044b8 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b02      	cmp	r3, #2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e163      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800587e:	4b9d      	ldr	r3, [pc, #628]	@ (8005af4 <HAL_RCC_OscConfig+0x688>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0f0      	beq.n	800586c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d102      	bne.n	8005898 <HAL_RCC_OscConfig+0x42c>
 8005892:	f7ff fb30 	bl	8004ef6 <LL_RCC_LSE_Enable>
 8005896:	e00c      	b.n	80058b2 <HAL_RCC_OscConfig+0x446>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b05      	cmp	r3, #5
 800589e:	d104      	bne.n	80058aa <HAL_RCC_OscConfig+0x43e>
 80058a0:	f7ff fb4b 	bl	8004f3a <LL_RCC_LSE_EnableBypass>
 80058a4:	f7ff fb27 	bl	8004ef6 <LL_RCC_LSE_Enable>
 80058a8:	e003      	b.n	80058b2 <HAL_RCC_OscConfig+0x446>
 80058aa:	f7ff fb35 	bl	8004f18 <LL_RCC_LSE_Disable>
 80058ae:	f7ff fb55 	bl	8004f5c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d014      	beq.n	80058e4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ba:	f7fe fdfd 	bl	80044b8 <HAL_GetTick>
 80058be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80058c0:	e00a      	b.n	80058d8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c2:	f7fe fdf9 	bl	80044b8 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e136      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80058d8:	f7ff fb51 	bl	8004f7e <LL_RCC_LSE_IsReady>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0ef      	beq.n	80058c2 <HAL_RCC_OscConfig+0x456>
 80058e2:	e013      	b.n	800590c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e4:	f7fe fde8 	bl	80044b8 <HAL_GetTick>
 80058e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80058ea:	e00a      	b.n	8005902 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ec:	f7fe fde4 	bl	80044b8 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e121      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005902:	f7ff fb3c 	bl	8004f7e <LL_RCC_LSE_IsReady>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1ef      	bne.n	80058ec <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005914:	2b00      	cmp	r3, #0
 8005916:	d02c      	beq.n	8005972 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591c:	2b00      	cmp	r3, #0
 800591e:	d014      	beq.n	800594a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005920:	f7ff fab5 	bl	8004e8e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005924:	f7fe fdc8 	bl	80044b8 <HAL_GetTick>
 8005928:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800592c:	f7fe fdc4 	bl	80044b8 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e103      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800593e:	f7ff fac8 	bl	8004ed2 <LL_RCC_HSI48_IsReady>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f1      	beq.n	800592c <HAL_RCC_OscConfig+0x4c0>
 8005948:	e013      	b.n	8005972 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800594a:	f7ff fab1 	bl	8004eb0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594e:	f7fe fdb3 	bl	80044b8 <HAL_GetTick>
 8005952:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005954:	e008      	b.n	8005968 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005956:	f7fe fdaf 	bl	80044b8 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e0ee      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005968:	f7ff fab3 	bl	8004ed2 <LL_RCC_HSI48_IsReady>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f1      	bne.n	8005956 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 80e4 	beq.w	8005b44 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800597c:	f7ff fc11 	bl	80051a2 <LL_RCC_GetSysClkSource>
 8005980:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005982:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598e:	2b02      	cmp	r3, #2
 8005990:	f040 80b4 	bne.w	8005afc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f003 0203 	and.w	r2, r3, #3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599e:	429a      	cmp	r2, r3
 80059a0:	d123      	bne.n	80059ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d11c      	bne.n	80059ea <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	0a1b      	lsrs	r3, r3, #8
 80059b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059bc:	429a      	cmp	r2, r3
 80059be:	d114      	bne.n	80059ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d10d      	bne.n	80059ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059d8:	429a      	cmp	r2, r3
 80059da:	d106      	bne.n	80059ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d05d      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b0c      	cmp	r3, #12
 80059ee:	d058      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80059f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e0a1      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a02:	f7ff fc84 	bl	800530e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a06:	f7fe fd57 	bl	80044b8 <HAL_GetTick>
 8005a0a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a0c:	e008      	b.n	8005a20 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a0e:	f7fe fd53 	bl	80044b8 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e092      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1ef      	bne.n	8005a0e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	4b30      	ldr	r3, [pc, #192]	@ (8005af8 <HAL_RCC_OscConfig+0x68c>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a40:	4311      	orrs	r1, r2
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a46:	0212      	lsls	r2, r2, #8
 8005a48:	4311      	orrs	r1, r2
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a4e:	4311      	orrs	r1, r2
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a54:	4311      	orrs	r1, r2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a64:	f7ff fc44 	bl	80052f0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a78:	f7fe fd1e 	bl	80044b8 <HAL_GetTick>
 8005a7c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a80:	f7fe fd1a 	bl	80044b8 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e059      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0ef      	beq.n	8005a80 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005aa0:	e050      	b.n	8005b44 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e04f      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d147      	bne.n	8005b44 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ab4:	f7ff fc1c 	bl	80052f0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ab8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ac6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ac8:	f7fe fcf6 	bl	80044b8 <HAL_GetTick>
 8005acc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad0:	f7fe fcf2 	bl	80044b8 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e031      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0ef      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x664>
 8005af0:	e028      	b.n	8005b44 <HAL_RCC_OscConfig+0x6d8>
 8005af2:	bf00      	nop
 8005af4:	58000400 	.word	0x58000400
 8005af8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	2b0c      	cmp	r3, #12
 8005b00:	d01e      	beq.n	8005b40 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b02:	f7ff fc04 	bl	800530e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b06:	f7fe fcd7 	bl	80044b8 <HAL_GetTick>
 8005b0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b0c:	e008      	b.n	8005b20 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b0e:	f7fe fcd3 	bl	80044b8 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e012      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1ef      	bne.n	8005b0e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b38:	4b05      	ldr	r3, [pc, #20]	@ (8005b50 <HAL_RCC_OscConfig+0x6e4>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	60cb      	str	r3, [r1, #12]
 8005b3e:	e001      	b.n	8005b44 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e000      	b.n	8005b46 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3734      	adds	r7, #52	@ 0x34
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd90      	pop	{r4, r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	eefefffc 	.word	0xeefefffc

08005b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e12d      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b68:	4b98      	ldr	r3, [pc, #608]	@ (8005dcc <HAL_RCC_ClockConfig+0x278>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d91b      	bls.n	8005bae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b76:	4b95      	ldr	r3, [pc, #596]	@ (8005dcc <HAL_RCC_ClockConfig+0x278>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f023 0207 	bic.w	r2, r3, #7
 8005b7e:	4993      	ldr	r1, [pc, #588]	@ (8005dcc <HAL_RCC_ClockConfig+0x278>)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b86:	f7fe fc97 	bl	80044b8 <HAL_GetTick>
 8005b8a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b8e:	f7fe fc93 	bl	80044b8 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e111      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba0:	4b8a      	ldr	r3, [pc, #552]	@ (8005dcc <HAL_RCC_ClockConfig+0x278>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d1ef      	bne.n	8005b8e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d016      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7ff fafb 	bl	80051ba <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005bc4:	f7fe fc78 	bl	80044b8 <HAL_GetTick>
 8005bc8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bcc:	f7fe fc74 	bl	80044b8 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e0f2      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005bde:	f7ff fbe8 	bl	80053b2 <LL_RCC_IsActiveFlag_HPRE>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0f1      	beq.n	8005bcc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0320 	and.w	r3, r3, #32
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d016      	beq.n	8005c22 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7ff faf2 	bl	80051e2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005bfe:	f7fe fc5b 	bl	80044b8 <HAL_GetTick>
 8005c02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005c04:	e008      	b.n	8005c18 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c06:	f7fe fc57 	bl	80044b8 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d901      	bls.n	8005c18 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e0d5      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005c18:	f7ff fbdd 	bl	80053d6 <LL_RCC_IsActiveFlag_C2HPRE>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f1      	beq.n	8005c06 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d016      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff faeb 	bl	800520e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c38:	f7fe fc3e 	bl	80044b8 <HAL_GetTick>
 8005c3c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c40:	f7fe fc3a 	bl	80044b8 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e0b8      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005c52:	f7ff fbd3 	bl	80053fc <LL_RCC_IsActiveFlag_SHDHPRE>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0f1      	beq.n	8005c40 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d016      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fae5 	bl	800523c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c72:	f7fe fc21 	bl	80044b8 <HAL_GetTick>
 8005c76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c78:	e008      	b.n	8005c8c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c7a:	f7fe fc1d 	bl	80044b8 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e09b      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c8c:	f7ff fbc9 	bl	8005422 <LL_RCC_IsActiveFlag_PPRE1>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f1      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d017      	beq.n	8005cd2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff fadb 	bl	8005264 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005cae:	f7fe fc03 	bl	80044b8 <HAL_GetTick>
 8005cb2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005cb6:	f7fe fbff 	bl	80044b8 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e07d      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005cc8:	f7ff fbbd 	bl	8005446 <LL_RCC_IsActiveFlag_PPRE2>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f1      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d043      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d106      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005ce6:	f7ff f87b 	bl	8004de0 <LL_RCC_HSE_IsReady>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d11e      	bne.n	8005d2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e067      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d106      	bne.n	8005d0a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005cfc:	f7ff fb16 	bl	800532c <LL_RCC_PLL_IsReady>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d113      	bne.n	8005d2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e05c      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005d12:	f7ff f9e3 	bl	80050dc <LL_RCC_MSI_IsReady>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d108      	bne.n	8005d2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e051      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005d20:	f7ff f88e 	bl	8004e40 <LL_RCC_HSI_IsReady>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e04a      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff fa21 	bl	800517a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d38:	f7fe fbbe 	bl	80044b8 <HAL_GetTick>
 8005d3c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3e:	e00a      	b.n	8005d56 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d40:	f7fe fbba 	bl	80044b8 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e036      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d56:	f7ff fa24 	bl	80051a2 <LL_RCC_GetSysClkSource>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d1ec      	bne.n	8005d40 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d66:	4b19      	ldr	r3, [pc, #100]	@ (8005dcc <HAL_RCC_ClockConfig+0x278>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d21b      	bcs.n	8005dac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d74:	4b15      	ldr	r3, [pc, #84]	@ (8005dcc <HAL_RCC_ClockConfig+0x278>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f023 0207 	bic.w	r2, r3, #7
 8005d7c:	4913      	ldr	r1, [pc, #76]	@ (8005dcc <HAL_RCC_ClockConfig+0x278>)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d84:	f7fe fb98 	bl	80044b8 <HAL_GetTick>
 8005d88:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8a:	e008      	b.n	8005d9e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d8c:	f7fe fb94 	bl	80044b8 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e012      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005dcc <HAL_RCC_ClockConfig+0x278>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d1ef      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005dac:	f000 f87e 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 8005db0:	4603      	mov	r3, r0
 8005db2:	4a07      	ldr	r2, [pc, #28]	@ (8005dd0 <HAL_RCC_ClockConfig+0x27c>)
 8005db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005db6:	f7fe fb8b 	bl	80044d0 <HAL_GetTickPrio>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fe fb2d 	bl	800441c <HAL_InitTick>
 8005dc2:	4603      	mov	r3, r0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	58004000 	.word	0x58004000
 8005dd0:	20000014 	.word	0x20000014

08005dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dd4:	b590      	push	{r4, r7, lr}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dda:	f7ff f9e2 	bl	80051a2 <LL_RCC_GetSysClkSource>
 8005dde:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10a      	bne.n	8005dfc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005de6:	f7ff f99e 	bl	8005126 <LL_RCC_MSI_GetRange>
 8005dea:	4603      	mov	r3, r0
 8005dec:	091b      	lsrs	r3, r3, #4
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	4a2b      	ldr	r2, [pc, #172]	@ (8005ea0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	e04b      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d102      	bne.n	8005e08 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e02:	4b28      	ldr	r3, [pc, #160]	@ (8005ea4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	e045      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d10a      	bne.n	8005e24 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e0e:	f7fe ffb7 	bl	8004d80 <LL_RCC_HSE_IsEnabledDiv2>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d102      	bne.n	8005e1e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005e18:	4b22      	ldr	r3, [pc, #136]	@ (8005ea4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	e03a      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005e1e:	4b22      	ldr	r3, [pc, #136]	@ (8005ea8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	e037      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005e24:	f7ff fab9 	bl	800539a <LL_RCC_PLL_GetMainSource>
 8005e28:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d003      	beq.n	8005e38 <HAL_RCC_GetSysClockFreq+0x64>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d003      	beq.n	8005e3e <HAL_RCC_GetSysClockFreq+0x6a>
 8005e36:	e00d      	b.n	8005e54 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005e38:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e3a:	60bb      	str	r3, [r7, #8]
        break;
 8005e3c:	e015      	b.n	8005e6a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e3e:	f7fe ff9f 	bl	8004d80 <LL_RCC_HSE_IsEnabledDiv2>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d102      	bne.n	8005e4e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005e48:	4b16      	ldr	r3, [pc, #88]	@ (8005ea4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e4a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005e4c:	e00d      	b.n	8005e6a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005e4e:	4b16      	ldr	r3, [pc, #88]	@ (8005ea8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005e50:	60bb      	str	r3, [r7, #8]
        break;
 8005e52:	e00a      	b.n	8005e6a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005e54:	f7ff f967 	bl	8005126 <LL_RCC_MSI_GetRange>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	091b      	lsrs	r3, r3, #4
 8005e5c:	f003 030f 	and.w	r3, r3, #15
 8005e60:	4a0f      	ldr	r2, [pc, #60]	@ (8005ea0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e66:	60bb      	str	r3, [r7, #8]
        break;
 8005e68:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005e6a:	f7ff fa71 	bl	8005350 <LL_RCC_PLL_GetN>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	fb03 f402 	mul.w	r4, r3, r2
 8005e76:	f7ff fa84 	bl	8005382 <LL_RCC_PLL_GetDivider>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	091b      	lsrs	r3, r3, #4
 8005e7e:	3301      	adds	r3, #1
 8005e80:	fbb4 f4f3 	udiv	r4, r4, r3
 8005e84:	f7ff fa71 	bl	800536a <LL_RCC_PLL_GetR>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	0f5b      	lsrs	r3, r3, #29
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	fbb4 f3f3 	udiv	r3, r4, r3
 8005e92:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005e94:	68fb      	ldr	r3, [r7, #12]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd90      	pop	{r4, r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	08014594 	.word	0x08014594
 8005ea4:	00f42400 	.word	0x00f42400
 8005ea8:	01e84800 	.word	0x01e84800

08005eac <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eac:	b598      	push	{r3, r4, r7, lr}
 8005eae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005eb0:	f7ff ff90 	bl	8005dd4 <HAL_RCC_GetSysClockFreq>
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	f7ff f9e9 	bl	800528c <LL_RCC_GetAHBPrescaler>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	091b      	lsrs	r3, r3, #4
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	4a03      	ldr	r2, [pc, #12]	@ (8005ed0 <HAL_RCC_GetHCLKFreq+0x24>)
 8005ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ec8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	bd98      	pop	{r3, r4, r7, pc}
 8005ed0:	08014534 	.word	0x08014534

08005ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ed4:	b598      	push	{r3, r4, r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005ed8:	f7ff ffe8 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 8005edc:	4604      	mov	r4, r0
 8005ede:	f7ff f9ef 	bl	80052c0 <LL_RCC_GetAPB1Prescaler>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	4a04      	ldr	r2, [pc, #16]	@ (8005efc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef0:	f003 031f 	and.w	r3, r3, #31
 8005ef4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	bd98      	pop	{r3, r4, r7, pc}
 8005efc:	08014574 	.word	0x08014574

08005f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f00:	b598      	push	{r3, r4, r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005f04:	f7ff ffd2 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 8005f08:	4604      	mov	r4, r0
 8005f0a:	f7ff f9e5 	bl	80052d8 <LL_RCC_GetAPB2Prescaler>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	0adb      	lsrs	r3, r3, #11
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	4a04      	ldr	r2, [pc, #16]	@ (8005f28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	bd98      	pop	{r3, r4, r7, pc}
 8005f28:	08014574 	.word	0x08014574

08005f2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005f2c:	b590      	push	{r4, r7, lr}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2bb0      	cmp	r3, #176	@ 0xb0
 8005f38:	d903      	bls.n	8005f42 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005f3a:	4b15      	ldr	r3, [pc, #84]	@ (8005f90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	e007      	b.n	8005f52 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	091b      	lsrs	r3, r3, #4
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	4a11      	ldr	r2, [pc, #68]	@ (8005f90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f50:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005f52:	f7ff f9a7 	bl	80052a4 <LL_RCC_GetAHB4Prescaler>
 8005f56:	4603      	mov	r3, r0
 8005f58:	091b      	lsrs	r3, r3, #4
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	4a0d      	ldr	r2, [pc, #52]	@ (8005f94 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f98 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005f70:	fba2 2303 	umull	r2, r3, r2, r3
 8005f74:	0c9c      	lsrs	r4, r3, #18
 8005f76:	f7fe fef5 	bl	8004d64 <HAL_PWREx_GetVoltageRange>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f000 f80c 	bl	8005f9c <RCC_SetFlashLatency>
 8005f84:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd90      	pop	{r4, r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	08014594 	.word	0x08014594
 8005f94:	08014534 	.word	0x08014534
 8005f98:	431bde83 	.word	0x431bde83

08005f9c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005f9c:	b590      	push	{r4, r7, lr}
 8005f9e:	b093      	sub	sp, #76	@ 0x4c
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005fa6:	4b37      	ldr	r3, [pc, #220]	@ (8006084 <RCC_SetFlashLatency+0xe8>)
 8005fa8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8005fac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005fae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005fb2:	4a35      	ldr	r2, [pc, #212]	@ (8006088 <RCC_SetFlashLatency+0xec>)
 8005fb4:	f107 031c 	add.w	r3, r7, #28
 8005fb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8005fba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005fbe:	4b33      	ldr	r3, [pc, #204]	@ (800608c <RCC_SetFlashLatency+0xf0>)
 8005fc0:	f107 040c 	add.w	r4, r7, #12
 8005fc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005fc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005fca:	2300      	movs	r3, #0
 8005fcc:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fd4:	d11a      	bne.n	800600c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fda:	e013      	b.n	8006004 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	3348      	adds	r3, #72	@ 0x48
 8005fe2:	443b      	add	r3, r7
 8005fe4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d807      	bhi.n	8005ffe <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	3348      	adds	r3, #72	@ 0x48
 8005ff4:	443b      	add	r3, r7
 8005ff6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005ffa:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005ffc:	e020      	b.n	8006040 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005ffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006000:	3301      	adds	r3, #1
 8006002:	643b      	str	r3, [r7, #64]	@ 0x40
 8006004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006006:	2b03      	cmp	r3, #3
 8006008:	d9e8      	bls.n	8005fdc <RCC_SetFlashLatency+0x40>
 800600a:	e019      	b.n	8006040 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800600c:	2300      	movs	r3, #0
 800600e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006010:	e013      	b.n	800603a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	3348      	adds	r3, #72	@ 0x48
 8006018:	443b      	add	r3, r7
 800601a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	429a      	cmp	r2, r3
 8006022:	d807      	bhi.n	8006034 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	3348      	adds	r3, #72	@ 0x48
 800602a:	443b      	add	r3, r7
 800602c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006030:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006032:	e005      	b.n	8006040 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006036:	3301      	adds	r3, #1
 8006038:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800603a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800603c:	2b02      	cmp	r3, #2
 800603e:	d9e8      	bls.n	8006012 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006040:	4b13      	ldr	r3, [pc, #76]	@ (8006090 <RCC_SetFlashLatency+0xf4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f023 0207 	bic.w	r2, r3, #7
 8006048:	4911      	ldr	r1, [pc, #68]	@ (8006090 <RCC_SetFlashLatency+0xf4>)
 800604a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800604c:	4313      	orrs	r3, r2
 800604e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006050:	f7fe fa32 	bl	80044b8 <HAL_GetTick>
 8006054:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006056:	e008      	b.n	800606a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006058:	f7fe fa2e 	bl	80044b8 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d901      	bls.n	800606a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e007      	b.n	800607a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800606a:	4b09      	ldr	r3, [pc, #36]	@ (8006090 <RCC_SetFlashLatency+0xf4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006074:	429a      	cmp	r2, r3
 8006076:	d1ef      	bne.n	8006058 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	374c      	adds	r7, #76	@ 0x4c
 800607e:	46bd      	mov	sp, r7
 8006080:	bd90      	pop	{r4, r7, pc}
 8006082:	bf00      	nop
 8006084:	08014268 	.word	0x08014268
 8006088:	08014278 	.word	0x08014278
 800608c:	08014284 	.word	0x08014284
 8006090:	58004000 	.word	0x58004000

08006094 <LL_RCC_LSE_IsEnabled>:
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800609c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <LL_RCC_LSE_IsEnabled+0x18>
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <LL_RCC_LSE_IsEnabled+0x1a>
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <LL_RCC_LSE_IsReady>:
{
 80060b8:	b480      	push	{r7}
 80060ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80060bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d101      	bne.n	80060d0 <LL_RCC_LSE_IsReady+0x18>
 80060cc:	2301      	movs	r3, #1
 80060ce:	e000      	b.n	80060d2 <LL_RCC_LSE_IsReady+0x1a>
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <LL_RCC_SetRFWKPClockSource>:
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80060e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80060f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <LL_RCC_SetSMPSClockSource>:
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006116:	f023 0203 	bic.w	r2, r3, #3
 800611a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4313      	orrs	r3, r2
 8006122:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <LL_RCC_SetSMPSPrescaler>:
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800613c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006142:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4313      	orrs	r3, r2
 800614a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <LL_RCC_SetUSARTClockSource>:
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006168:	f023 0203 	bic.w	r2, r3, #3
 800616c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4313      	orrs	r3, r2
 8006174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <LL_RCC_SetLPUARTClockSource>:
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800618c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006194:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006198:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4313      	orrs	r3, r2
 80061a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <LL_RCC_SetI2CClockSource>:
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80061b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	091b      	lsrs	r3, r3, #4
 80061c4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80061c8:	43db      	mvns	r3, r3
 80061ca:	401a      	ands	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80061d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061d8:	4313      	orrs	r3, r2
 80061da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <LL_RCC_SetLPTIMClockSource>:
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80061f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	0c1b      	lsrs	r3, r3, #16
 80061fe:	041b      	lsls	r3, r3, #16
 8006200:	43db      	mvns	r3, r3
 8006202:	401a      	ands	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	041b      	lsls	r3, r3, #16
 8006208:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800620c:	4313      	orrs	r3, r2
 800620e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <LL_RCC_SetSAIClockSource>:
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800622e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006232:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <LL_RCC_SetRNGClockSource>:
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006252:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800625a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800625e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4313      	orrs	r3, r2
 8006266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <LL_RCC_SetCLK48ClockSource>:
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800627e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006286:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800628a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4313      	orrs	r3, r2
 8006292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <LL_RCC_SetUSBClockSource>:
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b082      	sub	sp, #8
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7ff ffe3 	bl	8006276 <LL_RCC_SetCLK48ClockSource>
}
 80062b0:	bf00      	nop
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <LL_RCC_SetADCClockSource>:
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80062c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80062cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <LL_RCC_SetRTCClockSource>:
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80062ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4313      	orrs	r3, r2
 8006300:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <LL_RCC_GetRTCClockSource>:
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800631c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006320:	4618      	mov	r0, r3
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <LL_RCC_ForceBackupDomainReset>:
{
 800632a:	b480      	push	{r7}
 800632c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800632e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006336:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800633a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800633e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006342:	bf00      	nop
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <LL_RCC_ReleaseBackupDomainReset>:
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006358:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800635c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006360:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006364:	bf00      	nop
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <LL_RCC_PLLSAI1_Enable>:
{
 800636e:	b480      	push	{r7}
 8006370:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800637c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006380:	6013      	str	r3, [r2, #0]
}
 8006382:	bf00      	nop
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <LL_RCC_PLLSAI1_Disable>:
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006390:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800639a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800639e:	6013      	str	r3, [r2, #0]
}
 80063a0:	bf00      	nop
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <LL_RCC_PLLSAI1_IsReady>:
{
 80063aa:	b480      	push	{r7}
 80063ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80063ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063bc:	d101      	bne.n	80063c2 <LL_RCC_PLLSAI1_IsReady+0x18>
 80063be:	2301      	movs	r3, #1
 80063c0:	e000      	b.n	80063c4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b088      	sub	sp, #32
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80063d6:	2300      	movs	r3, #0
 80063d8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80063da:	2300      	movs	r3, #0
 80063dc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d034      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80063f2:	d021      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80063f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80063f8:	d81b      	bhi.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80063fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80063fe:	d01d      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006400:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006404:	d815      	bhi.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00b      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800640a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800640e:	d110      	bne.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800641a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800641e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006420:	e00d      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	3304      	adds	r3, #4
 8006426:	4618      	mov	r0, r3
 8006428:	f000 f947 	bl	80066ba <RCCEx_PLLSAI1_ConfigNP>
 800642c:	4603      	mov	r3, r0
 800642e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006430:	e005      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	77fb      	strb	r3, [r7, #31]
        break;
 8006436:	e002      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006438:	bf00      	nop
 800643a:	e000      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800643c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800643e:	7ffb      	ldrb	r3, [r7, #31]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d105      	bne.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff fee8 	bl	800621e <LL_RCC_SetSAIClockSource>
 800644e:	e001      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006450:	7ffb      	ldrb	r3, [r7, #31]
 8006452:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800645c:	2b00      	cmp	r3, #0
 800645e:	d046      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006460:	f7ff ff56 	bl	8006310 <LL_RCC_GetRTCClockSource>
 8006464:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	429a      	cmp	r2, r3
 800646e:	d03c      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006470:	f7fe fc68 	bl	8004d44 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d105      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff ff30 	bl	80062e4 <LL_RCC_SetRTCClockSource>
 8006484:	e02e      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800648a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006490:	f7ff ff4b 	bl	800632a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006494:	f7ff ff5a 	bl	800634c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a2:	4313      	orrs	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80064a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80064b0:	f7ff fdf0 	bl	8006094 <LL_RCC_LSE_IsEnabled>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d114      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064ba:	f7fd fffd 	bl	80044b8 <HAL_GetTick>
 80064be:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80064c0:	e00b      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064c2:	f7fd fff9 	bl	80044b8 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d902      	bls.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	77fb      	strb	r3, [r7, #31]
              break;
 80064d8:	e004      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80064da:	f7ff fded 	bl	80060b8 <LL_RCC_LSE_IsReady>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d1ee      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80064e4:	7ffb      	ldrb	r3, [r7, #31]
 80064e6:	77bb      	strb	r3, [r7, #30]
 80064e8:	e001      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ea:	7ffb      	ldrb	r3, [r7, #31]
 80064ec:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff fe2a 	bl	8006158 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d004      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff fe35 	bl	8006184 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0310 	and.w	r3, r3, #16
 8006522:	2b00      	cmp	r3, #0
 8006524:	d004      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff fe5d 	bl	80061ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0320 	and.w	r3, r3, #32
 8006538:	2b00      	cmp	r3, #0
 800653a:	d004      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff fe52 	bl	80061ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b00      	cmp	r3, #0
 8006550:	d004      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff fe2a 	bl	80061b0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0308 	and.w	r3, r3, #8
 8006564:	2b00      	cmp	r3, #0
 8006566:	d004      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fe1f 	bl	80061b0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800657a:	2b00      	cmp	r3, #0
 800657c:	d022      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fe8d 	bl	80062a2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800658c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006590:	d107      	bne.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006592:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800659c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065a0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065aa:	d10b      	bne.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3304      	adds	r3, #4
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 f8dd 	bl	8006770 <RCCEx_PLLSAI1_ConfigNQ>
 80065b6:	4603      	mov	r3, r0
 80065b8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80065ba:	7ffb      	ldrb	r3, [r7, #31]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80065c0:	7ffb      	ldrb	r3, [r7, #31]
 80065c2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d02b      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d8:	d008      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065e2:	d003      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d105      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7ff fe2a 	bl	800624a <LL_RCC_SetRNGClockSource>
 80065f6:	e00a      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x240>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	2000      	movs	r0, #0
 8006604:	f7ff fe21 	bl	800624a <LL_RCC_SetRNGClockSource>
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f7ff fe34 	bl	8006276 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006612:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006616:	d107      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006622:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006626:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006630:	2b00      	cmp	r3, #0
 8006632:	d022      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff fe3d 	bl	80062b8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006642:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006646:	d107      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006656:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800665c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006660:	d10b      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3304      	adds	r3, #4
 8006666:	4618      	mov	r0, r3
 8006668:	f000 f8dd 	bl	8006826 <RCCEx_PLLSAI1_ConfigNR>
 800666c:	4603      	mov	r3, r0
 800666e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006670:	7ffb      	ldrb	r3, [r7, #31]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006676:	7ffb      	ldrb	r3, [r7, #31]
 8006678:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d004      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668a:	4618      	mov	r0, r3
 800668c:	f7ff fd26 	bl	80060dc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d009      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff fd45 	bl	8006130 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff fd2c 	bl	8006108 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80066b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3720      	adds	r7, #32
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80066c6:	f7ff fe61 	bl	800638c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066ca:	f7fd fef5 	bl	80044b8 <HAL_GetTick>
 80066ce:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066d0:	e009      	b.n	80066e6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066d2:	f7fd fef1 	bl	80044b8 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d902      	bls.n	80066e6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	73fb      	strb	r3, [r7, #15]
      break;
 80066e4:	e004      	b.n	80066f0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066e6:	f7ff fe60 	bl	80063aa <LL_RCC_PLLSAI1_IsReady>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1f0      	bne.n	80066d2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d137      	bne.n	8006766 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80066f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	021b      	lsls	r3, r3, #8
 8006706:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800670a:	4313      	orrs	r3, r2
 800670c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800670e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006720:	4313      	orrs	r3, r2
 8006722:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006724:	f7ff fe23 	bl	800636e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006728:	f7fd fec6 	bl	80044b8 <HAL_GetTick>
 800672c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800672e:	e009      	b.n	8006744 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006730:	f7fd fec2 	bl	80044b8 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d902      	bls.n	8006744 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	73fb      	strb	r3, [r7, #15]
        break;
 8006742:	e004      	b.n	800674e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006744:	f7ff fe31 	bl	80063aa <LL_RCC_PLLSAI1_IsReady>
 8006748:	4603      	mov	r3, r0
 800674a:	2b01      	cmp	r3, #1
 800674c:	d1f0      	bne.n	8006730 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d108      	bne.n	8006766 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006758:	691a      	ldr	r2, [r3, #16]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006762:	4313      	orrs	r3, r2
 8006764:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006766:	7bfb      	ldrb	r3, [r7, #15]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800677c:	f7ff fe06 	bl	800638c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006780:	f7fd fe9a 	bl	80044b8 <HAL_GetTick>
 8006784:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006786:	e009      	b.n	800679c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006788:	f7fd fe96 	bl	80044b8 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d902      	bls.n	800679c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	73fb      	strb	r3, [r7, #15]
      break;
 800679a:	e004      	b.n	80067a6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800679c:	f7ff fe05 	bl	80063aa <LL_RCC_PLLSAI1_IsReady>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1f0      	bne.n	8006788 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d137      	bne.n	800681c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80067ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80067c0:	4313      	orrs	r3, r2
 80067c2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80067c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80067d6:	4313      	orrs	r3, r2
 80067d8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80067da:	f7ff fdc8 	bl	800636e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067de:	f7fd fe6b 	bl	80044b8 <HAL_GetTick>
 80067e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067e4:	e009      	b.n	80067fa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067e6:	f7fd fe67 	bl	80044b8 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d902      	bls.n	80067fa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	73fb      	strb	r3, [r7, #15]
        break;
 80067f8:	e004      	b.n	8006804 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067fa:	f7ff fdd6 	bl	80063aa <LL_RCC_PLLSAI1_IsReady>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b01      	cmp	r3, #1
 8006802:	d1f0      	bne.n	80067e6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d108      	bne.n	800681c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800680a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800680e:	691a      	ldr	r2, [r3, #16]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006818:	4313      	orrs	r3, r2
 800681a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800681c:	7bfb      	ldrb	r3, [r7, #15]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006832:	f7ff fdab 	bl	800638c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006836:	f7fd fe3f 	bl	80044b8 <HAL_GetTick>
 800683a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800683c:	e009      	b.n	8006852 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800683e:	f7fd fe3b 	bl	80044b8 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	2b02      	cmp	r3, #2
 800684a:	d902      	bls.n	8006852 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	73fb      	strb	r3, [r7, #15]
      break;
 8006850:	e004      	b.n	800685c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006852:	f7ff fdaa 	bl	80063aa <LL_RCC_PLLSAI1_IsReady>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1f0      	bne.n	800683e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800685c:	7bfb      	ldrb	r3, [r7, #15]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d137      	bne.n	80068d2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	021b      	lsls	r3, r3, #8
 8006872:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006876:	4313      	orrs	r3, r2
 8006878:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800687a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800688c:	4313      	orrs	r3, r2
 800688e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006890:	f7ff fd6d 	bl	800636e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006894:	f7fd fe10 	bl	80044b8 <HAL_GetTick>
 8006898:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800689a:	e009      	b.n	80068b0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800689c:	f7fd fe0c 	bl	80044b8 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d902      	bls.n	80068b0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	73fb      	strb	r3, [r7, #15]
        break;
 80068ae:	e004      	b.n	80068ba <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80068b0:	f7ff fd7b 	bl	80063aa <LL_RCC_PLLSAI1_IsReady>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d1f0      	bne.n	800689c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d108      	bne.n	80068d2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80068c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068ce:	4313      	orrs	r3, r2
 80068d0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e09f      	b.n	8006a2e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d106      	bne.n	8006908 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7fd fb5a 	bl	8003fbc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006910:	4b49      	ldr	r3, [pc, #292]	@ (8006a38 <HAL_RTC_Init+0x15c>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f003 0310 	and.w	r3, r3, #16
 8006918:	2b10      	cmp	r3, #16
 800691a:	d07e      	beq.n	8006a1a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	22ca      	movs	r2, #202	@ 0xca
 8006922:	625a      	str	r2, [r3, #36]	@ 0x24
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2253      	movs	r2, #83	@ 0x53
 800692a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f8ab 	bl	8006a88 <RTC_EnterInitMode>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	22ff      	movs	r2, #255	@ 0xff
 800693e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2204      	movs	r2, #4
 8006944:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	73fb      	strb	r3, [r7, #15]
 800694c:	e067      	b.n	8006a1e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6812      	ldr	r2, [r2, #0]
 8006958:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800695c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006960:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6899      	ldr	r1, [r3, #8]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	68d2      	ldr	r2, [r2, #12]
 8006988:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6919      	ldr	r1, [r3, #16]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	041a      	lsls	r2, r3, #16
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069ac:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 0203 	bic.w	r2, r2, #3
 80069bc:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	69da      	ldr	r2, [r3, #28]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d113      	bne.n	8006a0c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f829 	bl	8006a3c <HAL_RTC_WaitForSynchro>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00d      	beq.n	8006a0c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	22ff      	movs	r2, #255	@ 0xff
 80069f6:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2204      	movs	r2, #4
 80069fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e010      	b.n	8006a2e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	22ff      	movs	r2, #255	@ 0xff
 8006a12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	73fb      	strb	r3, [r7, #15]
 8006a18:	e001      	b.n	8006a1e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d103      	bne.n	8006a2c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	40002800 	.word	0x40002800

08006a3c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006a52:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006a54:	f7fd fd30 	bl	80044b8 <HAL_GetTick>
 8006a58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a5a:	e009      	b.n	8006a70 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a5c:	f7fd fd2c 	bl	80044b8 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a6a:	d901      	bls.n	8006a70 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e007      	b.n	8006a80 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f003 0320 	and.w	r3, r3, #32
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0ee      	beq.n	8006a5c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d119      	bne.n	8006ad2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006aa8:	f7fd fd06 	bl	80044b8 <HAL_GetTick>
 8006aac:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006aae:	e009      	b.n	8006ac4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006ab0:	f7fd fd02 	bl	80044b8 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006abe:	d901      	bls.n	8006ac4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e007      	b.n	8006ad4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0ee      	beq.n	8006ab0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d101      	bne.n	8006af6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006af2:	2302      	movs	r3, #2
 8006af4:	e0a8      	b.n	8006c48 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2202      	movs	r2, #2
 8006b02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	22ca      	movs	r2, #202	@ 0xca
 8006b0c:	625a      	str	r2, [r3, #36]	@ 0x24
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2253      	movs	r2, #83	@ 0x53
 8006b14:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d020      	beq.n	8006b66 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006b24:	f7fd fcc8 	bl	80044b8 <HAL_GetTick>
 8006b28:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006b2a:	e015      	b.n	8006b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b2c:	f7fd fcc4 	bl	80044b8 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b3a:	d90d      	bls.n	8006b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	22ff      	movs	r2, #255	@ 0xff
 8006b42:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2203      	movs	r2, #3
 8006b48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e077      	b.n	8006c48 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f003 0304 	and.w	r3, r3, #4
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e2      	bne.n	8006b2c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b74:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8006b86:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006b88:	f7fd fc96 	bl	80044b8 <HAL_GetTick>
 8006b8c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006b8e:	e015      	b.n	8006bbc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b90:	f7fd fc92 	bl	80044b8 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b9e:	d90d      	bls.n	8006bbc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	22ff      	movs	r2, #255	@ 0xff
 8006ba6:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2203      	movs	r2, #3
 8006bac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e045      	b.n	8006c48 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	f003 0304 	and.w	r3, r3, #4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0e2      	beq.n	8006b90 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0207 	bic.w	r2, r2, #7
 8006be0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6899      	ldr	r1, [r3, #8]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006bf2:	4b17      	ldr	r3, [pc, #92]	@ (8006c50 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bf8:	4a15      	ldr	r2, [pc, #84]	@ (8006c50 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006bfa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006bfe:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006c02:	4b13      	ldr	r3, [pc, #76]	@ (8006c50 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a12      	ldr	r2, [pc, #72]	@ (8006c50 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006c08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c0c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c1c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006c2c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	22ff      	movs	r2, #255	@ 0xff
 8006c34:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	58000800 	.word	0x58000800

08006c54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e095      	b.n	8006d92 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d108      	bne.n	8006c80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c76:	d009      	beq.n	8006c8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	61da      	str	r2, [r3, #28]
 8006c7e:	e005      	b.n	8006c8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d106      	bne.n	8006cac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7fd f9bc 	bl	8004024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ccc:	d902      	bls.n	8006cd4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60fb      	str	r3, [r7, #12]
 8006cd2:	e002      	b.n	8006cda <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006cd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006cd8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006ce2:	d007      	beq.n	8006cf4 <HAL_SPI_Init+0xa0>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006cec:	d002      	beq.n	8006cf4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d22:	431a      	orrs	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d36:	ea42 0103 	orr.w	r1, r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	0c1b      	lsrs	r3, r3, #16
 8006d50:	f003 0204 	and.w	r2, r3, #4
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d58:	f003 0310 	and.w	r3, r3, #16
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d62:	f003 0308 	and.w	r3, r3, #8
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006d70:	ea42 0103 	orr.w	r1, r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b08a      	sub	sp, #40	@ 0x28
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	60f8      	str	r0, [r7, #12]
 8006da2:	60b9      	str	r1, [r7, #8]
 8006da4:	607a      	str	r2, [r7, #4]
 8006da6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006da8:	2301      	movs	r3, #1
 8006daa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d101      	bne.n	8006dc0 <HAL_SPI_TransmitReceive+0x26>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e20a      	b.n	80071d6 <HAL_SPI_TransmitReceive+0x43c>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dc8:	f7fd fb76 	bl	80044b8 <HAL_GetTick>
 8006dcc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006dd4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006ddc:	887b      	ldrh	r3, [r7, #2]
 8006dde:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006de0:	887b      	ldrh	r3, [r7, #2]
 8006de2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006de4:	7efb      	ldrb	r3, [r7, #27]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d00e      	beq.n	8006e08 <HAL_SPI_TransmitReceive+0x6e>
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006df0:	d106      	bne.n	8006e00 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d102      	bne.n	8006e00 <HAL_SPI_TransmitReceive+0x66>
 8006dfa:	7efb      	ldrb	r3, [r7, #27]
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	d003      	beq.n	8006e08 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006e00:	2302      	movs	r3, #2
 8006e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006e06:	e1e0      	b.n	80071ca <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d005      	beq.n	8006e1a <HAL_SPI_TransmitReceive+0x80>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <HAL_SPI_TransmitReceive+0x80>
 8006e14:	887b      	ldrh	r3, [r7, #2]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d103      	bne.n	8006e22 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006e20:	e1d3      	b.n	80071ca <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d003      	beq.n	8006e36 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2205      	movs	r2, #5
 8006e32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	887a      	ldrh	r2, [r7, #2]
 8006e46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	887a      	ldrh	r2, [r7, #2]
 8006e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	887a      	ldrh	r2, [r7, #2]
 8006e5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	887a      	ldrh	r2, [r7, #2]
 8006e62:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e78:	d802      	bhi.n	8006e80 <HAL_SPI_TransmitReceive+0xe6>
 8006e7a:	8a3b      	ldrh	r3, [r7, #16]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d908      	bls.n	8006e92 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e8e:	605a      	str	r2, [r3, #4]
 8006e90:	e007      	b.n	8006ea2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ea0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eac:	2b40      	cmp	r3, #64	@ 0x40
 8006eae:	d007      	beq.n	8006ec0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ebe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ec8:	f240 8081 	bls.w	8006fce <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <HAL_SPI_TransmitReceive+0x140>
 8006ed4:	8a7b      	ldrh	r3, [r7, #18]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d16d      	bne.n	8006fb6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ede:	881a      	ldrh	r2, [r3, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eea:	1c9a      	adds	r2, r3, #2
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006efe:	e05a      	b.n	8006fb6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d11b      	bne.n	8006f46 <HAL_SPI_TransmitReceive+0x1ac>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d016      	beq.n	8006f46 <HAL_SPI_TransmitReceive+0x1ac>
 8006f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d113      	bne.n	8006f46 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f22:	881a      	ldrh	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2e:	1c9a      	adds	r2, r3, #2
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d11c      	bne.n	8006f8e <HAL_SPI_TransmitReceive+0x1f4>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d016      	beq.n	8006f8e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f6a:	b292      	uxth	r2, r2
 8006f6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f72:	1c9a      	adds	r2, r3, #2
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f8e:	f7fd fa93 	bl	80044b8 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d80b      	bhi.n	8006fb6 <HAL_SPI_TransmitReceive+0x21c>
 8006f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa4:	d007      	beq.n	8006fb6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006fb4:	e109      	b.n	80071ca <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d19f      	bne.n	8006f00 <HAL_SPI_TransmitReceive+0x166>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d199      	bne.n	8006f00 <HAL_SPI_TransmitReceive+0x166>
 8006fcc:	e0e3      	b.n	8007196 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <HAL_SPI_TransmitReceive+0x244>
 8006fd6:	8a7b      	ldrh	r3, [r7, #18]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	f040 80cf 	bne.w	800717c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d912      	bls.n	800700e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fec:	881a      	ldrh	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff8:	1c9a      	adds	r2, r3, #2
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007002:	b29b      	uxth	r3, r3
 8007004:	3b02      	subs	r3, #2
 8007006:	b29a      	uxth	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800700c:	e0b6      	b.n	800717c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	330c      	adds	r3, #12
 8007018:	7812      	ldrb	r2, [r2, #0]
 800701a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800702a:	b29b      	uxth	r3, r3
 800702c:	3b01      	subs	r3, #1
 800702e:	b29a      	uxth	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007034:	e0a2      	b.n	800717c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b02      	cmp	r3, #2
 8007042:	d134      	bne.n	80070ae <HAL_SPI_TransmitReceive+0x314>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d02f      	beq.n	80070ae <HAL_SPI_TransmitReceive+0x314>
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	2b01      	cmp	r3, #1
 8007052:	d12c      	bne.n	80070ae <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007058:	b29b      	uxth	r3, r3
 800705a:	2b01      	cmp	r3, #1
 800705c:	d912      	bls.n	8007084 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007062:	881a      	ldrh	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706e:	1c9a      	adds	r2, r3, #2
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007078:	b29b      	uxth	r3, r3
 800707a:	3b02      	subs	r3, #2
 800707c:	b29a      	uxth	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007082:	e012      	b.n	80070aa <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	330c      	adds	r3, #12
 800708e:	7812      	ldrb	r2, [r2, #0]
 8007090:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	3b01      	subs	r3, #1
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d148      	bne.n	800714e <HAL_SPI_TransmitReceive+0x3b4>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d042      	beq.n	800714e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d923      	bls.n	800711c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070de:	b292      	uxth	r2, r2
 80070e0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e6:	1c9a      	adds	r2, r3, #2
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	3b02      	subs	r3, #2
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b01      	cmp	r3, #1
 8007108:	d81f      	bhi.n	800714a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007118:	605a      	str	r2, [r3, #4]
 800711a:	e016      	b.n	800714a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f103 020c 	add.w	r2, r3, #12
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007128:	7812      	ldrb	r2, [r2, #0]
 800712a:	b2d2      	uxtb	r2, r2
 800712c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007132:	1c5a      	adds	r2, r3, #1
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800713e:	b29b      	uxth	r3, r3
 8007140:	3b01      	subs	r3, #1
 8007142:	b29a      	uxth	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800714a:	2301      	movs	r3, #1
 800714c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800714e:	f7fd f9b3 	bl	80044b8 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800715a:	429a      	cmp	r2, r3
 800715c:	d803      	bhi.n	8007166 <HAL_SPI_TransmitReceive+0x3cc>
 800715e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007164:	d102      	bne.n	800716c <HAL_SPI_TransmitReceive+0x3d2>
 8007166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007168:	2b00      	cmp	r3, #0
 800716a:	d107      	bne.n	800717c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800717a:	e026      	b.n	80071ca <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007180:	b29b      	uxth	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	f47f af57 	bne.w	8007036 <HAL_SPI_TransmitReceive+0x29c>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800718e:	b29b      	uxth	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	f47f af50 	bne.w	8007036 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 f93e 	bl	800741c <SPI_EndRxTxTransaction>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d005      	beq.n	80071b2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2220      	movs	r2, #32
 80071b0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071c0:	e003      	b.n	80071ca <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80071d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3728      	adds	r7, #40	@ 0x28
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
	...

080071e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b088      	sub	sp, #32
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	4613      	mov	r3, r2
 80071ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071f0:	f7fd f962 	bl	80044b8 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f8:	1a9b      	subs	r3, r3, r2
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	4413      	add	r3, r2
 80071fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007200:	f7fd f95a 	bl	80044b8 <HAL_GetTick>
 8007204:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007206:	4b39      	ldr	r3, [pc, #228]	@ (80072ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	015b      	lsls	r3, r3, #5
 800720c:	0d1b      	lsrs	r3, r3, #20
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	fb02 f303 	mul.w	r3, r2, r3
 8007214:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007216:	e054      	b.n	80072c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721e:	d050      	beq.n	80072c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007220:	f7fd f94a 	bl	80044b8 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	429a      	cmp	r2, r3
 800722e:	d902      	bls.n	8007236 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d13d      	bne.n	80072b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007244:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800724e:	d111      	bne.n	8007274 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007258:	d004      	beq.n	8007264 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007262:	d107      	bne.n	8007274 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007272:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800727c:	d10f      	bne.n	800729e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800729c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e017      	b.n	80072e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	3b01      	subs	r3, #1
 80072c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	4013      	ands	r3, r2
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	bf0c      	ite	eq
 80072d2:	2301      	moveq	r3, #1
 80072d4:	2300      	movne	r3, #0
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	461a      	mov	r2, r3
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d19b      	bne.n	8007218 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3720      	adds	r7, #32
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	20000014 	.word	0x20000014

080072f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08a      	sub	sp, #40	@ 0x28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80072fe:	2300      	movs	r3, #0
 8007300:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007302:	f7fd f8d9 	bl	80044b8 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730a:	1a9b      	subs	r3, r3, r2
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	4413      	add	r3, r2
 8007310:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007312:	f7fd f8d1 	bl	80044b8 <HAL_GetTick>
 8007316:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	330c      	adds	r3, #12
 800731e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007320:	4b3d      	ldr	r3, [pc, #244]	@ (8007418 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	4613      	mov	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	00da      	lsls	r2, r3, #3
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	0d1b      	lsrs	r3, r3, #20
 8007330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007332:	fb02 f303 	mul.w	r3, r2, r3
 8007336:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007338:	e060      	b.n	80073fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007340:	d107      	bne.n	8007352 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d104      	bne.n	8007352 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	b2db      	uxtb	r3, r3
 800734e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007350:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007358:	d050      	beq.n	80073fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800735a:	f7fd f8ad 	bl	80044b8 <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007366:	429a      	cmp	r2, r3
 8007368:	d902      	bls.n	8007370 <SPI_WaitFifoStateUntilTimeout+0x80>
 800736a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736c:	2b00      	cmp	r3, #0
 800736e:	d13d      	bne.n	80073ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800737e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007388:	d111      	bne.n	80073ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007392:	d004      	beq.n	800739e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800739c:	d107      	bne.n	80073ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073b6:	d10f      	bne.n	80073d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80073d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e010      	b.n	800740e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	4013      	ands	r3, r2
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	429a      	cmp	r2, r3
 800740a:	d196      	bne.n	800733a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3728      	adds	r7, #40	@ 0x28
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20000014 	.word	0x20000014

0800741c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af02      	add	r7, sp, #8
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2200      	movs	r2, #0
 8007430:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f7ff ff5b 	bl	80072f0 <SPI_WaitFifoStateUntilTimeout>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d007      	beq.n	8007450 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007444:	f043 0220 	orr.w	r2, r3, #32
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e027      	b.n	80074a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2200      	movs	r2, #0
 8007458:	2180      	movs	r1, #128	@ 0x80
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f7ff fec0 	bl	80071e0 <SPI_WaitFlagStateUntilTimeout>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d007      	beq.n	8007476 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800746a:	f043 0220 	orr.w	r2, r3, #32
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e014      	b.n	80074a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2200      	movs	r2, #0
 800747e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f7ff ff34 	bl	80072f0 <SPI_WaitFifoStateUntilTimeout>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d007      	beq.n	800749e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007492:	f043 0220 	orr.w	r2, r3, #32
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e000      	b.n	80074a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <LL_RCC_GetUSARTClockSource>:
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80074b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4013      	ands	r3, r2
}
 80074bc:	4618      	mov	r0, r3
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <LL_RCC_GetLPUARTClockSource>:
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80074d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4013      	ands	r3, r2
}
 80074dc:	4618      	mov	r0, r3
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e042      	b.n	8007580 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007500:	2b00      	cmp	r3, #0
 8007502:	d106      	bne.n	8007512 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fc fdb9 	bl	8004084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2224      	movs	r2, #36	@ 0x24
 8007516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 0201 	bic.w	r2, r2, #1
 8007528:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fade 	bl	8007af4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f8b3 	bl	80076a4 <UART_SetConfig>
 800753e:	4603      	mov	r3, r0
 8007540:	2b01      	cmp	r3, #1
 8007542:	d101      	bne.n	8007548 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e01b      	b.n	8007580 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007556:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	689a      	ldr	r2, [r3, #8]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007566:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0201 	orr.w	r2, r2, #1
 8007576:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fb5d 	bl	8007c38 <UART_CheckIdleState>
 800757e:	4603      	mov	r3, r0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08a      	sub	sp, #40	@ 0x28
 800758c:	af02      	add	r7, sp, #8
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	603b      	str	r3, [r7, #0]
 8007594:	4613      	mov	r3, r2
 8007596:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800759e:	2b20      	cmp	r3, #32
 80075a0:	d17b      	bne.n	800769a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <HAL_UART_Transmit+0x26>
 80075a8:	88fb      	ldrh	r3, [r7, #6]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e074      	b.n	800769c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2221      	movs	r2, #33	@ 0x21
 80075be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075c2:	f7fc ff79 	bl	80044b8 <HAL_GetTick>
 80075c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	88fa      	ldrh	r2, [r7, #6]
 80075cc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	88fa      	ldrh	r2, [r7, #6]
 80075d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075e0:	d108      	bne.n	80075f4 <HAL_UART_Transmit+0x6c>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d104      	bne.n	80075f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	61bb      	str	r3, [r7, #24]
 80075f2:	e003      	b.n	80075fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075f8:	2300      	movs	r3, #0
 80075fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075fc:	e030      	b.n	8007660 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2200      	movs	r2, #0
 8007606:	2180      	movs	r1, #128	@ 0x80
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 fbbf 	bl	8007d8c <UART_WaitOnFlagUntilTimeout>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d005      	beq.n	8007620 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2220      	movs	r2, #32
 8007618:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e03d      	b.n	800769c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10b      	bne.n	800763e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007634:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	3302      	adds	r3, #2
 800763a:	61bb      	str	r3, [r7, #24]
 800763c:	e007      	b.n	800764e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	781a      	ldrb	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	3301      	adds	r3, #1
 800764c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007654:	b29b      	uxth	r3, r3
 8007656:	3b01      	subs	r3, #1
 8007658:	b29a      	uxth	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007666:	b29b      	uxth	r3, r3
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1c8      	bne.n	80075fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2200      	movs	r2, #0
 8007674:	2140      	movs	r1, #64	@ 0x40
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 fb88 	bl	8007d8c <UART_WaitOnFlagUntilTimeout>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d005      	beq.n	800768e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2220      	movs	r2, #32
 8007686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e006      	b.n	800769c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2220      	movs	r2, #32
 8007692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	e000      	b.n	800769c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800769a:	2302      	movs	r3, #2
  }
}
 800769c:	4618      	mov	r0, r3
 800769e:	3720      	adds	r7, #32
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076a8:	b08c      	sub	sp, #48	@ 0x30
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	431a      	orrs	r2, r3
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	431a      	orrs	r2, r3
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	4baf      	ldr	r3, [pc, #700]	@ (8007990 <UART_SetConfig+0x2ec>)
 80076d4:	4013      	ands	r3, r2
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	6812      	ldr	r2, [r2, #0]
 80076da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076dc:	430b      	orrs	r3, r1
 80076de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	68da      	ldr	r2, [r3, #12]
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4aa4      	ldr	r2, [pc, #656]	@ (8007994 <UART_SetConfig+0x2f0>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d004      	beq.n	8007710 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800770c:	4313      	orrs	r3, r2
 800770e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800771a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	6812      	ldr	r2, [r2, #0]
 8007722:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007724:	430b      	orrs	r3, r1
 8007726:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772e:	f023 010f 	bic.w	r1, r3, #15
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a95      	ldr	r2, [pc, #596]	@ (8007998 <UART_SetConfig+0x2f4>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d125      	bne.n	8007794 <UART_SetConfig+0xf0>
 8007748:	2003      	movs	r0, #3
 800774a:	f7ff fead 	bl	80074a8 <LL_RCC_GetUSARTClockSource>
 800774e:	4603      	mov	r3, r0
 8007750:	2b03      	cmp	r3, #3
 8007752:	d81b      	bhi.n	800778c <UART_SetConfig+0xe8>
 8007754:	a201      	add	r2, pc, #4	@ (adr r2, 800775c <UART_SetConfig+0xb8>)
 8007756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775a:	bf00      	nop
 800775c:	0800776d 	.word	0x0800776d
 8007760:	0800777d 	.word	0x0800777d
 8007764:	08007775 	.word	0x08007775
 8007768:	08007785 	.word	0x08007785
 800776c:	2301      	movs	r3, #1
 800776e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007772:	e042      	b.n	80077fa <UART_SetConfig+0x156>
 8007774:	2302      	movs	r3, #2
 8007776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800777a:	e03e      	b.n	80077fa <UART_SetConfig+0x156>
 800777c:	2304      	movs	r3, #4
 800777e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007782:	e03a      	b.n	80077fa <UART_SetConfig+0x156>
 8007784:	2308      	movs	r3, #8
 8007786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800778a:	e036      	b.n	80077fa <UART_SetConfig+0x156>
 800778c:	2310      	movs	r3, #16
 800778e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007792:	e032      	b.n	80077fa <UART_SetConfig+0x156>
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a7e      	ldr	r2, [pc, #504]	@ (8007994 <UART_SetConfig+0x2f0>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d12a      	bne.n	80077f4 <UART_SetConfig+0x150>
 800779e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80077a2:	f7ff fe91 	bl	80074c8 <LL_RCC_GetLPUARTClockSource>
 80077a6:	4603      	mov	r3, r0
 80077a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077ac:	d01a      	beq.n	80077e4 <UART_SetConfig+0x140>
 80077ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077b2:	d81b      	bhi.n	80077ec <UART_SetConfig+0x148>
 80077b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077b8:	d00c      	beq.n	80077d4 <UART_SetConfig+0x130>
 80077ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077be:	d815      	bhi.n	80077ec <UART_SetConfig+0x148>
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <UART_SetConfig+0x128>
 80077c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077c8:	d008      	beq.n	80077dc <UART_SetConfig+0x138>
 80077ca:	e00f      	b.n	80077ec <UART_SetConfig+0x148>
 80077cc:	2300      	movs	r3, #0
 80077ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077d2:	e012      	b.n	80077fa <UART_SetConfig+0x156>
 80077d4:	2302      	movs	r3, #2
 80077d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077da:	e00e      	b.n	80077fa <UART_SetConfig+0x156>
 80077dc:	2304      	movs	r3, #4
 80077de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077e2:	e00a      	b.n	80077fa <UART_SetConfig+0x156>
 80077e4:	2308      	movs	r3, #8
 80077e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ea:	e006      	b.n	80077fa <UART_SetConfig+0x156>
 80077ec:	2310      	movs	r3, #16
 80077ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077f2:	e002      	b.n	80077fa <UART_SetConfig+0x156>
 80077f4:	2310      	movs	r3, #16
 80077f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a65      	ldr	r2, [pc, #404]	@ (8007994 <UART_SetConfig+0x2f0>)
 8007800:	4293      	cmp	r3, r2
 8007802:	f040 8097 	bne.w	8007934 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007806:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800780a:	2b08      	cmp	r3, #8
 800780c:	d823      	bhi.n	8007856 <UART_SetConfig+0x1b2>
 800780e:	a201      	add	r2, pc, #4	@ (adr r2, 8007814 <UART_SetConfig+0x170>)
 8007810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007814:	08007839 	.word	0x08007839
 8007818:	08007857 	.word	0x08007857
 800781c:	08007841 	.word	0x08007841
 8007820:	08007857 	.word	0x08007857
 8007824:	08007847 	.word	0x08007847
 8007828:	08007857 	.word	0x08007857
 800782c:	08007857 	.word	0x08007857
 8007830:	08007857 	.word	0x08007857
 8007834:	0800784f 	.word	0x0800784f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007838:	f7fe fb4c 	bl	8005ed4 <HAL_RCC_GetPCLK1Freq>
 800783c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800783e:	e010      	b.n	8007862 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007840:	4b56      	ldr	r3, [pc, #344]	@ (800799c <UART_SetConfig+0x2f8>)
 8007842:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007844:	e00d      	b.n	8007862 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007846:	f7fe fac5 	bl	8005dd4 <HAL_RCC_GetSysClockFreq>
 800784a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800784c:	e009      	b.n	8007862 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800784e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007852:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007854:	e005      	b.n	8007862 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007860:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 812b 	beq.w	8007ac0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800786e:	4a4c      	ldr	r2, [pc, #304]	@ (80079a0 <UART_SetConfig+0x2fc>)
 8007870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007874:	461a      	mov	r2, r3
 8007876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007878:	fbb3 f3f2 	udiv	r3, r3, r2
 800787c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	4613      	mov	r3, r2
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	4413      	add	r3, r2
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	429a      	cmp	r2, r3
 800788c:	d305      	bcc.n	800789a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	429a      	cmp	r2, r3
 8007898:	d903      	bls.n	80078a2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80078a0:	e10e      	b.n	8007ac0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a4:	2200      	movs	r2, #0
 80078a6:	60bb      	str	r3, [r7, #8]
 80078a8:	60fa      	str	r2, [r7, #12]
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ae:	4a3c      	ldr	r2, [pc, #240]	@ (80079a0 <UART_SetConfig+0x2fc>)
 80078b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2200      	movs	r2, #0
 80078b8:	603b      	str	r3, [r7, #0]
 80078ba:	607a      	str	r2, [r7, #4]
 80078bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078c4:	f7f9 f968 	bl	8000b98 <__aeabi_uldivmod>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4610      	mov	r0, r2
 80078ce:	4619      	mov	r1, r3
 80078d0:	f04f 0200 	mov.w	r2, #0
 80078d4:	f04f 0300 	mov.w	r3, #0
 80078d8:	020b      	lsls	r3, r1, #8
 80078da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078de:	0202      	lsls	r2, r0, #8
 80078e0:	6979      	ldr	r1, [r7, #20]
 80078e2:	6849      	ldr	r1, [r1, #4]
 80078e4:	0849      	lsrs	r1, r1, #1
 80078e6:	2000      	movs	r0, #0
 80078e8:	460c      	mov	r4, r1
 80078ea:	4605      	mov	r5, r0
 80078ec:	eb12 0804 	adds.w	r8, r2, r4
 80078f0:	eb43 0905 	adc.w	r9, r3, r5
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	469a      	mov	sl, r3
 80078fc:	4693      	mov	fp, r2
 80078fe:	4652      	mov	r2, sl
 8007900:	465b      	mov	r3, fp
 8007902:	4640      	mov	r0, r8
 8007904:	4649      	mov	r1, r9
 8007906:	f7f9 f947 	bl	8000b98 <__aeabi_uldivmod>
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	4613      	mov	r3, r2
 8007910:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007912:	6a3b      	ldr	r3, [r7, #32]
 8007914:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007918:	d308      	bcc.n	800792c <UART_SetConfig+0x288>
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007920:	d204      	bcs.n	800792c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6a3a      	ldr	r2, [r7, #32]
 8007928:	60da      	str	r2, [r3, #12]
 800792a:	e0c9      	b.n	8007ac0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007932:	e0c5      	b.n	8007ac0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800793c:	d16d      	bne.n	8007a1a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800793e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007942:	3b01      	subs	r3, #1
 8007944:	2b07      	cmp	r3, #7
 8007946:	d82d      	bhi.n	80079a4 <UART_SetConfig+0x300>
 8007948:	a201      	add	r2, pc, #4	@ (adr r2, 8007950 <UART_SetConfig+0x2ac>)
 800794a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794e:	bf00      	nop
 8007950:	08007971 	.word	0x08007971
 8007954:	08007979 	.word	0x08007979
 8007958:	080079a5 	.word	0x080079a5
 800795c:	0800797f 	.word	0x0800797f
 8007960:	080079a5 	.word	0x080079a5
 8007964:	080079a5 	.word	0x080079a5
 8007968:	080079a5 	.word	0x080079a5
 800796c:	08007987 	.word	0x08007987
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007970:	f7fe fac6 	bl	8005f00 <HAL_RCC_GetPCLK2Freq>
 8007974:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007976:	e01b      	b.n	80079b0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007978:	4b08      	ldr	r3, [pc, #32]	@ (800799c <UART_SetConfig+0x2f8>)
 800797a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800797c:	e018      	b.n	80079b0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800797e:	f7fe fa29 	bl	8005dd4 <HAL_RCC_GetSysClockFreq>
 8007982:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007984:	e014      	b.n	80079b0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800798a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800798c:	e010      	b.n	80079b0 <UART_SetConfig+0x30c>
 800798e:	bf00      	nop
 8007990:	cfff69f3 	.word	0xcfff69f3
 8007994:	40008000 	.word	0x40008000
 8007998:	40013800 	.word	0x40013800
 800799c:	00f42400 	.word	0x00f42400
 80079a0:	080145d4 	.word	0x080145d4
      default:
        pclk = 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80079ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 8084 	beq.w	8007ac0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079bc:	4a4b      	ldr	r2, [pc, #300]	@ (8007aec <UART_SetConfig+0x448>)
 80079be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079c2:	461a      	mov	r2, r3
 80079c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80079ca:	005a      	lsls	r2, r3, #1
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	085b      	lsrs	r3, r3, #1
 80079d2:	441a      	add	r2, r3
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079dc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	2b0f      	cmp	r3, #15
 80079e2:	d916      	bls.n	8007a12 <UART_SetConfig+0x36e>
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079ea:	d212      	bcs.n	8007a12 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	f023 030f 	bic.w	r3, r3, #15
 80079f4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	085b      	lsrs	r3, r3, #1
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	f003 0307 	and.w	r3, r3, #7
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	8bfb      	ldrh	r3, [r7, #30]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	8bfa      	ldrh	r2, [r7, #30]
 8007a0e:	60da      	str	r2, [r3, #12]
 8007a10:	e056      	b.n	8007ac0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a18:	e052      	b.n	8007ac0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	2b07      	cmp	r3, #7
 8007a22:	d822      	bhi.n	8007a6a <UART_SetConfig+0x3c6>
 8007a24:	a201      	add	r2, pc, #4	@ (adr r2, 8007a2c <UART_SetConfig+0x388>)
 8007a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2a:	bf00      	nop
 8007a2c:	08007a4d 	.word	0x08007a4d
 8007a30:	08007a55 	.word	0x08007a55
 8007a34:	08007a6b 	.word	0x08007a6b
 8007a38:	08007a5b 	.word	0x08007a5b
 8007a3c:	08007a6b 	.word	0x08007a6b
 8007a40:	08007a6b 	.word	0x08007a6b
 8007a44:	08007a6b 	.word	0x08007a6b
 8007a48:	08007a63 	.word	0x08007a63
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a4c:	f7fe fa58 	bl	8005f00 <HAL_RCC_GetPCLK2Freq>
 8007a50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a52:	e010      	b.n	8007a76 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a54:	4b26      	ldr	r3, [pc, #152]	@ (8007af0 <UART_SetConfig+0x44c>)
 8007a56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a58:	e00d      	b.n	8007a76 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a5a:	f7fe f9bb 	bl	8005dd4 <HAL_RCC_GetSysClockFreq>
 8007a5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a60:	e009      	b.n	8007a76 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a68:	e005      	b.n	8007a76 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a74:	bf00      	nop
    }

    if (pclk != 0U)
 8007a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d021      	beq.n	8007ac0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a80:	4a1a      	ldr	r2, [pc, #104]	@ (8007aec <UART_SetConfig+0x448>)
 8007a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a86:	461a      	mov	r2, r3
 8007a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	085b      	lsrs	r3, r3, #1
 8007a94:	441a      	add	r2, r3
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	2b0f      	cmp	r3, #15
 8007aa4:	d909      	bls.n	8007aba <UART_SetConfig+0x416>
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aac:	d205      	bcs.n	8007aba <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	60da      	str	r2, [r3, #12]
 8007ab8:	e002      	b.n	8007ac0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007adc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3730      	adds	r7, #48	@ 0x30
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007aea:	bf00      	nop
 8007aec:	080145d4 	.word	0x080145d4
 8007af0:	00f42400 	.word	0x00f42400

08007af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b00:	f003 0308 	and.w	r3, r3, #8
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00a      	beq.n	8007b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00a      	beq.n	8007b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b44:	f003 0302 	and.w	r3, r3, #2
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00a      	beq.n	8007b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b66:	f003 0304 	and.w	r3, r3, #4
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00a      	beq.n	8007b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	430a      	orrs	r2, r1
 8007b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b88:	f003 0310 	and.w	r3, r3, #16
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00a      	beq.n	8007ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007baa:	f003 0320 	and.w	r3, r3, #32
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00a      	beq.n	8007bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d01a      	beq.n	8007c0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bf2:	d10a      	bne.n	8007c0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	605a      	str	r2, [r3, #4]
  }
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b098      	sub	sp, #96	@ 0x60
 8007c3c:	af02      	add	r7, sp, #8
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c48:	f7fc fc36 	bl	80044b8 <HAL_GetTick>
 8007c4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0308 	and.w	r3, r3, #8
 8007c58:	2b08      	cmp	r3, #8
 8007c5a:	d12f      	bne.n	8007cbc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c60:	9300      	str	r3, [sp, #0]
 8007c62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c64:	2200      	movs	r2, #0
 8007c66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f88e 	bl	8007d8c <UART_WaitOnFlagUntilTimeout>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d022      	beq.n	8007cbc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	461a      	mov	r2, r3
 8007c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c96:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e6      	bne.n	8007c76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2220      	movs	r2, #32
 8007cac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e063      	b.n	8007d84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0304 	and.w	r3, r3, #4
 8007cc6:	2b04      	cmp	r3, #4
 8007cc8:	d149      	bne.n	8007d5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f857 	bl	8007d8c <UART_WaitOnFlagUntilTimeout>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d03c      	beq.n	8007d5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d02:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d04:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d0a:	e841 2300 	strex	r3, r2, [r1]
 8007d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1e6      	bne.n	8007ce4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	e853 3f00 	ldrex	r3, [r3]
 8007d24:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f023 0301 	bic.w	r3, r3, #1
 8007d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3308      	adds	r3, #8
 8007d34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d36:	61fa      	str	r2, [r7, #28]
 8007d38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3a:	69b9      	ldr	r1, [r7, #24]
 8007d3c:	69fa      	ldr	r2, [r7, #28]
 8007d3e:	e841 2300 	strex	r3, r2, [r1]
 8007d42:	617b      	str	r3, [r7, #20]
   return(result);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1e5      	bne.n	8007d16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e012      	b.n	8007d84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2220      	movs	r2, #32
 8007d62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2220      	movs	r2, #32
 8007d6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3758      	adds	r7, #88	@ 0x58
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d9c:	e04f      	b.n	8007e3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da4:	d04b      	beq.n	8007e3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007da6:	f7fc fb87 	bl	80044b8 <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	69ba      	ldr	r2, [r7, #24]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d302      	bcc.n	8007dbc <UART_WaitOnFlagUntilTimeout+0x30>
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e04e      	b.n	8007e5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0304 	and.w	r3, r3, #4
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d037      	beq.n	8007e3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2b80      	cmp	r3, #128	@ 0x80
 8007dd2:	d034      	beq.n	8007e3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2b40      	cmp	r3, #64	@ 0x40
 8007dd8:	d031      	beq.n	8007e3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	69db      	ldr	r3, [r3, #28]
 8007de0:	f003 0308 	and.w	r3, r3, #8
 8007de4:	2b08      	cmp	r3, #8
 8007de6:	d110      	bne.n	8007e0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2208      	movs	r2, #8
 8007dee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 f838 	bl	8007e66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2208      	movs	r2, #8
 8007dfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e029      	b.n	8007e5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e18:	d111      	bne.n	8007e3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 f81e 	bl	8007e66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e00f      	b.n	8007e5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	69da      	ldr	r2, [r3, #28]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	4013      	ands	r3, r2
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	bf0c      	ite	eq
 8007e4e:	2301      	moveq	r3, #1
 8007e50:	2300      	movne	r3, #0
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	461a      	mov	r2, r3
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d0a0      	beq.n	8007d9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b095      	sub	sp, #84	@ 0x54
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e76:	e853 3f00 	ldrex	r3, [r3]
 8007e7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e94:	e841 2300 	strex	r3, r2, [r1]
 8007e98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1e6      	bne.n	8007e6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3308      	adds	r3, #8
 8007ea6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	e853 3f00 	ldrex	r3, [r3]
 8007eae:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007eb6:	f023 0301 	bic.w	r3, r3, #1
 8007eba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ec4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ecc:	e841 2300 	strex	r3, r2, [r1]
 8007ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1e3      	bne.n	8007ea0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d118      	bne.n	8007f12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	e853 3f00 	ldrex	r3, [r3]
 8007eec:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f023 0310 	bic.w	r3, r3, #16
 8007ef4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	461a      	mov	r2, r3
 8007efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007efe:	61bb      	str	r3, [r7, #24]
 8007f00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f02:	6979      	ldr	r1, [r7, #20]
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	e841 2300 	strex	r3, r2, [r1]
 8007f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1e6      	bne.n	8007ee0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2220      	movs	r2, #32
 8007f16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f26:	bf00      	nop
 8007f28:	3754      	adds	r7, #84	@ 0x54
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b085      	sub	sp, #20
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d101      	bne.n	8007f48 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f44:	2302      	movs	r3, #2
 8007f46:	e027      	b.n	8007f98 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2224      	movs	r2, #36	@ 0x24
 8007f54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f022 0201 	bic.w	r2, r2, #1
 8007f6e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3714      	adds	r7, #20
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d101      	bne.n	8007fbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007fb8:	2302      	movs	r3, #2
 8007fba:	e02d      	b.n	8008018 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2224      	movs	r2, #36	@ 0x24
 8007fc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 0201 	bic.w	r2, r2, #1
 8007fe2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	430a      	orrs	r2, r1
 8007ff6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f84f 	bl	800809c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2220      	movs	r2, #32
 800800a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008034:	2302      	movs	r3, #2
 8008036:	e02d      	b.n	8008094 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2224      	movs	r2, #36	@ 0x24
 8008044:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0201 	bic.w	r2, r2, #1
 800805e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	430a      	orrs	r2, r1
 8008072:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f811 	bl	800809c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2220      	movs	r2, #32
 8008086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d108      	bne.n	80080be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080bc:	e031      	b.n	8008122 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080be:	2308      	movs	r3, #8
 80080c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080c2:	2308      	movs	r3, #8
 80080c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	0e5b      	lsrs	r3, r3, #25
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	f003 0307 	and.w	r3, r3, #7
 80080d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	0f5b      	lsrs	r3, r3, #29
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	f003 0307 	and.w	r3, r3, #7
 80080e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	7b3a      	ldrb	r2, [r7, #12]
 80080ea:	4911      	ldr	r1, [pc, #68]	@ (8008130 <UARTEx_SetNbDataToProcess+0x94>)
 80080ec:	5c8a      	ldrb	r2, [r1, r2]
 80080ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080f2:	7b3a      	ldrb	r2, [r7, #12]
 80080f4:	490f      	ldr	r1, [pc, #60]	@ (8008134 <UARTEx_SetNbDataToProcess+0x98>)
 80080f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008104:	7bfb      	ldrb	r3, [r7, #15]
 8008106:	7b7a      	ldrb	r2, [r7, #13]
 8008108:	4909      	ldr	r1, [pc, #36]	@ (8008130 <UARTEx_SetNbDataToProcess+0x94>)
 800810a:	5c8a      	ldrb	r2, [r1, r2]
 800810c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008110:	7b7a      	ldrb	r2, [r7, #13]
 8008112:	4908      	ldr	r1, [pc, #32]	@ (8008134 <UARTEx_SetNbDataToProcess+0x98>)
 8008114:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008116:	fb93 f3f2 	sdiv	r3, r3, r2
 800811a:	b29a      	uxth	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008122:	bf00      	nop
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	080145ec 	.word	0x080145ec
 8008134:	080145f4 	.word	0x080145f4

08008138 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b088      	sub	sp, #32
 800813c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800813e:	2300      	movs	r3, #0
 8008140:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008142:	f107 0308 	add.w	r3, r7, #8
 8008146:	2218      	movs	r2, #24
 8008148:	2100      	movs	r1, #0
 800814a:	4618      	mov	r0, r3
 800814c:	f001 f92d 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8008150:	233f      	movs	r3, #63	@ 0x3f
 8008152:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008154:	2381      	movs	r3, #129	@ 0x81
 8008156:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008158:	1dfb      	adds	r3, r7, #7
 800815a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800815c:	2301      	movs	r3, #1
 800815e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008160:	f107 0308 	add.w	r3, r7, #8
 8008164:	2100      	movs	r1, #0
 8008166:	4618      	mov	r0, r3
 8008168:	f001 fba8 	bl	80098bc <hci_send_req>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	da01      	bge.n	8008176 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008172:	23ff      	movs	r3, #255	@ 0xff
 8008174:	e000      	b.n	8008178 <aci_gap_set_non_discoverable+0x40>
  return status;
 8008176:	79fb      	ldrb	r3, [r7, #7]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3720      	adds	r7, #32
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8008180:	b5b0      	push	{r4, r5, r7, lr}
 8008182:	b0ce      	sub	sp, #312	@ 0x138
 8008184:	af00      	add	r7, sp, #0
 8008186:	4605      	mov	r5, r0
 8008188:	460c      	mov	r4, r1
 800818a:	4610      	mov	r0, r2
 800818c:	4619      	mov	r1, r3
 800818e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008192:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008196:	462a      	mov	r2, r5
 8008198:	701a      	strb	r2, [r3, #0]
 800819a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800819e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80081a2:	4622      	mov	r2, r4
 80081a4:	801a      	strh	r2, [r3, #0]
 80081a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081aa:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80081ae:	4602      	mov	r2, r0
 80081b0:	801a      	strh	r2, [r3, #0]
 80081b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081b6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80081ba:	460a      	mov	r2, r1
 80081bc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80081be:	f107 0310 	add.w	r3, r7, #16
 80081c2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80081c6:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80081ca:	3308      	adds	r3, #8
 80081cc:	f107 0210 	add.w	r2, r7, #16
 80081d0:	4413      	add	r3, r2
 80081d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80081d6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80081da:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80081de:	4413      	add	r3, r2
 80081e0:	3309      	adds	r3, #9
 80081e2:	f107 0210 	add.w	r2, r7, #16
 80081e6:	4413      	add	r3, r2
 80081e8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80081ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081f0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80081f4:	2200      	movs	r2, #0
 80081f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80081f8:	2300      	movs	r3, #0
 80081fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 80081fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008202:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008206:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800820a:	7812      	ldrb	r2, [r2, #0]
 800820c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800820e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008212:	3301      	adds	r3, #1
 8008214:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008218:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800821c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008220:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8008224:	8812      	ldrh	r2, [r2, #0]
 8008226:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800822a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800822e:	3302      	adds	r3, #2
 8008230:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008234:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008238:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800823c:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8008240:	8812      	ldrh	r2, [r2, #0]
 8008242:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008246:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800824a:	3302      	adds	r3, #2
 800824c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008250:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008254:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008258:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800825c:	7812      	ldrb	r2, [r2, #0]
 800825e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008260:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008264:	3301      	adds	r3, #1
 8008266:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800826a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800826e:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8008272:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008274:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008278:	3301      	adds	r3, #1
 800827a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800827e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008282:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8008286:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008288:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800828c:	3301      	adds	r3, #1
 800828e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8008292:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008296:	3308      	adds	r3, #8
 8008298:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800829c:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80082a0:	4618      	mov	r0, r3
 80082a2:	f001 f872 	bl	800938a <Osal_MemCpy>
    index_input += Local_Name_Length;
 80082a6:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80082aa:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80082ae:	4413      	add	r3, r2
 80082b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80082b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80082b8:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80082bc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80082be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80082c2:	3301      	adds	r3, #1
 80082c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80082c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80082cc:	3301      	adds	r3, #1
 80082ce:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80082d2:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80082d6:	4618      	mov	r0, r3
 80082d8:	f001 f857 	bl	800938a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80082dc:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80082e0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80082e4:	4413      	add	r3, r2
 80082e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80082ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80082ee:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 80082f2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80082f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80082f8:	3302      	adds	r3, #2
 80082fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80082fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008302:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8008306:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008308:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800830c:	3302      	adds	r3, #2
 800830e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008312:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008316:	2218      	movs	r2, #24
 8008318:	2100      	movs	r1, #0
 800831a:	4618      	mov	r0, r3
 800831c:	f001 f845 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8008320:	233f      	movs	r3, #63	@ 0x3f
 8008322:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8008326:	2383      	movs	r3, #131	@ 0x83
 8008328:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800832c:	f107 0310 	add.w	r3, r7, #16
 8008330:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008334:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008338:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800833c:	f107 030f 	add.w	r3, r7, #15
 8008340:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008344:	2301      	movs	r3, #1
 8008346:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800834a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800834e:	2100      	movs	r1, #0
 8008350:	4618      	mov	r0, r3
 8008352:	f001 fab3 	bl	80098bc <hci_send_req>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	da01      	bge.n	8008360 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800835c:	23ff      	movs	r3, #255	@ 0xff
 800835e:	e004      	b.n	800836a <aci_gap_set_discoverable+0x1ea>
  return status;
 8008360:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008364:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008368:	781b      	ldrb	r3, [r3, #0]
}
 800836a:	4618      	mov	r0, r3
 800836c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8008370:	46bd      	mov	sp, r7
 8008372:	bdb0      	pop	{r4, r5, r7, pc}

08008374 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b0cc      	sub	sp, #304	@ 0x130
 8008378:	af00      	add	r7, sp, #0
 800837a:	4602      	mov	r2, r0
 800837c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008380:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008384:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008386:	f107 0310 	add.w	r3, r7, #16
 800838a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800838e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008392:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008396:	2200      	movs	r2, #0
 8008398:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800839a:	2300      	movs	r3, #0
 800839c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80083a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80083a4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80083a8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80083ac:	7812      	ldrb	r2, [r2, #0]
 80083ae:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80083b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80083b4:	3301      	adds	r3, #1
 80083b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80083ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80083be:	2218      	movs	r2, #24
 80083c0:	2100      	movs	r1, #0
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fff1 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x3f;
 80083c8:	233f      	movs	r3, #63	@ 0x3f
 80083ca:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80083ce:	2385      	movs	r3, #133	@ 0x85
 80083d0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80083d4:	f107 0310 	add.w	r3, r7, #16
 80083d8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80083dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80083e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80083e4:	f107 030f 	add.w	r3, r7, #15
 80083e8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80083ec:	2301      	movs	r3, #1
 80083ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80083f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80083f6:	2100      	movs	r1, #0
 80083f8:	4618      	mov	r0, r3
 80083fa:	f001 fa5f 	bl	80098bc <hci_send_req>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	da01      	bge.n	8008408 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008404:	23ff      	movs	r3, #255	@ 0xff
 8008406:	e004      	b.n	8008412 <aci_gap_set_io_capability+0x9e>
  return status;
 8008408:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800840c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008410:	781b      	ldrb	r3, [r3, #0]
}
 8008412:	4618      	mov	r0, r3
 8008414:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800841c:	b5b0      	push	{r4, r5, r7, lr}
 800841e:	b0cc      	sub	sp, #304	@ 0x130
 8008420:	af00      	add	r7, sp, #0
 8008422:	4605      	mov	r5, r0
 8008424:	460c      	mov	r4, r1
 8008426:	4610      	mov	r0, r2
 8008428:	4619      	mov	r1, r3
 800842a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800842e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008432:	462a      	mov	r2, r5
 8008434:	701a      	strb	r2, [r3, #0]
 8008436:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800843a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800843e:	4622      	mov	r2, r4
 8008440:	701a      	strb	r2, [r3, #0]
 8008442:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008446:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800844a:	4602      	mov	r2, r0
 800844c:	701a      	strb	r2, [r3, #0]
 800844e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008452:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008456:	460a      	mov	r2, r1
 8008458:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800845a:	f107 0310 	add.w	r3, r7, #16
 800845e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008462:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008466:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800846a:	2200      	movs	r2, #0
 800846c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800846e:	2300      	movs	r3, #0
 8008470:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008474:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008478:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800847c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008480:	7812      	ldrb	r2, [r2, #0]
 8008482:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008484:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008488:	3301      	adds	r3, #1
 800848a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800848e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008492:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008496:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800849a:	7812      	ldrb	r2, [r2, #0]
 800849c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800849e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80084a2:	3301      	adds	r3, #1
 80084a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80084a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084ac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80084b0:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80084b4:	7812      	ldrb	r2, [r2, #0]
 80084b6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80084b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80084bc:	3301      	adds	r3, #1
 80084be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80084c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084c6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80084ca:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80084ce:	7812      	ldrb	r2, [r2, #0]
 80084d0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80084d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80084d6:	3301      	adds	r3, #1
 80084d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80084dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084e0:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80084e4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80084e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80084ea:	3301      	adds	r3, #1
 80084ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80084f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084f4:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80084f8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80084fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80084fe:	3301      	adds	r3, #1
 8008500:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008504:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008508:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800850c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800850e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008512:	3301      	adds	r3, #1
 8008514:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008518:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800851c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008520:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008524:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008528:	3304      	adds	r3, #4
 800852a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800852e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008532:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8008536:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008538:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800853c:	3301      	adds	r3, #1
 800853e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008542:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008546:	2218      	movs	r2, #24
 8008548:	2100      	movs	r1, #0
 800854a:	4618      	mov	r0, r3
 800854c:	f000 ff2d 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8008550:	233f      	movs	r3, #63	@ 0x3f
 8008552:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8008556:	2386      	movs	r3, #134	@ 0x86
 8008558:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800855c:	f107 0310 	add.w	r3, r7, #16
 8008560:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008564:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008568:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800856c:	f107 030f 	add.w	r3, r7, #15
 8008570:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008574:	2301      	movs	r3, #1
 8008576:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800857a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800857e:	2100      	movs	r1, #0
 8008580:	4618      	mov	r0, r3
 8008582:	f001 f99b 	bl	80098bc <hci_send_req>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	da01      	bge.n	8008590 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800858c:	23ff      	movs	r3, #255	@ 0xff
 800858e:	e004      	b.n	800859a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008590:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008594:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008598:	781b      	ldrb	r3, [r3, #0]
}
 800859a:	4618      	mov	r0, r3
 800859c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bdb0      	pop	{r4, r5, r7, pc}

080085a4 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b0cc      	sub	sp, #304	@ 0x130
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	4602      	mov	r2, r0
 80085ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80085b0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80085b4:	6019      	str	r1, [r3, #0]
 80085b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80085ba:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80085be:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80085c0:	f107 0310 	add.w	r3, r7, #16
 80085c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80085c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80085cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80085d0:	2200      	movs	r2, #0
 80085d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80085d4:	2300      	movs	r3, #0
 80085d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80085da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80085de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80085e2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80085e6:	8812      	ldrh	r2, [r2, #0]
 80085e8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80085ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80085ee:	3302      	adds	r3, #2
 80085f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 80085f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80085f8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80085fc:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8008600:	6812      	ldr	r2, [r2, #0]
 8008602:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8008606:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800860a:	3304      	adds	r3, #4
 800860c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008610:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008614:	2218      	movs	r2, #24
 8008616:	2100      	movs	r1, #0
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fec6 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x3f;
 800861e:	233f      	movs	r3, #63	@ 0x3f
 8008620:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8008624:	2388      	movs	r3, #136	@ 0x88
 8008626:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800862a:	f107 0310 	add.w	r3, r7, #16
 800862e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008632:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008636:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800863a:	f107 030f 	add.w	r3, r7, #15
 800863e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008642:	2301      	movs	r3, #1
 8008644:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008648:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800864c:	2100      	movs	r1, #0
 800864e:	4618      	mov	r0, r3
 8008650:	f001 f934 	bl	80098bc <hci_send_req>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	da01      	bge.n	800865e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800865a:	23ff      	movs	r3, #255	@ 0xff
 800865c:	e004      	b.n	8008668 <aci_gap_pass_key_resp+0xc4>
  return status;
 800865e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008662:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008666:	781b      	ldrb	r3, [r3, #0]
}
 8008668:	4618      	mov	r0, r3
 800866a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008672:	b590      	push	{r4, r7, lr}
 8008674:	b0cd      	sub	sp, #308	@ 0x134
 8008676:	af00      	add	r7, sp, #0
 8008678:	4604      	mov	r4, r0
 800867a:	4608      	mov	r0, r1
 800867c:	4611      	mov	r1, r2
 800867e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008682:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800868c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008690:	4622      	mov	r2, r4
 8008692:	701a      	strb	r2, [r3, #0]
 8008694:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008698:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800869c:	4602      	mov	r2, r0
 800869e:	701a      	strb	r2, [r3, #0]
 80086a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80086a4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80086a8:	460a      	mov	r2, r1
 80086aa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80086ac:	f107 0310 	add.w	r3, r7, #16
 80086b0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80086b4:	f107 0308 	add.w	r3, r7, #8
 80086b8:	2207      	movs	r2, #7
 80086ba:	2100      	movs	r1, #0
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 fe74 	bl	80093aa <Osal_MemSet>
  int index_input = 0;
 80086c2:	2300      	movs	r3, #0
 80086c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80086c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80086cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80086d0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80086d4:	7812      	ldrb	r2, [r2, #0]
 80086d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80086d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80086dc:	3301      	adds	r3, #1
 80086de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80086e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80086e6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80086ea:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80086ee:	7812      	ldrb	r2, [r2, #0]
 80086f0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80086f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80086f6:	3301      	adds	r3, #1
 80086f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80086fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008700:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008704:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008708:	7812      	ldrb	r2, [r2, #0]
 800870a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800870c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008710:	3301      	adds	r3, #1
 8008712:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008716:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800871a:	2218      	movs	r2, #24
 800871c:	2100      	movs	r1, #0
 800871e:	4618      	mov	r0, r3
 8008720:	f000 fe43 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8008724:	233f      	movs	r3, #63	@ 0x3f
 8008726:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800872a:	238a      	movs	r3, #138	@ 0x8a
 800872c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008730:	f107 0310 	add.w	r3, r7, #16
 8008734:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008738:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800873c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8008740:	f107 0308 	add.w	r3, r7, #8
 8008744:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8008748:	2307      	movs	r3, #7
 800874a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800874e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008752:	2100      	movs	r1, #0
 8008754:	4618      	mov	r0, r3
 8008756:	f001 f8b1 	bl	80098bc <hci_send_req>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	da01      	bge.n	8008764 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008760:	23ff      	movs	r3, #255	@ 0xff
 8008762:	e02e      	b.n	80087c2 <aci_gap_init+0x150>
  if ( resp.Status )
 8008764:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008768:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d005      	beq.n	800877e <aci_gap_init+0x10c>
    return resp.Status;
 8008772:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008776:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	e021      	b.n	80087c2 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800877e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008782:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008786:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800878a:	b29a      	uxth	r2, r3
 800878c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008790:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008798:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800879c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80087a0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80087aa:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80087ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80087b0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80087b4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80087be:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd90      	pop	{r4, r7, pc}

080087cc <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b0cc      	sub	sp, #304	@ 0x130
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	4602      	mov	r2, r0
 80087d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80087d8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80087dc:	6019      	str	r1, [r3, #0]
 80087de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80087e2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80087e6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80087e8:	f107 0310 	add.w	r3, r7, #16
 80087ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80087f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80087f4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80087f8:	2200      	movs	r2, #0
 80087fa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80087fc:	2300      	movs	r3, #0
 80087fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008802:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008806:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800880a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800880e:	7812      	ldrb	r2, [r2, #0]
 8008810:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008812:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008816:	3301      	adds	r3, #1
 8008818:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800881c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008820:	1c58      	adds	r0, r3, #1
 8008822:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008826:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800882a:	781a      	ldrb	r2, [r3, #0]
 800882c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008830:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008834:	6819      	ldr	r1, [r3, #0]
 8008836:	f000 fda8 	bl	800938a <Osal_MemCpy>
  index_input += AdvDataLen;
 800883a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800883e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008848:	4413      	add	r3, r2
 800884a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800884e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008852:	2218      	movs	r2, #24
 8008854:	2100      	movs	r1, #0
 8008856:	4618      	mov	r0, r3
 8008858:	f000 fda7 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x3f;
 800885c:	233f      	movs	r3, #63	@ 0x3f
 800885e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8008862:	238e      	movs	r3, #142	@ 0x8e
 8008864:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008868:	f107 0310 	add.w	r3, r7, #16
 800886c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008870:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008874:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008878:	f107 030f 	add.w	r3, r7, #15
 800887c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008880:	2301      	movs	r3, #1
 8008882:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008886:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800888a:	2100      	movs	r1, #0
 800888c:	4618      	mov	r0, r3
 800888e:	f001 f815 	bl	80098bc <hci_send_req>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	da01      	bge.n	800889c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8008898:	23ff      	movs	r3, #255	@ 0xff
 800889a:	e004      	b.n	80088a6 <aci_gap_update_adv_data+0xda>
  return status;
 800889c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80088a0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80088a4:	781b      	ldrb	r3, [r3, #0]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b088      	sub	sp, #32
 80088b4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088ba:	f107 0308 	add.w	r3, r7, #8
 80088be:	2218      	movs	r2, #24
 80088c0:	2100      	movs	r1, #0
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fd71 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x3f;
 80088c8:	233f      	movs	r3, #63	@ 0x3f
 80088ca:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80088cc:	2392      	movs	r3, #146	@ 0x92
 80088ce:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80088d0:	1dfb      	adds	r3, r7, #7
 80088d2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80088d4:	2301      	movs	r3, #1
 80088d6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80088d8:	f107 0308 	add.w	r3, r7, #8
 80088dc:	2100      	movs	r1, #0
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 ffec 	bl	80098bc <hci_send_req>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	da01      	bge.n	80088ee <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 80088ea:	23ff      	movs	r3, #255	@ 0xff
 80088ec:	e000      	b.n	80088f0 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 80088ee:	79fb      	ldrb	r3, [r7, #7]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3720      	adds	r7, #32
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b0cc      	sub	sp, #304	@ 0x130
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	4602      	mov	r2, r0
 8008900:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008904:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008908:	801a      	strh	r2, [r3, #0]
 800890a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800890e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008912:	460a      	mov	r2, r1
 8008914:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008916:	f107 0310 	add.w	r3, r7, #16
 800891a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800891e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008922:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008926:	2200      	movs	r2, #0
 8008928:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008930:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008934:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008938:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800893c:	8812      	ldrh	r2, [r2, #0]
 800893e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008940:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008944:	3302      	adds	r3, #2
 8008946:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800894a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800894e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008952:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008956:	7812      	ldrb	r2, [r2, #0]
 8008958:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800895a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800895e:	3301      	adds	r3, #1
 8008960:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008964:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008968:	2218      	movs	r2, #24
 800896a:	2100      	movs	r1, #0
 800896c:	4618      	mov	r0, r3
 800896e:	f000 fd1c 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8008972:	233f      	movs	r3, #63	@ 0x3f
 8008974:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8008978:	23a5      	movs	r3, #165	@ 0xa5
 800897a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800897e:	f107 0310 	add.w	r3, r7, #16
 8008982:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008986:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800898a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800898e:	f107 030f 	add.w	r3, r7, #15
 8008992:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008996:	2301      	movs	r3, #1
 8008998:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800899c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80089a0:	2100      	movs	r1, #0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 ff8a 	bl	80098bc <hci_send_req>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	da01      	bge.n	80089b2 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80089ae:	23ff      	movs	r3, #255	@ 0xff
 80089b0:	e004      	b.n	80089bc <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80089b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80089b6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80089ba:	781b      	ldrb	r3, [r3, #0]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b088      	sub	sp, #32
 80089ca:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089d0:	f107 0308 	add.w	r3, r7, #8
 80089d4:	2218      	movs	r2, #24
 80089d6:	2100      	movs	r1, #0
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 fce6 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x3f;
 80089de:	233f      	movs	r3, #63	@ 0x3f
 80089e0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80089e2:	f240 1301 	movw	r3, #257	@ 0x101
 80089e6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80089e8:	1dfb      	adds	r3, r7, #7
 80089ea:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80089ec:	2301      	movs	r3, #1
 80089ee:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089f0:	f107 0308 	add.w	r3, r7, #8
 80089f4:	2100      	movs	r1, #0
 80089f6:	4618      	mov	r0, r3
 80089f8:	f000 ff60 	bl	80098bc <hci_send_req>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	da01      	bge.n	8008a06 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008a02:	23ff      	movs	r3, #255	@ 0xff
 8008a04:	e000      	b.n	8008a08 <aci_gatt_init+0x42>
  return status;
 8008a06:	79fb      	ldrb	r3, [r7, #7]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3720      	adds	r7, #32
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008a10:	b590      	push	{r4, r7, lr}
 8008a12:	b0cf      	sub	sp, #316	@ 0x13c
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	4604      	mov	r4, r0
 8008a18:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8008a1c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8008a20:	6001      	str	r1, [r0, #0]
 8008a22:	4610      	mov	r0, r2
 8008a24:	4619      	mov	r1, r3
 8008a26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a2a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008a2e:	4622      	mov	r2, r4
 8008a30:	701a      	strb	r2, [r3, #0]
 8008a32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a36:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	701a      	strb	r2, [r3, #0]
 8008a3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a42:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008a46:	460a      	mov	r2, r1
 8008a48:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008a4a:	f107 0310 	add.w	r3, r7, #16
 8008a4e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008a52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a56:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d00a      	beq.n	8008a76 <aci_gatt_add_service+0x66>
 8008a60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a64:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d101      	bne.n	8008a72 <aci_gatt_add_service+0x62>
 8008a6e:	2311      	movs	r3, #17
 8008a70:	e002      	b.n	8008a78 <aci_gatt_add_service+0x68>
 8008a72:	2301      	movs	r3, #1
 8008a74:	e000      	b.n	8008a78 <aci_gatt_add_service+0x68>
 8008a76:	2303      	movs	r3, #3
 8008a78:	f107 0210 	add.w	r2, r7, #16
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008a82:	f107 030c 	add.w	r3, r7, #12
 8008a86:	2203      	movs	r2, #3
 8008a88:	2100      	movs	r1, #0
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 fc8d 	bl	80093aa <Osal_MemSet>
  int index_input = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008a96:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008a9a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008a9e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8008aa2:	7812      	ldrb	r2, [r2, #0]
 8008aa4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008aa6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008aaa:	3301      	adds	r3, #1
 8008aac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008ab0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ab4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d002      	beq.n	8008ac4 <aci_gatt_add_service+0xb4>
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d004      	beq.n	8008acc <aci_gatt_add_service+0xbc>
 8008ac2:	e007      	b.n	8008ad4 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8008aca:	e005      	b.n	8008ad8 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008acc:	2310      	movs	r3, #16
 8008ace:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8008ad2:	e001      	b.n	8008ad8 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008ad4:	2397      	movs	r3, #151	@ 0x97
 8008ad6:	e06c      	b.n	8008bb2 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8008ad8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008adc:	1c58      	adds	r0, r3, #1
 8008ade:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8008ae2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ae6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008aea:	6819      	ldr	r1, [r3, #0]
 8008aec:	f000 fc4d 	bl	800938a <Osal_MemCpy>
    index_input += size;
 8008af0:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8008af4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008af8:	4413      	add	r3, r2
 8008afa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8008afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008b02:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008b06:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8008b0a:	7812      	ldrb	r2, [r2, #0]
 8008b0c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008b0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008b12:	3301      	adds	r3, #1
 8008b14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008b1c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008b20:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8008b24:	7812      	ldrb	r2, [r2, #0]
 8008b26:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008b28:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b36:	2218      	movs	r2, #24
 8008b38:	2100      	movs	r1, #0
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fc35 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b40:	233f      	movs	r3, #63	@ 0x3f
 8008b42:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8008b46:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8008b4a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008b4e:	f107 0310 	add.w	r3, r7, #16
 8008b52:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008b56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008b5a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8008b5e:	f107 030c 	add.w	r3, r7, #12
 8008b62:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8008b66:	2303      	movs	r3, #3
 8008b68:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b70:	2100      	movs	r1, #0
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 fea2 	bl	80098bc <hci_send_req>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	da01      	bge.n	8008b82 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8008b7e:	23ff      	movs	r3, #255	@ 0xff
 8008b80:	e017      	b.n	8008bb2 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8008b82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b86:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d005      	beq.n	8008b9c <aci_gatt_add_service+0x18c>
    return resp.Status;
 8008b90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	e00a      	b.n	8008bb2 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8008b9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ba0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008ba4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8008bae:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd90      	pop	{r4, r7, pc}

08008bbc <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8008bbc:	b590      	push	{r4, r7, lr}
 8008bbe:	b0d1      	sub	sp, #324	@ 0x144
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8008bca:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8008bce:	600a      	str	r2, [r1, #0]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008bd6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8008bda:	4622      	mov	r2, r4
 8008bdc:	801a      	strh	r2, [r3, #0]
 8008bde:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008be2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008be6:	4602      	mov	r2, r0
 8008be8:	701a      	strb	r2, [r3, #0]
 8008bea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008bee:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8008bf2:	460a      	mov	r2, r1
 8008bf4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8008bf6:	f107 0318 	add.w	r3, r7, #24
 8008bfa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008bfe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008c02:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d00a      	beq.n	8008c22 <aci_gatt_add_char+0x66>
 8008c0c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008c10:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d101      	bne.n	8008c1e <aci_gatt_add_char+0x62>
 8008c1a:	2313      	movs	r3, #19
 8008c1c:	e002      	b.n	8008c24 <aci_gatt_add_char+0x68>
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e000      	b.n	8008c24 <aci_gatt_add_char+0x68>
 8008c22:	2305      	movs	r3, #5
 8008c24:	f107 0218 	add.w	r2, r7, #24
 8008c28:	4413      	add	r3, r2
 8008c2a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008c2e:	f107 0314 	add.w	r3, r7, #20
 8008c32:	2203      	movs	r2, #3
 8008c34:	2100      	movs	r1, #0
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fbb7 	bl	80093aa <Osal_MemSet>
  int index_input = 0;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8008c42:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008c46:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008c4a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8008c4e:	8812      	ldrh	r2, [r2, #0]
 8008c50:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008c52:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008c56:	3302      	adds	r3, #2
 8008c58:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008c5c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008c60:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008c64:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8008c68:	7812      	ldrb	r2, [r2, #0]
 8008c6a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008c6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008c70:	3301      	adds	r3, #1
 8008c72:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8008c76:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008c7a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d002      	beq.n	8008c8a <aci_gatt_add_char+0xce>
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d004      	beq.n	8008c92 <aci_gatt_add_char+0xd6>
 8008c88:	e007      	b.n	8008c9a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8008c8a:	2302      	movs	r3, #2
 8008c8c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8008c90:	e005      	b.n	8008c9e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8008c92:	2310      	movs	r3, #16
 8008c94:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8008c98:	e001      	b.n	8008c9e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8008c9a:	2397      	movs	r3, #151	@ 0x97
 8008c9c:	e091      	b.n	8008dc2 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8008c9e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008ca2:	1cd8      	adds	r0, r3, #3
 8008ca4:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8008ca8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008cac:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008cb0:	6819      	ldr	r1, [r3, #0]
 8008cb2:	f000 fb6a 	bl	800938a <Osal_MemCpy>
    index_input += size;
 8008cb6:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8008cba:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8008cc4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008cc8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008ccc:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8008cd0:	8812      	ldrh	r2, [r2, #0]
 8008cd2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008cd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008cd8:	3302      	adds	r3, #2
 8008cda:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8008cde:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ce2:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8008ce6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8008ce8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008cec:	3301      	adds	r3, #1
 8008cee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8008cf2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008cf6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8008cfa:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8008cfc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008d00:	3301      	adds	r3, #1
 8008d02:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8008d06:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008d0a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8008d0e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008d10:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008d14:	3301      	adds	r3, #1
 8008d16:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8008d1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008d1e:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8008d22:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008d24:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008d28:	3301      	adds	r3, #1
 8008d2a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8008d2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008d32:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8008d36:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008d38:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d42:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008d46:	2218      	movs	r2, #24
 8008d48:	2100      	movs	r1, #0
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 fb2d 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d50:	233f      	movs	r3, #63	@ 0x3f
 8008d52:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8008d56:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8008d5a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8008d5e:	f107 0318 	add.w	r3, r7, #24
 8008d62:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8008d66:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008d6a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8008d6e:	f107 0314 	add.w	r3, r7, #20
 8008d72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8008d76:	2303      	movs	r3, #3
 8008d78:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d7c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008d80:	2100      	movs	r1, #0
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 fd9a 	bl	80098bc <hci_send_req>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	da01      	bge.n	8008d92 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8008d8e:	23ff      	movs	r3, #255	@ 0xff
 8008d90:	e017      	b.n	8008dc2 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8008d92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008d96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d005      	beq.n	8008dac <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8008da0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008da4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	e00a      	b.n	8008dc2 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8008dac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008db0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008db4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8008dbe:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd90      	pop	{r4, r7, pc}

08008dcc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008dcc:	b5b0      	push	{r4, r5, r7, lr}
 8008dce:	b0cc      	sub	sp, #304	@ 0x130
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	4610      	mov	r0, r2
 8008dd8:	4619      	mov	r1, r3
 8008dda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008dde:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008de2:	462a      	mov	r2, r5
 8008de4:	801a      	strh	r2, [r3, #0]
 8008de6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008dea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008dee:	4622      	mov	r2, r4
 8008df0:	801a      	strh	r2, [r3, #0]
 8008df2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008df6:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	701a      	strb	r2, [r3, #0]
 8008dfe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e02:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8008e06:	460a      	mov	r2, r1
 8008e08:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008e0a:	f107 0310 	add.w	r3, r7, #16
 8008e0e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008e12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e16:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8008e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008e28:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008e2c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008e30:	8812      	ldrh	r2, [r2, #0]
 8008e32:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008e34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008e38:	3302      	adds	r3, #2
 8008e3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8008e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008e42:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008e46:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8008e4a:	8812      	ldrh	r2, [r2, #0]
 8008e4c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008e4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008e52:	3302      	adds	r3, #2
 8008e54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8008e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008e5c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008e60:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8008e64:	7812      	ldrb	r2, [r2, #0]
 8008e66:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008e68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8008e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008e76:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008e7a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8008e7e:	7812      	ldrb	r2, [r2, #0]
 8008e80:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008e82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008e86:	3301      	adds	r3, #1
 8008e88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008e90:	1d98      	adds	r0, r3, #6
 8008e92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e96:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8008ea2:	f000 fa72 	bl	800938a <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008ea6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008eaa:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008eba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ebe:	2218      	movs	r2, #24
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 fa71 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8008ec8:	233f      	movs	r3, #63	@ 0x3f
 8008eca:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8008ece:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8008ed2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008ed6:	f107 0310 	add.w	r3, r7, #16
 8008eda:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008ede:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008ee2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008ee6:	f107 030f 	add.w	r3, r7, #15
 8008eea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ef4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ef8:	2100      	movs	r1, #0
 8008efa:	4618      	mov	r0, r3
 8008efc:	f000 fcde 	bl	80098bc <hci_send_req>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	da01      	bge.n	8008f0a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8008f06:	23ff      	movs	r3, #255	@ 0xff
 8008f08:	e004      	b.n	8008f14 <aci_gatt_update_char_value+0x148>
  return status;
 8008f0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f0e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008f12:	781b      	ldrb	r3, [r3, #0]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bdb0      	pop	{r4, r5, r7, pc}

08008f1e <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b0cc      	sub	sp, #304	@ 0x130
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	4602      	mov	r2, r0
 8008f26:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f2a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008f2e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8008f30:	f107 0310 	add.w	r3, r7, #16
 8008f34:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008f38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f3c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008f40:	2200      	movs	r2, #0
 8008f42:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008f4e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008f52:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008f56:	8812      	ldrh	r2, [r2, #0]
 8008f58:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008f5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008f5e:	3302      	adds	r3, #2
 8008f60:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f68:	2218      	movs	r2, #24
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 fa1c 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f72:	233f      	movs	r3, #63	@ 0x3f
 8008f74:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8008f78:	f240 1325 	movw	r3, #293	@ 0x125
 8008f7c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008f80:	f107 0310 	add.w	r3, r7, #16
 8008f84:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008f88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008f8c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008f90:	f107 030f 	add.w	r3, r7, #15
 8008f94:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f000 fc89 	bl	80098bc <hci_send_req>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	da01      	bge.n	8008fb4 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8008fb0:	23ff      	movs	r3, #255	@ 0xff
 8008fb2:	e004      	b.n	8008fbe <aci_gatt_confirm_indication+0xa0>
  return status;
 8008fb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fb8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008fbc:	781b      	ldrb	r3, [r3, #0]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b0cc      	sub	sp, #304	@ 0x130
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fd2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008fd6:	601a      	str	r2, [r3, #0]
 8008fd8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fdc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	701a      	strb	r2, [r3, #0]
 8008fe4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fe8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008fec:	460a      	mov	r2, r1
 8008fee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008ff0:	f107 0310 	add.w	r3, r7, #16
 8008ff4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008ff8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ffc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009000:	2200      	movs	r2, #0
 8009002:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800900a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800900e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009012:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009016:	7812      	ldrb	r2, [r2, #0]
 8009018:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800901a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800901e:	3301      	adds	r3, #1
 8009020:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8009024:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009028:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800902c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009030:	7812      	ldrb	r2, [r2, #0]
 8009032:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009034:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009038:	3301      	adds	r3, #1
 800903a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800903e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009042:	1c98      	adds	r0, r3, #2
 8009044:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009048:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800904c:	781a      	ldrb	r2, [r3, #0]
 800904e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009052:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009056:	6819      	ldr	r1, [r3, #0]
 8009058:	f000 f997 	bl	800938a <Osal_MemCpy>
  index_input += Length;
 800905c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009060:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800906a:	4413      	add	r3, r2
 800906c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009070:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009074:	2218      	movs	r2, #24
 8009076:	2100      	movs	r1, #0
 8009078:	4618      	mov	r0, r3
 800907a:	f000 f996 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x3f;
 800907e:	233f      	movs	r3, #63	@ 0x3f
 8009080:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8009084:	230c      	movs	r3, #12
 8009086:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800908a:	f107 0310 	add.w	r3, r7, #16
 800908e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009092:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009096:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800909a:	f107 030f 	add.w	r3, r7, #15
 800909e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80090a2:	2301      	movs	r3, #1
 80090a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80090a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090ac:	2100      	movs	r1, #0
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 fc04 	bl	80098bc <hci_send_req>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	da01      	bge.n	80090be <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80090ba:	23ff      	movs	r3, #255	@ 0xff
 80090bc:	e004      	b.n	80090c8 <aci_hal_write_config_data+0x100>
  return status;
 80090be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80090c2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80090c6:	781b      	ldrb	r3, [r3, #0]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b0cc      	sub	sp, #304	@ 0x130
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	4602      	mov	r2, r0
 80090da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80090de:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80090e2:	701a      	strb	r2, [r3, #0]
 80090e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80090e8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80090ec:	460a      	mov	r2, r1
 80090ee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80090f0:	f107 0310 	add.w	r3, r7, #16
 80090f4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80090f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80090fc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009100:	2200      	movs	r2, #0
 8009102:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800910a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800910e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009112:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009116:	7812      	ldrb	r2, [r2, #0]
 8009118:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800911a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800911e:	3301      	adds	r3, #1
 8009120:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8009124:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009128:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800912c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009130:	7812      	ldrb	r2, [r2, #0]
 8009132:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009134:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009138:	3301      	adds	r3, #1
 800913a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800913e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009142:	2218      	movs	r2, #24
 8009144:	2100      	movs	r1, #0
 8009146:	4618      	mov	r0, r3
 8009148:	f000 f92f 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x3f;
 800914c:	233f      	movs	r3, #63	@ 0x3f
 800914e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8009152:	230f      	movs	r3, #15
 8009154:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009158:	f107 0310 	add.w	r3, r7, #16
 800915c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009160:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009164:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009168:	f107 030f 	add.w	r3, r7, #15
 800916c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009170:	2301      	movs	r3, #1
 8009172:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009176:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800917a:	2100      	movs	r1, #0
 800917c:	4618      	mov	r0, r3
 800917e:	f000 fb9d 	bl	80098bc <hci_send_req>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	da01      	bge.n	800918c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8009188:	23ff      	movs	r3, #255	@ 0xff
 800918a:	e004      	b.n	8009196 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800918c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009190:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009194:	781b      	ldrb	r3, [r3, #0]
}
 8009196:	4618      	mov	r0, r3
 8009198:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b0cc      	sub	sp, #304	@ 0x130
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	4602      	mov	r2, r0
 80091a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80091ac:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80091b0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80091b2:	f107 0310 	add.w	r3, r7, #16
 80091b6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80091ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80091be:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80091c2:	2200      	movs	r2, #0
 80091c4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80091c6:	2300      	movs	r3, #0
 80091c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80091cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80091d0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80091d4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80091d8:	8812      	ldrh	r2, [r2, #0]
 80091da:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80091dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80091e0:	3302      	adds	r3, #2
 80091e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80091e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091ea:	2218      	movs	r2, #24
 80091ec:	2100      	movs	r1, #0
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 f8db 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x3f;
 80091f4:	233f      	movs	r3, #63	@ 0x3f
 80091f6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 80091fa:	2318      	movs	r3, #24
 80091fc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009200:	f107 0310 	add.w	r3, r7, #16
 8009204:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009208:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800920c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009210:	f107 030f 	add.w	r3, r7, #15
 8009214:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009218:	2301      	movs	r3, #1
 800921a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800921e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009222:	2100      	movs	r1, #0
 8009224:	4618      	mov	r0, r3
 8009226:	f000 fb49 	bl	80098bc <hci_send_req>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	da01      	bge.n	8009234 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8009230:	23ff      	movs	r3, #255	@ 0xff
 8009232:	e004      	b.n	800923e <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8009234:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009238:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800923c:	781b      	ldrb	r3, [r3, #0]
}
 800923e:	4618      	mov	r0, r3
 8009240:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b088      	sub	sp, #32
 800924c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009252:	f107 0308 	add.w	r3, r7, #8
 8009256:	2218      	movs	r2, #24
 8009258:	2100      	movs	r1, #0
 800925a:	4618      	mov	r0, r3
 800925c:	f000 f8a5 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x03;
 8009260:	2303      	movs	r3, #3
 8009262:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009264:	2303      	movs	r3, #3
 8009266:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009268:	1dfb      	adds	r3, r7, #7
 800926a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800926c:	2301      	movs	r3, #1
 800926e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009270:	f107 0308 	add.w	r3, r7, #8
 8009274:	2100      	movs	r1, #0
 8009276:	4618      	mov	r0, r3
 8009278:	f000 fb20 	bl	80098bc <hci_send_req>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	da01      	bge.n	8009286 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009282:	23ff      	movs	r3, #255	@ 0xff
 8009284:	e000      	b.n	8009288 <hci_reset+0x40>
  return status;
 8009286:	79fb      	ldrb	r3, [r7, #7]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3720      	adds	r7, #32
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8009290:	b590      	push	{r4, r7, lr}
 8009292:	b0cd      	sub	sp, #308	@ 0x134
 8009294:	af00      	add	r7, sp, #0
 8009296:	4604      	mov	r4, r0
 8009298:	4608      	mov	r0, r1
 800929a:	4611      	mov	r1, r2
 800929c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80092a0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80092a4:	4622      	mov	r2, r4
 80092a6:	701a      	strb	r2, [r3, #0]
 80092a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80092ac:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80092b0:	4602      	mov	r2, r0
 80092b2:	701a      	strb	r2, [r3, #0]
 80092b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80092b8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80092bc:	460a      	mov	r2, r1
 80092be:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80092c0:	f107 0310 	add.w	r3, r7, #16
 80092c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80092c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80092cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80092d0:	2200      	movs	r2, #0
 80092d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80092da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80092de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80092e2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80092e6:	7812      	ldrb	r2, [r2, #0]
 80092e8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80092ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80092ee:	3301      	adds	r3, #1
 80092f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 80092f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80092f8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80092fc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009300:	7812      	ldrb	r2, [r2, #0]
 8009302:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009304:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009308:	3301      	adds	r3, #1
 800930a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800930e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009312:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009316:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800931a:	7812      	ldrb	r2, [r2, #0]
 800931c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800931e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009322:	3301      	adds	r3, #1
 8009324:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009328:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800932c:	2218      	movs	r2, #24
 800932e:	2100      	movs	r1, #0
 8009330:	4618      	mov	r0, r3
 8009332:	f000 f83a 	bl	80093aa <Osal_MemSet>
  rq.ogf = 0x08;
 8009336:	2308      	movs	r3, #8
 8009338:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800933c:	2331      	movs	r3, #49	@ 0x31
 800933e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009342:	f107 0310 	add.w	r3, r7, #16
 8009346:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800934a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800934e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009352:	f107 030f 	add.w	r3, r7, #15
 8009356:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800935a:	2301      	movs	r3, #1
 800935c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009360:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009364:	2100      	movs	r1, #0
 8009366:	4618      	mov	r0, r3
 8009368:	f000 faa8 	bl	80098bc <hci_send_req>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	da01      	bge.n	8009376 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8009372:	23ff      	movs	r3, #255	@ 0xff
 8009374:	e004      	b.n	8009380 <hci_le_set_default_phy+0xf0>
  return status;
 8009376:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800937a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800937e:	781b      	ldrb	r3, [r3, #0]
}
 8009380:	4618      	mov	r0, r3
 8009382:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8009386:	46bd      	mov	sp, r7
 8009388:	bd90      	pop	{r4, r7, pc}

0800938a <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	60f8      	str	r0, [r7, #12]
 8009392:	60b9      	str	r1, [r7, #8]
 8009394:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	68b9      	ldr	r1, [r7, #8]
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f008 fe43 	bl	8012026 <memcpy>
 80093a0:	4603      	mov	r3, r0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b084      	sub	sp, #16
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	60f8      	str	r0, [r7, #12]
 80093b2:	60b9      	str	r1, [r7, #8]
 80093b4:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	68b9      	ldr	r1, [r7, #8]
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f008 fd94 	bl	8011ee8 <memset>
 80093c0:	4603      	mov	r3, r0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80093ca:	b480      	push	{r7}
 80093cc:	af00      	add	r7, sp, #0
  return;
 80093ce:	bf00      	nop
}
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80093d8:	b480      	push	{r7}
 80093da:	af00      	add	r7, sp, #0
  return;
 80093dc:	bf00      	nop
}
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80093e6:	b480      	push	{r7}
 80093e8:	af00      	add	r7, sp, #0
  return;
 80093ea:	bf00      	nop
}
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80093f4:	b480      	push	{r7}
 80093f6:	af00      	add	r7, sp, #0
  return;
 80093f8:	bf00      	nop
}
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8009402:	b480      	push	{r7}
 8009404:	af00      	add	r7, sp, #0
  return;
 8009406:	bf00      	nop
}
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8009410:	b480      	push	{r7}
 8009412:	af00      	add	r7, sp, #0
  return;
 8009414:	bf00      	nop
}
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800941e:	b480      	push	{r7}
 8009420:	af00      	add	r7, sp, #0
  return;
 8009422:	bf00      	nop
}
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800942c:	b480      	push	{r7}
 800942e:	af00      	add	r7, sp, #0
  return;
 8009430:	bf00      	nop
}
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800943a:	b480      	push	{r7}
 800943c:	af00      	add	r7, sp, #0
  return;
 800943e:	bf00      	nop
}
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8009448:	b480      	push	{r7}
 800944a:	af00      	add	r7, sp, #0
  return;
 800944c:	bf00      	nop
}
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8009456:	b480      	push	{r7}
 8009458:	af00      	add	r7, sp, #0
  return;
 800945a:	bf00      	nop
}
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8009464:	b480      	push	{r7}
 8009466:	af00      	add	r7, sp, #0
  return;
 8009468:	bf00      	nop
}
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr

08009472 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8009472:	b480      	push	{r7}
 8009474:	af00      	add	r7, sp, #0
  return;
 8009476:	bf00      	nop
}
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8009480:	b480      	push	{r7}
 8009482:	af00      	add	r7, sp, #0
  return;
 8009484:	bf00      	nop
}
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800948e:	b480      	push	{r7}
 8009490:	af00      	add	r7, sp, #0
  return;
 8009492:	bf00      	nop
}
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800949c:	b480      	push	{r7}
 800949e:	af00      	add	r7, sp, #0
  return;
 80094a0:	bf00      	nop
}
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80094aa:	b480      	push	{r7}
 80094ac:	af00      	add	r7, sp, #0
  return;
 80094ae:	bf00      	nop
}
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80094bc:	4b04      	ldr	r3, [pc, #16]	@ (80094d0 <SVCCTL_Init+0x18>)
 80094be:	2200      	movs	r2, #0
 80094c0:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80094c2:	4b04      	ldr	r3, [pc, #16]	@ (80094d4 <SVCCTL_Init+0x1c>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80094c8:	f000 f806 	bl	80094d8 <SVCCTL_SvcInit>

  return;
 80094cc:	bf00      	nop
}
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	20000238 	.word	0x20000238
 80094d4:	20000258 	.word	0x20000258

080094d8 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	af00      	add	r7, sp, #0
  BAS_Init();
 80094dc:	f7ff ff75 	bl	80093ca <BAS_Init>

  BLS_Init();
 80094e0:	f7ff ff7a 	bl	80093d8 <BLS_Init>

  CRS_STM_Init();
 80094e4:	f7ff ff7f 	bl	80093e6 <CRS_STM_Init>

  DIS_Init();
 80094e8:	f7ff ff84 	bl	80093f4 <DIS_Init>

  EDS_STM_Init();
 80094ec:	f7ff ff89 	bl	8009402 <EDS_STM_Init>

  HIDS_Init();
 80094f0:	f7ff ff8e 	bl	8009410 <HIDS_Init>

  HRS_Init();
 80094f4:	f7ff ff93 	bl	800941e <HRS_Init>

  HTS_Init();
 80094f8:	f7ff ff98 	bl	800942c <HTS_Init>

  IAS_Init();
 80094fc:	f7ff ff9d 	bl	800943a <IAS_Init>

  LLS_Init();
 8009500:	f7ff ffa2 	bl	8009448 <LLS_Init>

  TPS_Init();
 8009504:	f7ff ffa7 	bl	8009456 <TPS_Init>

  MOTENV_STM_Init();
 8009508:	f7ff ffac 	bl	8009464 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800950c:	f7ff ffb1 	bl	8009472 <P2PS_STM_Init>

  ZDD_STM_Init();
 8009510:	f7ff ffb6 	bl	8009480 <ZDD_STM_Init>

  OTAS_STM_Init();
 8009514:	f7ff ffbb 	bl	800948e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009518:	f7ff ffc7 	bl	80094aa <BVOPUS_STM_Init>

  MESH_Init();
 800951c:	f7ff ffbe 	bl	800949c <MESH_Init>

  SVCCTL_InitCustomSvc();
 8009520:	f001 fb7a 	bl	800ac18 <SVCCTL_InitCustomSvc>
  
  return;
 8009524:	bf00      	nop
}
 8009526:	bd80      	pop	{r7, pc}

08009528 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8009530:	4b09      	ldr	r3, [pc, #36]	@ (8009558 <SVCCTL_RegisterSvcHandler+0x30>)
 8009532:	7f1b      	ldrb	r3, [r3, #28]
 8009534:	4619      	mov	r1, r3
 8009536:	4a08      	ldr	r2, [pc, #32]	@ (8009558 <SVCCTL_RegisterSvcHandler+0x30>)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800953e:	4b06      	ldr	r3, [pc, #24]	@ (8009558 <SVCCTL_RegisterSvcHandler+0x30>)
 8009540:	7f1b      	ldrb	r3, [r3, #28]
 8009542:	3301      	adds	r3, #1
 8009544:	b2da      	uxtb	r2, r3
 8009546:	4b04      	ldr	r3, [pc, #16]	@ (8009558 <SVCCTL_RegisterSvcHandler+0x30>)
 8009548:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800954a:	bf00      	nop
}
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	20000238 	.word	0x20000238

0800955c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	3301      	adds	r3, #1
 8009568:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800956a:	2300      	movs	r3, #0
 800956c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	2bff      	cmp	r3, #255	@ 0xff
 8009574:	d125      	bne.n	80095c2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	3302      	adds	r3, #2
 800957a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	881b      	ldrh	r3, [r3, #0]
 8009580:	b29b      	uxth	r3, r3
 8009582:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009586:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800958a:	d118      	bne.n	80095be <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800958c:	2300      	movs	r3, #0
 800958e:	757b      	strb	r3, [r7, #21]
 8009590:	e00d      	b.n	80095ae <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8009592:	7d7b      	ldrb	r3, [r7, #21]
 8009594:	4a1a      	ldr	r2, [pc, #104]	@ (8009600 <SVCCTL_UserEvtRx+0xa4>)
 8009596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	4798      	blx	r3
 800959e:	4603      	mov	r3, r0
 80095a0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80095a2:	7dfb      	ldrb	r3, [r7, #23]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d108      	bne.n	80095ba <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80095a8:	7d7b      	ldrb	r3, [r7, #21]
 80095aa:	3301      	adds	r3, #1
 80095ac:	757b      	strb	r3, [r7, #21]
 80095ae:	4b14      	ldr	r3, [pc, #80]	@ (8009600 <SVCCTL_UserEvtRx+0xa4>)
 80095b0:	7f1b      	ldrb	r3, [r3, #28]
 80095b2:	7d7a      	ldrb	r2, [r7, #21]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d3ec      	bcc.n	8009592 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80095b8:	e002      	b.n	80095c0 <SVCCTL_UserEvtRx+0x64>
              break;
 80095ba:	bf00      	nop
          break;
 80095bc:	e000      	b.n	80095c0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80095be:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80095c0:	e000      	b.n	80095c4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80095c2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80095c4:	7dfb      	ldrb	r3, [r7, #23]
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d00f      	beq.n	80095ea <SVCCTL_UserEvtRx+0x8e>
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	dc10      	bgt.n	80095f0 <SVCCTL_UserEvtRx+0x94>
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d002      	beq.n	80095d8 <SVCCTL_UserEvtRx+0x7c>
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d006      	beq.n	80095e4 <SVCCTL_UserEvtRx+0x88>
 80095d6:	e00b      	b.n	80095f0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 ff8f 	bl	800a4fc <SVCCTL_App_Notification>
 80095de:	4603      	mov	r3, r0
 80095e0:	75bb      	strb	r3, [r7, #22]
      break;
 80095e2:	e008      	b.n	80095f6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80095e4:	2301      	movs	r3, #1
 80095e6:	75bb      	strb	r3, [r7, #22]
      break;
 80095e8:	e005      	b.n	80095f6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80095ea:	2300      	movs	r3, #0
 80095ec:	75bb      	strb	r3, [r7, #22]
      break;
 80095ee:	e002      	b.n	80095f6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80095f0:	2301      	movs	r3, #1
 80095f2:	75bb      	strb	r3, [r7, #22]
      break;
 80095f4:	bf00      	nop
  }

  return (return_status);
 80095f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3718      	adds	r7, #24
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	20000238 	.word	0x20000238

08009604 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b088      	sub	sp, #32
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800960c:	f107 030c 	add.w	r3, r7, #12
 8009610:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	212e      	movs	r1, #46	@ 0x2e
 800961c:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8009620:	f000 fae8 	bl	8009bf4 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	330b      	adds	r3, #11
 8009628:	78db      	ldrb	r3, [r3, #3]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3720      	adds	r7, #32
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b088      	sub	sp, #32
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800963a:	f107 030c 	add.w	r3, r7, #12
 800963e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	210f      	movs	r1, #15
 800964a:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800964e:	f000 fad1 	bl	8009bf4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	330b      	adds	r3, #11
 8009656:	78db      	ldrb	r3, [r3, #3]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3720      	adds	r7, #32
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b088      	sub	sp, #32
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009668:	f107 030c 	add.w	r3, r7, #12
 800966c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	2110      	movs	r1, #16
 8009674:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8009678:	f000 fabc 	bl	8009bf4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	330b      	adds	r3, #11
 8009680:	78db      	ldrb	r3, [r3, #3]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3720      	adds	r7, #32
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
	...

0800968c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800968c:	b480      	push	{r7}
 800968e:	b08b      	sub	sp, #44	@ 0x2c
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009694:	2300      	movs	r3, #0
 8009696:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009698:	2300      	movs	r3, #0
 800969a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800969c:	2300      	movs	r3, #0
 800969e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80096a0:	2300      	movs	r3, #0
 80096a2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80096a4:	2300      	movs	r3, #0
 80096a6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80096a8:	2300      	movs	r3, #0
 80096aa:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80096ac:	2300      	movs	r3, #0
 80096ae:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80096b0:	2300      	movs	r3, #0
 80096b2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80096b4:	4b4a      	ldr	r3, [pc, #296]	@ (80097e0 <SHCI_GetWirelessFwInfo+0x154>)
 80096b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80096bc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80096c6:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a44      	ldr	r2, [pc, #272]	@ (80097e4 <SHCI_GetWirelessFwInfo+0x158>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d10f      	bne.n	80096f8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	695b      	ldr	r3, [r3, #20]
 80096dc:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	699b      	ldr	r3, [r3, #24]
 80096e2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	69db      	ldr	r3, [r3, #28]
 80096e8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	617b      	str	r3, [r7, #20]
 80096f6:	e01a      	b.n	800972e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009700:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8009704:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	695b      	ldr	r3, [r3, #20]
 8009714:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800972e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009730:	0e1b      	lsrs	r3, r3, #24
 8009732:	b2da      	uxtb	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973a:	0c1b      	lsrs	r3, r3, #16
 800973c:	b2da      	uxtb	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009744:	0a1b      	lsrs	r3, r3, #8
 8009746:	b2da      	uxtb	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800974c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974e:	091b      	lsrs	r3, r3, #4
 8009750:	b2db      	uxtb	r3, r3
 8009752:	f003 030f 	and.w	r3, r3, #15
 8009756:	b2da      	uxtb	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800975c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975e:	b2db      	uxtb	r3, r3
 8009760:	f003 030f 	and.w	r3, r3, #15
 8009764:	b2da      	uxtb	r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800976a:	6a3b      	ldr	r3, [r7, #32]
 800976c:	0e1b      	lsrs	r3, r3, #24
 800976e:	b2da      	uxtb	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	0c1b      	lsrs	r3, r3, #16
 8009778:	b2da      	uxtb	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	0a1b      	lsrs	r3, r3, #8
 8009782:	b2da      	uxtb	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009788:	6a3b      	ldr	r3, [r7, #32]
 800978a:	b2da      	uxtb	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	b2da      	uxtb	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	0e1b      	lsrs	r3, r3, #24
 800979c:	b2da      	uxtb	r2, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	0c1b      	lsrs	r3, r3, #16
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	0a1b      	lsrs	r3, r3, #8
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	0e1b      	lsrs	r3, r3, #24
 80097ba:	b2da      	uxtb	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	0c1b      	lsrs	r3, r3, #16
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	b2da      	uxtb	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	372c      	adds	r7, #44	@ 0x2c
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	58004000 	.word	0x58004000
 80097e4:	a94656b9 	.word	0xa94656b9

080097e8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	4a08      	ldr	r2, [pc, #32]	@ (8009818 <hci_init+0x30>)
 80097f8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80097fa:	4a08      	ldr	r2, [pc, #32]	@ (800981c <hci_init+0x34>)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009800:	4806      	ldr	r0, [pc, #24]	@ (800981c <hci_init+0x34>)
 8009802:	f000 f979 	bl	8009af8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4618      	mov	r0, r3
 800980c:	f000 f8da 	bl	80099c4 <TlInit>

  return;
 8009810:	bf00      	nop
}
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	200004fc 	.word	0x200004fc
 800981c:	200004d4 	.word	0x200004d4

08009820 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009826:	4822      	ldr	r0, [pc, #136]	@ (80098b0 <hci_user_evt_proc+0x90>)
 8009828:	f000 fd32 	bl	800a290 <LST_is_empty>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d12b      	bne.n	800988a <hci_user_evt_proc+0x6a>
 8009832:	4b20      	ldr	r3, [pc, #128]	@ (80098b4 <hci_user_evt_proc+0x94>)
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d027      	beq.n	800988a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800983a:	f107 030c 	add.w	r3, r7, #12
 800983e:	4619      	mov	r1, r3
 8009840:	481b      	ldr	r0, [pc, #108]	@ (80098b0 <hci_user_evt_proc+0x90>)
 8009842:	f000 fdb4 	bl	800a3ae <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009846:	4b1c      	ldr	r3, [pc, #112]	@ (80098b8 <hci_user_evt_proc+0x98>)
 8009848:	69db      	ldr	r3, [r3, #28]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00c      	beq.n	8009868 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8009852:	2301      	movs	r3, #1
 8009854:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009856:	4b18      	ldr	r3, [pc, #96]	@ (80098b8 <hci_user_evt_proc+0x98>)
 8009858:	69db      	ldr	r3, [r3, #28]
 800985a:	1d3a      	adds	r2, r7, #4
 800985c:	4610      	mov	r0, r2
 800985e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009860:	793a      	ldrb	r2, [r7, #4]
 8009862:	4b14      	ldr	r3, [pc, #80]	@ (80098b4 <hci_user_evt_proc+0x94>)
 8009864:	701a      	strb	r2, [r3, #0]
 8009866:	e002      	b.n	800986e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009868:	4b12      	ldr	r3, [pc, #72]	@ (80098b4 <hci_user_evt_proc+0x94>)
 800986a:	2201      	movs	r2, #1
 800986c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800986e:	4b11      	ldr	r3, [pc, #68]	@ (80098b4 <hci_user_evt_proc+0x94>)
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d004      	beq.n	8009880 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	4618      	mov	r0, r3
 800987a:	f000 fc0d 	bl	800a098 <TL_MM_EvtDone>
 800987e:	e004      	b.n	800988a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	4619      	mov	r1, r3
 8009884:	480a      	ldr	r0, [pc, #40]	@ (80098b0 <hci_user_evt_proc+0x90>)
 8009886:	f000 fd25 	bl	800a2d4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800988a:	4809      	ldr	r0, [pc, #36]	@ (80098b0 <hci_user_evt_proc+0x90>)
 800988c:	f000 fd00 	bl	800a290 <LST_is_empty>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d107      	bne.n	80098a6 <hci_user_evt_proc+0x86>
 8009896:	4b07      	ldr	r3, [pc, #28]	@ (80098b4 <hci_user_evt_proc+0x94>)
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800989e:	4804      	ldr	r0, [pc, #16]	@ (80098b0 <hci_user_evt_proc+0x90>)
 80098a0:	f001 f852 	bl	800a948 <hci_notify_asynch_evt>
  }


  return;
 80098a4:	bf00      	nop
 80098a6:	bf00      	nop
}
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	20000260 	.word	0x20000260
 80098b4:	2000026c 	.word	0x2000026c
 80098b8:	200004d4 	.word	0x200004d4

080098bc <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b088      	sub	sp, #32
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80098c8:	2000      	movs	r0, #0
 80098ca:	f000 f8d1 	bl	8009a70 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80098ce:	2300      	movs	r3, #0
 80098d0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	885b      	ldrh	r3, [r3, #2]
 80098d6:	b21b      	sxth	r3, r3
 80098d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098dc:	b21a      	sxth	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	881b      	ldrh	r3, [r3, #0]
 80098e2:	029b      	lsls	r3, r3, #10
 80098e4:	b21b      	sxth	r3, r3
 80098e6:	4313      	orrs	r3, r2
 80098e8:	b21b      	sxth	r3, r3
 80098ea:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80098ec:	4b33      	ldr	r3, [pc, #204]	@ (80099bc <hci_send_req+0x100>)
 80098ee:	2201      	movs	r2, #1
 80098f0:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	b2d9      	uxtb	r1, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	689a      	ldr	r2, [r3, #8]
 80098fc:	8bbb      	ldrh	r3, [r7, #28]
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 f890 	bl	8009a24 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009904:	e04e      	b.n	80099a4 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009906:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800990a:	f001 f834 	bl	800a976 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800990e:	e043      	b.n	8009998 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009910:	f107 030c 	add.w	r3, r7, #12
 8009914:	4619      	mov	r1, r3
 8009916:	482a      	ldr	r0, [pc, #168]	@ (80099c0 <hci_send_req+0x104>)
 8009918:	f000 fd49 	bl	800a3ae <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	7a5b      	ldrb	r3, [r3, #9]
 8009920:	2b0f      	cmp	r3, #15
 8009922:	d114      	bne.n	800994e <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	330b      	adds	r3, #11
 8009928:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	885b      	ldrh	r3, [r3, #2]
 800992e:	b29b      	uxth	r3, r3
 8009930:	8bba      	ldrh	r2, [r7, #28]
 8009932:	429a      	cmp	r2, r3
 8009934:	d104      	bne.n	8009940 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	693a      	ldr	r2, [r7, #16]
 800993c:	7812      	ldrb	r2, [r2, #0]
 800993e:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	785b      	ldrb	r3, [r3, #1]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d027      	beq.n	8009998 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009948:	2301      	movs	r3, #1
 800994a:	77fb      	strb	r3, [r7, #31]
 800994c:	e024      	b.n	8009998 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	330b      	adds	r3, #11
 8009952:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800995a:	b29b      	uxth	r3, r3
 800995c:	8bba      	ldrh	r2, [r7, #28]
 800995e:	429a      	cmp	r2, r3
 8009960:	d114      	bne.n	800998c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	7a9b      	ldrb	r3, [r3, #10]
 8009966:	3b03      	subs	r3, #3
 8009968:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	695a      	ldr	r2, [r3, #20]
 800996e:	7dfb      	ldrb	r3, [r7, #23]
 8009970:	429a      	cmp	r2, r3
 8009972:	bfa8      	it	ge
 8009974:	461a      	movge	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6918      	ldr	r0, [r3, #16]
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	1cd9      	adds	r1, r3, #3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	461a      	mov	r2, r3
 8009988:	f008 fb4d 	bl	8012026 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009994:	2301      	movs	r3, #1
 8009996:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009998:	4809      	ldr	r0, [pc, #36]	@ (80099c0 <hci_send_req+0x104>)
 800999a:	f000 fc79 	bl	800a290 <LST_is_empty>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0b5      	beq.n	8009910 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80099a4:	7ffb      	ldrb	r3, [r7, #31]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d0ad      	beq.n	8009906 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80099aa:	2001      	movs	r0, #1
 80099ac:	f000 f860 	bl	8009a70 <NotifyCmdStatus>

  return 0;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3720      	adds	r7, #32
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	20000500 	.word	0x20000500
 80099c0:	200004f4 	.word	0x200004f4

080099c4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80099cc:	480f      	ldr	r0, [pc, #60]	@ (8009a0c <TlInit+0x48>)
 80099ce:	f000 fc4f 	bl	800a270 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80099d2:	4a0f      	ldr	r2, [pc, #60]	@ (8009a10 <TlInit+0x4c>)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80099d8:	480e      	ldr	r0, [pc, #56]	@ (8009a14 <TlInit+0x50>)
 80099da:	f000 fc49 	bl	800a270 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80099de:	4b0e      	ldr	r3, [pc, #56]	@ (8009a18 <TlInit+0x54>)
 80099e0:	2201      	movs	r2, #1
 80099e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80099e4:	4b0d      	ldr	r3, [pc, #52]	@ (8009a1c <TlInit+0x58>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00a      	beq.n	8009a02 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80099f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009a20 <TlInit+0x5c>)
 80099f2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80099f4:	4b09      	ldr	r3, [pc, #36]	@ (8009a1c <TlInit+0x58>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f107 0208 	add.w	r2, r7, #8
 80099fc:	4610      	mov	r0, r2
 80099fe:	4798      	blx	r3
  }

  return;
 8009a00:	bf00      	nop
 8009a02:	bf00      	nop
}
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	200004f4 	.word	0x200004f4
 8009a10:	20000268 	.word	0x20000268
 8009a14:	20000260 	.word	0x20000260
 8009a18:	2000026c 	.word	0x2000026c
 8009a1c:	200004d4 	.word	0x200004d4
 8009a20:	08009ab1 	.word	0x08009ab1

08009a24 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	603a      	str	r2, [r7, #0]
 8009a2e:	80fb      	strh	r3, [r7, #6]
 8009a30:	460b      	mov	r3, r1
 8009a32:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009a34:	4b0c      	ldr	r3, [pc, #48]	@ (8009a68 <SendCmd+0x44>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	88fa      	ldrh	r2, [r7, #6]
 8009a3a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8009a68 <SendCmd+0x44>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	797a      	ldrb	r2, [r7, #5]
 8009a44:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009a46:	4b08      	ldr	r3, [pc, #32]	@ (8009a68 <SendCmd+0x44>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	330c      	adds	r3, #12
 8009a4c:	797a      	ldrb	r2, [r7, #5]
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	4618      	mov	r0, r3
 8009a52:	f008 fae8 	bl	8012026 <memcpy>

  hciContext.io.Send(0,0);
 8009a56:	4b05      	ldr	r3, [pc, #20]	@ (8009a6c <SendCmd+0x48>)
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	4798      	blx	r3

  return;
 8009a60:	bf00      	nop
}
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	20000268 	.word	0x20000268
 8009a6c:	200004d4 	.word	0x200004d4

08009a70 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	4603      	mov	r3, r0
 8009a78:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009a7a:	79fb      	ldrb	r3, [r7, #7]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d108      	bne.n	8009a92 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009a80:	4b0a      	ldr	r3, [pc, #40]	@ (8009aac <NotifyCmdStatus+0x3c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00d      	beq.n	8009aa4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009a88:	4b08      	ldr	r3, [pc, #32]	@ (8009aac <NotifyCmdStatus+0x3c>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009a90:	e008      	b.n	8009aa4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009a92:	4b06      	ldr	r3, [pc, #24]	@ (8009aac <NotifyCmdStatus+0x3c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d004      	beq.n	8009aa4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009a9a:	4b04      	ldr	r3, [pc, #16]	@ (8009aac <NotifyCmdStatus+0x3c>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2001      	movs	r0, #1
 8009aa0:	4798      	blx	r3
  return;
 8009aa2:	bf00      	nop
 8009aa4:	bf00      	nop
}
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	200004fc 	.word	0x200004fc

08009ab0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	7a5b      	ldrb	r3, [r3, #9]
 8009abc:	2b0f      	cmp	r3, #15
 8009abe:	d003      	beq.n	8009ac8 <TlEvtReceived+0x18>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	7a5b      	ldrb	r3, [r3, #9]
 8009ac4:	2b0e      	cmp	r3, #14
 8009ac6:	d107      	bne.n	8009ad8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009ac8:	6879      	ldr	r1, [r7, #4]
 8009aca:	4809      	ldr	r0, [pc, #36]	@ (8009af0 <TlEvtReceived+0x40>)
 8009acc:	f000 fc28 	bl	800a320 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	f000 ff45 	bl	800a960 <hci_cmd_resp_release>
 8009ad6:	e006      	b.n	8009ae6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009ad8:	6879      	ldr	r1, [r7, #4]
 8009ada:	4806      	ldr	r0, [pc, #24]	@ (8009af4 <TlEvtReceived+0x44>)
 8009adc:	f000 fc20 	bl	800a320 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009ae0:	4804      	ldr	r0, [pc, #16]	@ (8009af4 <TlEvtReceived+0x44>)
 8009ae2:	f000 ff31 	bl	800a948 <hci_notify_asynch_evt>
  }

  return;
 8009ae6:	bf00      	nop
}
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	200004f4 	.word	0x200004f4
 8009af4:	20000260 	.word	0x20000260

08009af8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4a05      	ldr	r2, [pc, #20]	@ (8009b18 <hci_register_io_bus+0x20>)
 8009b04:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a04      	ldr	r2, [pc, #16]	@ (8009b1c <hci_register_io_bus+0x24>)
 8009b0a:	611a      	str	r2, [r3, #16]

  return;
 8009b0c:	bf00      	nop
}
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr
 8009b18:	08009e11 	.word	0x08009e11
 8009b1c:	08009e79 	.word	0x08009e79

08009b20 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	4a08      	ldr	r2, [pc, #32]	@ (8009b50 <shci_init+0x30>)
 8009b30:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009b32:	4a08      	ldr	r2, [pc, #32]	@ (8009b54 <shci_init+0x34>)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009b38:	4806      	ldr	r0, [pc, #24]	@ (8009b54 <shci_init+0x34>)
 8009b3a:	f000 f915 	bl	8009d68 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f000 f898 	bl	8009c78 <TlInit>

  return;
 8009b48:	bf00      	nop
}
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	20000524 	.word	0x20000524
 8009b54:	20000504 	.word	0x20000504

08009b58 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009b5e:	4822      	ldr	r0, [pc, #136]	@ (8009be8 <shci_user_evt_proc+0x90>)
 8009b60:	f000 fb96 	bl	800a290 <LST_is_empty>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d12b      	bne.n	8009bc2 <shci_user_evt_proc+0x6a>
 8009b6a:	4b20      	ldr	r3, [pc, #128]	@ (8009bec <shci_user_evt_proc+0x94>)
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d027      	beq.n	8009bc2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009b72:	f107 030c 	add.w	r3, r7, #12
 8009b76:	4619      	mov	r1, r3
 8009b78:	481b      	ldr	r0, [pc, #108]	@ (8009be8 <shci_user_evt_proc+0x90>)
 8009b7a:	f000 fc18 	bl	800a3ae <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8009bf0 <shci_user_evt_proc+0x98>)
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00c      	beq.n	8009ba0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009b8e:	4b18      	ldr	r3, [pc, #96]	@ (8009bf0 <shci_user_evt_proc+0x98>)
 8009b90:	69db      	ldr	r3, [r3, #28]
 8009b92:	1d3a      	adds	r2, r7, #4
 8009b94:	4610      	mov	r0, r2
 8009b96:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009b98:	793a      	ldrb	r2, [r7, #4]
 8009b9a:	4b14      	ldr	r3, [pc, #80]	@ (8009bec <shci_user_evt_proc+0x94>)
 8009b9c:	701a      	strb	r2, [r3, #0]
 8009b9e:	e002      	b.n	8009ba6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009ba0:	4b12      	ldr	r3, [pc, #72]	@ (8009bec <shci_user_evt_proc+0x94>)
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009ba6:	4b11      	ldr	r3, [pc, #68]	@ (8009bec <shci_user_evt_proc+0x94>)
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d004      	beq.n	8009bb8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f000 fa71 	bl	800a098 <TL_MM_EvtDone>
 8009bb6:	e004      	b.n	8009bc2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	480a      	ldr	r0, [pc, #40]	@ (8009be8 <shci_user_evt_proc+0x90>)
 8009bbe:	f000 fb89 	bl	800a2d4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009bc2:	4809      	ldr	r0, [pc, #36]	@ (8009be8 <shci_user_evt_proc+0x90>)
 8009bc4:	f000 fb64 	bl	800a290 <LST_is_empty>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d107      	bne.n	8009bde <shci_user_evt_proc+0x86>
 8009bce:	4b07      	ldr	r3, [pc, #28]	@ (8009bec <shci_user_evt_proc+0x94>)
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009bd6:	4804      	ldr	r0, [pc, #16]	@ (8009be8 <shci_user_evt_proc+0x90>)
 8009bd8:	f7f7 fdde 	bl	8001798 <shci_notify_asynch_evt>
  }


  return;
 8009bdc:	bf00      	nop
 8009bde:	bf00      	nop
}
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	20000270 	.word	0x20000270
 8009bec:	20000280 	.word	0x20000280
 8009bf0:	20000504 	.word	0x20000504

08009bf4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60ba      	str	r2, [r7, #8]
 8009bfc:	607b      	str	r3, [r7, #4]
 8009bfe:	4603      	mov	r3, r0
 8009c00:	81fb      	strh	r3, [r7, #14]
 8009c02:	460b      	mov	r3, r1
 8009c04:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009c06:	2000      	movs	r0, #0
 8009c08:	f000 f868 	bl	8009cdc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009c0c:	4b17      	ldr	r3, [pc, #92]	@ (8009c6c <shci_send+0x78>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	89fa      	ldrh	r2, [r7, #14]
 8009c12:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009c16:	4b15      	ldr	r3, [pc, #84]	@ (8009c6c <shci_send+0x78>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	7b7a      	ldrb	r2, [r7, #13]
 8009c1c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009c1e:	4b13      	ldr	r3, [pc, #76]	@ (8009c6c <shci_send+0x78>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	330c      	adds	r3, #12
 8009c24:	7b7a      	ldrb	r2, [r7, #13]
 8009c26:	68b9      	ldr	r1, [r7, #8]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f008 f9fc 	bl	8012026 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8009c2e:	4b10      	ldr	r3, [pc, #64]	@ (8009c70 <shci_send+0x7c>)
 8009c30:	2201      	movs	r2, #1
 8009c32:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8009c34:	4b0f      	ldr	r3, [pc, #60]	@ (8009c74 <shci_send+0x80>)
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	2100      	movs	r1, #0
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009c3e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8009c42:	f7f7 fdc0 	bl	80017c6 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f103 0008 	add.w	r0, r3, #8
 8009c4c:	4b07      	ldr	r3, [pc, #28]	@ (8009c6c <shci_send+0x78>)
 8009c4e:	6819      	ldr	r1, [r3, #0]
 8009c50:	4b06      	ldr	r3, [pc, #24]	@ (8009c6c <shci_send+0x78>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	789b      	ldrb	r3, [r3, #2]
 8009c56:	3303      	adds	r3, #3
 8009c58:	461a      	mov	r2, r3
 8009c5a:	f008 f9e4 	bl	8012026 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009c5e:	2001      	movs	r0, #1
 8009c60:	f000 f83c 	bl	8009cdc <Cmd_SetStatus>

  return;
 8009c64:	bf00      	nop
}
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	2000027c 	.word	0x2000027c
 8009c70:	20000528 	.word	0x20000528
 8009c74:	20000504 	.word	0x20000504

08009c78 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b086      	sub	sp, #24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009c80:	4a10      	ldr	r2, [pc, #64]	@ (8009cc4 <TlInit+0x4c>)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009c86:	4810      	ldr	r0, [pc, #64]	@ (8009cc8 <TlInit+0x50>)
 8009c88:	f000 faf2 	bl	800a270 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009c8c:	2001      	movs	r0, #1
 8009c8e:	f000 f825 	bl	8009cdc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009c92:	4b0e      	ldr	r3, [pc, #56]	@ (8009ccc <TlInit+0x54>)
 8009c94:	2201      	movs	r2, #1
 8009c96:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009c98:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd0 <TlInit+0x58>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00c      	beq.n	8009cba <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd4 <TlInit+0x5c>)
 8009ca6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd8 <TlInit+0x60>)
 8009caa:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009cac:	4b08      	ldr	r3, [pc, #32]	@ (8009cd0 <TlInit+0x58>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f107 020c 	add.w	r2, r7, #12
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	4798      	blx	r3
  }

  return;
 8009cb8:	bf00      	nop
 8009cba:	bf00      	nop
}
 8009cbc:	3718      	adds	r7, #24
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	2000027c 	.word	0x2000027c
 8009cc8:	20000270 	.word	0x20000270
 8009ccc:	20000280 	.word	0x20000280
 8009cd0:	20000504 	.word	0x20000504
 8009cd4:	08009d2d 	.word	0x08009d2d
 8009cd8:	08009d45 	.word	0x08009d45

08009cdc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009ce6:	79fb      	ldrb	r3, [r7, #7]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10b      	bne.n	8009d04 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009cec:	4b0d      	ldr	r3, [pc, #52]	@ (8009d24 <Cmd_SetStatus+0x48>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d003      	beq.n	8009cfc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8009d24 <Cmd_SetStatus+0x48>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8009d28 <Cmd_SetStatus+0x4c>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009d02:	e00b      	b.n	8009d1c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009d04:	4b08      	ldr	r3, [pc, #32]	@ (8009d28 <Cmd_SetStatus+0x4c>)
 8009d06:	2201      	movs	r2, #1
 8009d08:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009d0a:	4b06      	ldr	r3, [pc, #24]	@ (8009d24 <Cmd_SetStatus+0x48>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d004      	beq.n	8009d1c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009d12:	4b04      	ldr	r3, [pc, #16]	@ (8009d24 <Cmd_SetStatus+0x48>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2001      	movs	r0, #1
 8009d18:	4798      	blx	r3
  return;
 8009d1a:	bf00      	nop
 8009d1c:	bf00      	nop
}
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	20000524 	.word	0x20000524
 8009d28:	20000278 	.word	0x20000278

08009d2c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009d34:	2000      	movs	r0, #0
 8009d36:	f7f7 fd3b 	bl	80017b0 <shci_cmd_resp_release>

  return;
 8009d3a:	bf00      	nop
}
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
	...

08009d44 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009d4c:	6879      	ldr	r1, [r7, #4]
 8009d4e:	4805      	ldr	r0, [pc, #20]	@ (8009d64 <TlUserEvtReceived+0x20>)
 8009d50:	f000 fae6 	bl	800a320 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009d54:	4803      	ldr	r0, [pc, #12]	@ (8009d64 <TlUserEvtReceived+0x20>)
 8009d56:	f7f7 fd1f 	bl	8001798 <shci_notify_asynch_evt>

  return;
 8009d5a:	bf00      	nop
}
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	20000270 	.word	0x20000270

08009d68 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a05      	ldr	r2, [pc, #20]	@ (8009d88 <shci_register_io_bus+0x20>)
 8009d74:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a04      	ldr	r2, [pc, #16]	@ (8009d8c <shci_register_io_bus+0x24>)
 8009d7a:	611a      	str	r2, [r3, #16]

  return;
 8009d7c:	bf00      	nop
}
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	08009f25 	.word	0x08009f25
 8009d8c:	08009f79 	.word	0x08009f79

08009d90 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009d94:	f001 f966 	bl	800b064 <HW_IPCC_Enable>

  return;
 8009d98:	bf00      	nop
}
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <TL_Init>:


void TL_Init( void )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009da0:	4b10      	ldr	r3, [pc, #64]	@ (8009de4 <TL_Init+0x48>)
 8009da2:	4a11      	ldr	r2, [pc, #68]	@ (8009de8 <TL_Init+0x4c>)
 8009da4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009da6:	4b0f      	ldr	r3, [pc, #60]	@ (8009de4 <TL_Init+0x48>)
 8009da8:	4a10      	ldr	r2, [pc, #64]	@ (8009dec <TL_Init+0x50>)
 8009daa:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009dac:	4b0d      	ldr	r3, [pc, #52]	@ (8009de4 <TL_Init+0x48>)
 8009dae:	4a10      	ldr	r2, [pc, #64]	@ (8009df0 <TL_Init+0x54>)
 8009db0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8009db2:	4b0c      	ldr	r3, [pc, #48]	@ (8009de4 <TL_Init+0x48>)
 8009db4:	4a0f      	ldr	r2, [pc, #60]	@ (8009df4 <TL_Init+0x58>)
 8009db6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009db8:	4b0a      	ldr	r3, [pc, #40]	@ (8009de4 <TL_Init+0x48>)
 8009dba:	4a0f      	ldr	r2, [pc, #60]	@ (8009df8 <TL_Init+0x5c>)
 8009dbc:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009dbe:	4b09      	ldr	r3, [pc, #36]	@ (8009de4 <TL_Init+0x48>)
 8009dc0:	4a0e      	ldr	r2, [pc, #56]	@ (8009dfc <TL_Init+0x60>)
 8009dc2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009dc4:	4b07      	ldr	r3, [pc, #28]	@ (8009de4 <TL_Init+0x48>)
 8009dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8009e00 <TL_Init+0x64>)
 8009dc8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009dca:	4b06      	ldr	r3, [pc, #24]	@ (8009de4 <TL_Init+0x48>)
 8009dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8009e04 <TL_Init+0x68>)
 8009dce:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009dd0:	4b04      	ldr	r3, [pc, #16]	@ (8009de4 <TL_Init+0x48>)
 8009dd2:	4a0d      	ldr	r2, [pc, #52]	@ (8009e08 <TL_Init+0x6c>)
 8009dd4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009dd6:	4b03      	ldr	r3, [pc, #12]	@ (8009de4 <TL_Init+0x48>)
 8009dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8009e0c <TL_Init+0x70>)
 8009dda:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009ddc:	f001 f956 	bl	800b08c <HW_IPCC_Init>

  return;
 8009de0:	bf00      	nop
}
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	20030000 	.word	0x20030000
 8009de8:	20030028 	.word	0x20030028
 8009dec:	20030048 	.word	0x20030048
 8009df0:	20030058 	.word	0x20030058
 8009df4:	20030068 	.word	0x20030068
 8009df8:	20030070 	.word	0x20030070
 8009dfc:	20030078 	.word	0x20030078
 8009e00:	20030080 	.word	0x20030080
 8009e04:	2003009c 	.word	0x2003009c
 8009e08:	200300a0 	.word	0x200300a0
 8009e0c:	200300ac 	.word	0x200300ac

08009e10 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009e1c:	4811      	ldr	r0, [pc, #68]	@ (8009e64 <TL_BLE_Init+0x54>)
 8009e1e:	f000 fa27 	bl	800a270 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8009e22:	4b11      	ldr	r3, [pc, #68]	@ (8009e68 <TL_BLE_Init+0x58>)
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	689a      	ldr	r2, [r3, #8]
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	68da      	ldr	r2, [r3, #12]
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8009e6c <TL_BLE_Init+0x5c>)
 8009e3c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	4a08      	ldr	r2, [pc, #32]	@ (8009e64 <TL_BLE_Init+0x54>)
 8009e42:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009e44:	f001 f938 	bl	800b0b8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a08      	ldr	r2, [pc, #32]	@ (8009e70 <TL_BLE_Init+0x60>)
 8009e4e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	4a07      	ldr	r2, [pc, #28]	@ (8009e74 <TL_BLE_Init+0x64>)
 8009e56:	6013      	str	r3, [r2, #0]

  return 0;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	200300c8 	.word	0x200300c8
 8009e68:	20030000 	.word	0x20030000
 8009e6c:	20030a58 	.word	0x20030a58
 8009e70:	20000534 	.word	0x20000534
 8009e74:	20000538 	.word	0x20000538

08009e78 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	460b      	mov	r3, r1
 8009e82:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009e84:	4b09      	ldr	r3, [pc, #36]	@ (8009eac <TL_BLE_SendCmd+0x34>)
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8009e8e:	4b07      	ldr	r3, [pc, #28]	@ (8009eac <TL_BLE_SendCmd+0x34>)
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4619      	mov	r1, r3
 8009e96:	2001      	movs	r0, #1
 8009e98:	f000 f96c 	bl	800a174 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009e9c:	f001 f916 	bl	800b0cc <HW_IPCC_BLE_SendCmd>

  return 0;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	20030000 	.word	0x20030000

08009eb0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009eb6:	e01c      	b.n	8009ef2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009eb8:	1d3b      	adds	r3, r7, #4
 8009eba:	4619      	mov	r1, r3
 8009ebc:	4812      	ldr	r0, [pc, #72]	@ (8009f08 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009ebe:	f000 fa76 	bl	800a3ae <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	7a5b      	ldrb	r3, [r3, #9]
 8009ec6:	2b0f      	cmp	r3, #15
 8009ec8:	d003      	beq.n	8009ed2 <HW_IPCC_BLE_RxEvtNot+0x22>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	7a5b      	ldrb	r3, [r3, #9]
 8009ece:	2b0e      	cmp	r3, #14
 8009ed0:	d105      	bne.n	8009ede <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	2002      	movs	r0, #2
 8009ed8:	f000 f94c 	bl	800a174 <OutputDbgTrace>
 8009edc:	e004      	b.n	8009ee8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	2003      	movs	r0, #3
 8009ee4:	f000 f946 	bl	800a174 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009ee8:	4b08      	ldr	r3, [pc, #32]	@ (8009f0c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	4610      	mov	r0, r2
 8009ef0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009ef2:	4805      	ldr	r0, [pc, #20]	@ (8009f08 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009ef4:	f000 f9cc 	bl	800a290 <LST_is_empty>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d0dc      	beq.n	8009eb8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009efe:	bf00      	nop
}
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	200300c8 	.word	0x200300c8
 8009f0c:	20000534 	.word	0x20000534

08009f10 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009f14:	4b02      	ldr	r3, [pc, #8]	@ (8009f20 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4798      	blx	r3

  return;
 8009f1a:	bf00      	nop
}
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	20000538 	.word	0x20000538

08009f24 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009f30:	480d      	ldr	r0, [pc, #52]	@ (8009f68 <TL_SYS_Init+0x44>)
 8009f32:	f000 f99d 	bl	800a270 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009f36:	4b0d      	ldr	r3, [pc, #52]	@ (8009f6c <TL_SYS_Init+0x48>)
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	689a      	ldr	r2, [r3, #8]
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	4a08      	ldr	r2, [pc, #32]	@ (8009f68 <TL_SYS_Init+0x44>)
 8009f48:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009f4a:	f001 f8e1 	bl	800b110 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a07      	ldr	r2, [pc, #28]	@ (8009f70 <TL_SYS_Init+0x4c>)
 8009f54:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	4a06      	ldr	r2, [pc, #24]	@ (8009f74 <TL_SYS_Init+0x50>)
 8009f5c:	6013      	str	r3, [r2, #0]

  return 0;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	200300d0 	.word	0x200300d0
 8009f6c:	20030000 	.word	0x20030000
 8009f70:	2000053c 	.word	0x2000053c
 8009f74:	20000540 	.word	0x20000540

08009f78 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	460b      	mov	r3, r1
 8009f82:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009f84:	4b09      	ldr	r3, [pc, #36]	@ (8009fac <TL_SYS_SendCmd+0x34>)
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2210      	movs	r2, #16
 8009f8c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009f8e:	4b07      	ldr	r3, [pc, #28]	@ (8009fac <TL_SYS_SendCmd+0x34>)
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4619      	mov	r1, r3
 8009f96:	2004      	movs	r0, #4
 8009f98:	f000 f8ec 	bl	800a174 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009f9c:	f001 f8c2 	bl	800b124 <HW_IPCC_SYS_SendCmd>

  return 0;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	20030000 	.word	0x20030000

08009fb0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009fb4:	4b07      	ldr	r3, [pc, #28]	@ (8009fd4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	2005      	movs	r0, #5
 8009fbe:	f000 f8d9 	bl	800a174 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009fc2:	4b05      	ldr	r3, [pc, #20]	@ (8009fd8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a03      	ldr	r2, [pc, #12]	@ (8009fd4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009fc8:	68d2      	ldr	r2, [r2, #12]
 8009fca:	6812      	ldr	r2, [r2, #0]
 8009fcc:	4610      	mov	r0, r2
 8009fce:	4798      	blx	r3

  return;
 8009fd0:	bf00      	nop
}
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	20030000 	.word	0x20030000
 8009fd8:	2000053c 	.word	0x2000053c

08009fdc <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009fe2:	e00e      	b.n	800a002 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009fe4:	1d3b      	adds	r3, r7, #4
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	480b      	ldr	r0, [pc, #44]	@ (800a018 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009fea:	f000 f9e0 	bl	800a3ae <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	2006      	movs	r0, #6
 8009ff4:	f000 f8be 	bl	800a174 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009ff8:	4b08      	ldr	r3, [pc, #32]	@ (800a01c <HW_IPCC_SYS_EvtNot+0x40>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	4610      	mov	r0, r2
 800a000:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a002:	4805      	ldr	r0, [pc, #20]	@ (800a018 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a004:	f000 f944 	bl	800a290 <LST_is_empty>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d0ea      	beq.n	8009fe4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a00e:	bf00      	nop
}
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	200300d0 	.word	0x200300d0
 800a01c:	20000540 	.word	0x20000540

0800a020 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a028:	4817      	ldr	r0, [pc, #92]	@ (800a088 <TL_MM_Init+0x68>)
 800a02a:	f000 f921 	bl	800a270 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a02e:	4817      	ldr	r0, [pc, #92]	@ (800a08c <TL_MM_Init+0x6c>)
 800a030:	f000 f91e 	bl	800a270 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a034:	4b16      	ldr	r3, [pc, #88]	@ (800a090 <TL_MM_Init+0x70>)
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	4a16      	ldr	r2, [pc, #88]	@ (800a094 <TL_MM_Init+0x74>)
 800a03a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a03c:	4b15      	ldr	r3, [pc, #84]	@ (800a094 <TL_MM_Init+0x74>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	6892      	ldr	r2, [r2, #8]
 800a044:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a046:	4b13      	ldr	r3, [pc, #76]	@ (800a094 <TL_MM_Init+0x74>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	68d2      	ldr	r2, [r2, #12]
 800a04e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a050:	4b10      	ldr	r3, [pc, #64]	@ (800a094 <TL_MM_Init+0x74>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a0c      	ldr	r2, [pc, #48]	@ (800a088 <TL_MM_Init+0x68>)
 800a056:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a058:	4b0e      	ldr	r3, [pc, #56]	@ (800a094 <TL_MM_Init+0x74>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	6812      	ldr	r2, [r2, #0]
 800a060:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a062:	4b0c      	ldr	r3, [pc, #48]	@ (800a094 <TL_MM_Init+0x74>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	6852      	ldr	r2, [r2, #4]
 800a06a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a06c:	4b09      	ldr	r3, [pc, #36]	@ (800a094 <TL_MM_Init+0x74>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	6912      	ldr	r2, [r2, #16]
 800a074:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a076:	4b07      	ldr	r3, [pc, #28]	@ (800a094 <TL_MM_Init+0x74>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	6952      	ldr	r2, [r2, #20]
 800a07e:	619a      	str	r2, [r3, #24]

  return;
 800a080:	bf00      	nop
}
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	200300b8 	.word	0x200300b8
 800a08c:	2000052c 	.word	0x2000052c
 800a090:	20030000 	.word	0x20030000
 800a094:	20000544 	.word	0x20000544

0800a098 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a0a0:	6879      	ldr	r1, [r7, #4]
 800a0a2:	4807      	ldr	r0, [pc, #28]	@ (800a0c0 <TL_MM_EvtDone+0x28>)
 800a0a4:	f000 f93c 	bl	800a320 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a0a8:	6879      	ldr	r1, [r7, #4]
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	f000 f862 	bl	800a174 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a0b0:	4804      	ldr	r0, [pc, #16]	@ (800a0c4 <TL_MM_EvtDone+0x2c>)
 800a0b2:	f001 f85d 	bl	800b170 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a0b6:	bf00      	nop
}
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	2000052c 	.word	0x2000052c
 800a0c4:	0800a0c9 	.word	0x0800a0c9

0800a0c8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a0ce:	e00c      	b.n	800a0ea <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a0d0:	1d3b      	adds	r3, r7, #4
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	480a      	ldr	r0, [pc, #40]	@ (800a100 <SendFreeBuf+0x38>)
 800a0d6:	f000 f96a 	bl	800a3ae <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a0da:	4b0a      	ldr	r3, [pc, #40]	@ (800a104 <SendFreeBuf+0x3c>)
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f000 f91b 	bl	800a320 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a0ea:	4805      	ldr	r0, [pc, #20]	@ (800a100 <SendFreeBuf+0x38>)
 800a0ec:	f000 f8d0 	bl	800a290 <LST_is_empty>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d0ec      	beq.n	800a0d0 <SendFreeBuf+0x8>
  }

  return;
 800a0f6:	bf00      	nop
}
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	2000052c 	.word	0x2000052c
 800a104:	20030000 	.word	0x20030000

0800a108 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a10c:	4805      	ldr	r0, [pc, #20]	@ (800a124 <TL_TRACES_Init+0x1c>)
 800a10e:	f000 f8af 	bl	800a270 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a112:	4b05      	ldr	r3, [pc, #20]	@ (800a128 <TL_TRACES_Init+0x20>)
 800a114:	695b      	ldr	r3, [r3, #20]
 800a116:	4a03      	ldr	r2, [pc, #12]	@ (800a124 <TL_TRACES_Init+0x1c>)
 800a118:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a11a:	f001 f85f 	bl	800b1dc <HW_IPCC_TRACES_Init>

  return;
 800a11e:	bf00      	nop
}
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	200300c0 	.word	0x200300c0
 800a128:	20030000 	.word	0x20030000

0800a12c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a132:	e008      	b.n	800a146 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a134:	1d3b      	adds	r3, r7, #4
 800a136:	4619      	mov	r1, r3
 800a138:	4808      	ldr	r0, [pc, #32]	@ (800a15c <HW_IPCC_TRACES_EvtNot+0x30>)
 800a13a:	f000 f938 	bl	800a3ae <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4618      	mov	r0, r3
 800a142:	f000 f80d 	bl	800a160 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a146:	4805      	ldr	r0, [pc, #20]	@ (800a15c <HW_IPCC_TRACES_EvtNot+0x30>)
 800a148:	f000 f8a2 	bl	800a290 <LST_is_empty>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d0f0      	beq.n	800a134 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a152:	bf00      	nop
}
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	200300c0 	.word	0x200300c0

0800a160 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	4603      	mov	r3, r0
 800a17c:	6039      	str	r1, [r7, #0]
 800a17e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a180:	79fb      	ldrb	r3, [r7, #7]
 800a182:	2b06      	cmp	r3, #6
 800a184:	d845      	bhi.n	800a212 <OutputDbgTrace+0x9e>
 800a186:	a201      	add	r2, pc, #4	@ (adr r2, 800a18c <OutputDbgTrace+0x18>)
 800a188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a18c:	0800a1a9 	.word	0x0800a1a9
 800a190:	0800a1cd 	.word	0x0800a1cd
 800a194:	0800a1d3 	.word	0x0800a1d3
 800a198:	0800a1e7 	.word	0x0800a1e7
 800a19c:	0800a1f3 	.word	0x0800a1f3
 800a1a0:	0800a1f9 	.word	0x0800a1f9
 800a1a4:	0800a207 	.word	0x0800a207
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	7a5b      	ldrb	r3, [r3, #9]
 800a1b0:	2bff      	cmp	r3, #255	@ 0xff
 800a1b2:	d005      	beq.n	800a1c0 <OutputDbgTrace+0x4c>
 800a1b4:	2bff      	cmp	r3, #255	@ 0xff
 800a1b6:	dc05      	bgt.n	800a1c4 <OutputDbgTrace+0x50>
 800a1b8:	2b0e      	cmp	r3, #14
 800a1ba:	d005      	beq.n	800a1c8 <OutputDbgTrace+0x54>
 800a1bc:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a1be:	e001      	b.n	800a1c4 <OutputDbgTrace+0x50>
          break;
 800a1c0:	bf00      	nop
 800a1c2:	e027      	b.n	800a214 <OutputDbgTrace+0xa0>
          break;
 800a1c4:	bf00      	nop
 800a1c6:	e025      	b.n	800a214 <OutputDbgTrace+0xa0>
          break;
 800a1c8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a1ca:	e023      	b.n	800a214 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a1d0:	e020      	b.n	800a214 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	7a5b      	ldrb	r3, [r3, #9]
 800a1da:	2b0e      	cmp	r3, #14
 800a1dc:	d001      	beq.n	800a1e2 <OutputDbgTrace+0x6e>
 800a1de:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a1e0:	e000      	b.n	800a1e4 <OutputDbgTrace+0x70>
          break;
 800a1e2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a1e4:	e016      	b.n	800a214 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	7a5b      	ldrb	r3, [r3, #9]
 800a1ee:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a1f0:	e010      	b.n	800a214 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a1f6:	e00d      	b.n	800a214 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	7a5b      	ldrb	r3, [r3, #9]
 800a200:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a202:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a204:	e006      	b.n	800a214 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	7a5b      	ldrb	r3, [r3, #9]
 800a20e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a210:	e000      	b.n	800a214 <OutputDbgTrace+0xa0>

    default:
      break;
 800a212:	bf00      	nop
  }

  return;
 800a214:	bf00      	nop
}
 800a216:	3714      	adds	r7, #20
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	4603      	mov	r3, r0
 800a228:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a22a:	4b0f      	ldr	r3, [pc, #60]	@ (800a268 <OTP_Read+0x48>)
 800a22c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a22e:	e002      	b.n	800a236 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	3b08      	subs	r3, #8
 800a234:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	3307      	adds	r3, #7
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	79fa      	ldrb	r2, [r7, #7]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d003      	beq.n	800a24a <OTP_Read+0x2a>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	4a09      	ldr	r2, [pc, #36]	@ (800a26c <OTP_Read+0x4c>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d1f2      	bne.n	800a230 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	3307      	adds	r3, #7
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	79fa      	ldrb	r2, [r7, #7]
 800a252:	429a      	cmp	r2, r3
 800a254:	d001      	beq.n	800a25a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a256:	2300      	movs	r3, #0
 800a258:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a25a:	68fb      	ldr	r3, [r7, #12]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3714      	adds	r7, #20
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr
 800a268:	1fff73f8 	.word	0x1fff73f8
 800a26c:	1fff7000 	.word	0x1fff7000

0800a270 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	605a      	str	r2, [r3, #4]
}
 800a284:	bf00      	nop
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a290:	b480      	push	{r7}
 800a292:	b087      	sub	sp, #28
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a298:	f3ef 8310 	mrs	r3, PRIMASK
 800a29c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a29e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a2a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2a2:	b672      	cpsid	i
}
 800a2a4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d102      	bne.n	800a2b6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	75fb      	strb	r3, [r7, #23]
 800a2b4:	e001      	b.n	800a2ba <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	75fb      	strb	r3, [r7, #23]
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	f383 8810 	msr	PRIMASK, r3
}
 800a2c4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a2c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	371c      	adds	r7, #28
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b087      	sub	sp, #28
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2de:	f3ef 8310 	mrs	r3, PRIMASK
 800a2e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a2e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2e8:	b672      	cpsid	i
}
 800a2ea:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	683a      	ldr	r2, [r7, #0]
 800a2fe:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	683a      	ldr	r2, [r7, #0]
 800a306:	605a      	str	r2, [r3, #4]
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	f383 8810 	msr	PRIMASK, r3
}
 800a312:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a314:	bf00      	nop
 800a316:	371c      	adds	r7, #28
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a320:	b480      	push	{r7}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a32a:	f3ef 8310 	mrs	r3, PRIMASK
 800a32e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a330:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a332:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a334:	b672      	cpsid	i
}
 800a336:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	685a      	ldr	r2, [r3, #4]
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	f383 8810 	msr	PRIMASK, r3
}
 800a35e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a360:	bf00      	nop
 800a362:	371c      	adds	r7, #28
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b087      	sub	sp, #28
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a374:	f3ef 8310 	mrs	r3, PRIMASK
 800a378:	60fb      	str	r3, [r7, #12]
  return(result);
 800a37a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a37c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a37e:	b672      	cpsid	i
}
 800a380:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	6812      	ldr	r2, [r2, #0]
 800a38a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	6852      	ldr	r2, [r2, #4]
 800a394:	605a      	str	r2, [r3, #4]
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	f383 8810 	msr	PRIMASK, r3
}
 800a3a0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a3a2:	bf00      	nop
 800a3a4:	371c      	adds	r7, #28
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b086      	sub	sp, #24
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a3bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3be:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a3c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3c2:	b672      	cpsid	i
}
 800a3c4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7ff ffca 	bl	800a36c <LST_remove_node>
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	f383 8810 	msr	PRIMASK, r3
}
 800a3e2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a3e4:	bf00      	nop
 800a3e6:	3718      	adds	r7, #24
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800a3f0:	4b03      	ldr	r3, [pc, #12]	@ (800a400 <LL_FLASH_GetUDN+0x14>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	1fff7580 	.word	0x1fff7580

0800a404 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800a404:	b480      	push	{r7}
 800a406:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800a408:	4b03      	ldr	r3, [pc, #12]	@ (800a418 <LL_FLASH_GetDeviceID+0x14>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	b2db      	uxtb	r3, r3
}
 800a40e:	4618      	mov	r0, r3
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	1fff7584 	.word	0x1fff7584

0800a41c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800a41c:	b480      	push	{r7}
 800a41e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800a420:	4b03      	ldr	r3, [pc, #12]	@ (800a430 <LL_FLASH_GetSTCompanyID+0x14>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	0a1b      	lsrs	r3, r3, #8
}
 800a426:	4618      	mov	r0, r3
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	1fff7584 	.word	0x1fff7584

0800a434 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800a434:	b5b0      	push	{r4, r5, r7, lr}
 800a436:	b090      	sub	sp, #64	@ 0x40
 800a438:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a43a:	2392      	movs	r3, #146	@ 0x92
 800a43c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 800a440:	4a29      	ldr	r2, [pc, #164]	@ (800a4e8 <APP_BLE_Init+0xb4>)
 800a442:	2100      	movs	r1, #0
 800a444:	2004      	movs	r0, #4
 800a446:	f001 f81d 	bl	800b484 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 800a44a:	2100      	movs	r1, #0
 800a44c:	2004      	movs	r0, #4
 800a44e:	f001 f83b 	bl	800b4c8 <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800a452:	4b26      	ldr	r3, [pc, #152]	@ (800a4ec <APP_BLE_Init+0xb8>)
 800a454:	1d3c      	adds	r4, r7, #4
 800a456:	461d      	mov	r5, r3
 800a458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a45a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a45c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a45e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a464:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a468:	c403      	stmia	r4!, {r0, r1}
 800a46a:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800a46c:	f000 f914 	bl	800a698 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800a470:	2101      	movs	r1, #1
 800a472:	2002      	movs	r0, #2
 800a474:	f000 feda 	bl	800b22c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800a478:	4a1d      	ldr	r2, [pc, #116]	@ (800a4f0 <APP_BLE_Init+0xbc>)
 800a47a:	2100      	movs	r1, #0
 800a47c:	2002      	movs	r0, #2
 800a47e:	f001 f801 	bl	800b484 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800a482:	1d3b      	adds	r3, r7, #4
 800a484:	4618      	mov	r0, r3
 800a486:	f7ff f8bd 	bl	8009604 <SHCI_C2_BLE_Init>
 800a48a:	4603      	mov	r3, r0
 800a48c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800a490:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800a498:	f7f9 fce0 	bl	8003e5c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800a49c:	f000 f912 	bl	800a6c4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800a4a0:	f7ff f80a 	bl	80094b8 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a4a4:	4b13      	ldr	r3, [pc, #76]	@ (800a4f4 <APP_BLE_Init+0xc0>)
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800a4ac:	4b11      	ldr	r3, [pc, #68]	@ (800a4f4 <APP_BLE_Init+0xc0>)
 800a4ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a4b2:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800a4b4:	4a10      	ldr	r2, [pc, #64]	@ (800a4f8 <APP_BLE_Init+0xc4>)
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	2001      	movs	r0, #1
 800a4ba:	f000 ffe3 	bl	800b484 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800a4be:	2006      	movs	r0, #6
 800a4c0:	f7fe fe6e 	bl	80091a0 <aci_hal_set_radio_activity_mask>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800a4ca:	f000 fae5 	bl	800aa98 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800a4ce:	4b09      	ldr	r3, [pc, #36]	@ (800a4f4 <APP_BLE_Init+0xc0>)
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800a4d4:	4b07      	ldr	r3, [pc, #28]	@ (800a4f4 <APP_BLE_Init+0xc0>)
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800a4da:	2001      	movs	r0, #1
 800a4dc:	f000 f9a6 	bl	800a82c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800a4e0:	bf00      	nop
}
 800a4e2:	3740      	adds	r7, #64	@ 0x40
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bdb0      	pop	{r4, r5, r7, pc}
 800a4e8:	0800a9fd 	.word	0x0800a9fd
 800a4ec:	08014294 	.word	0x08014294
 800a4f0:	08009821 	.word	0x08009821
 800a4f4:	20000550 	.word	0x20000550
 800a4f8:	0800a915 	.word	0x0800a915

0800a4fc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b08a      	sub	sp, #40	@ 0x28
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800a504:	2392      	movs	r3, #146	@ 0x92
 800a506:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	3301      	adds	r3, #1
 800a50e:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800a510:	6a3b      	ldr	r3, [r7, #32]
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	2bff      	cmp	r3, #255	@ 0xff
 800a516:	d053      	beq.n	800a5c0 <SVCCTL_App_Notification+0xc4>
 800a518:	2bff      	cmp	r3, #255	@ 0xff
 800a51a:	f300 80af 	bgt.w	800a67c <SVCCTL_App_Notification+0x180>
 800a51e:	2b05      	cmp	r3, #5
 800a520:	d002      	beq.n	800a528 <SVCCTL_App_Notification+0x2c>
 800a522:	2b3e      	cmp	r3, #62	@ 0x3e
 800a524:	d020      	beq.n	800a568 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800a526:	e0a9      	b.n	800a67c <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800a528:	6a3b      	ldr	r3, [r7, #32]
 800a52a:	3302      	adds	r3, #2
 800a52c:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a534:	b29a      	uxth	r2, r3
 800a536:	4b55      	ldr	r3, [pc, #340]	@ (800a68c <SVCCTL_App_Notification+0x190>)
 800a538:	8adb      	ldrh	r3, [r3, #22]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d106      	bne.n	800a54c <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800a53e:	4b53      	ldr	r3, [pc, #332]	@ (800a68c <SVCCTL_App_Notification+0x190>)
 800a540:	2200      	movs	r2, #0
 800a542:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a544:	4b51      	ldr	r3, [pc, #324]	@ (800a68c <SVCCTL_App_Notification+0x190>)
 800a546:	2200      	movs	r2, #0
 800a548:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800a54c:	2001      	movs	r0, #1
 800a54e:	f000 f96d 	bl	800a82c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800a552:	4b4f      	ldr	r3, [pc, #316]	@ (800a690 <SVCCTL_App_Notification+0x194>)
 800a554:	2201      	movs	r2, #1
 800a556:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800a558:	4b4c      	ldr	r3, [pc, #304]	@ (800a68c <SVCCTL_App_Notification+0x190>)
 800a55a:	8ada      	ldrh	r2, [r3, #22]
 800a55c:	4b4c      	ldr	r3, [pc, #304]	@ (800a690 <SVCCTL_App_Notification+0x194>)
 800a55e:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800a560:	484b      	ldr	r0, [pc, #300]	@ (800a690 <SVCCTL_App_Notification+0x194>)
 800a562:	f000 fa85 	bl	800aa70 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800a566:	e08c      	b.n	800a682 <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800a568:	6a3b      	ldr	r3, [r7, #32]
 800a56a:	3302      	adds	r3, #2
 800a56c:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	2b01      	cmp	r3, #1
 800a574:	d001      	beq.n	800a57a <SVCCTL_App_Notification+0x7e>
 800a576:	2b03      	cmp	r3, #3
          break;
 800a578:	e021      	b.n	800a5be <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	3301      	adds	r3, #1
 800a57e:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800a580:	4b42      	ldr	r3, [pc, #264]	@ (800a68c <SVCCTL_App_Notification+0x190>)
 800a582:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a586:	2b04      	cmp	r3, #4
 800a588:	d104      	bne.n	800a594 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800a58a:	4b40      	ldr	r3, [pc, #256]	@ (800a68c <SVCCTL_App_Notification+0x190>)
 800a58c:	2206      	movs	r2, #6
 800a58e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800a592:	e003      	b.n	800a59c <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800a594:	4b3d      	ldr	r3, [pc, #244]	@ (800a68c <SVCCTL_App_Notification+0x190>)
 800a596:	2205      	movs	r2, #5
 800a598:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	4b39      	ldr	r3, [pc, #228]	@ (800a68c <SVCCTL_App_Notification+0x190>)
 800a5a6:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800a5a8:	4b39      	ldr	r3, [pc, #228]	@ (800a690 <SVCCTL_App_Notification+0x194>)
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800a5ae:	4b37      	ldr	r3, [pc, #220]	@ (800a68c <SVCCTL_App_Notification+0x190>)
 800a5b0:	8ada      	ldrh	r2, [r3, #22]
 800a5b2:	4b37      	ldr	r3, [pc, #220]	@ (800a690 <SVCCTL_App_Notification+0x194>)
 800a5b4:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800a5b6:	4836      	ldr	r0, [pc, #216]	@ (800a690 <SVCCTL_App_Notification+0x194>)
 800a5b8:	f000 fa5a 	bl	800aa70 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800a5bc:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800a5be:	e060      	b.n	800a682 <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800a5c0:	6a3b      	ldr	r3, [r7, #32]
 800a5c2:	3302      	adds	r3, #2
 800a5c4:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	881b      	ldrh	r3, [r3, #0]
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d047      	beq.n	800a664 <SVCCTL_App_Notification+0x168>
 800a5d4:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	dc51      	bgt.n	800a680 <SVCCTL_App_Notification+0x184>
 800a5dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a5e0:	d046      	beq.n	800a670 <SVCCTL_App_Notification+0x174>
 800a5e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a5e6:	dc4b      	bgt.n	800a680 <SVCCTL_App_Notification+0x184>
 800a5e8:	2b04      	cmp	r3, #4
 800a5ea:	d043      	beq.n	800a674 <SVCCTL_App_Notification+0x178>
 800a5ec:	2b04      	cmp	r3, #4
 800a5ee:	db47      	blt.n	800a680 <SVCCTL_App_Notification+0x184>
 800a5f0:	f240 420a 	movw	r2, #1034	@ 0x40a
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	dc43      	bgt.n	800a680 <SVCCTL_App_Notification+0x184>
 800a5f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5fc:	dd40      	ble.n	800a680 <SVCCTL_App_Notification+0x184>
 800a5fe:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800a602:	2b09      	cmp	r3, #9
 800a604:	d83c      	bhi.n	800a680 <SVCCTL_App_Notification+0x184>
 800a606:	a201      	add	r2, pc, #4	@ (adr r2, 800a60c <SVCCTL_App_Notification+0x110>)
 800a608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60c:	0800a65d 	.word	0x0800a65d
 800a610:	0800a635 	.word	0x0800a635
 800a614:	0800a681 	.word	0x0800a681
 800a618:	0800a681 	.word	0x0800a681
 800a61c:	0800a681 	.word	0x0800a681
 800a620:	0800a681 	.word	0x0800a681
 800a624:	0800a679 	.word	0x0800a679
 800a628:	0800a681 	.word	0x0800a681
 800a62c:	0800a649 	.word	0x0800a649
 800a630:	0800a679 	.word	0x0800a679
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800a634:	4b15      	ldr	r3, [pc, #84]	@ (800a68c <SVCCTL_App_Notification+0x190>)
 800a636:	8adb      	ldrh	r3, [r3, #22]
 800a638:	4916      	ldr	r1, [pc, #88]	@ (800a694 <SVCCTL_App_Notification+0x198>)
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7fd ffb2 	bl	80085a4 <aci_gap_pass_key_resp>
 800a640:	4603      	mov	r3, r0
 800a642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800a646:	e018      	b.n	800a67a <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800a648:	4b10      	ldr	r3, [pc, #64]	@ (800a68c <SVCCTL_App_Notification+0x190>)
 800a64a:	8adb      	ldrh	r3, [r3, #22]
 800a64c:	2101      	movs	r1, #1
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fe f952 	bl	80088f8 <aci_gap_numeric_comparison_value_confirm_yesno>
 800a654:	4603      	mov	r3, r0
 800a656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800a65a:	e00e      	b.n	800a67a <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	3302      	adds	r3, #2
 800a660:	61bb      	str	r3, [r7, #24]
          break;
 800a662:	e00a      	b.n	800a67a <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800a664:	4b09      	ldr	r3, [pc, #36]	@ (800a68c <SVCCTL_App_Notification+0x190>)
 800a666:	8adb      	ldrh	r3, [r3, #22]
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fe fc58 	bl	8008f1e <aci_gatt_confirm_indication>
        break;
 800a66e:	e004      	b.n	800a67a <SVCCTL_App_Notification+0x17e>
          break;
 800a670:	bf00      	nop
 800a672:	e005      	b.n	800a680 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800a674:	bf00      	nop
 800a676:	e003      	b.n	800a680 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800a678:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800a67a:	e001      	b.n	800a680 <SVCCTL_App_Notification+0x184>
      break;
 800a67c:	bf00      	nop
 800a67e:	e000      	b.n	800a682 <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800a680:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800a682:	2301      	movs	r3, #1
}
 800a684:	4618      	mov	r0, r3
 800a686:	3728      	adds	r7, #40	@ 0x28
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	20000550 	.word	0x20000550
 800a690:	200005d4 	.word	0x200005d4
 800a694:	0001b207 	.word	0x0001b207

0800a698 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800a69e:	4b06      	ldr	r3, [pc, #24]	@ (800a6b8 <Ble_Tl_Init+0x20>)
 800a6a0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800a6a2:	4b06      	ldr	r3, [pc, #24]	@ (800a6bc <Ble_Tl_Init+0x24>)
 800a6a4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800a6a6:	463b      	mov	r3, r7
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	4805      	ldr	r0, [pc, #20]	@ (800a6c0 <Ble_Tl_Init+0x28>)
 800a6ac:	f7ff f89c 	bl	80097e8 <hci_init>

  return;
 800a6b0:	bf00      	nop
}
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	200300d8 	.word	0x200300d8
 800a6bc:	0800a9c5 	.word	0x0800a9c5
 800a6c0:	0800a98d 	.word	0x0800a98d

0800a6c4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800a6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6c6:	b08d      	sub	sp, #52	@ 0x34
 800a6c8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a6ce:	2392      	movs	r3, #146	@ 0x92
 800a6d0:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800a6d2:	f7fe fdb9 	bl	8009248 <hci_reset>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800a6da:	f000 f8d7 	bl	800a88c <BleGetBdAddress>
 800a6de:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800a6e0:	693a      	ldr	r2, [r7, #16]
 800a6e2:	2106      	movs	r1, #6
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	f7fe fc6f 	bl	8008fc8 <aci_hal_write_config_data>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800a6ee:	4a4a      	ldr	r2, [pc, #296]	@ (800a818 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800a6f0:	2110      	movs	r1, #16
 800a6f2:	2018      	movs	r0, #24
 800a6f4:	f7fe fc68 	bl	8008fc8 <aci_hal_write_config_data>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800a6fc:	4a47      	ldr	r2, [pc, #284]	@ (800a81c <Ble_Hci_Gap_Gatt_Init+0x158>)
 800a6fe:	2110      	movs	r1, #16
 800a700:	2008      	movs	r0, #8
 800a702:	f7fe fc61 	bl	8008fc8 <aci_hal_write_config_data>
 800a706:	4603      	mov	r3, r0
 800a708:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800a70a:	2118      	movs	r1, #24
 800a70c:	2001      	movs	r0, #1
 800a70e:	f7fe fce0 	bl	80090d2 <aci_hal_set_tx_power_level>
 800a712:	4603      	mov	r3, r0
 800a714:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800a716:	f7fe f956 	bl	80089c6 <aci_gatt_init>
 800a71a:	4603      	mov	r3, r0
 800a71c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800a71e:	2300      	movs	r3, #0
 800a720:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800a722:	7bfb      	ldrb	r3, [r7, #15]
 800a724:	f043 0301 	orr.w	r3, r3, #1
 800a728:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800a72a:	7bfb      	ldrb	r3, [r7, #15]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d01f      	beq.n	800a770 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800a730:	4b3b      	ldr	r3, [pc, #236]	@ (800a820 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800a732:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800a734:	1dba      	adds	r2, r7, #6
 800a736:	7bf8      	ldrb	r0, [r7, #15]
 800a738:	1cbb      	adds	r3, r7, #2
 800a73a:	9301      	str	r3, [sp, #4]
 800a73c:	1d3b      	adds	r3, r7, #4
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	4613      	mov	r3, r2
 800a742:	2208      	movs	r2, #8
 800a744:	2100      	movs	r1, #0
 800a746:	f7fd ff94 	bl	8008672 <aci_gap_init>
 800a74a:	4603      	mov	r3, r0
 800a74c:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800a74e:	88fc      	ldrh	r4, [r7, #6]
 800a750:	88bd      	ldrh	r5, [r7, #4]
 800a752:	68b8      	ldr	r0, [r7, #8]
 800a754:	f7f5 fd14 	bl	8000180 <strlen>
 800a758:	4603      	mov	r3, r0
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	9300      	str	r3, [sp, #0]
 800a760:	4613      	mov	r3, r2
 800a762:	2200      	movs	r2, #0
 800a764:	4629      	mov	r1, r5
 800a766:	4620      	mov	r0, r4
 800a768:	f7fe fb30 	bl	8008dcc <aci_gatt_update_char_value>
 800a76c:	4603      	mov	r3, r0
 800a76e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800a770:	88f8      	ldrh	r0, [r7, #6]
 800a772:	8879      	ldrh	r1, [r7, #2]
 800a774:	463b      	mov	r3, r7
 800a776:	9300      	str	r3, [sp, #0]
 800a778:	2302      	movs	r3, #2
 800a77a:	2200      	movs	r2, #0
 800a77c:	f7fe fb26 	bl	8008dcc <aci_gatt_update_char_value>
 800a780:	4603      	mov	r3, r0
 800a782:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800a784:	2202      	movs	r2, #2
 800a786:	2102      	movs	r1, #2
 800a788:	2000      	movs	r0, #0
 800a78a:	f7fe fd81 	bl	8009290 <hci_le_set_default_phy>
 800a78e:	4603      	mov	r3, r0
 800a790:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800a792:	4b24      	ldr	r3, [pc, #144]	@ (800a824 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a794:	2201      	movs	r2, #1
 800a796:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800a798:	4b22      	ldr	r3, [pc, #136]	@ (800a824 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7fd fde9 	bl	8008374 <aci_gap_set_io_capability>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800a7a6:	4b1f      	ldr	r3, [pc, #124]	@ (800a824 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800a7ac:	4b1d      	ldr	r3, [pc, #116]	@ (800a824 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a7ae:	2208      	movs	r2, #8
 800a7b0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800a7b2:	4b1c      	ldr	r3, [pc, #112]	@ (800a824 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a7b4:	2210      	movs	r2, #16
 800a7b6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800a7b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a824 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800a7be:	4b19      	ldr	r3, [pc, #100]	@ (800a824 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a7c0:	4a19      	ldr	r2, [pc, #100]	@ (800a828 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800a7c2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800a7c4:	4b17      	ldr	r3, [pc, #92]	@ (800a824 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800a7ca:	4b16      	ldr	r3, [pc, #88]	@ (800a824 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a7cc:	789c      	ldrb	r4, [r3, #2]
 800a7ce:	4b15      	ldr	r3, [pc, #84]	@ (800a824 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a7d0:	785d      	ldrb	r5, [r3, #1]
 800a7d2:	4b14      	ldr	r3, [pc, #80]	@ (800a824 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a7d4:	791b      	ldrb	r3, [r3, #4]
 800a7d6:	4a13      	ldr	r2, [pc, #76]	@ (800a824 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a7d8:	7952      	ldrb	r2, [r2, #5]
 800a7da:	4912      	ldr	r1, [pc, #72]	@ (800a824 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a7dc:	78c9      	ldrb	r1, [r1, #3]
 800a7de:	4811      	ldr	r0, [pc, #68]	@ (800a824 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a7e0:	6880      	ldr	r0, [r0, #8]
 800a7e2:	2600      	movs	r6, #0
 800a7e4:	9604      	str	r6, [sp, #16]
 800a7e6:	9003      	str	r0, [sp, #12]
 800a7e8:	9102      	str	r1, [sp, #8]
 800a7ea:	9201      	str	r2, [sp, #4]
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	4629      	mov	r1, r5
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f7fd fe11 	bl	800841c <aci_gap_set_authentication_requirement>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800a7fe:	4b09      	ldr	r3, [pc, #36]	@ (800a824 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800a800:	789b      	ldrb	r3, [r3, #2]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d003      	beq.n	800a80e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800a806:	f7fe f853 	bl	80088b0 <aci_gap_configure_filter_accept_list>
 800a80a:	4603      	mov	r3, r0
 800a80c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800a80e:	bf00      	nop
 800a810:	371c      	adds	r7, #28
 800a812:	46bd      	mov	sp, r7
 800a814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a816:	bf00      	nop
 800a818:	08014604 	.word	0x08014604
 800a81c:	08014614 	.word	0x08014614
 800a820:	080142d0 	.word	0x080142d0
 800a824:	20000550 	.word	0x20000550
 800a828:	0001b207 	.word	0x0001b207

0800a82c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b08c      	sub	sp, #48	@ 0x30
 800a830:	af08      	add	r7, sp, #32
 800a832:	4603      	mov	r3, r0
 800a834:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a836:	2392      	movs	r3, #146	@ 0x92
 800a838:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800a83a:	4a12      	ldr	r2, [pc, #72]	@ (800a884 <Adv_Request+0x58>)
 800a83c:	79fb      	ldrb	r3, [r7, #7]
 800a83e:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800a842:	2300      	movs	r3, #0
 800a844:	9306      	str	r3, [sp, #24]
 800a846:	2300      	movs	r3, #0
 800a848:	9305      	str	r3, [sp, #20]
 800a84a:	2300      	movs	r3, #0
 800a84c:	9304      	str	r3, [sp, #16]
 800a84e:	2300      	movs	r3, #0
 800a850:	9303      	str	r3, [sp, #12]
 800a852:	2300      	movs	r3, #0
 800a854:	9302      	str	r3, [sp, #8]
 800a856:	2300      	movs	r3, #0
 800a858:	9301      	str	r3, [sp, #4]
 800a85a:	2300      	movs	r3, #0
 800a85c:	9300      	str	r3, [sp, #0]
 800a85e:	2300      	movs	r3, #0
 800a860:	22a0      	movs	r2, #160	@ 0xa0
 800a862:	2180      	movs	r1, #128	@ 0x80
 800a864:	2000      	movs	r0, #0
 800a866:	f7fd fc8b 	bl	8008180 <aci_gap_set_discoverable>
 800a86a:	4603      	mov	r3, r0
 800a86c:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800a86e:	4906      	ldr	r1, [pc, #24]	@ (800a888 <Adv_Request+0x5c>)
 800a870:	200b      	movs	r0, #11
 800a872:	f7fd ffab 	bl	80087cc <aci_gap_update_adv_data>
 800a876:	4603      	mov	r3, r0
 800a878:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800a87a:	bf00      	nop
}
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	20000550 	.word	0x20000550
 800a888:	20000020 	.word	0x20000020

0800a88c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800a892:	f7ff fdab 	bl	800a3ec <LL_FLASH_GetUDN>
 800a896:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a89e:	d023      	beq.n	800a8e8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800a8a0:	f7ff fdbc 	bl	800a41c <LL_FLASH_GetSTCompanyID>
 800a8a4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800a8a6:	f7ff fdad 	bl	800a404 <LL_FLASH_GetDeviceID>
 800a8aa:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	b2da      	uxtb	r2, r3
 800a8b0:	4b16      	ldr	r3, [pc, #88]	@ (800a90c <BleGetBdAddress+0x80>)
 800a8b2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	0a1b      	lsrs	r3, r3, #8
 800a8b8:	b2da      	uxtb	r2, r3
 800a8ba:	4b14      	ldr	r3, [pc, #80]	@ (800a90c <BleGetBdAddress+0x80>)
 800a8bc:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	4b12      	ldr	r3, [pc, #72]	@ (800a90c <BleGetBdAddress+0x80>)
 800a8c4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	4b10      	ldr	r3, [pc, #64]	@ (800a90c <BleGetBdAddress+0x80>)
 800a8cc:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	0a1b      	lsrs	r3, r3, #8
 800a8d2:	b2da      	uxtb	r2, r3
 800a8d4:	4b0d      	ldr	r3, [pc, #52]	@ (800a90c <BleGetBdAddress+0x80>)
 800a8d6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	0c1b      	lsrs	r3, r3, #16
 800a8dc:	b2da      	uxtb	r2, r3
 800a8de:	4b0b      	ldr	r3, [pc, #44]	@ (800a90c <BleGetBdAddress+0x80>)
 800a8e0:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800a8e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a90c <BleGetBdAddress+0x80>)
 800a8e4:	617b      	str	r3, [r7, #20]
 800a8e6:	e00b      	b.n	800a900 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800a8e8:	2000      	movs	r0, #0
 800a8ea:	f7ff fc99 	bl	800a220 <OTP_Read>
 800a8ee:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d002      	beq.n	800a8fc <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	617b      	str	r3, [r7, #20]
 800a8fa:	e001      	b.n	800a900 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800a8fc:	4b04      	ldr	r3, [pc, #16]	@ (800a910 <BleGetBdAddress+0x84>)
 800a8fe:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800a900:	697b      	ldr	r3, [r7, #20]
}
 800a902:	4618      	mov	r0, r3
 800a904:	3718      	adds	r7, #24
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	20000548 	.word	0x20000548
 800a910:	080145fc 	.word	0x080145fc

0800a914 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800a91a:	4b0a      	ldr	r3, [pc, #40]	@ (800a944 <Adv_Cancel+0x30>)
 800a91c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a920:	2b05      	cmp	r3, #5
 800a922:	d00a      	beq.n	800a93a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a924:	2392      	movs	r3, #146	@ 0x92
 800a926:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800a928:	f7fd fc06 	bl	8008138 <aci_gap_set_non_discoverable>
 800a92c:	4603      	mov	r3, r0
 800a92e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a930:	4b04      	ldr	r3, [pc, #16]	@ (800a944 <Adv_Cancel+0x30>)
 800a932:	2200      	movs	r2, #0
 800a934:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800a938:	bf00      	nop
 800a93a:	bf00      	nop
}
 800a93c:	3708      	adds	r7, #8
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	20000550 	.word	0x20000550

0800a948 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800a950:	2100      	movs	r1, #0
 800a952:	2002      	movs	r0, #2
 800a954:	f000 fdb8 	bl	800b4c8 <UTIL_SEQ_SetTask>

  return;
 800a958:	bf00      	nop
}
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800a968:	2001      	movs	r0, #1
 800a96a:	f000 fe19 	bl	800b5a0 <UTIL_SEQ_SetEvt>

  return;
 800a96e:	bf00      	nop
}
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b082      	sub	sp, #8
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800a97e:	2001      	movs	r0, #1
 800a980:	f000 fe2e 	bl	800b5e0 <UTIL_SEQ_WaitEvt>

  return;
 800a984:	bf00      	nop
}
 800a986:	3708      	adds	r7, #8
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	3308      	adds	r3, #8
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fe fddc 	bl	800955c <SVCCTL_UserEvtRx>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800a9a8:	7afb      	ldrb	r3, [r7, #11]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d003      	beq.n	800a9b6 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800a9b4:	e003      	b.n	800a9be <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	701a      	strb	r2, [r3, #0]
  return;
 800a9bc:	bf00      	nop
}
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800a9ce:	79fb      	ldrb	r3, [r7, #7]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d002      	beq.n	800a9da <BLE_StatusNot+0x16>
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d006      	beq.n	800a9e6 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800a9d8:	e00b      	b.n	800a9f2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800a9da:	2307      	movs	r3, #7
 800a9dc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f000 fd9e 	bl	800b520 <UTIL_SEQ_PauseTask>
      break;
 800a9e4:	e005      	b.n	800a9f2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800a9e6:	2307      	movs	r3, #7
 800a9e8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	f000 fdb8 	bl	800b560 <UTIL_SEQ_ResumeTask>
      break;
 800a9f0:	bf00      	nop
  }

  return;
 800a9f2:	bf00      	nop
}
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
	...

0800a9fc <myTask>:
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0
  if(1)
   {
// 	  UpdateCharData[0] ^= 0x1;
 	  acc_example_service(512,UpdateCharData);
 800aa00:	4909      	ldr	r1, [pc, #36]	@ (800aa28 <myTask+0x2c>)
 800aa02:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800aa06:	f7f7 fff1 	bl	80029ec <acc_example_service>
// 	  Custom_Mycharnotify_Update_Char();
// 	  HAL_Delay(1000);
// 	  if(a%1000==0){
// 		 printf("%d\n",a);
// 	  }
 	  a+=1;
 800aa0a:	4b08      	ldr	r3, [pc, #32]	@ (800aa2c <myTask+0x30>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	4a06      	ldr	r2, [pc, #24]	@ (800aa2c <myTask+0x30>)
 800aa12:	6013      	str	r3, [r2, #0]
 	  tr=0;
 800aa14:	4b06      	ldr	r3, [pc, #24]	@ (800aa30 <myTask+0x34>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	601a      	str	r2, [r3, #0]
// 	  for(int i=0;i<512;i++){
// 		 printf("%c\n",UpdateCharData[i]);
// 	  }
   }
   UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	2004      	movs	r0, #4
 800aa1e:	f000 fd53 	bl	800b4c8 <UTIL_SEQ_SetTask>
}
 800aa22:	bf00      	nop
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	200005d8 	.word	0x200005d8
 800aa2c:	200007d8 	.word	0x200007d8
 800aa30:	2000002c 	.word	0x2000002c

0800aa34 <Custom_STM_App_Notification>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	2b04      	cmp	r3, #4
 800aa42:	d80d      	bhi.n	800aa60 <Custom_STM_App_Notification+0x2c>
 800aa44:	a201      	add	r2, pc, #4	@ (adr r2, 800aa4c <Custom_STM_App_Notification+0x18>)
 800aa46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa4a:	bf00      	nop
 800aa4c:	0800aa61 	.word	0x0800aa61
 800aa50:	0800aa61 	.word	0x0800aa61
 800aa54:	0800aa61 	.word	0x0800aa61
 800aa58:	0800aa61 	.word	0x0800aa61
 800aa5c:	0800aa61 	.word	0x0800aa61

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800aa60:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800aa62:	bf00      	nop
}
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop

0800aa70 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d002      	beq.n	800aa86 <Custom_APP_Notification+0x16>
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d002      	beq.n	800aa8a <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800aa84:	e002      	b.n	800aa8c <Custom_APP_Notification+0x1c>
      break;
 800aa86:	bf00      	nop
 800aa88:	e000      	b.n	800aa8c <Custom_APP_Notification+0x1c>
      break;
 800aa8a:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800aa8c:	bf00      	nop
}
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800aa9c:	bf00      	nop
}
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr
	...

0800aaa8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b08c      	sub	sp, #48	@ 0x30
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800aab0:	2300      	movs	r3, #0
 800aab2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	3301      	adds	r3, #1
 800aaba:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800aabc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	2bff      	cmp	r3, #255	@ 0xff
 800aac2:	f040 809d 	bne.w	800ac00 <Custom_STM_Event_Handler+0x158>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800aac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac8:	3302      	adds	r3, #2
 800aaca:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800aacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aace:	881b      	ldrh	r3, [r3, #0]
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800aad6:	2b1a      	cmp	r3, #26
 800aad8:	f200 808e 	bhi.w	800abf8 <Custom_STM_Event_Handler+0x150>
 800aadc:	a201      	add	r2, pc, #4	@ (adr r2, 800aae4 <Custom_STM_Event_Handler+0x3c>)
 800aade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae2:	bf00      	nop
 800aae4:	0800ab51 	.word	0x0800ab51
 800aae8:	0800abf9 	.word	0x0800abf9
 800aaec:	0800abf9 	.word	0x0800abf9
 800aaf0:	0800abf9 	.word	0x0800abf9
 800aaf4:	0800abf9 	.word	0x0800abf9
 800aaf8:	0800abf9 	.word	0x0800abf9
 800aafc:	0800abf9 	.word	0x0800abf9
 800ab00:	0800abf9 	.word	0x0800abf9
 800ab04:	0800abf9 	.word	0x0800abf9
 800ab08:	0800abf9 	.word	0x0800abf9
 800ab0c:	0800abf9 	.word	0x0800abf9
 800ab10:	0800abf9 	.word	0x0800abf9
 800ab14:	0800abf9 	.word	0x0800abf9
 800ab18:	0800abf9 	.word	0x0800abf9
 800ab1c:	0800abf9 	.word	0x0800abf9
 800ab20:	0800abf9 	.word	0x0800abf9
 800ab24:	0800abf9 	.word	0x0800abf9
 800ab28:	0800abf9 	.word	0x0800abf9
 800ab2c:	0800abf9 	.word	0x0800abf9
 800ab30:	0800abf9 	.word	0x0800abf9
 800ab34:	0800abf9 	.word	0x0800abf9
 800ab38:	0800abf9 	.word	0x0800abf9
 800ab3c:	0800abf9 	.word	0x0800abf9
 800ab40:	0800abf9 	.word	0x0800abf9
 800ab44:	0800abf9 	.word	0x0800abf9
 800ab48:	0800abf9 	.word	0x0800abf9
 800ab4c:	0800abdb 	.word	0x0800abdb
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800ab50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab52:	3302      	adds	r3, #2
 800ab54:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	885b      	ldrh	r3, [r3, #2]
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	4b2c      	ldr	r3, [pc, #176]	@ (800ac10 <Custom_STM_Event_Handler+0x168>)
 800ab60:	889b      	ldrh	r3, [r3, #4]
 800ab62:	3302      	adds	r3, #2
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d119      	bne.n	800ab9c <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	7a1b      	ldrb	r3, [r3, #8]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d002      	beq.n	800ab7c <Custom_STM_Event_Handler+0xd4>
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d008      	beq.n	800ab8c <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 800ab7a:	e02d      	b.n	800abd8 <Custom_STM_Event_Handler+0x130>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 800ab7c:	2303      	movs	r3, #3
 800ab7e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800ab80:	f107 0308 	add.w	r3, r7, #8
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7ff ff55 	bl	800aa34 <Custom_STM_App_Notification>
                break;
 800ab8a:	e025      	b.n	800abd8 <Custom_STM_Event_Handler+0x130>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800ab90:	f107 0308 	add.w	r3, r7, #8
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7ff ff4d 	bl	800aa34 <Custom_STM_App_Notification>
                break;
 800ab9a:	e01d      	b.n	800abd8 <Custom_STM_Event_Handler+0x130>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	885b      	ldrh	r3, [r3, #2]
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	461a      	mov	r2, r3
 800aba4:	4b1a      	ldr	r3, [pc, #104]	@ (800ac10 <Custom_STM_Event_Handler+0x168>)
 800aba6:	885b      	ldrh	r3, [r3, #2]
 800aba8:	3301      	adds	r3, #1
 800abaa:	429a      	cmp	r2, r3
 800abac:	d107      	bne.n	800abbe <Custom_STM_Event_Handler+0x116>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800abae:	2301      	movs	r3, #1
 800abb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 800abb4:	2120      	movs	r1, #32
 800abb6:	4817      	ldr	r0, [pc, #92]	@ (800ac14 <Custom_STM_Event_Handler+0x16c>)
 800abb8:	f7f9 ffdc 	bl	8004b74 <HAL_GPIO_TogglePin>
            /* USER CODE END CUSTOM_STM_Service_1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800abbc:	e01e      	b.n	800abfc <Custom_STM_Event_Handler+0x154>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	885b      	ldrh	r3, [r3, #2]
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	461a      	mov	r2, r3
 800abc6:	4b12      	ldr	r3, [pc, #72]	@ (800ac10 <Custom_STM_Event_Handler+0x168>)
 800abc8:	889b      	ldrh	r3, [r3, #4]
 800abca:	3301      	adds	r3, #1
 800abcc:	429a      	cmp	r2, r3
 800abce:	d115      	bne.n	800abfc <Custom_STM_Event_Handler+0x154>
            return_value = SVCCTL_EvtAckFlowEnable;
 800abd0:	2301      	movs	r3, #1
 800abd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 800abd6:	e011      	b.n	800abfc <Custom_STM_Event_Handler+0x154>
 800abd8:	e010      	b.n	800abfc <Custom_STM_Event_Handler+0x154>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800abda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abdc:	3302      	adds	r3, #2
 800abde:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800abe0:	2304      	movs	r3, #4
 800abe2:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800abe4:	6a3b      	ldr	r3, [r7, #32]
 800abe6:	881b      	ldrh	r3, [r3, #0]
 800abe8:	b29b      	uxth	r3, r3
 800abea:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 800abec:	f107 0308 	add.w	r3, r7, #8
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7ff ff1f 	bl	800aa34 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800abf6:	e002      	b.n	800abfe <Custom_STM_Event_Handler+0x156>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800abf8:	bf00      	nop
 800abfa:	e002      	b.n	800ac02 <Custom_STM_Event_Handler+0x15a>
          break;
 800abfc:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800abfe:	e000      	b.n	800ac02 <Custom_STM_Event_Handler+0x15a>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800ac00:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800ac02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800ac06:	4618      	mov	r0, r3
 800ac08:	3730      	adds	r7, #48	@ 0x30
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	200007dc 	.word	0x200007dc
 800ac14:	48000400 	.word	0x48000400

0800ac18 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b08c      	sub	sp, #48	@ 0x30
 800ac1c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ac1e:	2392      	movs	r3, #146	@ 0x92
 800ac20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800ac22:	484f      	ldr	r0, [pc, #316]	@ (800ad60 <SVCCTL_InitCustomSvc+0x148>)
 800ac24:	f7fe fc80 	bl	8009528 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 800ac28:	2306      	movs	r3, #6
 800ac2a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 800ac2c:	238f      	movs	r3, #143	@ 0x8f
 800ac2e:	713b      	strb	r3, [r7, #4]
 800ac30:	23e5      	movs	r3, #229	@ 0xe5
 800ac32:	717b      	strb	r3, [r7, #5]
 800ac34:	23b3      	movs	r3, #179	@ 0xb3
 800ac36:	71bb      	strb	r3, [r7, #6]
 800ac38:	23d5      	movs	r3, #213	@ 0xd5
 800ac3a:	71fb      	strb	r3, [r7, #7]
 800ac3c:	232e      	movs	r3, #46	@ 0x2e
 800ac3e:	723b      	strb	r3, [r7, #8]
 800ac40:	237f      	movs	r3, #127	@ 0x7f
 800ac42:	727b      	strb	r3, [r7, #9]
 800ac44:	234a      	movs	r3, #74	@ 0x4a
 800ac46:	72bb      	strb	r3, [r7, #10]
 800ac48:	2398      	movs	r3, #152	@ 0x98
 800ac4a:	72fb      	strb	r3, [r7, #11]
 800ac4c:	232a      	movs	r3, #42	@ 0x2a
 800ac4e:	733b      	strb	r3, [r7, #12]
 800ac50:	2348      	movs	r3, #72	@ 0x48
 800ac52:	737b      	strb	r3, [r7, #13]
 800ac54:	237a      	movs	r3, #122	@ 0x7a
 800ac56:	73bb      	strb	r3, [r7, #14]
 800ac58:	23cc      	movs	r3, #204	@ 0xcc
 800ac5a:	73fb      	strb	r3, [r7, #15]
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	743b      	strb	r3, [r7, #16]
 800ac60:	2300      	movs	r3, #0
 800ac62:	747b      	strb	r3, [r7, #17]
 800ac64:	2300      	movs	r3, #0
 800ac66:	74bb      	strb	r3, [r7, #18]
 800ac68:	2300      	movs	r3, #0
 800ac6a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800ac6c:	7dbb      	ldrb	r3, [r7, #22]
 800ac6e:	1d39      	adds	r1, r7, #4
 800ac70:	4a3c      	ldr	r2, [pc, #240]	@ (800ad64 <SVCCTL_InitCustomSvc+0x14c>)
 800ac72:	9200      	str	r2, [sp, #0]
 800ac74:	2201      	movs	r2, #1
 800ac76:	2002      	movs	r0, #2
 800ac78:	f7fd feca 	bl	8008a10 <aci_gatt_add_service>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 800ac80:	2319      	movs	r3, #25
 800ac82:	713b      	strb	r3, [r7, #4]
 800ac84:	23ed      	movs	r3, #237	@ 0xed
 800ac86:	717b      	strb	r3, [r7, #5]
 800ac88:	2382      	movs	r3, #130	@ 0x82
 800ac8a:	71bb      	strb	r3, [r7, #6]
 800ac8c:	23ae      	movs	r3, #174	@ 0xae
 800ac8e:	71fb      	strb	r3, [r7, #7]
 800ac90:	23ed      	movs	r3, #237	@ 0xed
 800ac92:	723b      	strb	r3, [r7, #8]
 800ac94:	2321      	movs	r3, #33	@ 0x21
 800ac96:	727b      	strb	r3, [r7, #9]
 800ac98:	234c      	movs	r3, #76	@ 0x4c
 800ac9a:	72bb      	strb	r3, [r7, #10]
 800ac9c:	239d      	movs	r3, #157	@ 0x9d
 800ac9e:	72fb      	strb	r3, [r7, #11]
 800aca0:	2341      	movs	r3, #65	@ 0x41
 800aca2:	733b      	strb	r3, [r7, #12]
 800aca4:	2345      	movs	r3, #69	@ 0x45
 800aca6:	737b      	strb	r3, [r7, #13]
 800aca8:	2322      	movs	r3, #34	@ 0x22
 800acaa:	73bb      	strb	r3, [r7, #14]
 800acac:	238e      	movs	r3, #142	@ 0x8e
 800acae:	73fb      	strb	r3, [r7, #15]
 800acb0:	2300      	movs	r3, #0
 800acb2:	743b      	strb	r3, [r7, #16]
 800acb4:	2300      	movs	r3, #0
 800acb6:	747b      	strb	r3, [r7, #17]
 800acb8:	2300      	movs	r3, #0
 800acba:	74bb      	strb	r3, [r7, #18]
 800acbc:	2300      	movs	r3, #0
 800acbe:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800acc0:	4b28      	ldr	r3, [pc, #160]	@ (800ad64 <SVCCTL_InitCustomSvc+0x14c>)
 800acc2:	8818      	ldrh	r0, [r3, #0]
 800acc4:	4b28      	ldr	r3, [pc, #160]	@ (800ad68 <SVCCTL_InitCustomSvc+0x150>)
 800acc6:	881b      	ldrh	r3, [r3, #0]
 800acc8:	1d3a      	adds	r2, r7, #4
 800acca:	4928      	ldr	r1, [pc, #160]	@ (800ad6c <SVCCTL_InitCustomSvc+0x154>)
 800accc:	9105      	str	r1, [sp, #20]
 800acce:	2100      	movs	r1, #0
 800acd0:	9104      	str	r1, [sp, #16]
 800acd2:	2110      	movs	r1, #16
 800acd4:	9103      	str	r1, [sp, #12]
 800acd6:	2101      	movs	r1, #1
 800acd8:	9102      	str	r1, [sp, #8]
 800acda:	2100      	movs	r1, #0
 800acdc:	9101      	str	r1, [sp, #4]
 800acde:	2108      	movs	r1, #8
 800ace0:	9100      	str	r1, [sp, #0]
 800ace2:	2102      	movs	r1, #2
 800ace4:	f7fd ff6a 	bl	8008bbc <aci_gatt_add_char>
 800ace8:	4603      	mov	r3, r0
 800acea:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 800acec:	2319      	movs	r3, #25
 800acee:	713b      	strb	r3, [r7, #4]
 800acf0:	23ed      	movs	r3, #237	@ 0xed
 800acf2:	717b      	strb	r3, [r7, #5]
 800acf4:	2382      	movs	r3, #130	@ 0x82
 800acf6:	71bb      	strb	r3, [r7, #6]
 800acf8:	23ae      	movs	r3, #174	@ 0xae
 800acfa:	71fb      	strb	r3, [r7, #7]
 800acfc:	23ed      	movs	r3, #237	@ 0xed
 800acfe:	723b      	strb	r3, [r7, #8]
 800ad00:	2321      	movs	r3, #33	@ 0x21
 800ad02:	727b      	strb	r3, [r7, #9]
 800ad04:	234c      	movs	r3, #76	@ 0x4c
 800ad06:	72bb      	strb	r3, [r7, #10]
 800ad08:	239d      	movs	r3, #157	@ 0x9d
 800ad0a:	72fb      	strb	r3, [r7, #11]
 800ad0c:	2341      	movs	r3, #65	@ 0x41
 800ad0e:	733b      	strb	r3, [r7, #12]
 800ad10:	2345      	movs	r3, #69	@ 0x45
 800ad12:	737b      	strb	r3, [r7, #13]
 800ad14:	2322      	movs	r3, #34	@ 0x22
 800ad16:	73bb      	strb	r3, [r7, #14]
 800ad18:	238e      	movs	r3, #142	@ 0x8e
 800ad1a:	73fb      	strb	r3, [r7, #15]
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	743b      	strb	r3, [r7, #16]
 800ad20:	2300      	movs	r3, #0
 800ad22:	747b      	strb	r3, [r7, #17]
 800ad24:	2300      	movs	r3, #0
 800ad26:	74bb      	strb	r3, [r7, #18]
 800ad28:	2300      	movs	r3, #0
 800ad2a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800ad2c:	4b0d      	ldr	r3, [pc, #52]	@ (800ad64 <SVCCTL_InitCustomSvc+0x14c>)
 800ad2e:	8818      	ldrh	r0, [r3, #0]
 800ad30:	4b0f      	ldr	r3, [pc, #60]	@ (800ad70 <SVCCTL_InitCustomSvc+0x158>)
 800ad32:	881b      	ldrh	r3, [r3, #0]
 800ad34:	1d3a      	adds	r2, r7, #4
 800ad36:	490f      	ldr	r1, [pc, #60]	@ (800ad74 <SVCCTL_InitCustomSvc+0x15c>)
 800ad38:	9105      	str	r1, [sp, #20]
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	9104      	str	r1, [sp, #16]
 800ad3e:	2110      	movs	r1, #16
 800ad40:	9103      	str	r1, [sp, #12]
 800ad42:	2101      	movs	r1, #1
 800ad44:	9102      	str	r1, [sp, #8]
 800ad46:	2100      	movs	r1, #0
 800ad48:	9101      	str	r1, [sp, #4]
 800ad4a:	2114      	movs	r1, #20
 800ad4c:	9100      	str	r1, [sp, #0]
 800ad4e:	2102      	movs	r1, #2
 800ad50:	f7fd ff34 	bl	8008bbc <aci_gatt_add_char>
 800ad54:	4603      	mov	r3, r0
 800ad56:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800ad58:	bf00      	nop
}
 800ad5a:	3718      	adds	r7, #24
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	0800aaa9 	.word	0x0800aaa9
 800ad64:	200007dc 	.word	0x200007dc
 800ad68:	20000030 	.word	0x20000030
 800ad6c:	200007de 	.word	0x200007de
 800ad70:	20000032 	.word	0x20000032
 800ad74:	200007e0 	.word	0x200007e0

0800ad78 <LL_PWR_EnableBootC2>:
{
 800ad78:	b480      	push	{r7}
 800ad7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800ad7c:	4b05      	ldr	r3, [pc, #20]	@ (800ad94 <LL_PWR_EnableBootC2+0x1c>)
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	4a04      	ldr	r2, [pc, #16]	@ (800ad94 <LL_PWR_EnableBootC2+0x1c>)
 800ad82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad86:	60d3      	str	r3, [r2, #12]
}
 800ad88:	bf00      	nop
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	58000400 	.word	0x58000400

0800ad98 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800ada0:	4b06      	ldr	r3, [pc, #24]	@ (800adbc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800ada2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800ada6:	4905      	ldr	r1, [pc, #20]	@ (800adbc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4313      	orrs	r3, r2
 800adac:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800adb0:	bf00      	nop
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr
 800adbc:	58000800 	.word	0x58000800

0800adc0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800adc8:	4b05      	ldr	r3, [pc, #20]	@ (800ade0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800adca:	6a1a      	ldr	r2, [r3, #32]
 800adcc:	4904      	ldr	r1, [pc, #16]	@ (800ade0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4313      	orrs	r3, r2
 800add2:	620b      	str	r3, [r1, #32]
}
 800add4:	bf00      	nop
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr
 800ade0:	58000800 	.word	0x58000800

0800ade4 <LL_AHB3_GRP1_EnableClock>:
{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800adec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adf0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800adf2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800adfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	4013      	ands	r3, r2
 800ae06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ae08:	68fb      	ldr	r3, [r7, #12]
}
 800ae0a:	bf00      	nop
 800ae0c:	3714      	adds	r7, #20
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr

0800ae16 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800ae16:	b480      	push	{r7}
 800ae18:	b085      	sub	sp, #20
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800ae1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae22:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800ae26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800ae32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae36:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4013      	ands	r3, r2
 800ae3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ae40:	68fb      	ldr	r3, [r7, #12]
}
 800ae42:	bf00      	nop
 800ae44:	3714      	adds	r7, #20
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr

0800ae4e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800ae4e:	b480      	push	{r7}
 800ae50:	b083      	sub	sp, #12
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	601a      	str	r2, [r3, #0]
}
 800ae62:	bf00      	nop
 800ae64:	370c      	adds	r7, #12
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b083      	sub	sp, #12
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f043 0201 	orr.w	r2, r3, #1
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	601a      	str	r2, [r3, #0]
}
 800ae82:	bf00      	nop
 800ae84:	370c      	adds	r7, #12
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr

0800ae8e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ae8e:	b480      	push	{r7}
 800ae90:	b083      	sub	sp, #12
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
 800ae96:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	041b      	lsls	r3, r3, #16
 800aea0:	43db      	mvns	r3, r3
 800aea2:	401a      	ands	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	605a      	str	r2, [r3, #4]
}
 800aea8:	bf00      	nop
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	685a      	ldr	r2, [r3, #4]
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	041b      	lsls	r3, r3, #16
 800aec6:	431a      	orrs	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	605a      	str	r2, [r3, #4]
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	685a      	ldr	r2, [r3, #4]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	43db      	mvns	r3, r3
 800aeea:	401a      	ands	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	605a      	str	r2, [r3, #4]
}
 800aef0:	bf00      	nop
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	683a      	ldr	r2, [r7, #0]
 800af0a:	609a      	str	r2, [r3, #8]
}
 800af0c:	bf00      	nop
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	041a      	lsls	r2, r3, #16
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	609a      	str	r2, [r3, #8]
}
 800af2a:	bf00      	nop
 800af2c:	370c      	adds	r7, #12
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800af36:	b480      	push	{r7}
 800af38:	b083      	sub	sp, #12
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
 800af3e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	68da      	ldr	r2, [r3, #12]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	4013      	ands	r3, r2
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d101      	bne.n	800af52 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800af4e:	2301      	movs	r3, #1
 800af50:	e000      	b.n	800af54 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800af52:	2300      	movs	r3, #0
}
 800af54:	4618      	mov	r0, r3
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	69da      	ldr	r2, [r3, #28]
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	4013      	ands	r3, r2
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	429a      	cmp	r2, r3
 800af76:	d101      	bne.n	800af7c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800af78:	2301      	movs	r3, #1
 800af7a:	e000      	b.n	800af7e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	370c      	adds	r7, #12
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
	...

0800af8c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800af90:	2102      	movs	r1, #2
 800af92:	4818      	ldr	r0, [pc, #96]	@ (800aff4 <HW_IPCC_Rx_Handler+0x68>)
 800af94:	f7ff ffe4 	bl	800af60 <LL_C2_IPCC_IsActiveFlag_CHx>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d008      	beq.n	800afb0 <HW_IPCC_Rx_Handler+0x24>
 800af9e:	4b15      	ldr	r3, [pc, #84]	@ (800aff4 <HW_IPCC_Rx_Handler+0x68>)
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	f003 0302 	and.w	r3, r3, #2
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d102      	bne.n	800afb0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800afaa:	f000 f8d5 	bl	800b158 <HW_IPCC_SYS_EvtHandler>
 800afae:	e01e      	b.n	800afee <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800afb0:	2101      	movs	r1, #1
 800afb2:	4810      	ldr	r0, [pc, #64]	@ (800aff4 <HW_IPCC_Rx_Handler+0x68>)
 800afb4:	f7ff ffd4 	bl	800af60 <LL_C2_IPCC_IsActiveFlag_CHx>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d008      	beq.n	800afd0 <HW_IPCC_Rx_Handler+0x44>
 800afbe:	4b0d      	ldr	r3, [pc, #52]	@ (800aff4 <HW_IPCC_Rx_Handler+0x68>)
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	f003 0301 	and.w	r3, r3, #1
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d102      	bne.n	800afd0 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800afca:	f000 f889 	bl	800b0e0 <HW_IPCC_BLE_EvtHandler>
 800afce:	e00e      	b.n	800afee <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800afd0:	2108      	movs	r1, #8
 800afd2:	4808      	ldr	r0, [pc, #32]	@ (800aff4 <HW_IPCC_Rx_Handler+0x68>)
 800afd4:	f7ff ffc4 	bl	800af60 <LL_C2_IPCC_IsActiveFlag_CHx>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d008      	beq.n	800aff0 <HW_IPCC_Rx_Handler+0x64>
 800afde:	4b05      	ldr	r3, [pc, #20]	@ (800aff4 <HW_IPCC_Rx_Handler+0x68>)
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	f003 0308 	and.w	r3, r3, #8
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d102      	bne.n	800aff0 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800afea:	f000 f901 	bl	800b1f0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800afee:	bf00      	nop
 800aff0:	bf00      	nop
}
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	58000c00 	.word	0x58000c00

0800aff8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800affc:	2102      	movs	r1, #2
 800affe:	4818      	ldr	r0, [pc, #96]	@ (800b060 <HW_IPCC_Tx_Handler+0x68>)
 800b000:	f7ff ff99 	bl	800af36 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d108      	bne.n	800b01c <HW_IPCC_Tx_Handler+0x24>
 800b00a:	4b15      	ldr	r3, [pc, #84]	@ (800b060 <HW_IPCC_Tx_Handler+0x68>)
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b012:	2b00      	cmp	r3, #0
 800b014:	d102      	bne.n	800b01c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b016:	f000 f893 	bl	800b140 <HW_IPCC_SYS_CmdEvtHandler>
 800b01a:	e01e      	b.n	800b05a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800b01c:	2108      	movs	r1, #8
 800b01e:	4810      	ldr	r0, [pc, #64]	@ (800b060 <HW_IPCC_Tx_Handler+0x68>)
 800b020:	f7ff ff89 	bl	800af36 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d108      	bne.n	800b03c <HW_IPCC_Tx_Handler+0x44>
 800b02a:	4b0d      	ldr	r3, [pc, #52]	@ (800b060 <HW_IPCC_Tx_Handler+0x68>)
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b032:	2b00      	cmp	r3, #0
 800b034:	d102      	bne.n	800b03c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800b036:	f000 f8bd 	bl	800b1b4 <HW_IPCC_MM_FreeBufHandler>
 800b03a:	e00e      	b.n	800b05a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800b03c:	2120      	movs	r1, #32
 800b03e:	4808      	ldr	r0, [pc, #32]	@ (800b060 <HW_IPCC_Tx_Handler+0x68>)
 800b040:	f7ff ff79 	bl	800af36 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d108      	bne.n	800b05c <HW_IPCC_Tx_Handler+0x64>
 800b04a:	4b05      	ldr	r3, [pc, #20]	@ (800b060 <HW_IPCC_Tx_Handler+0x68>)
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b052:	2b00      	cmp	r3, #0
 800b054:	d102      	bne.n	800b05c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800b056:	f000 f84f 	bl	800b0f8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800b05a:	bf00      	nop
 800b05c:	bf00      	nop
}
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	58000c00 	.word	0x58000c00

0800b064 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800b068:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b06c:	f7ff fed3 	bl	800ae16 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800b070:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b074:	f7ff fea4 	bl	800adc0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800b078:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b07c:	f7ff fe8c 	bl	800ad98 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800b080:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800b082:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800b084:	f7ff fe78 	bl	800ad78 <LL_PWR_EnableBootC2>

  return;
 800b088:	bf00      	nop
}
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800b090:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b094:	f7ff fea6 	bl	800ade4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800b098:	4806      	ldr	r0, [pc, #24]	@ (800b0b4 <HW_IPCC_Init+0x28>)
 800b09a:	f7ff fee8 	bl	800ae6e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800b09e:	4805      	ldr	r0, [pc, #20]	@ (800b0b4 <HW_IPCC_Init+0x28>)
 800b0a0:	f7ff fed5 	bl	800ae4e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800b0a4:	202c      	movs	r0, #44	@ 0x2c
 800b0a6:	f7f9 fb80 	bl	80047aa <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800b0aa:	202d      	movs	r0, #45	@ 0x2d
 800b0ac:	f7f9 fb7d 	bl	80047aa <HAL_NVIC_EnableIRQ>

  return;
 800b0b0:	bf00      	nop
}
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	58000c00 	.word	0x58000c00

0800b0b8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b0bc:	2101      	movs	r1, #1
 800b0be:	4802      	ldr	r0, [pc, #8]	@ (800b0c8 <HW_IPCC_BLE_Init+0x10>)
 800b0c0:	f7ff ff0a 	bl	800aed8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b0c4:	bf00      	nop
}
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	58000c00 	.word	0x58000c00

0800b0cc <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800b0d0:	2101      	movs	r1, #1
 800b0d2:	4802      	ldr	r0, [pc, #8]	@ (800b0dc <HW_IPCC_BLE_SendCmd+0x10>)
 800b0d4:	f7ff ff20 	bl	800af18 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b0d8:	bf00      	nop
}
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	58000c00 	.word	0x58000c00

0800b0e0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800b0e4:	f7fe fee4 	bl	8009eb0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b0e8:	2101      	movs	r1, #1
 800b0ea:	4802      	ldr	r0, [pc, #8]	@ (800b0f4 <HW_IPCC_BLE_EvtHandler+0x14>)
 800b0ec:	f7ff ff06 	bl	800aefc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b0f0:	bf00      	nop
}
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	58000c00 	.word	0x58000c00

0800b0f8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800b0fc:	2120      	movs	r1, #32
 800b0fe:	4803      	ldr	r0, [pc, #12]	@ (800b10c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800b100:	f7ff fed8 	bl	800aeb4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800b104:	f7fe ff04 	bl	8009f10 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800b108:	bf00      	nop
}
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	58000c00 	.word	0x58000c00

0800b110 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b114:	2102      	movs	r1, #2
 800b116:	4802      	ldr	r0, [pc, #8]	@ (800b120 <HW_IPCC_SYS_Init+0x10>)
 800b118:	f7ff fede 	bl	800aed8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b11c:	bf00      	nop
}
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	58000c00 	.word	0x58000c00

0800b124 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800b124:	b580      	push	{r7, lr}
 800b126:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b128:	2102      	movs	r1, #2
 800b12a:	4804      	ldr	r0, [pc, #16]	@ (800b13c <HW_IPCC_SYS_SendCmd+0x18>)
 800b12c:	f7ff fef4 	bl	800af18 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b130:	2102      	movs	r1, #2
 800b132:	4802      	ldr	r0, [pc, #8]	@ (800b13c <HW_IPCC_SYS_SendCmd+0x18>)
 800b134:	f7ff feab 	bl	800ae8e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800b138:	bf00      	nop
}
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	58000c00 	.word	0x58000c00

0800b140 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b144:	2102      	movs	r1, #2
 800b146:	4803      	ldr	r0, [pc, #12]	@ (800b154 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800b148:	f7ff feb4 	bl	800aeb4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800b14c:	f7fe ff30 	bl	8009fb0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800b150:	bf00      	nop
}
 800b152:	bd80      	pop	{r7, pc}
 800b154:	58000c00 	.word	0x58000c00

0800b158 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800b15c:	f7fe ff3e 	bl	8009fdc <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b160:	2102      	movs	r1, #2
 800b162:	4802      	ldr	r0, [pc, #8]	@ (800b16c <HW_IPCC_SYS_EvtHandler+0x14>)
 800b164:	f7ff feca 	bl	800aefc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b168:	bf00      	nop
}
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	58000c00 	.word	0x58000c00

0800b170 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800b178:	2108      	movs	r1, #8
 800b17a:	480c      	ldr	r0, [pc, #48]	@ (800b1ac <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b17c:	f7ff fedb 	bl	800af36 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d007      	beq.n	800b196 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800b186:	4a0a      	ldr	r2, [pc, #40]	@ (800b1b0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b18c:	2108      	movs	r1, #8
 800b18e:	4807      	ldr	r0, [pc, #28]	@ (800b1ac <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b190:	f7ff fe7d 	bl	800ae8e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800b194:	e006      	b.n	800b1a4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b19a:	2108      	movs	r1, #8
 800b19c:	4803      	ldr	r0, [pc, #12]	@ (800b1ac <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b19e:	f7ff febb 	bl	800af18 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800b1a2:	bf00      	nop
}
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	58000c00 	.word	0x58000c00
 800b1b0:	200007e4 	.word	0x200007e4

0800b1b4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b1b8:	2108      	movs	r1, #8
 800b1ba:	4806      	ldr	r0, [pc, #24]	@ (800b1d4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b1bc:	f7ff fe7a 	bl	800aeb4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800b1c0:	4b05      	ldr	r3, [pc, #20]	@ (800b1d8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b1c6:	2108      	movs	r1, #8
 800b1c8:	4802      	ldr	r0, [pc, #8]	@ (800b1d4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b1ca:	f7ff fea5 	bl	800af18 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b1ce:	bf00      	nop
}
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	58000c00 	.word	0x58000c00
 800b1d8:	200007e4 	.word	0x200007e4

0800b1dc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b1e0:	2108      	movs	r1, #8
 800b1e2:	4802      	ldr	r0, [pc, #8]	@ (800b1ec <HW_IPCC_TRACES_Init+0x10>)
 800b1e4:	f7ff fe78 	bl	800aed8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b1e8:	bf00      	nop
}
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	58000c00 	.word	0x58000c00

0800b1f0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800b1f4:	f7fe ff9a 	bl	800a12c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b1f8:	2108      	movs	r1, #8
 800b1fa:	4802      	ldr	r0, [pc, #8]	@ (800b204 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800b1fc:	f7ff fe7e 	bl	800aefc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b200:	bf00      	nop
}
 800b202:	bd80      	pop	{r7, pc}
 800b204:	58000c00 	.word	0x58000c00

0800b208 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b208:	b480      	push	{r7}
 800b20a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b20c:	4b05      	ldr	r3, [pc, #20]	@ (800b224 <UTIL_LPM_Init+0x1c>)
 800b20e:	2200      	movs	r2, #0
 800b210:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b212:	4b05      	ldr	r3, [pc, #20]	@ (800b228 <UTIL_LPM_Init+0x20>)
 800b214:	2200      	movs	r2, #0
 800b216:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b218:	bf00      	nop
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop
 800b224:	200007e8 	.word	0x200007e8
 800b228:	200007ec 	.word	0x200007ec

0800b22c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b22c:	b480      	push	{r7}
 800b22e:	b087      	sub	sp, #28
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	460b      	mov	r3, r1
 800b236:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b238:	f3ef 8310 	mrs	r3, PRIMASK
 800b23c:	613b      	str	r3, [r7, #16]
  return(result);
 800b23e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b240:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b242:	b672      	cpsid	i
}
 800b244:	bf00      	nop
  
  switch(state)
 800b246:	78fb      	ldrb	r3, [r7, #3]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d008      	beq.n	800b25e <UTIL_LPM_SetOffMode+0x32>
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d10e      	bne.n	800b26e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b250:	4b0d      	ldr	r3, [pc, #52]	@ (800b288 <UTIL_LPM_SetOffMode+0x5c>)
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	4313      	orrs	r3, r2
 800b258:	4a0b      	ldr	r2, [pc, #44]	@ (800b288 <UTIL_LPM_SetOffMode+0x5c>)
 800b25a:	6013      	str	r3, [r2, #0]
      break;
 800b25c:	e008      	b.n	800b270 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	43da      	mvns	r2, r3
 800b262:	4b09      	ldr	r3, [pc, #36]	@ (800b288 <UTIL_LPM_SetOffMode+0x5c>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4013      	ands	r3, r2
 800b268:	4a07      	ldr	r2, [pc, #28]	@ (800b288 <UTIL_LPM_SetOffMode+0x5c>)
 800b26a:	6013      	str	r3, [r2, #0]
      break;
 800b26c:	e000      	b.n	800b270 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b26e:	bf00      	nop
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f383 8810 	msr	PRIMASK, r3
}
 800b27a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b27c:	bf00      	nop
 800b27e:	371c      	adds	r7, #28
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	200007ec 	.word	0x200007ec

0800b28c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b090      	sub	sp, #64	@ 0x40
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b294:	4b73      	ldr	r3, [pc, #460]	@ (800b464 <UTIL_SEQ_Run+0x1d8>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800b29a:	4b72      	ldr	r3, [pc, #456]	@ (800b464 <UTIL_SEQ_Run+0x1d8>)
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4013      	ands	r3, r2
 800b2a2:	4a70      	ldr	r2, [pc, #448]	@ (800b464 <UTIL_SEQ_Run+0x1d8>)
 800b2a4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b2a6:	4b70      	ldr	r3, [pc, #448]	@ (800b468 <UTIL_SEQ_Run+0x1dc>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800b2ac:	4b6f      	ldr	r3, [pc, #444]	@ (800b46c <UTIL_SEQ_Run+0x1e0>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800b2b2:	4b6f      	ldr	r3, [pc, #444]	@ (800b470 <UTIL_SEQ_Run+0x1e4>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800b2b8:	4b6e      	ldr	r3, [pc, #440]	@ (800b474 <UTIL_SEQ_Run+0x1e8>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b2be:	e08d      	b.n	800b3dc <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b2c4:	e002      	b.n	800b2cc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800b2c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b2cc:	4a6a      	ldr	r2, [pc, #424]	@ (800b478 <UTIL_SEQ_Run+0x1ec>)
 800b2ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2d0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d6:	401a      	ands	r2, r3
 800b2d8:	4b62      	ldr	r3, [pc, #392]	@ (800b464 <UTIL_SEQ_Run+0x1d8>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4013      	ands	r3, r2
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d0f1      	beq.n	800b2c6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b2e2:	4a65      	ldr	r2, [pc, #404]	@ (800b478 <UTIL_SEQ_Run+0x1ec>)
 800b2e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2e6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ec:	401a      	ands	r2, r3
 800b2ee:	4b5d      	ldr	r3, [pc, #372]	@ (800b464 <UTIL_SEQ_Run+0x1d8>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b2f6:	4a60      	ldr	r2, [pc, #384]	@ (800b478 <UTIL_SEQ_Run+0x1ec>)
 800b2f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2fa:	00db      	lsls	r3, r3, #3
 800b2fc:	4413      	add	r3, r2
 800b2fe:	685a      	ldr	r2, [r3, #4]
 800b300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b302:	4013      	ands	r3, r2
 800b304:	2b00      	cmp	r3, #0
 800b306:	d106      	bne.n	800b316 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b308:	4a5b      	ldr	r2, [pc, #364]	@ (800b478 <UTIL_SEQ_Run+0x1ec>)
 800b30a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b30c:	00db      	lsls	r3, r3, #3
 800b30e:	4413      	add	r3, r2
 800b310:	f04f 32ff 	mov.w	r2, #4294967295
 800b314:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b316:	4a58      	ldr	r2, [pc, #352]	@ (800b478 <UTIL_SEQ_Run+0x1ec>)
 800b318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b31a:	00db      	lsls	r3, r3, #3
 800b31c:	4413      	add	r3, r2
 800b31e:	685a      	ldr	r2, [r3, #4]
 800b320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b322:	4013      	ands	r3, r2
 800b324:	4618      	mov	r0, r3
 800b326:	f000 f9b3 	bl	800b690 <SEQ_BitPosition>
 800b32a:	4603      	mov	r3, r0
 800b32c:	461a      	mov	r2, r3
 800b32e:	4b53      	ldr	r3, [pc, #332]	@ (800b47c <UTIL_SEQ_Run+0x1f0>)
 800b330:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b332:	4a51      	ldr	r2, [pc, #324]	@ (800b478 <UTIL_SEQ_Run+0x1ec>)
 800b334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b336:	00db      	lsls	r3, r3, #3
 800b338:	4413      	add	r3, r2
 800b33a:	685a      	ldr	r2, [r3, #4]
 800b33c:	4b4f      	ldr	r3, [pc, #316]	@ (800b47c <UTIL_SEQ_Run+0x1f0>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2101      	movs	r1, #1
 800b342:	fa01 f303 	lsl.w	r3, r1, r3
 800b346:	43db      	mvns	r3, r3
 800b348:	401a      	ands	r2, r3
 800b34a:	494b      	ldr	r1, [pc, #300]	@ (800b478 <UTIL_SEQ_Run+0x1ec>)
 800b34c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b34e:	00db      	lsls	r3, r3, #3
 800b350:	440b      	add	r3, r1
 800b352:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b354:	f3ef 8310 	mrs	r3, PRIMASK
 800b358:	61bb      	str	r3, [r7, #24]
  return(result);
 800b35a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b35c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b35e:	b672      	cpsid	i
}
 800b360:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b362:	4b46      	ldr	r3, [pc, #280]	@ (800b47c <UTIL_SEQ_Run+0x1f0>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2201      	movs	r2, #1
 800b368:	fa02 f303 	lsl.w	r3, r2, r3
 800b36c:	43da      	mvns	r2, r3
 800b36e:	4b3e      	ldr	r3, [pc, #248]	@ (800b468 <UTIL_SEQ_Run+0x1dc>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4013      	ands	r3, r2
 800b374:	4a3c      	ldr	r2, [pc, #240]	@ (800b468 <UTIL_SEQ_Run+0x1dc>)
 800b376:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b378:	2302      	movs	r3, #2
 800b37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b37c:	e013      	b.n	800b3a6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b37e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b380:	3b01      	subs	r3, #1
 800b382:	4a3d      	ldr	r2, [pc, #244]	@ (800b478 <UTIL_SEQ_Run+0x1ec>)
 800b384:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b388:	4b3c      	ldr	r3, [pc, #240]	@ (800b47c <UTIL_SEQ_Run+0x1f0>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2201      	movs	r2, #1
 800b38e:	fa02 f303 	lsl.w	r3, r2, r3
 800b392:	43da      	mvns	r2, r3
 800b394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b396:	3b01      	subs	r3, #1
 800b398:	400a      	ands	r2, r1
 800b39a:	4937      	ldr	r1, [pc, #220]	@ (800b478 <UTIL_SEQ_Run+0x1ec>)
 800b39c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b3a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1e8      	bne.n	800b37e <UTIL_SEQ_Run+0xf2>
 800b3ac:	6a3b      	ldr	r3, [r7, #32]
 800b3ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	f383 8810 	msr	PRIMASK, r3
}
 800b3b6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b3b8:	4b30      	ldr	r3, [pc, #192]	@ (800b47c <UTIL_SEQ_Run+0x1f0>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a30      	ldr	r2, [pc, #192]	@ (800b480 <UTIL_SEQ_Run+0x1f4>)
 800b3be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3c2:	4798      	blx	r3

    local_taskset = TaskSet;
 800b3c4:	4b28      	ldr	r3, [pc, #160]	@ (800b468 <UTIL_SEQ_Run+0x1dc>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800b3ca:	4b28      	ldr	r3, [pc, #160]	@ (800b46c <UTIL_SEQ_Run+0x1e0>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800b3d0:	4b27      	ldr	r3, [pc, #156]	@ (800b470 <UTIL_SEQ_Run+0x1e4>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800b3d6:	4b27      	ldr	r3, [pc, #156]	@ (800b474 <UTIL_SEQ_Run+0x1e8>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b3dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e0:	401a      	ands	r2, r3
 800b3e2:	4b20      	ldr	r3, [pc, #128]	@ (800b464 <UTIL_SEQ_Run+0x1d8>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4013      	ands	r3, r2
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d005      	beq.n	800b3f8 <UTIL_SEQ_Run+0x16c>
 800b3ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3f0:	4013      	ands	r3, r2
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	f43f af64 	beq.w	800b2c0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b3f8:	4b20      	ldr	r3, [pc, #128]	@ (800b47c <UTIL_SEQ_Run+0x1f0>)
 800b3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b3fe:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b400:	f000 f938 	bl	800b674 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b404:	f3ef 8310 	mrs	r3, PRIMASK
 800b408:	613b      	str	r3, [r7, #16]
  return(result);
 800b40a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b40c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b40e:	b672      	cpsid	i
}
 800b410:	bf00      	nop
  local_taskset = TaskSet;
 800b412:	4b15      	ldr	r3, [pc, #84]	@ (800b468 <UTIL_SEQ_Run+0x1dc>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800b418:	4b14      	ldr	r3, [pc, #80]	@ (800b46c <UTIL_SEQ_Run+0x1e0>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800b41e:	4b14      	ldr	r3, [pc, #80]	@ (800b470 <UTIL_SEQ_Run+0x1e4>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b424:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b428:	401a      	ands	r2, r3
 800b42a:	4b0e      	ldr	r3, [pc, #56]	@ (800b464 <UTIL_SEQ_Run+0x1d8>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4013      	ands	r3, r2
 800b430:	2b00      	cmp	r3, #0
 800b432:	d107      	bne.n	800b444 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b434:	4b0f      	ldr	r3, [pc, #60]	@ (800b474 <UTIL_SEQ_Run+0x1e8>)
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b43a:	4013      	ands	r3, r2
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d101      	bne.n	800b444 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800b440:	f7f6 f996 	bl	8001770 <UTIL_SEQ_Idle>
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f383 8810 	msr	PRIMASK, r3
}
 800b44e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b450:	f000 f917 	bl	800b682 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b454:	4a03      	ldr	r2, [pc, #12]	@ (800b464 <UTIL_SEQ_Run+0x1d8>)
 800b456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b458:	6013      	str	r3, [r2, #0]

  return;
 800b45a:	bf00      	nop
}
 800b45c:	3740      	adds	r7, #64	@ 0x40
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	20000038 	.word	0x20000038
 800b468:	200007f0 	.word	0x200007f0
 800b46c:	200007f4 	.word	0x200007f4
 800b470:	20000034 	.word	0x20000034
 800b474:	200007f8 	.word	0x200007f8
 800b478:	20000880 	.word	0x20000880
 800b47c:	200007fc 	.word	0x200007fc
 800b480:	20000800 	.word	0x20000800

0800b484 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b088      	sub	sp, #32
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b490:	f3ef 8310 	mrs	r3, PRIMASK
 800b494:	617b      	str	r3, [r7, #20]
  return(result);
 800b496:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b498:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b49a:	b672      	cpsid	i
}
 800b49c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f000 f8f6 	bl	800b690 <SEQ_BitPosition>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	4a06      	ldr	r2, [pc, #24]	@ (800b4c4 <UTIL_SEQ_RegTask+0x40>)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	f383 8810 	msr	PRIMASK, r3
}
 800b4ba:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b4bc:	bf00      	nop
}
 800b4be:	3720      	adds	r7, #32
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	20000800 	.word	0x20000800

0800b4c8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b087      	sub	sp, #28
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4d2:	f3ef 8310 	mrs	r3, PRIMASK
 800b4d6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b4da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b4dc:	b672      	cpsid	i
}
 800b4de:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b4e0:	4b0d      	ldr	r3, [pc, #52]	@ (800b518 <UTIL_SEQ_SetTask+0x50>)
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	4a0b      	ldr	r2, [pc, #44]	@ (800b518 <UTIL_SEQ_SetTask+0x50>)
 800b4ea:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b4ec:	4a0b      	ldr	r2, [pc, #44]	@ (800b51c <UTIL_SEQ_SetTask+0x54>)
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	431a      	orrs	r2, r3
 800b4f8:	4908      	ldr	r1, [pc, #32]	@ (800b51c <UTIL_SEQ_SetTask+0x54>)
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	f383 8810 	msr	PRIMASK, r3
}
 800b50a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b50c:	bf00      	nop
}
 800b50e:	371c      	adds	r7, #28
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr
 800b518:	200007f0 	.word	0x200007f0
 800b51c:	20000880 	.word	0x20000880

0800b520 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b520:	b480      	push	{r7}
 800b522:	b087      	sub	sp, #28
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b528:	f3ef 8310 	mrs	r3, PRIMASK
 800b52c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b52e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b530:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b532:	b672      	cpsid	i
}
 800b534:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	43da      	mvns	r2, r3
 800b53a:	4b08      	ldr	r3, [pc, #32]	@ (800b55c <UTIL_SEQ_PauseTask+0x3c>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4013      	ands	r3, r2
 800b540:	4a06      	ldr	r2, [pc, #24]	@ (800b55c <UTIL_SEQ_PauseTask+0x3c>)
 800b542:	6013      	str	r3, [r2, #0]
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	f383 8810 	msr	PRIMASK, r3
}
 800b54e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b550:	bf00      	nop
}
 800b552:	371c      	adds	r7, #28
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr
 800b55c:	20000034 	.word	0x20000034

0800b560 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b560:	b480      	push	{r7}
 800b562:	b087      	sub	sp, #28
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b568:	f3ef 8310 	mrs	r3, PRIMASK
 800b56c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b56e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b570:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b572:	b672      	cpsid	i
}
 800b574:	bf00      	nop

  TaskMask |= TaskId_bm;
 800b576:	4b09      	ldr	r3, [pc, #36]	@ (800b59c <UTIL_SEQ_ResumeTask+0x3c>)
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4313      	orrs	r3, r2
 800b57e:	4a07      	ldr	r2, [pc, #28]	@ (800b59c <UTIL_SEQ_ResumeTask+0x3c>)
 800b580:	6013      	str	r3, [r2, #0]
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	f383 8810 	msr	PRIMASK, r3
}
 800b58c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b58e:	bf00      	nop
}
 800b590:	371c      	adds	r7, #28
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	20000034 	.word	0x20000034

0800b5a0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b087      	sub	sp, #28
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5a8:	f3ef 8310 	mrs	r3, PRIMASK
 800b5ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b5b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5b2:	b672      	cpsid	i
}
 800b5b4:	bf00      	nop

  EvtSet |= EvtId_bm;
 800b5b6:	4b09      	ldr	r3, [pc, #36]	@ (800b5dc <UTIL_SEQ_SetEvt+0x3c>)
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	4a07      	ldr	r2, [pc, #28]	@ (800b5dc <UTIL_SEQ_SetEvt+0x3c>)
 800b5c0:	6013      	str	r3, [r2, #0]
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	f383 8810 	msr	PRIMASK, r3
}
 800b5cc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b5ce:	bf00      	nop
}
 800b5d0:	371c      	adds	r7, #28
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	200007f4 	.word	0x200007f4

0800b5e0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b088      	sub	sp, #32
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800b5e8:	4b1f      	ldr	r3, [pc, #124]	@ (800b668 <UTIL_SEQ_WaitEvt+0x88>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800b5ee:	4b1e      	ldr	r3, [pc, #120]	@ (800b668 <UTIL_SEQ_WaitEvt+0x88>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f6:	d102      	bne.n	800b5fe <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	61fb      	str	r3, [r7, #28]
 800b5fc:	e005      	b.n	800b60a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800b5fe:	4b1a      	ldr	r3, [pc, #104]	@ (800b668 <UTIL_SEQ_WaitEvt+0x88>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2201      	movs	r2, #1
 800b604:	fa02 f303 	lsl.w	r3, r2, r3
 800b608:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800b60a:	4b18      	ldr	r3, [pc, #96]	@ (800b66c <UTIL_SEQ_WaitEvt+0x8c>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800b610:	4a16      	ldr	r2, [pc, #88]	@ (800b66c <UTIL_SEQ_WaitEvt+0x8c>)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800b616:	e003      	b.n	800b620 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800b618:	6879      	ldr	r1, [r7, #4]
 800b61a:	69f8      	ldr	r0, [r7, #28]
 800b61c:	f7f6 f8af 	bl	800177e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800b620:	4b13      	ldr	r3, [pc, #76]	@ (800b670 <UTIL_SEQ_WaitEvt+0x90>)
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4013      	ands	r3, r2
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d0f5      	beq.n	800b618 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800b62c:	4a0e      	ldr	r2, [pc, #56]	@ (800b668 <UTIL_SEQ_WaitEvt+0x88>)
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b632:	f3ef 8310 	mrs	r3, PRIMASK
 800b636:	60bb      	str	r3, [r7, #8]
  return(result);
 800b638:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b63a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b63c:	b672      	cpsid	i
}
 800b63e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	43da      	mvns	r2, r3
 800b644:	4b0a      	ldr	r3, [pc, #40]	@ (800b670 <UTIL_SEQ_WaitEvt+0x90>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4013      	ands	r3, r2
 800b64a:	4a09      	ldr	r2, [pc, #36]	@ (800b670 <UTIL_SEQ_WaitEvt+0x90>)
 800b64c:	6013      	str	r3, [r2, #0]
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f383 8810 	msr	PRIMASK, r3
}
 800b658:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800b65a:	4a04      	ldr	r2, [pc, #16]	@ (800b66c <UTIL_SEQ_WaitEvt+0x8c>)
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	6013      	str	r3, [r2, #0]
  return;
 800b660:	bf00      	nop
}
 800b662:	3720      	adds	r7, #32
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	200007fc 	.word	0x200007fc
 800b66c:	200007f8 	.word	0x200007f8
 800b670:	200007f4 	.word	0x200007f4

0800b674 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b674:	b480      	push	{r7}
 800b676:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b678:	bf00      	nop
}
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b682:	b480      	push	{r7}
 800b684:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b686:	bf00      	nop
}
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b698:	2300      	movs	r3, #0
 800b69a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6a6:	d204      	bcs.n	800b6b2 <SEQ_BitPosition+0x22>
 800b6a8:	2310      	movs	r3, #16
 800b6aa:	73fb      	strb	r3, [r7, #15]
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	041b      	lsls	r3, r3, #16
 800b6b0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b6b8:	d205      	bcs.n	800b6c6 <SEQ_BitPosition+0x36>
 800b6ba:	7bfb      	ldrb	r3, [r7, #15]
 800b6bc:	3308      	adds	r3, #8
 800b6be:	73fb      	strb	r3, [r7, #15]
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	021b      	lsls	r3, r3, #8
 800b6c4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6cc:	d205      	bcs.n	800b6da <SEQ_BitPosition+0x4a>
 800b6ce:	7bfb      	ldrb	r3, [r7, #15]
 800b6d0:	3304      	adds	r3, #4
 800b6d2:	73fb      	strb	r3, [r7, #15]
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	011b      	lsls	r3, r3, #4
 800b6d8:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	0f1b      	lsrs	r3, r3, #28
 800b6de:	4a07      	ldr	r2, [pc, #28]	@ (800b6fc <SEQ_BitPosition+0x6c>)
 800b6e0:	5cd2      	ldrb	r2, [r2, r3]
 800b6e2:	7bfb      	ldrb	r3, [r7, #15]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b6e8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ea:	f1c3 031f 	rsb	r3, r3, #31
 800b6ee:	b2db      	uxtb	r3, r3
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr
 800b6fc:	08014624 	.word	0x08014624

0800b700 <acc_rss_hal_register>:
 800b700:	b108      	cbz	r0, 800b706 <acc_rss_hal_register+0x6>
 800b702:	f002 ba77 	b.w	800dbf4 <acc_rss_integration_register_a121>
 800b706:	4770      	bx	lr

0800b708 <acc_rss_get_buffer_size>:
 800b708:	b510      	push	{r4, lr}
 800b70a:	460c      	mov	r4, r1
 800b70c:	f000 fb4c 	bl	800bda8 <acc_config_get_settings>
 800b710:	b158      	cbz	r0, 800b72a <acc_rss_get_buffer_size+0x22>
 800b712:	b124      	cbz	r4, 800b71e <acc_rss_get_buffer_size+0x16>
 800b714:	4621      	mov	r1, r4
 800b716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b71a:	f002 bb4d 	b.w	800ddb8 <acc_pipeline_get_buffer_size>
 800b71e:	4b04      	ldr	r3, [pc, #16]	@ (800b730 <acc_rss_get_buffer_size+0x28>)
 800b720:	4a04      	ldr	r2, [pc, #16]	@ (800b734 <acc_rss_get_buffer_size+0x2c>)
 800b722:	691b      	ldr	r3, [r3, #16]
 800b724:	4904      	ldr	r1, [pc, #16]	@ (800b738 <acc_rss_get_buffer_size+0x30>)
 800b726:	4620      	mov	r0, r4
 800b728:	4798      	blx	r3
 800b72a:	2000      	movs	r0, #0
 800b72c:	bd10      	pop	{r4, pc}
 800b72e:	bf00      	nop
 800b730:	200009ec 	.word	0x200009ec
 800b734:	08014634 	.word	0x08014634
 800b738:	08014650 	.word	0x08014650

0800b73c <acc_config_subsweep_validate.part.0>:
 800b73c:	b508      	push	{r3, lr}
 800b73e:	4b04      	ldr	r3, [pc, #16]	@ (800b750 <acc_config_subsweep_validate.part.0+0x14>)
 800b740:	4a04      	ldr	r2, [pc, #16]	@ (800b754 <acc_config_subsweep_validate.part.0+0x18>)
 800b742:	691b      	ldr	r3, [r3, #16]
 800b744:	4904      	ldr	r1, [pc, #16]	@ (800b758 <acc_config_subsweep_validate.part.0+0x1c>)
 800b746:	2000      	movs	r0, #0
 800b748:	4798      	blx	r3
 800b74a:	2000      	movs	r0, #0
 800b74c:	bd08      	pop	{r3, pc}
 800b74e:	bf00      	nop
 800b750:	200009ec 	.word	0x200009ec
 800b754:	0801465c 	.word	0x0801465c
 800b758:	08014674 	.word	0x08014674

0800b75c <acc_config_log>:
 800b75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b760:	b082      	sub	sp, #8
 800b762:	b120      	cbz	r0, 800b76e <acc_config_log+0x12>
 800b764:	4bbf      	ldr	r3, [pc, #764]	@ (800ba64 <acc_config_log+0x308>)
 800b766:	6802      	ldr	r2, [r0, #0]
 800b768:	429a      	cmp	r2, r3
 800b76a:	4604      	mov	r4, r0
 800b76c:	d008      	beq.n	800b780 <acc_config_log+0x24>
 800b76e:	4bbe      	ldr	r3, [pc, #760]	@ (800ba68 <acc_config_log+0x30c>)
 800b770:	4abe      	ldr	r2, [pc, #760]	@ (800ba6c <acc_config_log+0x310>)
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	49be      	ldr	r1, [pc, #760]	@ (800ba70 <acc_config_log+0x314>)
 800b776:	2000      	movs	r0, #0
 800b778:	b002      	add	sp, #8
 800b77a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b77e:	4718      	bx	r3
 800b780:	f002 faf4 	bl	800dd6c <acc_rss_integration_log_level>
 800b784:	2801      	cmp	r0, #1
 800b786:	d935      	bls.n	800b7f4 <acc_config_log+0x98>
 800b788:	edd4 7a11 	vldr	s15, [r4, #68]	@ 0x44
 800b78c:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 800ba74 <acc_config_log+0x318>
 800b790:	4bb5      	ldr	r3, [pc, #724]	@ (800ba68 <acc_config_log+0x30c>)
 800b792:	ed9f 6ab8 	vldr	s12, [pc, #736]	@ 800ba74 <acc_config_log+0x318>
 800b796:	691d      	ldr	r5, [r3, #16]
 800b798:	eddf 6ab7 	vldr	s13, [pc, #732]	@ 800ba78 <acc_config_log+0x31c>
 800b79c:	49b4      	ldr	r1, [pc, #720]	@ (800ba70 <acc_config_log+0x314>)
 800b79e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a6:	bf48      	it	mi
 800b7a8:	eef1 7a67 	vnegmi.f32	s15, s15
 800b7ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b7b0:	bf4c      	ite	mi
 800b7b2:	4bb2      	ldrmi	r3, [pc, #712]	@ (800ba7c <acc_config_log+0x320>)
 800b7b4:	4bb2      	ldrpl	r3, [pc, #712]	@ (800ba80 <acc_config_log+0x324>)
 800b7b6:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800b7ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c2:	ee17 2a10 	vmov	r2, s14
 800b7c6:	bf4c      	ite	mi
 800b7c8:	eeb1 7a67 	vnegmi.f32	s14, s15
 800b7cc:	eeb0 7a67 	vmovpl.f32	s14, s15
 800b7d0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b7d4:	9200      	str	r2, [sp, #0]
 800b7d6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b7da:	4aaa      	ldr	r2, [pc, #680]	@ (800ba84 <acc_config_log+0x328>)
 800b7dc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b7e0:	2002      	movs	r0, #2
 800b7e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b7e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b7ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7ee:	edcd 7a01 	vstr	s15, [sp, #4]
 800b7f2:	47a8      	blx	r5
 800b7f4:	f002 faba 	bl	800dd6c <acc_rss_integration_log_level>
 800b7f8:	2801      	cmp	r0, #1
 800b7fa:	d935      	bls.n	800b868 <acc_config_log+0x10c>
 800b7fc:	edd4 7a12 	vldr	s15, [r4, #72]	@ 0x48
 800b800:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 800ba74 <acc_config_log+0x318>
 800b804:	4b98      	ldr	r3, [pc, #608]	@ (800ba68 <acc_config_log+0x30c>)
 800b806:	ed9f 6a9b 	vldr	s12, [pc, #620]	@ 800ba74 <acc_config_log+0x318>
 800b80a:	691d      	ldr	r5, [r3, #16]
 800b80c:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 800ba78 <acc_config_log+0x31c>
 800b810:	4997      	ldr	r1, [pc, #604]	@ (800ba70 <acc_config_log+0x314>)
 800b812:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b81a:	bf48      	it	mi
 800b81c:	eef1 7a67 	vnegmi.f32	s15, s15
 800b820:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b824:	bf4c      	ite	mi
 800b826:	4b95      	ldrmi	r3, [pc, #596]	@ (800ba7c <acc_config_log+0x320>)
 800b828:	4b95      	ldrpl	r3, [pc, #596]	@ (800ba80 <acc_config_log+0x324>)
 800b82a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800b82e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b836:	ee17 2a10 	vmov	r2, s14
 800b83a:	bf4c      	ite	mi
 800b83c:	eeb1 7a67 	vnegmi.f32	s14, s15
 800b840:	eeb0 7a67 	vmovpl.f32	s14, s15
 800b844:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b848:	9200      	str	r2, [sp, #0]
 800b84a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b84e:	4a8e      	ldr	r2, [pc, #568]	@ (800ba88 <acc_config_log+0x32c>)
 800b850:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b854:	2002      	movs	r0, #2
 800b856:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b85a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b85e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b862:	edcd 7a01 	vstr	s15, [sp, #4]
 800b866:	47a8      	blx	r5
 800b868:	f002 fa80 	bl	800dd6c <acc_rss_integration_log_level>
 800b86c:	2801      	cmp	r0, #1
 800b86e:	d907      	bls.n	800b880 <acc_config_log+0x124>
 800b870:	4a7d      	ldr	r2, [pc, #500]	@ (800ba68 <acc_config_log+0x30c>)
 800b872:	f8b4 304c 	ldrh.w	r3, [r4, #76]	@ 0x4c
 800b876:	6915      	ldr	r5, [r2, #16]
 800b878:	497d      	ldr	r1, [pc, #500]	@ (800ba70 <acc_config_log+0x314>)
 800b87a:	4a84      	ldr	r2, [pc, #528]	@ (800ba8c <acc_config_log+0x330>)
 800b87c:	2002      	movs	r0, #2
 800b87e:	47a8      	blx	r5
 800b880:	f002 fa74 	bl	800dd6c <acc_rss_integration_log_level>
 800b884:	2801      	cmp	r0, #1
 800b886:	f200 80e0 	bhi.w	800ba4a <acc_config_log+0x2ee>
 800b88a:	f002 fa6f 	bl	800dd6c <acc_rss_integration_log_level>
 800b88e:	2801      	cmp	r0, #1
 800b890:	f200 80c3 	bhi.w	800ba1a <acc_config_log+0x2be>
 800b894:	f002 fa6a 	bl	800dd6c <acc_rss_integration_log_level>
 800b898:	2801      	cmp	r0, #1
 800b89a:	f200 80b2 	bhi.w	800ba02 <acc_config_log+0x2a6>
 800b89e:	f002 fa65 	bl	800dd6c <acc_rss_integration_log_level>
 800b8a2:	2801      	cmp	r0, #1
 800b8a4:	f200 80c5 	bhi.w	800ba32 <acc_config_log+0x2d6>
 800b8a8:	f002 fa60 	bl	800dd6c <acc_rss_integration_log_level>
 800b8ac:	2801      	cmp	r0, #1
 800b8ae:	d907      	bls.n	800b8c0 <acc_config_log+0x164>
 800b8b0:	4a6d      	ldr	r2, [pc, #436]	@ (800ba68 <acc_config_log+0x30c>)
 800b8b2:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 800b8b6:	6915      	ldr	r5, [r2, #16]
 800b8b8:	496d      	ldr	r1, [pc, #436]	@ (800ba70 <acc_config_log+0x314>)
 800b8ba:	4a75      	ldr	r2, [pc, #468]	@ (800ba90 <acc_config_log+0x334>)
 800b8bc:	2002      	movs	r0, #2
 800b8be:	47a8      	blx	r5
 800b8c0:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	f000 8099 	beq.w	800b9fc <acc_config_log+0x2a0>
 800b8ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ba68 <acc_config_log+0x30c>
 800b8ce:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 800bacc <acc_config_log+0x370>
 800b8d2:	4e67      	ldr	r6, [pc, #412]	@ (800ba70 <acc_config_log+0x314>)
 800b8d4:	4625      	mov	r5, r4
 800b8d6:	f04f 0900 	mov.w	r9, #0
 800b8da:	f002 fa47 	bl	800dd6c <acc_rss_integration_log_level>
 800b8de:	2801      	cmp	r0, #1
 800b8e0:	d906      	bls.n	800b8f0 <acc_config_log+0x194>
 800b8e2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b8e6:	464b      	mov	r3, r9
 800b8e8:	4652      	mov	r2, sl
 800b8ea:	4631      	mov	r1, r6
 800b8ec:	2002      	movs	r0, #2
 800b8ee:	47b8      	blx	r7
 800b8f0:	f002 fa3c 	bl	800dd6c <acc_rss_integration_log_level>
 800b8f4:	2801      	cmp	r0, #1
 800b8f6:	d906      	bls.n	800b906 <acc_config_log+0x1aa>
 800b8f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b8fc:	686b      	ldr	r3, [r5, #4]
 800b8fe:	4a65      	ldr	r2, [pc, #404]	@ (800ba94 <acc_config_log+0x338>)
 800b900:	4631      	mov	r1, r6
 800b902:	2002      	movs	r0, #2
 800b904:	47b8      	blx	r7
 800b906:	f002 fa31 	bl	800dd6c <acc_rss_integration_log_level>
 800b90a:	2801      	cmp	r0, #1
 800b90c:	d906      	bls.n	800b91c <acc_config_log+0x1c0>
 800b90e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b912:	892b      	ldrh	r3, [r5, #8]
 800b914:	4a60      	ldr	r2, [pc, #384]	@ (800ba98 <acc_config_log+0x33c>)
 800b916:	4631      	mov	r1, r6
 800b918:	2002      	movs	r0, #2
 800b91a:	47b8      	blx	r7
 800b91c:	f002 fa26 	bl	800dd6c <acc_rss_integration_log_level>
 800b920:	2801      	cmp	r0, #1
 800b922:	d906      	bls.n	800b932 <acc_config_log+0x1d6>
 800b924:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b928:	896b      	ldrh	r3, [r5, #10]
 800b92a:	4a5c      	ldr	r2, [pc, #368]	@ (800ba9c <acc_config_log+0x340>)
 800b92c:	4631      	mov	r1, r6
 800b92e:	2002      	movs	r0, #2
 800b930:	47b8      	blx	r7
 800b932:	f002 fa1b 	bl	800dd6c <acc_rss_integration_log_level>
 800b936:	2801      	cmp	r0, #1
 800b938:	d906      	bls.n	800b948 <acc_config_log+0x1ec>
 800b93a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b93e:	89ab      	ldrh	r3, [r5, #12]
 800b940:	4a57      	ldr	r2, [pc, #348]	@ (800baa0 <acc_config_log+0x344>)
 800b942:	4631      	mov	r1, r6
 800b944:	2002      	movs	r0, #2
 800b946:	47b8      	blx	r7
 800b948:	f002 fa10 	bl	800dd6c <acc_rss_integration_log_level>
 800b94c:	2801      	cmp	r0, #1
 800b94e:	d906      	bls.n	800b95e <acc_config_log+0x202>
 800b950:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b954:	7bab      	ldrb	r3, [r5, #14]
 800b956:	4a53      	ldr	r2, [pc, #332]	@ (800baa4 <acc_config_log+0x348>)
 800b958:	4631      	mov	r1, r6
 800b95a:	2002      	movs	r0, #2
 800b95c:	47b8      	blx	r7
 800b95e:	f002 fa05 	bl	800dd6c <acc_rss_integration_log_level>
 800b962:	2801      	cmp	r0, #1
 800b964:	d909      	bls.n	800b97a <acc_config_log+0x21e>
 800b966:	7be8      	ldrb	r0, [r5, #15]
 800b968:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b96c:	f004 fcca 	bl	8010304 <acc_utils_bool_to_str>
 800b970:	4a4d      	ldr	r2, [pc, #308]	@ (800baa8 <acc_config_log+0x34c>)
 800b972:	4603      	mov	r3, r0
 800b974:	4631      	mov	r1, r6
 800b976:	2002      	movs	r0, #2
 800b978:	47b8      	blx	r7
 800b97a:	f002 f9f7 	bl	800dd6c <acc_rss_integration_log_level>
 800b97e:	2801      	cmp	r0, #1
 800b980:	d909      	bls.n	800b996 <acc_config_log+0x23a>
 800b982:	7c28      	ldrb	r0, [r5, #16]
 800b984:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b988:	f004 fcbc 	bl	8010304 <acc_utils_bool_to_str>
 800b98c:	4a47      	ldr	r2, [pc, #284]	@ (800baac <acc_config_log+0x350>)
 800b98e:	4603      	mov	r3, r0
 800b990:	4631      	mov	r1, r6
 800b992:	2002      	movs	r0, #2
 800b994:	47b8      	blx	r7
 800b996:	f002 f9e9 	bl	800dd6c <acc_rss_integration_log_level>
 800b99a:	2801      	cmp	r0, #1
 800b99c:	d909      	bls.n	800b9b2 <acc_config_log+0x256>
 800b99e:	7c68      	ldrb	r0, [r5, #17]
 800b9a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b9a4:	f004 fcae 	bl	8010304 <acc_utils_bool_to_str>
 800b9a8:	4a41      	ldr	r2, [pc, #260]	@ (800bab0 <acc_config_log+0x354>)
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	4631      	mov	r1, r6
 800b9ae:	2002      	movs	r0, #2
 800b9b0:	47b8      	blx	r7
 800b9b2:	f002 f9db 	bl	800dd6c <acc_rss_integration_log_level>
 800b9b6:	2801      	cmp	r0, #1
 800b9b8:	d909      	bls.n	800b9ce <acc_config_log+0x272>
 800b9ba:	7ce8      	ldrb	r0, [r5, #19]
 800b9bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b9c0:	f004 fcb8 	bl	8010334 <acc_utils_profile_to_str>
 800b9c4:	4a3b      	ldr	r2, [pc, #236]	@ (800bab4 <acc_config_log+0x358>)
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	4631      	mov	r1, r6
 800b9ca:	2002      	movs	r0, #2
 800b9cc:	47b8      	blx	r7
 800b9ce:	f002 f9cd 	bl	800dd6c <acc_rss_integration_log_level>
 800b9d2:	2801      	cmp	r0, #1
 800b9d4:	d909      	bls.n	800b9ea <acc_config_log+0x28e>
 800b9d6:	7ca8      	ldrb	r0, [r5, #18]
 800b9d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b9dc:	f004 fcb8 	bl	8010350 <acc_utils_prf_to_str>
 800b9e0:	4a35      	ldr	r2, [pc, #212]	@ (800bab8 <acc_config_log+0x35c>)
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	4631      	mov	r1, r6
 800b9e6:	2002      	movs	r0, #2
 800b9e8:	47b8      	blx	r7
 800b9ea:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 800b9ee:	f109 0901 	add.w	r9, r9, #1
 800b9f2:	454b      	cmp	r3, r9
 800b9f4:	f105 0510 	add.w	r5, r5, #16
 800b9f8:	f63f af6f 	bhi.w	800b8da <acc_config_log+0x17e>
 800b9fc:	b002      	add	sp, #8
 800b9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba02:	4b19      	ldr	r3, [pc, #100]	@ (800ba68 <acc_config_log+0x30c>)
 800ba04:	f894 0053 	ldrb.w	r0, [r4, #83]	@ 0x53
 800ba08:	691d      	ldr	r5, [r3, #16]
 800ba0a:	f004 fc87 	bl	801031c <acc_utils_idle_state_to_str>
 800ba0e:	4a2b      	ldr	r2, [pc, #172]	@ (800babc <acc_config_log+0x360>)
 800ba10:	4917      	ldr	r1, [pc, #92]	@ (800ba70 <acc_config_log+0x314>)
 800ba12:	4603      	mov	r3, r0
 800ba14:	2002      	movs	r0, #2
 800ba16:	47a8      	blx	r5
 800ba18:	e741      	b.n	800b89e <acc_config_log+0x142>
 800ba1a:	4b13      	ldr	r3, [pc, #76]	@ (800ba68 <acc_config_log+0x30c>)
 800ba1c:	f894 004f 	ldrb.w	r0, [r4, #79]	@ 0x4f
 800ba20:	691d      	ldr	r5, [r3, #16]
 800ba22:	f004 fc6f 	bl	8010304 <acc_utils_bool_to_str>
 800ba26:	4a26      	ldr	r2, [pc, #152]	@ (800bac0 <acc_config_log+0x364>)
 800ba28:	4911      	ldr	r1, [pc, #68]	@ (800ba70 <acc_config_log+0x314>)
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2002      	movs	r0, #2
 800ba2e:	47a8      	blx	r5
 800ba30:	e730      	b.n	800b894 <acc_config_log+0x138>
 800ba32:	4b0d      	ldr	r3, [pc, #52]	@ (800ba68 <acc_config_log+0x30c>)
 800ba34:	f894 0054 	ldrb.w	r0, [r4, #84]	@ 0x54
 800ba38:	691d      	ldr	r5, [r3, #16]
 800ba3a:	f004 fc6f 	bl	801031c <acc_utils_idle_state_to_str>
 800ba3e:	4a21      	ldr	r2, [pc, #132]	@ (800bac4 <acc_config_log+0x368>)
 800ba40:	490b      	ldr	r1, [pc, #44]	@ (800ba70 <acc_config_log+0x314>)
 800ba42:	4603      	mov	r3, r0
 800ba44:	2002      	movs	r0, #2
 800ba46:	47a8      	blx	r5
 800ba48:	e72e      	b.n	800b8a8 <acc_config_log+0x14c>
 800ba4a:	4b07      	ldr	r3, [pc, #28]	@ (800ba68 <acc_config_log+0x30c>)
 800ba4c:	f894 004e 	ldrb.w	r0, [r4, #78]	@ 0x4e
 800ba50:	691d      	ldr	r5, [r3, #16]
 800ba52:	f004 fc57 	bl	8010304 <acc_utils_bool_to_str>
 800ba56:	4a1c      	ldr	r2, [pc, #112]	@ (800bac8 <acc_config_log+0x36c>)
 800ba58:	4905      	ldr	r1, [pc, #20]	@ (800ba70 <acc_config_log+0x314>)
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2002      	movs	r0, #2
 800ba5e:	47a8      	blx	r5
 800ba60:	e713      	b.n	800b88a <acc_config_log+0x12e>
 800ba62:	bf00      	nop
 800ba64:	1337b00f 	.word	0x1337b00f
 800ba68:	200009ec 	.word	0x200009ec
 800ba6c:	0801467c 	.word	0x0801467c
 800ba70:	08014674 	.word	0x08014674
 800ba74:	350637bd 	.word	0x350637bd
 800ba78:	49742400 	.word	0x49742400
 800ba7c:	08015500 	.word	0x08015500
 800ba80:	080150f8 	.word	0x080150f8
 800ba84:	08014694 	.word	0x08014694
 800ba88:	080146ac 	.word	0x080146ac
 800ba8c:	080146c4 	.word	0x080146c4
 800ba90:	08014748 	.word	0x08014748
 800ba94:	0801476c 	.word	0x0801476c
 800ba98:	08014788 	.word	0x08014788
 800ba9c:	080147a4 	.word	0x080147a4
 800baa0:	080147c0 	.word	0x080147c0
 800baa4:	080147dc 	.word	0x080147dc
 800baa8:	080147f8 	.word	0x080147f8
 800baac:	08014814 	.word	0x08014814
 800bab0:	08014830 	.word	0x08014830
 800bab4:	0801484c 	.word	0x0801484c
 800bab8:	08014868 	.word	0x08014868
 800babc:	08014710 	.word	0x08014710
 800bac0:	080146f8 	.word	0x080146f8
 800bac4:	0801472c 	.word	0x0801472c
 800bac8:	080146dc 	.word	0x080146dc
 800bacc:	0801475c 	.word	0x0801475c

0800bad0 <acc_config_create>:
 800bad0:	b510      	push	{r4, lr}
 800bad2:	4a08      	ldr	r2, [pc, #32]	@ (800baf4 <acc_config_create+0x24>)
 800bad4:	2356      	movs	r3, #86	@ 0x56
 800bad6:	215c      	movs	r1, #92	@ 0x5c
 800bad8:	2001      	movs	r0, #1
 800bada:	f002 f917 	bl	800dd0c <acc_rss_integration_mem_calloc_debug>
 800bade:	4604      	mov	r4, r0
 800bae0:	b130      	cbz	r0, 800baf0 <acc_config_create+0x20>
 800bae2:	4b05      	ldr	r3, [pc, #20]	@ (800baf8 <acc_config_create+0x28>)
 800bae4:	f840 3b04 	str.w	r3, [r0], #4
 800bae8:	4904      	ldr	r1, [pc, #16]	@ (800bafc <acc_config_create+0x2c>)
 800baea:	2258      	movs	r2, #88	@ 0x58
 800baec:	f006 fa9b 	bl	8012026 <memcpy>
 800baf0:	4620      	mov	r0, r4
 800baf2:	bd10      	pop	{r4, pc}
 800baf4:	08014674 	.word	0x08014674
 800baf8:	1337b00f 	.word	0x1337b00f
 800bafc:	08014884 	.word	0x08014884

0800bb00 <acc_config_destroy>:
 800bb00:	b118      	cbz	r0, 800bb0a <acc_config_destroy+0xa>
 800bb02:	4a07      	ldr	r2, [pc, #28]	@ (800bb20 <acc_config_destroy+0x20>)
 800bb04:	6801      	ldr	r1, [r0, #0]
 800bb06:	4291      	cmp	r1, r2
 800bb08:	d005      	beq.n	800bb16 <acc_config_destroy+0x16>
 800bb0a:	4b06      	ldr	r3, [pc, #24]	@ (800bb24 <acc_config_destroy+0x24>)
 800bb0c:	4a06      	ldr	r2, [pc, #24]	@ (800bb28 <acc_config_destroy+0x28>)
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	4906      	ldr	r1, [pc, #24]	@ (800bb2c <acc_config_destroy+0x2c>)
 800bb12:	2000      	movs	r0, #0
 800bb14:	4718      	bx	r3
 800bb16:	2200      	movs	r2, #0
 800bb18:	6002      	str	r2, [r0, #0]
 800bb1a:	f002 b913 	b.w	800dd44 <acc_rss_integration_mem_free>
 800bb1e:	bf00      	nop
 800bb20:	1337b00f 	.word	0x1337b00f
 800bb24:	200009ec 	.word	0x200009ec
 800bb28:	0801467c 	.word	0x0801467c
 800bb2c:	08014674 	.word	0x08014674

0800bb30 <acc_config_subsweep_start_point_set>:
 800bb30:	b570      	push	{r4, r5, r6, lr}
 800bb32:	b120      	cbz	r0, 800bb3e <acc_config_subsweep_start_point_set+0xe>
 800bb34:	4b0b      	ldr	r3, [pc, #44]	@ (800bb64 <acc_config_subsweep_start_point_set+0x34>)
 800bb36:	4604      	mov	r4, r0
 800bb38:	6800      	ldr	r0, [r0, #0]
 800bb3a:	4298      	cmp	r0, r3
 800bb3c:	d007      	beq.n	800bb4e <acc_config_subsweep_start_point_set+0x1e>
 800bb3e:	4b0a      	ldr	r3, [pc, #40]	@ (800bb68 <acc_config_subsweep_start_point_set+0x38>)
 800bb40:	4a0a      	ldr	r2, [pc, #40]	@ (800bb6c <acc_config_subsweep_start_point_set+0x3c>)
 800bb42:	691b      	ldr	r3, [r3, #16]
 800bb44:	490a      	ldr	r1, [pc, #40]	@ (800bb70 <acc_config_subsweep_start_point_set+0x40>)
 800bb46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb4a:	2000      	movs	r0, #0
 800bb4c:	4718      	bx	r3
 800bb4e:	2a03      	cmp	r2, #3
 800bb50:	460d      	mov	r5, r1
 800bb52:	4616      	mov	r6, r2
 800bb54:	d902      	bls.n	800bb5c <acc_config_subsweep_start_point_set+0x2c>
 800bb56:	f7ff fdf1 	bl	800b73c <acc_config_subsweep_validate.part.0>
 800bb5a:	b110      	cbz	r0, 800bb62 <acc_config_subsweep_start_point_set+0x32>
 800bb5c:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800bb60:	6065      	str	r5, [r4, #4]
 800bb62:	bd70      	pop	{r4, r5, r6, pc}
 800bb64:	1337b00f 	.word	0x1337b00f
 800bb68:	200009ec 	.word	0x200009ec
 800bb6c:	0801467c 	.word	0x0801467c
 800bb70:	08014674 	.word	0x08014674

0800bb74 <acc_config_subsweep_num_points_set>:
 800bb74:	b570      	push	{r4, r5, r6, lr}
 800bb76:	b120      	cbz	r0, 800bb82 <acc_config_subsweep_num_points_set+0xe>
 800bb78:	4b0b      	ldr	r3, [pc, #44]	@ (800bba8 <acc_config_subsweep_num_points_set+0x34>)
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	6800      	ldr	r0, [r0, #0]
 800bb7e:	4298      	cmp	r0, r3
 800bb80:	d007      	beq.n	800bb92 <acc_config_subsweep_num_points_set+0x1e>
 800bb82:	4b0a      	ldr	r3, [pc, #40]	@ (800bbac <acc_config_subsweep_num_points_set+0x38>)
 800bb84:	4a0a      	ldr	r2, [pc, #40]	@ (800bbb0 <acc_config_subsweep_num_points_set+0x3c>)
 800bb86:	691b      	ldr	r3, [r3, #16]
 800bb88:	490a      	ldr	r1, [pc, #40]	@ (800bbb4 <acc_config_subsweep_num_points_set+0x40>)
 800bb8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb8e:	2000      	movs	r0, #0
 800bb90:	4718      	bx	r3
 800bb92:	2a03      	cmp	r2, #3
 800bb94:	460d      	mov	r5, r1
 800bb96:	4616      	mov	r6, r2
 800bb98:	d902      	bls.n	800bba0 <acc_config_subsweep_num_points_set+0x2c>
 800bb9a:	f7ff fdcf 	bl	800b73c <acc_config_subsweep_validate.part.0>
 800bb9e:	b110      	cbz	r0, 800bba6 <acc_config_subsweep_num_points_set+0x32>
 800bba0:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800bba4:	8125      	strh	r5, [r4, #8]
 800bba6:	bd70      	pop	{r4, r5, r6, pc}
 800bba8:	1337b00f 	.word	0x1337b00f
 800bbac:	200009ec 	.word	0x200009ec
 800bbb0:	0801467c 	.word	0x0801467c
 800bbb4:	08014674 	.word	0x08014674

0800bbb8 <acc_config_subsweep_step_length_set>:
 800bbb8:	b570      	push	{r4, r5, r6, lr}
 800bbba:	b120      	cbz	r0, 800bbc6 <acc_config_subsweep_step_length_set+0xe>
 800bbbc:	4b0b      	ldr	r3, [pc, #44]	@ (800bbec <acc_config_subsweep_step_length_set+0x34>)
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	6800      	ldr	r0, [r0, #0]
 800bbc2:	4298      	cmp	r0, r3
 800bbc4:	d007      	beq.n	800bbd6 <acc_config_subsweep_step_length_set+0x1e>
 800bbc6:	4b0a      	ldr	r3, [pc, #40]	@ (800bbf0 <acc_config_subsweep_step_length_set+0x38>)
 800bbc8:	4a0a      	ldr	r2, [pc, #40]	@ (800bbf4 <acc_config_subsweep_step_length_set+0x3c>)
 800bbca:	691b      	ldr	r3, [r3, #16]
 800bbcc:	490a      	ldr	r1, [pc, #40]	@ (800bbf8 <acc_config_subsweep_step_length_set+0x40>)
 800bbce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bbd2:	2000      	movs	r0, #0
 800bbd4:	4718      	bx	r3
 800bbd6:	2a03      	cmp	r2, #3
 800bbd8:	460d      	mov	r5, r1
 800bbda:	4616      	mov	r6, r2
 800bbdc:	d902      	bls.n	800bbe4 <acc_config_subsweep_step_length_set+0x2c>
 800bbde:	f7ff fdad 	bl	800b73c <acc_config_subsweep_validate.part.0>
 800bbe2:	b110      	cbz	r0, 800bbea <acc_config_subsweep_step_length_set+0x32>
 800bbe4:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800bbe8:	8165      	strh	r5, [r4, #10]
 800bbea:	bd70      	pop	{r4, r5, r6, pc}
 800bbec:	1337b00f 	.word	0x1337b00f
 800bbf0:	200009ec 	.word	0x200009ec
 800bbf4:	0801467c 	.word	0x0801467c
 800bbf8:	08014674 	.word	0x08014674

0800bbfc <acc_config_subsweep_profile_set>:
 800bbfc:	b570      	push	{r4, r5, r6, lr}
 800bbfe:	b120      	cbz	r0, 800bc0a <acc_config_subsweep_profile_set+0xe>
 800bc00:	4b0b      	ldr	r3, [pc, #44]	@ (800bc30 <acc_config_subsweep_profile_set+0x34>)
 800bc02:	4604      	mov	r4, r0
 800bc04:	6800      	ldr	r0, [r0, #0]
 800bc06:	4298      	cmp	r0, r3
 800bc08:	d007      	beq.n	800bc1a <acc_config_subsweep_profile_set+0x1e>
 800bc0a:	4b0a      	ldr	r3, [pc, #40]	@ (800bc34 <acc_config_subsweep_profile_set+0x38>)
 800bc0c:	4a0a      	ldr	r2, [pc, #40]	@ (800bc38 <acc_config_subsweep_profile_set+0x3c>)
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	490a      	ldr	r1, [pc, #40]	@ (800bc3c <acc_config_subsweep_profile_set+0x40>)
 800bc12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc16:	2000      	movs	r0, #0
 800bc18:	4718      	bx	r3
 800bc1a:	2a03      	cmp	r2, #3
 800bc1c:	460d      	mov	r5, r1
 800bc1e:	4616      	mov	r6, r2
 800bc20:	d902      	bls.n	800bc28 <acc_config_subsweep_profile_set+0x2c>
 800bc22:	f7ff fd8b 	bl	800b73c <acc_config_subsweep_validate.part.0>
 800bc26:	b110      	cbz	r0, 800bc2e <acc_config_subsweep_profile_set+0x32>
 800bc28:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800bc2c:	74e5      	strb	r5, [r4, #19]
 800bc2e:	bd70      	pop	{r4, r5, r6, pc}
 800bc30:	1337b00f 	.word	0x1337b00f
 800bc34:	200009ec 	.word	0x200009ec
 800bc38:	0801467c 	.word	0x0801467c
 800bc3c:	08014674 	.word	0x08014674

0800bc40 <acc_config_subsweep_hwaas_set>:
 800bc40:	b570      	push	{r4, r5, r6, lr}
 800bc42:	b120      	cbz	r0, 800bc4e <acc_config_subsweep_hwaas_set+0xe>
 800bc44:	4b0b      	ldr	r3, [pc, #44]	@ (800bc74 <acc_config_subsweep_hwaas_set+0x34>)
 800bc46:	4604      	mov	r4, r0
 800bc48:	6800      	ldr	r0, [r0, #0]
 800bc4a:	4298      	cmp	r0, r3
 800bc4c:	d007      	beq.n	800bc5e <acc_config_subsweep_hwaas_set+0x1e>
 800bc4e:	4b0a      	ldr	r3, [pc, #40]	@ (800bc78 <acc_config_subsweep_hwaas_set+0x38>)
 800bc50:	4a0a      	ldr	r2, [pc, #40]	@ (800bc7c <acc_config_subsweep_hwaas_set+0x3c>)
 800bc52:	691b      	ldr	r3, [r3, #16]
 800bc54:	490a      	ldr	r1, [pc, #40]	@ (800bc80 <acc_config_subsweep_hwaas_set+0x40>)
 800bc56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	4718      	bx	r3
 800bc5e:	2a03      	cmp	r2, #3
 800bc60:	460d      	mov	r5, r1
 800bc62:	4616      	mov	r6, r2
 800bc64:	d902      	bls.n	800bc6c <acc_config_subsweep_hwaas_set+0x2c>
 800bc66:	f7ff fd69 	bl	800b73c <acc_config_subsweep_validate.part.0>
 800bc6a:	b110      	cbz	r0, 800bc72 <acc_config_subsweep_hwaas_set+0x32>
 800bc6c:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800bc70:	81a5      	strh	r5, [r4, #12]
 800bc72:	bd70      	pop	{r4, r5, r6, pc}
 800bc74:	1337b00f 	.word	0x1337b00f
 800bc78:	200009ec 	.word	0x200009ec
 800bc7c:	0801467c 	.word	0x0801467c
 800bc80:	08014674 	.word	0x08014674

0800bc84 <acc_config_subsweep_phase_enhancement_set>:
 800bc84:	b570      	push	{r4, r5, r6, lr}
 800bc86:	b120      	cbz	r0, 800bc92 <acc_config_subsweep_phase_enhancement_set+0xe>
 800bc88:	4b0b      	ldr	r3, [pc, #44]	@ (800bcb8 <acc_config_subsweep_phase_enhancement_set+0x34>)
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	6800      	ldr	r0, [r0, #0]
 800bc8e:	4298      	cmp	r0, r3
 800bc90:	d007      	beq.n	800bca2 <acc_config_subsweep_phase_enhancement_set+0x1e>
 800bc92:	4b0a      	ldr	r3, [pc, #40]	@ (800bcbc <acc_config_subsweep_phase_enhancement_set+0x38>)
 800bc94:	4a0a      	ldr	r2, [pc, #40]	@ (800bcc0 <acc_config_subsweep_phase_enhancement_set+0x3c>)
 800bc96:	691b      	ldr	r3, [r3, #16]
 800bc98:	490a      	ldr	r1, [pc, #40]	@ (800bcc4 <acc_config_subsweep_phase_enhancement_set+0x40>)
 800bc9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc9e:	2000      	movs	r0, #0
 800bca0:	4718      	bx	r3
 800bca2:	2a03      	cmp	r2, #3
 800bca4:	460d      	mov	r5, r1
 800bca6:	4616      	mov	r6, r2
 800bca8:	d902      	bls.n	800bcb0 <acc_config_subsweep_phase_enhancement_set+0x2c>
 800bcaa:	f7ff fd47 	bl	800b73c <acc_config_subsweep_validate.part.0>
 800bcae:	b110      	cbz	r0, 800bcb6 <acc_config_subsweep_phase_enhancement_set+0x32>
 800bcb0:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800bcb4:	7425      	strb	r5, [r4, #16]
 800bcb6:	bd70      	pop	{r4, r5, r6, pc}
 800bcb8:	1337b00f 	.word	0x1337b00f
 800bcbc:	200009ec 	.word	0x200009ec
 800bcc0:	0801467c 	.word	0x0801467c
 800bcc4:	08014674 	.word	0x08014674

0800bcc8 <acc_config_start_point_set>:
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f7ff bf31 	b.w	800bb30 <acc_config_subsweep_start_point_set>
 800bcce:	bf00      	nop

0800bcd0 <acc_config_num_points_set>:
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	f7ff bf4f 	b.w	800bb74 <acc_config_subsweep_num_points_set>
 800bcd6:	bf00      	nop

0800bcd8 <acc_config_step_length_set>:
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f7ff bf6d 	b.w	800bbb8 <acc_config_subsweep_step_length_set>
 800bcde:	bf00      	nop

0800bce0 <acc_config_profile_set>:
 800bce0:	2200      	movs	r2, #0
 800bce2:	f7ff bf8b 	b.w	800bbfc <acc_config_subsweep_profile_set>
 800bce6:	bf00      	nop

0800bce8 <acc_config_hwaas_set>:
 800bce8:	2200      	movs	r2, #0
 800bcea:	f7ff bfa9 	b.w	800bc40 <acc_config_subsweep_hwaas_set>
 800bcee:	bf00      	nop

0800bcf0 <acc_config_phase_enhancement_set>:
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f7ff bfc7 	b.w	800bc84 <acc_config_subsweep_phase_enhancement_set>
 800bcf6:	bf00      	nop

0800bcf8 <acc_config_sweep_rate_set>:
 800bcf8:	b118      	cbz	r0, 800bd02 <acc_config_sweep_rate_set+0xa>
 800bcfa:	4b06      	ldr	r3, [pc, #24]	@ (800bd14 <acc_config_sweep_rate_set+0x1c>)
 800bcfc:	6802      	ldr	r2, [r0, #0]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d005      	beq.n	800bd0e <acc_config_sweep_rate_set+0x16>
 800bd02:	4b05      	ldr	r3, [pc, #20]	@ (800bd18 <acc_config_sweep_rate_set+0x20>)
 800bd04:	4a05      	ldr	r2, [pc, #20]	@ (800bd1c <acc_config_sweep_rate_set+0x24>)
 800bd06:	691b      	ldr	r3, [r3, #16]
 800bd08:	4905      	ldr	r1, [pc, #20]	@ (800bd20 <acc_config_sweep_rate_set+0x28>)
 800bd0a:	2000      	movs	r0, #0
 800bd0c:	4718      	bx	r3
 800bd0e:	ed80 0a11 	vstr	s0, [r0, #68]	@ 0x44
 800bd12:	4770      	bx	lr
 800bd14:	1337b00f 	.word	0x1337b00f
 800bd18:	200009ec 	.word	0x200009ec
 800bd1c:	0801467c 	.word	0x0801467c
 800bd20:	08014674 	.word	0x08014674

0800bd24 <acc_config_continuous_sweep_mode_set>:
 800bd24:	b118      	cbz	r0, 800bd2e <acc_config_continuous_sweep_mode_set+0xa>
 800bd26:	4b06      	ldr	r3, [pc, #24]	@ (800bd40 <acc_config_continuous_sweep_mode_set+0x1c>)
 800bd28:	6802      	ldr	r2, [r0, #0]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d005      	beq.n	800bd3a <acc_config_continuous_sweep_mode_set+0x16>
 800bd2e:	4b05      	ldr	r3, [pc, #20]	@ (800bd44 <acc_config_continuous_sweep_mode_set+0x20>)
 800bd30:	4a05      	ldr	r2, [pc, #20]	@ (800bd48 <acc_config_continuous_sweep_mode_set+0x24>)
 800bd32:	691b      	ldr	r3, [r3, #16]
 800bd34:	4905      	ldr	r1, [pc, #20]	@ (800bd4c <acc_config_continuous_sweep_mode_set+0x28>)
 800bd36:	2000      	movs	r0, #0
 800bd38:	4718      	bx	r3
 800bd3a:	f880 104e 	strb.w	r1, [r0, #78]	@ 0x4e
 800bd3e:	4770      	bx	lr
 800bd40:	1337b00f 	.word	0x1337b00f
 800bd44:	200009ec 	.word	0x200009ec
 800bd48:	0801467c 	.word	0x0801467c
 800bd4c:	08014674 	.word	0x08014674

0800bd50 <acc_config_inter_frame_idle_state_set>:
 800bd50:	b118      	cbz	r0, 800bd5a <acc_config_inter_frame_idle_state_set+0xa>
 800bd52:	4b06      	ldr	r3, [pc, #24]	@ (800bd6c <acc_config_inter_frame_idle_state_set+0x1c>)
 800bd54:	6802      	ldr	r2, [r0, #0]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d005      	beq.n	800bd66 <acc_config_inter_frame_idle_state_set+0x16>
 800bd5a:	4b05      	ldr	r3, [pc, #20]	@ (800bd70 <acc_config_inter_frame_idle_state_set+0x20>)
 800bd5c:	4a05      	ldr	r2, [pc, #20]	@ (800bd74 <acc_config_inter_frame_idle_state_set+0x24>)
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	4905      	ldr	r1, [pc, #20]	@ (800bd78 <acc_config_inter_frame_idle_state_set+0x28>)
 800bd62:	2000      	movs	r0, #0
 800bd64:	4718      	bx	r3
 800bd66:	f880 1053 	strb.w	r1, [r0, #83]	@ 0x53
 800bd6a:	4770      	bx	lr
 800bd6c:	1337b00f 	.word	0x1337b00f
 800bd70:	200009ec 	.word	0x200009ec
 800bd74:	0801467c 	.word	0x0801467c
 800bd78:	08014674 	.word	0x08014674

0800bd7c <acc_config_inter_sweep_idle_state_set>:
 800bd7c:	b118      	cbz	r0, 800bd86 <acc_config_inter_sweep_idle_state_set+0xa>
 800bd7e:	4b06      	ldr	r3, [pc, #24]	@ (800bd98 <acc_config_inter_sweep_idle_state_set+0x1c>)
 800bd80:	6802      	ldr	r2, [r0, #0]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d005      	beq.n	800bd92 <acc_config_inter_sweep_idle_state_set+0x16>
 800bd86:	4b05      	ldr	r3, [pc, #20]	@ (800bd9c <acc_config_inter_sweep_idle_state_set+0x20>)
 800bd88:	4a05      	ldr	r2, [pc, #20]	@ (800bda0 <acc_config_inter_sweep_idle_state_set+0x24>)
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	4905      	ldr	r1, [pc, #20]	@ (800bda4 <acc_config_inter_sweep_idle_state_set+0x28>)
 800bd8e:	2000      	movs	r0, #0
 800bd90:	4718      	bx	r3
 800bd92:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 800bd96:	4770      	bx	lr
 800bd98:	1337b00f 	.word	0x1337b00f
 800bd9c:	200009ec 	.word	0x200009ec
 800bda0:	0801467c 	.word	0x0801467c
 800bda4:	08014674 	.word	0x08014674

0800bda8 <acc_config_get_settings>:
 800bda8:	b508      	push	{r3, lr}
 800bdaa:	b118      	cbz	r0, 800bdb4 <acc_config_get_settings+0xc>
 800bdac:	4b06      	ldr	r3, [pc, #24]	@ (800bdc8 <acc_config_get_settings+0x20>)
 800bdae:	6802      	ldr	r2, [r0, #0]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d007      	beq.n	800bdc4 <acc_config_get_settings+0x1c>
 800bdb4:	4b05      	ldr	r3, [pc, #20]	@ (800bdcc <acc_config_get_settings+0x24>)
 800bdb6:	4a06      	ldr	r2, [pc, #24]	@ (800bdd0 <acc_config_get_settings+0x28>)
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	4906      	ldr	r1, [pc, #24]	@ (800bdd4 <acc_config_get_settings+0x2c>)
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	4798      	blx	r3
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	bd08      	pop	{r3, pc}
 800bdc4:	3004      	adds	r0, #4
 800bdc6:	bd08      	pop	{r3, pc}
 800bdc8:	1337b00f 	.word	0x1337b00f
 800bdcc:	200009ec 	.word	0x200009ec
 800bdd0:	0801467c 	.word	0x0801467c
 800bdd4:	08014674 	.word	0x08014674

0800bdd8 <acc_config_subsweep_prf_set>:
 800bdd8:	b570      	push	{r4, r5, r6, lr}
 800bdda:	b120      	cbz	r0, 800bde6 <acc_config_subsweep_prf_set+0xe>
 800bddc:	4b0b      	ldr	r3, [pc, #44]	@ (800be0c <acc_config_subsweep_prf_set+0x34>)
 800bdde:	4604      	mov	r4, r0
 800bde0:	6800      	ldr	r0, [r0, #0]
 800bde2:	4298      	cmp	r0, r3
 800bde4:	d007      	beq.n	800bdf6 <acc_config_subsweep_prf_set+0x1e>
 800bde6:	4b0a      	ldr	r3, [pc, #40]	@ (800be10 <acc_config_subsweep_prf_set+0x38>)
 800bde8:	4a0a      	ldr	r2, [pc, #40]	@ (800be14 <acc_config_subsweep_prf_set+0x3c>)
 800bdea:	691b      	ldr	r3, [r3, #16]
 800bdec:	490a      	ldr	r1, [pc, #40]	@ (800be18 <acc_config_subsweep_prf_set+0x40>)
 800bdee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	4718      	bx	r3
 800bdf6:	2a03      	cmp	r2, #3
 800bdf8:	460d      	mov	r5, r1
 800bdfa:	4616      	mov	r6, r2
 800bdfc:	d902      	bls.n	800be04 <acc_config_subsweep_prf_set+0x2c>
 800bdfe:	f7ff fc9d 	bl	800b73c <acc_config_subsweep_validate.part.0>
 800be02:	b110      	cbz	r0, 800be0a <acc_config_subsweep_prf_set+0x32>
 800be04:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800be08:	74a5      	strb	r5, [r4, #18]
 800be0a:	bd70      	pop	{r4, r5, r6, pc}
 800be0c:	1337b00f 	.word	0x1337b00f
 800be10:	200009ec 	.word	0x200009ec
 800be14:	0801467c 	.word	0x0801467c
 800be18:	08014674 	.word	0x08014674

0800be1c <acc_config_prf_set>:
 800be1c:	2200      	movs	r2, #0
 800be1e:	f7ff bfdb 	b.w	800bdd8 <acc_config_subsweep_prf_set>
 800be22:	bf00      	nop

0800be24 <data_callback>:
 800be24:	b470      	push	{r4, r5, r6}
 800be26:	888c      	ldrh	r4, [r1, #4]
 800be28:	6893      	ldr	r3, [r2, #8]
 800be2a:	890e      	ldrh	r6, [r1, #8]
 800be2c:	798d      	ldrb	r5, [r1, #6]
 800be2e:	79ca      	ldrb	r2, [r1, #7]
 800be30:	709a      	strb	r2, [r3, #2]
 800be32:	3c00      	subs	r4, #0
 800be34:	bf18      	it	ne
 800be36:	2401      	movne	r4, #1
 800be38:	809e      	strh	r6, [r3, #4]
 800be3a:	701c      	strb	r4, [r3, #0]
 800be3c:	705d      	strb	r5, [r3, #1]
 800be3e:	6098      	str	r0, [r3, #8]
 800be40:	bc70      	pop	{r4, r5, r6}
 800be42:	4770      	bx	lr

0800be44 <acc_processing_execute>:
 800be44:	b570      	push	{r4, r5, r6, lr}
 800be46:	4615      	mov	r5, r2
 800be48:	460e      	mov	r6, r1
 800be4a:	b120      	cbz	r0, 800be56 <acc_processing_execute+0x12>
 800be4c:	4b15      	ldr	r3, [pc, #84]	@ (800bea4 <acc_processing_execute+0x60>)
 800be4e:	6802      	ldr	r2, [r0, #0]
 800be50:	429a      	cmp	r2, r3
 800be52:	4604      	mov	r4, r0
 800be54:	d008      	beq.n	800be68 <acc_processing_execute+0x24>
 800be56:	4c14      	ldr	r4, [pc, #80]	@ (800bea8 <acc_processing_execute+0x64>)
 800be58:	4a14      	ldr	r2, [pc, #80]	@ (800beac <acc_processing_execute+0x68>)
 800be5a:	6923      	ldr	r3, [r4, #16]
 800be5c:	4914      	ldr	r1, [pc, #80]	@ (800beb0 <acc_processing_execute+0x6c>)
 800be5e:	2000      	movs	r0, #0
 800be60:	4798      	blx	r3
 800be62:	b176      	cbz	r6, 800be82 <acc_processing_execute+0x3e>
 800be64:	b1a5      	cbz	r5, 800be90 <acc_processing_execute+0x4c>
 800be66:	bd70      	pop	{r4, r5, r6, pc}
 800be68:	b151      	cbz	r1, 800be80 <acc_processing_execute+0x3c>
 800be6a:	b1c5      	cbz	r5, 800be9e <acc_processing_execute+0x5a>
 800be6c:	6085      	str	r5, [r0, #8]
 800be6e:	6840      	ldr	r0, [r0, #4]
 800be70:	f002 f914 	bl	800e09c <acc_pipeline_a121_prepare_memory>
 800be74:	6863      	ldr	r3, [r4, #4]
 800be76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be7a:	e9d3 0200 	ldrd	r0, r2, [r3]
 800be7e:	4710      	bx	r2
 800be80:	4c09      	ldr	r4, [pc, #36]	@ (800bea8 <acc_processing_execute+0x64>)
 800be82:	6923      	ldr	r3, [r4, #16]
 800be84:	4a0b      	ldr	r2, [pc, #44]	@ (800beb4 <acc_processing_execute+0x70>)
 800be86:	490a      	ldr	r1, [pc, #40]	@ (800beb0 <acc_processing_execute+0x6c>)
 800be88:	2000      	movs	r0, #0
 800be8a:	4798      	blx	r3
 800be8c:	2d00      	cmp	r5, #0
 800be8e:	d1ea      	bne.n	800be66 <acc_processing_execute+0x22>
 800be90:	6923      	ldr	r3, [r4, #16]
 800be92:	4a09      	ldr	r2, [pc, #36]	@ (800beb8 <acc_processing_execute+0x74>)
 800be94:	4906      	ldr	r1, [pc, #24]	@ (800beb0 <acc_processing_execute+0x6c>)
 800be96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be9a:	2000      	movs	r0, #0
 800be9c:	4718      	bx	r3
 800be9e:	4c02      	ldr	r4, [pc, #8]	@ (800bea8 <acc_processing_execute+0x64>)
 800bea0:	e7f6      	b.n	800be90 <acc_processing_execute+0x4c>
 800bea2:	bf00      	nop
 800bea4:	1337b00d 	.word	0x1337b00d
 800bea8:	200009ec 	.word	0x200009ec
 800beac:	08014900 	.word	0x08014900
 800beb0:	080148f4 	.word	0x080148f4
 800beb4:	0801491c 	.word	0x0801491c
 800beb8:	080148dc 	.word	0x080148dc

0800bebc <acc_processing_destroy>:
 800bebc:	b510      	push	{r4, lr}
 800bebe:	b120      	cbz	r0, 800beca <acc_processing_destroy+0xe>
 800bec0:	4b0c      	ldr	r3, [pc, #48]	@ (800bef4 <acc_processing_destroy+0x38>)
 800bec2:	6802      	ldr	r2, [r0, #0]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	4604      	mov	r4, r0
 800bec8:	d007      	beq.n	800beda <acc_processing_destroy+0x1e>
 800beca:	4b0b      	ldr	r3, [pc, #44]	@ (800bef8 <acc_processing_destroy+0x3c>)
 800becc:	4a0b      	ldr	r2, [pc, #44]	@ (800befc <acc_processing_destroy+0x40>)
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	490b      	ldr	r1, [pc, #44]	@ (800bf00 <acc_processing_destroy+0x44>)
 800bed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bed6:	2000      	movs	r0, #0
 800bed8:	4718      	bx	r3
 800beda:	6840      	ldr	r0, [r0, #4]
 800bedc:	b118      	cbz	r0, 800bee6 <acc_processing_destroy+0x2a>
 800bede:	68c3      	ldr	r3, [r0, #12]
 800bee0:	4798      	blx	r3
 800bee2:	2300      	movs	r3, #0
 800bee4:	6063      	str	r3, [r4, #4]
 800bee6:	2300      	movs	r3, #0
 800bee8:	6023      	str	r3, [r4, #0]
 800beea:	4620      	mov	r0, r4
 800beec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bef0:	f001 bf28 	b.w	800dd44 <acc_rss_integration_mem_free>
 800bef4:	1337b00d 	.word	0x1337b00d
 800bef8:	200009ec 	.word	0x200009ec
 800befc:	08014900 	.word	0x08014900
 800bf00:	080148f4 	.word	0x080148f4

0800bf04 <acc_processing_create>:
 800bf04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf08:	b088      	sub	sp, #32
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	f7ff ff4c 	bl	800bda8 <acc_config_get_settings>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d050      	beq.n	800bfb6 <acc_processing_create+0xb2>
 800bf14:	2c00      	cmp	r4, #0
 800bf16:	d043      	beq.n	800bfa0 <acc_processing_create+0x9c>
 800bf18:	4a2e      	ldr	r2, [pc, #184]	@ (800bfd4 <acc_processing_create+0xd0>)
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	2367      	movs	r3, #103	@ 0x67
 800bf1e:	2110      	movs	r1, #16
 800bf20:	2001      	movs	r0, #1
 800bf22:	f001 fef3 	bl	800dd0c <acc_rss_integration_mem_calloc_debug>
 800bf26:	4605      	mov	r5, r0
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d044      	beq.n	800bfb6 <acc_processing_create+0xb2>
 800bf2c:	4b2a      	ldr	r3, [pc, #168]	@ (800bfd8 <acc_processing_create+0xd4>)
 800bf2e:	6003      	str	r3, [r0, #0]
 800bf30:	f10d 080c 	add.w	r8, sp, #12
 800bf34:	4b29      	ldr	r3, [pc, #164]	@ (800bfdc <acc_processing_create+0xd8>)
 800bf36:	9600      	str	r6, [sp, #0]
 800bf38:	4641      	mov	r1, r8
 800bf3a:	4668      	mov	r0, sp
 800bf3c:	e9cd 3501 	strd	r3, r5, [sp, #4]
 800bf40:	f001 ff46 	bl	800ddd0 <acc_pipeline_a121_assemble>
 800bf44:	4607      	mov	r7, r0
 800bf46:	6068      	str	r0, [r5, #4]
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	d03e      	beq.n	800bfca <acc_processing_create+0xc6>
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	8063      	strh	r3, [r4, #2]
 800bf50:	f896 104e 	ldrb.w	r1, [r6, #78]	@ 0x4e
 800bf54:	461a      	mov	r2, r3
 800bf56:	469c      	mov	ip, r3
 800bf58:	1d20      	adds	r0, r4, #4
 800bf5a:	b2df      	uxtb	r7, r3
 800bf5c:	42b9      	cmp	r1, r7
 800bf5e:	d92f      	bls.n	800bfc0 <acc_processing_create+0xbc>
 800bf60:	f838 7013 	ldrh.w	r7, [r8, r3, lsl #1]
 800bf64:	8002      	strh	r2, [r0, #0]
 800bf66:	443a      	add	r2, r7
 800bf68:	b292      	uxth	r2, r2
 800bf6a:	8062      	strh	r2, [r4, #2]
 800bf6c:	8107      	strh	r7, [r0, #8]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	2b04      	cmp	r3, #4
 800bf72:	f100 0002 	add.w	r0, r0, #2
 800bf76:	d1f0      	bne.n	800bf5a <acc_processing_create+0x56>
 800bf78:	f8b6 3048 	ldrh.w	r3, [r6, #72]	@ 0x48
 800bf7c:	9905      	ldr	r1, [sp, #20]
 800bf7e:	6161      	str	r1, [r4, #20]
 800bf80:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800bf84:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800bf88:	7620      	strb	r0, [r4, #24]
 800bf8a:	fb13 f202 	smulbb	r2, r3, r2
 800bf8e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800bf92:	8022      	strh	r2, [r4, #0]
 800bf94:	81a9      	strh	r1, [r5, #12]
 800bf96:	81eb      	strh	r3, [r5, #14]
 800bf98:	4628      	mov	r0, r5
 800bf9a:	b008      	add	sp, #32
 800bf9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfa0:	4b0f      	ldr	r3, [pc, #60]	@ (800bfe0 <acc_processing_create+0xdc>)
 800bfa2:	4a10      	ldr	r2, [pc, #64]	@ (800bfe4 <acc_processing_create+0xe0>)
 800bfa4:	691b      	ldr	r3, [r3, #16]
 800bfa6:	490b      	ldr	r1, [pc, #44]	@ (800bfd4 <acc_processing_create+0xd0>)
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	4798      	blx	r3
 800bfac:	4625      	mov	r5, r4
 800bfae:	4628      	mov	r0, r5
 800bfb0:	b008      	add	sp, #32
 800bfb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfb6:	2500      	movs	r5, #0
 800bfb8:	4628      	mov	r0, r5
 800bfba:	b008      	add	sp, #32
 800bfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfc0:	f8a0 c000 	strh.w	ip, [r0]
 800bfc4:	f8a0 c008 	strh.w	ip, [r0, #8]
 800bfc8:	e7d1      	b.n	800bf6e <acc_processing_create+0x6a>
 800bfca:	4628      	mov	r0, r5
 800bfcc:	f7ff ff76 	bl	800bebc <acc_processing_destroy>
 800bfd0:	463d      	mov	r5, r7
 800bfd2:	e7e1      	b.n	800bf98 <acc_processing_create+0x94>
 800bfd4:	080148f4 	.word	0x080148f4
 800bfd8:	1337b00d 	.word	0x1337b00d
 800bfdc:	0800be25 	.word	0x0800be25
 800bfe0:	200009ec 	.word	0x200009ec
 800bfe4:	08014934 	.word	0x08014934

0800bfe8 <acc_sensor_destroy>:
 800bfe8:	b510      	push	{r4, lr}
 800bfea:	b120      	cbz	r0, 800bff6 <acc_sensor_destroy+0xe>
 800bfec:	4b0b      	ldr	r3, [pc, #44]	@ (800c01c <acc_sensor_destroy+0x34>)
 800bfee:	6802      	ldr	r2, [r0, #0]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	4604      	mov	r4, r0
 800bff4:	d007      	beq.n	800c006 <acc_sensor_destroy+0x1e>
 800bff6:	4b0a      	ldr	r3, [pc, #40]	@ (800c020 <acc_sensor_destroy+0x38>)
 800bff8:	4a0a      	ldr	r2, [pc, #40]	@ (800c024 <acc_sensor_destroy+0x3c>)
 800bffa:	691b      	ldr	r3, [r3, #16]
 800bffc:	490a      	ldr	r1, [pc, #40]	@ (800c028 <acc_sensor_destroy+0x40>)
 800bffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c002:	2000      	movs	r0, #0
 800c004:	4718      	bx	r3
 800c006:	2300      	movs	r3, #0
 800c008:	6003      	str	r3, [r0, #0]
 800c00a:	6900      	ldr	r0, [r0, #16]
 800c00c:	f002 f87e 	bl	800e10c <acc_radar_engine_a121_context_destroy>
 800c010:	4620      	mov	r0, r4
 800c012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c016:	f001 be95 	b.w	800dd44 <acc_rss_integration_mem_free>
 800c01a:	bf00      	nop
 800c01c:	1337b00e 	.word	0x1337b00e
 800c020:	200009ec 	.word	0x200009ec
 800c024:	0801494c 	.word	0x0801494c
 800c028:	08014964 	.word	0x08014964

0800c02c <acc_sensor_create>:
 800c02c:	b570      	push	{r4, r5, r6, lr}
 800c02e:	4a20      	ldr	r2, [pc, #128]	@ (800c0b0 <acc_sensor_create+0x84>)
 800c030:	4606      	mov	r6, r0
 800c032:	233b      	movs	r3, #59	@ 0x3b
 800c034:	2114      	movs	r1, #20
 800c036:	2001      	movs	r0, #1
 800c038:	f001 fe68 	bl	800dd0c <acc_rss_integration_mem_calloc_debug>
 800c03c:	b378      	cbz	r0, 800c09e <acc_sensor_create+0x72>
 800c03e:	4604      	mov	r4, r0
 800c040:	f002 f852 	bl	800e0e8 <acc_radar_engine_a121_context_create>
 800c044:	4605      	mov	r5, r0
 800c046:	6120      	str	r0, [r4, #16]
 800c048:	b360      	cbz	r0, 800c0a4 <acc_sensor_create+0x78>
 800c04a:	4b1a      	ldr	r3, [pc, #104]	@ (800c0b4 <acc_sensor_create+0x88>)
 800c04c:	60a6      	str	r6, [r4, #8]
 800c04e:	2100      	movs	r1, #0
 800c050:	e9c4 3100 	strd	r3, r1, [r4]
 800c054:	7361      	strb	r1, [r4, #13]
 800c056:	4630      	mov	r0, r6
 800c058:	f002 f902 	bl	800e260 <acc_radar_engine_a121_check_asic_id>
 800c05c:	4605      	mov	r5, r0
 800c05e:	b168      	cbz	r0, 800c07c <acc_sensor_create+0x50>
 800c060:	4630      	mov	r0, r6
 800c062:	f002 f8ff 	bl	800e264 <acc_radar_engine_a121_is_sensor_running>
 800c066:	4605      	mov	r5, r0
 800c068:	b980      	cbnz	r0, 800c08c <acc_sensor_create+0x60>
 800c06a:	68a0      	ldr	r0, [r4, #8]
 800c06c:	f002 faa2 	bl	800e5b4 <acc_radar_engine_a121_init_interrupts>
 800c070:	68a0      	ldr	r0, [r4, #8]
 800c072:	4629      	mov	r1, r5
 800c074:	f002 faa0 	bl	800e5b8 <acc_radar_engine_a121_hibernate_off>
 800c078:	4620      	mov	r0, r4
 800c07a:	bd70      	pop	{r4, r5, r6, pc}
 800c07c:	4620      	mov	r0, r4
 800c07e:	f7ff ffb3 	bl	800bfe8 <acc_sensor_destroy>
 800c082:	4630      	mov	r0, r6
 800c084:	f002 f8ee 	bl	800e264 <acc_radar_engine_a121_is_sensor_running>
 800c088:	b148      	cbz	r0, 800c09e <acc_sensor_create+0x72>
 800c08a:	462c      	mov	r4, r5
 800c08c:	4b0a      	ldr	r3, [pc, #40]	@ (800c0b8 <acc_sensor_create+0x8c>)
 800c08e:	4a0b      	ldr	r2, [pc, #44]	@ (800c0bc <acc_sensor_create+0x90>)
 800c090:	691b      	ldr	r3, [r3, #16]
 800c092:	4907      	ldr	r1, [pc, #28]	@ (800c0b0 <acc_sensor_create+0x84>)
 800c094:	2000      	movs	r0, #0
 800c096:	4798      	blx	r3
 800c098:	4620      	mov	r0, r4
 800c09a:	f7ff ffa5 	bl	800bfe8 <acc_sensor_destroy>
 800c09e:	2400      	movs	r4, #0
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	bd70      	pop	{r4, r5, r6, pc}
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f001 fe4d 	bl	800dd44 <acc_rss_integration_mem_free>
 800c0aa:	462c      	mov	r4, r5
 800c0ac:	e7f8      	b.n	800c0a0 <acc_sensor_create+0x74>
 800c0ae:	bf00      	nop
 800c0b0:	08014964 	.word	0x08014964
 800c0b4:	1337b00e 	.word	0x1337b00e
 800c0b8:	200009ec 	.word	0x200009ec
 800c0bc:	0801496c 	.word	0x0801496c

0800c0c0 <acc_sensor_calibrate>:
 800c0c0:	b530      	push	{r4, r5, lr}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	b128      	cbz	r0, 800c0d2 <acc_sensor_calibrate+0x12>
 800c0c6:	460d      	mov	r5, r1
 800c0c8:	4604      	mov	r4, r0
 800c0ca:	4912      	ldr	r1, [pc, #72]	@ (800c114 <acc_sensor_calibrate+0x54>)
 800c0cc:	6800      	ldr	r0, [r0, #0]
 800c0ce:	4288      	cmp	r0, r1
 800c0d0:	d008      	beq.n	800c0e4 <acc_sensor_calibrate+0x24>
 800c0d2:	4b11      	ldr	r3, [pc, #68]	@ (800c118 <acc_sensor_calibrate+0x58>)
 800c0d4:	4a11      	ldr	r2, [pc, #68]	@ (800c11c <acc_sensor_calibrate+0x5c>)
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	4911      	ldr	r1, [pc, #68]	@ (800c120 <acc_sensor_calibrate+0x60>)
 800c0da:	2000      	movs	r0, #0
 800c0dc:	4798      	blx	r3
 800c0de:	2000      	movs	r0, #0
 800c0e0:	b003      	add	sp, #12
 800c0e2:	bd30      	pop	{r4, r5, pc}
 800c0e4:	2d00      	cmp	r5, #0
 800c0e6:	d0fa      	beq.n	800c0de <acc_sensor_calibrate+0x1e>
 800c0e8:	2a00      	cmp	r2, #0
 800c0ea:	d0f8      	beq.n	800c0de <acc_sensor_calibrate+0x1e>
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d0f6      	beq.n	800c0de <acc_sensor_calibrate+0x1e>
 800c0f0:	9200      	str	r2, [sp, #0]
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	9a06      	ldr	r2, [sp, #24]
 800c0f6:	68a0      	ldr	r0, [r4, #8]
 800c0f8:	f104 030d 	add.w	r3, r4, #13
 800c0fc:	f000 f8d4 	bl	800c2a8 <acc_calibration_a121_calibrate>
 800c100:	2800      	cmp	r0, #0
 800c102:	d0ec      	beq.n	800c0de <acc_sensor_calibrate+0x1e>
 800c104:	7b63      	ldrb	r3, [r4, #13]
 800c106:	2b0a      	cmp	r3, #10
 800c108:	bf0c      	ite	eq
 800c10a:	2301      	moveq	r3, #1
 800c10c:	2300      	movne	r3, #0
 800c10e:	702b      	strb	r3, [r5, #0]
 800c110:	e7e6      	b.n	800c0e0 <acc_sensor_calibrate+0x20>
 800c112:	bf00      	nop
 800c114:	1337b00e 	.word	0x1337b00e
 800c118:	200009ec 	.word	0x200009ec
 800c11c:	0801494c 	.word	0x0801494c
 800c120:	08014964 	.word	0x08014964

0800c124 <acc_sensor_prepare>:
 800c124:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c126:	b085      	sub	sp, #20
 800c128:	b130      	cbz	r0, 800c138 <acc_sensor_prepare+0x14>
 800c12a:	4616      	mov	r6, r2
 800c12c:	461f      	mov	r7, r3
 800c12e:	6802      	ldr	r2, [r0, #0]
 800c130:	4b22      	ldr	r3, [pc, #136]	@ (800c1bc <acc_sensor_prepare+0x98>)
 800c132:	429a      	cmp	r2, r3
 800c134:	4604      	mov	r4, r0
 800c136:	d008      	beq.n	800c14a <acc_sensor_prepare+0x26>
 800c138:	4b21      	ldr	r3, [pc, #132]	@ (800c1c0 <acc_sensor_prepare+0x9c>)
 800c13a:	4a22      	ldr	r2, [pc, #136]	@ (800c1c4 <acc_sensor_prepare+0xa0>)
 800c13c:	691b      	ldr	r3, [r3, #16]
 800c13e:	4922      	ldr	r1, [pc, #136]	@ (800c1c8 <acc_sensor_prepare+0xa4>)
 800c140:	2000      	movs	r0, #0
 800c142:	4798      	blx	r3
 800c144:	2000      	movs	r0, #0
 800c146:	b005      	add	sp, #20
 800c148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c14a:	b1f6      	cbz	r6, 800c18a <acc_sensor_prepare+0x66>
 800c14c:	4630      	mov	r0, r6
 800c14e:	460d      	mov	r5, r1
 800c150:	f000 fc46 	bl	800c9e0 <acc_calibration_a121_validate_calibration>
 800c154:	b1c8      	cbz	r0, 800c18a <acc_sensor_prepare+0x66>
 800c156:	4628      	mov	r0, r5
 800c158:	f7ff fe26 	bl	800bda8 <acc_config_get_settings>
 800c15c:	4605      	mov	r5, r0
 800c15e:	2800      	cmp	r0, #0
 800c160:	d0f1      	beq.n	800c146 <acc_sensor_prepare+0x22>
 800c162:	68a0      	ldr	r0, [r4, #8]
 800c164:	f002 f87e 	bl	800e264 <acc_radar_engine_a121_is_sensor_running>
 800c168:	7320      	strb	r0, [r4, #12]
 800c16a:	b188      	cbz	r0, 800c190 <acc_sensor_prepare+0x6c>
 800c16c:	9700      	str	r7, [sp, #0]
 800c16e:	6923      	ldr	r3, [r4, #16]
 800c170:	1d20      	adds	r0, r4, #4
 800c172:	e9cd 3001 	strd	r3, r0, [sp, #4]
 800c176:	1da2      	adds	r2, r4, #6
 800c178:	9203      	str	r2, [sp, #12]
 800c17a:	68a0      	ldr	r0, [r4, #8]
 800c17c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c17e:	4632      	mov	r2, r6
 800c180:	4629      	mov	r1, r5
 800c182:	f002 f95d 	bl	800e440 <acc_radar_engine_a121_reconfigure>
 800c186:	b005      	add	sp, #20
 800c188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c18a:	4b0d      	ldr	r3, [pc, #52]	@ (800c1c0 <acc_sensor_prepare+0x9c>)
 800c18c:	4a0f      	ldr	r2, [pc, #60]	@ (800c1cc <acc_sensor_prepare+0xa8>)
 800c18e:	e7d5      	b.n	800c13c <acc_sensor_prepare+0x18>
 800c190:	68a0      	ldr	r0, [r4, #8]
 800c192:	f002 fa13 	bl	800e5bc <acc_radar_engine_a121_is_hibernate>
 800c196:	7b23      	ldrb	r3, [r4, #12]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d1e7      	bne.n	800c16c <acc_sensor_prepare+0x48>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	d1e5      	bne.n	800c16c <acc_sensor_prepare+0x48>
 800c1a0:	9700      	str	r7, [sp, #0]
 800c1a2:	6923      	ldr	r3, [r4, #16]
 800c1a4:	1d20      	adds	r0, r4, #4
 800c1a6:	e9cd 3001 	strd	r3, r0, [sp, #4]
 800c1aa:	1da2      	adds	r2, r4, #6
 800c1ac:	9203      	str	r2, [sp, #12]
 800c1ae:	68a0      	ldr	r0, [r4, #8]
 800c1b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1b2:	4632      	mov	r2, r6
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	f002 f8a3 	bl	800e300 <acc_radar_engine_a121_prepare>
 800c1ba:	e7c4      	b.n	800c146 <acc_sensor_prepare+0x22>
 800c1bc:	1337b00e 	.word	0x1337b00e
 800c1c0:	200009ec 	.word	0x200009ec
 800c1c4:	0801494c 	.word	0x0801494c
 800c1c8:	08014964 	.word	0x08014964
 800c1cc:	08014988 	.word	0x08014988

0800c1d0 <acc_sensor_measure>:
 800c1d0:	b510      	push	{r4, lr}
 800c1d2:	b120      	cbz	r0, 800c1de <acc_sensor_measure+0xe>
 800c1d4:	4b0e      	ldr	r3, [pc, #56]	@ (800c210 <acc_sensor_measure+0x40>)
 800c1d6:	6802      	ldr	r2, [r0, #0]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	4604      	mov	r4, r0
 800c1dc:	d007      	beq.n	800c1ee <acc_sensor_measure+0x1e>
 800c1de:	4b0d      	ldr	r3, [pc, #52]	@ (800c214 <acc_sensor_measure+0x44>)
 800c1e0:	4a0d      	ldr	r2, [pc, #52]	@ (800c218 <acc_sensor_measure+0x48>)
 800c1e2:	691b      	ldr	r3, [r3, #16]
 800c1e4:	490d      	ldr	r1, [pc, #52]	@ (800c21c <acc_sensor_measure+0x4c>)
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	4798      	blx	r3
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	bd10      	pop	{r4, pc}
 800c1ee:	7b03      	ldrb	r3, [r0, #12]
 800c1f0:	b93b      	cbnz	r3, 800c202 <acc_sensor_measure+0x32>
 800c1f2:	6880      	ldr	r0, [r0, #8]
 800c1f4:	f001 ff8e 	bl	800e114 <acc_radar_engine_a121_run_program>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d0f7      	beq.n	800c1ec <acc_sensor_measure+0x1c>
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	7323      	strb	r3, [r4, #12]
 800c200:	bd10      	pop	{r4, pc}
 800c202:	6901      	ldr	r1, [r0, #16]
 800c204:	6880      	ldr	r0, [r0, #8]
 800c206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c20a:	f001 bf85 	b.w	800e118 <acc_radar_engine_a121_measure>
 800c20e:	bf00      	nop
 800c210:	1337b00e 	.word	0x1337b00e
 800c214:	200009ec 	.word	0x200009ec
 800c218:	0801494c 	.word	0x0801494c
 800c21c:	08014964 	.word	0x08014964

0800c220 <acc_sensor_read>:
 800c220:	b530      	push	{r4, r5, lr}
 800c222:	b085      	sub	sp, #20
 800c224:	b128      	cbz	r0, 800c232 <acc_sensor_read+0x12>
 800c226:	4b19      	ldr	r3, [pc, #100]	@ (800c28c <acc_sensor_read+0x6c>)
 800c228:	460d      	mov	r5, r1
 800c22a:	6801      	ldr	r1, [r0, #0]
 800c22c:	4299      	cmp	r1, r3
 800c22e:	4604      	mov	r4, r0
 800c230:	d008      	beq.n	800c244 <acc_sensor_read+0x24>
 800c232:	4b17      	ldr	r3, [pc, #92]	@ (800c290 <acc_sensor_read+0x70>)
 800c234:	4a17      	ldr	r2, [pc, #92]	@ (800c294 <acc_sensor_read+0x74>)
 800c236:	691b      	ldr	r3, [r3, #16]
 800c238:	4917      	ldr	r1, [pc, #92]	@ (800c298 <acc_sensor_read+0x78>)
 800c23a:	2000      	movs	r0, #0
 800c23c:	4798      	blx	r3
 800c23e:	2000      	movs	r0, #0
 800c240:	b005      	add	sp, #20
 800c242:	bd30      	pop	{r4, r5, pc}
 800c244:	8883      	ldrh	r3, [r0, #4]
 800c246:	88c1      	ldrh	r1, [r0, #6]
 800c248:	440b      	add	r3, r1
 800c24a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800c24e:	d319      	bcc.n	800c284 <acc_sensor_read+0x64>
 800c250:	6901      	ldr	r1, [r0, #16]
 800c252:	6880      	ldr	r0, [r0, #8]
 800c254:	2300      	movs	r3, #0
 800c256:	f10d 020f 	add.w	r2, sp, #15
 800c25a:	f88d 300f 	strb.w	r3, [sp, #15]
 800c25e:	f001 ff95 	bl	800e18c <acc_radar_engine_a121_verify_radar_data_ready>
 800c262:	2800      	cmp	r0, #0
 800c264:	d0ec      	beq.n	800c240 <acc_sensor_read+0x20>
 800c266:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800c26a:	6920      	ldr	r0, [r4, #16]
 800c26c:	462a      	mov	r2, r5
 800c26e:	f001 ffcd 	bl	800e20c <acc_radar_engine_a121_update_buffer_header>
 800c272:	9500      	str	r5, [sp, #0]
 800c274:	88e3      	ldrh	r3, [r4, #6]
 800c276:	88a2      	ldrh	r2, [r4, #4]
 800c278:	6921      	ldr	r1, [r4, #16]
 800c27a:	68a0      	ldr	r0, [r4, #8]
 800c27c:	f001 ff64 	bl	800e148 <acc_radar_engine_a121_transfer_data>
 800c280:	b005      	add	sp, #20
 800c282:	bd30      	pop	{r4, r5, pc}
 800c284:	4b02      	ldr	r3, [pc, #8]	@ (800c290 <acc_sensor_read+0x70>)
 800c286:	4a05      	ldr	r2, [pc, #20]	@ (800c29c <acc_sensor_read+0x7c>)
 800c288:	e7d5      	b.n	800c236 <acc_sensor_read+0x16>
 800c28a:	bf00      	nop
 800c28c:	1337b00e 	.word	0x1337b00e
 800c290:	200009ec 	.word	0x200009ec
 800c294:	0801494c 	.word	0x0801494c
 800c298:	08014964 	.word	0x08014964
 800c29c:	0801499c 	.word	0x0801499c

0800c2a0 <acc_sensor_status>:
 800c2a0:	6880      	ldr	r0, [r0, #8]
 800c2a2:	f002 bded 	b.w	800ee80 <acc_sensor_status_a121>
 800c2a6:	bf00      	nop

0800c2a8 <acc_calibration_a121_calibrate>:
 800c2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ac:	461c      	mov	r4, r3
 800c2ae:	b091      	sub	sp, #68	@ 0x44
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800c2b4:	4605      	mov	r5, r0
 800c2b6:	4688      	mov	r8, r1
 800c2b8:	4616      	mov	r6, r2
 800c2ba:	2b0a      	cmp	r3, #10
 800c2bc:	d859      	bhi.n	800c372 <acc_calibration_a121_calibrate+0xca>
 800c2be:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c2c2:	0065      	.short	0x0065
 800c2c4:	00f2009d 	.word	0x00f2009d
 800c2c8:	000b015d 	.word	0x000b015d
 800c2cc:	020701d3 	.word	0x020701d3
 800c2d0:	029b0266 	.word	0x029b0266
 800c2d4:	006502d1 	.word	0x006502d1
 800c2d8:	f001 fc08 	bl	800daec <acc_a121_cal_session_ack_program>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	f000 808b 	beq.w	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c2e2:	aa08      	add	r2, sp, #32
 800c2e4:	4641      	mov	r1, r8
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	f001 fc52 	bl	800db90 <acc_a121_cal_session_get_4_bba_vga_program_data>
 800c2ec:	48bd      	ldr	r0, [pc, #756]	@ (800c5e4 <acc_calibration_a121_calibrate+0x33c>)
 800c2ee:	f8df b300 	ldr.w	fp, [pc, #768]	@ 800c5f0 <acc_calibration_a121_calibrate+0x348>
 800c2f2:	4629      	mov	r1, r5
 800c2f4:	f004 fd06 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c2f8:	49bb      	ldr	r1, [pc, #748]	@ (800c5e8 <acc_calibration_a121_calibrate+0x340>)
 800c2fa:	48bc      	ldr	r0, [pc, #752]	@ (800c5ec <acc_calibration_a121_calibrate+0x344>)
 800c2fc:	f004 fcfa 	bl	8010cf4 <acc_diagnostic_log_array>
 800c300:	9808      	ldr	r0, [sp, #32]
 800c302:	2150      	movs	r1, #80	@ 0x50
 800c304:	f004 fd0e 	bl	8010d24 <acc_diagnostic_log_data_i16>
 800c308:	f107 0a0a 	add.w	sl, r7, #10
 800c30c:	f04f 0900 	mov.w	r9, #0
 800c310:	9808      	ldr	r0, [sp, #32]
 800c312:	a905      	add	r1, sp, #20
 800c314:	eb00 1009 	add.w	r0, r0, r9, lsl #4
 800c318:	f000 fcc8 	bl	800ccac <acc_cal_algorithms_bba_cal_ctrl>
 800c31c:	4603      	mov	r3, r0
 800c31e:	f109 0230 	add.w	r2, r9, #48	@ 0x30
 800c322:	48b3      	ldr	r0, [pc, #716]	@ (800c5f0 <acc_calibration_a121_calibrate+0x348>)
 800c324:	f109 0901 	add.w	r9, r9, #1
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d065      	beq.n	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c32c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800c330:	f88b 200d 	strb.w	r2, [fp, #13]
 800c334:	f004 fce6 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c338:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c33c:	f82a 3f02 	strh.w	r3, [sl, #2]!
 800c340:	f1b9 0f0a 	cmp.w	r9, #10
 800c344:	d1e4      	bne.n	800c310 <acc_calibration_a121_calibrate+0x68>
 800c346:	48ab      	ldr	r0, [pc, #684]	@ (800c5f4 <acc_calibration_a121_calibrate+0x34c>)
 800c348:	f004 fccc 	bl	8010ce4 <acc_diagnostic_log_set_scope>
 800c34c:	4baa      	ldr	r3, [pc, #680]	@ (800c5f8 <acc_calibration_a121_calibrate+0x350>)
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	2260      	movs	r2, #96	@ 0x60
 800c352:	9201      	str	r2, [sp, #4]
 800c354:	4641      	mov	r1, r8
 800c356:	4632      	mov	r2, r6
 800c358:	2300      	movs	r3, #0
 800c35a:	4628      	mov	r0, r5
 800c35c:	f002 fae0 	bl	800e920 <acc_sensor_protocol_a121_load_lut>
 800c360:	2800      	cmp	r0, #0
 800c362:	f040 82f7 	bne.w	800c954 <acc_calibration_a121_calibrate+0x6ac>
 800c366:	4ba5      	ldr	r3, [pc, #660]	@ (800c5fc <acc_calibration_a121_calibrate+0x354>)
 800c368:	4aa5      	ldr	r2, [pc, #660]	@ (800c600 <acc_calibration_a121_calibrate+0x358>)
 800c36a:	691b      	ldr	r3, [r3, #16]
 800c36c:	49a5      	ldr	r1, [pc, #660]	@ (800c604 <acc_calibration_a121_calibrate+0x35c>)
 800c36e:	4798      	blx	r3
 800c370:	7823      	ldrb	r3, [r4, #0]
 800c372:	49a2      	ldr	r1, [pc, #648]	@ (800c5fc <acc_calibration_a121_calibrate+0x354>)
 800c374:	4aa4      	ldr	r2, [pc, #656]	@ (800c608 <acc_calibration_a121_calibrate+0x360>)
 800c376:	690e      	ldr	r6, [r1, #16]
 800c378:	49a2      	ldr	r1, [pc, #648]	@ (800c604 <acc_calibration_a121_calibrate+0x35c>)
 800c37a:	2000      	movs	r0, #0
 800c37c:	4605      	mov	r5, r0
 800c37e:	47b0      	blx	r6
 800c380:	462b      	mov	r3, r5
 800c382:	4628      	mov	r0, r5
 800c384:	7023      	strb	r3, [r4, #0]
 800c386:	b011      	add	sp, #68	@ 0x44
 800c388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c38c:	228c      	movs	r2, #140	@ 0x8c
 800c38e:	2100      	movs	r1, #0
 800c390:	4638      	mov	r0, r7
 800c392:	f005 fda9 	bl	8011ee8 <memset>
 800c396:	f001 fc63 	bl	800dc60 <acc_rss_integration_get_sensor_reference_frequency>
 800c39a:	ee07 0a90 	vmov	s15, r0
 800c39e:	f107 0a80 	add.w	sl, r7, #128	@ 0x80
 800c3a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3a6:	4651      	mov	r1, sl
 800c3a8:	a808      	add	r0, sp, #32
 800c3aa:	edcd 7a08 	vstr	s15, [sp, #32]
 800c3ae:	f004 fb53 	bl	8010a58 <acc_cpd_pll_divisors_calculate>
 800c3b2:	4681      	mov	r9, r0
 800c3b4:	4895      	ldr	r0, [pc, #596]	@ (800c60c <acc_calibration_a121_calibrate+0x364>)
 800c3b6:	f004 fc95 	bl	8010ce4 <acc_diagnostic_log_set_scope>
 800c3ba:	488a      	ldr	r0, [pc, #552]	@ (800c5e4 <acc_calibration_a121_calibrate+0x33c>)
 800c3bc:	4629      	mov	r1, r5
 800c3be:	f004 fca1 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c3c2:	f8b7 1082 	ldrh.w	r1, [r7, #130]	@ 0x82
 800c3c6:	4892      	ldr	r0, [pc, #584]	@ (800c610 <acc_calibration_a121_calibrate+0x368>)
 800c3c8:	f004 fc9c 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c3cc:	f8b7 1084 	ldrh.w	r1, [r7, #132]	@ 0x84
 800c3d0:	4890      	ldr	r0, [pc, #576]	@ (800c614 <acc_calibration_a121_calibrate+0x36c>)
 800c3d2:	f004 fc97 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c3d6:	f8b7 1086 	ldrh.w	r1, [r7, #134]	@ 0x86
 800c3da:	488f      	ldr	r0, [pc, #572]	@ (800c618 <acc_calibration_a121_calibrate+0x370>)
 800c3dc:	f004 fc92 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c3e0:	488e      	ldr	r0, [pc, #568]	@ (800c61c <acc_calibration_a121_calibrate+0x374>)
 800c3e2:	f8b7 1080 	ldrh.w	r1, [r7, #128]	@ 0x80
 800c3e6:	f004 fc8d 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c3ea:	488d      	ldr	r0, [pc, #564]	@ (800c620 <acc_calibration_a121_calibrate+0x378>)
 800c3ec:	f004 fc7a 	bl	8010ce4 <acc_diagnostic_log_set_scope>
 800c3f0:	f1b9 0f00 	cmp.w	r9, #0
 800c3f4:	f040 82a2 	bne.w	800c93c <acc_calibration_a121_calibrate+0x694>
 800c3f8:	7823      	ldrb	r3, [r4, #0]
 800c3fa:	e7ba      	b.n	800c372 <acc_calibration_a121_calibrate+0xca>
 800c3fc:	f001 fb76 	bl	800daec <acc_a121_cal_session_ack_program>
 800c400:	2800      	cmp	r0, #0
 800c402:	d0f9      	beq.n	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c404:	aa08      	add	r2, sp, #32
 800c406:	ab05      	add	r3, sp, #20
 800c408:	e9cd 3200 	strd	r3, r2, [sp]
 800c40c:	4641      	mov	r1, r8
 800c40e:	ab03      	add	r3, sp, #12
 800c410:	f10d 020e 	add.w	r2, sp, #14
 800c414:	4628      	mov	r0, r5
 800c416:	f001 fb8b 	bl	800db30 <acc_a121_cal_session_get_1_pll_cbank_temp_program_data>
 800c41a:	4872      	ldr	r0, [pc, #456]	@ (800c5e4 <acc_calibration_a121_calibrate+0x33c>)
 800c41c:	4629      	mov	r1, r5
 800c41e:	f004 fc71 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c422:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800c426:	487f      	ldr	r0, [pc, #508]	@ (800c624 <acc_calibration_a121_calibrate+0x37c>)
 800c428:	f004 fc6c 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c42c:	496e      	ldr	r1, [pc, #440]	@ (800c5e8 <acc_calibration_a121_calibrate+0x340>)
 800c42e:	487e      	ldr	r0, [pc, #504]	@ (800c628 <acc_calibration_a121_calibrate+0x380>)
 800c430:	f004 fc60 	bl	8010cf4 <acc_diagnostic_log_array>
 800c434:	9808      	ldr	r0, [sp, #32]
 800c436:	2110      	movs	r1, #16
 800c438:	f004 fc6c 	bl	8010d14 <acc_diagnostic_log_data_u16>
 800c43c:	9a08      	ldr	r2, [sp, #32]
 800c43e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800c442:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800c446:	ab04      	add	r3, sp, #16
 800c448:	f000 fad6 	bl	800c9f8 <acc_cal_algorithms_pll_cbank>
 800c44c:	2800      	cmp	r0, #0
 800c44e:	d0d3      	beq.n	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c450:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800c454:	f000 fe4e 	bl	800d0f4 <acc_cal_algorithms_wavelet_duration_p1>
 800c458:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c45c:	4606      	mov	r6, r0
 800c45e:	4873      	ldr	r0, [pc, #460]	@ (800c62c <acc_calibration_a121_calibrate+0x384>)
 800c460:	f004 fc50 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c464:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800c468:	4871      	ldr	r0, [pc, #452]	@ (800c630 <acc_calibration_a121_calibrate+0x388>)
 800c46a:	f004 fc4b 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c46e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c472:	4870      	ldr	r0, [pc, #448]	@ (800c634 <acc_calibration_a121_calibrate+0x38c>)
 800c474:	f004 fc46 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c478:	486f      	ldr	r0, [pc, #444]	@ (800c638 <acc_calibration_a121_calibrate+0x390>)
 800c47a:	4631      	mov	r1, r6
 800c47c:	f004 fc42 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c480:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c484:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c488:	803b      	strh	r3, [r7, #0]
 800c48a:	4628      	mov	r0, r5
 800c48c:	84be      	strh	r6, [r7, #36]	@ 0x24
 800c48e:	8079      	strh	r1, [r7, #2]
 800c490:	f001 f99c 	bl	800d7cc <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program>
 800c494:	4605      	mov	r5, r0
 800c496:	2302      	movs	r3, #2
 800c498:	2d00      	cmp	r5, #0
 800c49a:	d0ad      	beq.n	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c49c:	4628      	mov	r0, r5
 800c49e:	7023      	strb	r3, [r4, #0]
 800c4a0:	b011      	add	sp, #68	@ 0x44
 800c4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a6:	f001 fb21 	bl	800daec <acc_a121_cal_session_ack_program>
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	d0a4      	beq.n	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c4ae:	ab08      	add	r3, sp, #32
 800c4b0:	aa05      	add	r2, sp, #20
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	4641      	mov	r1, r8
 800c4b6:	ab04      	add	r3, sp, #16
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	f001 fb51 	bl	800db60 <acc_a121_cal_session_get_2_pll_ibias_vfast2_ldo_program_data>
 800c4be:	494a      	ldr	r1, [pc, #296]	@ (800c5e8 <acc_calibration_a121_calibrate+0x340>)
 800c4c0:	485e      	ldr	r0, [pc, #376]	@ (800c63c <acc_calibration_a121_calibrate+0x394>)
 800c4c2:	f004 fc17 	bl	8010cf4 <acc_diagnostic_log_array>
 800c4c6:	9805      	ldr	r0, [sp, #20]
 800c4c8:	2110      	movs	r1, #16
 800c4ca:	f004 fc2b 	bl	8010d24 <acc_diagnostic_log_data_i16>
 800c4ce:	9805      	ldr	r0, [sp, #20]
 800c4d0:	a903      	add	r1, sp, #12
 800c4d2:	f000 facb 	bl	800ca6c <acc_cal_algorithms_pll_ibias>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	d08e      	beq.n	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c4da:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c4de:	4858      	ldr	r0, [pc, #352]	@ (800c640 <acc_calibration_a121_calibrate+0x398>)
 800c4e0:	f004 fc10 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c4e4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c4e8:	80bb      	strh	r3, [r7, #4]
 800c4ea:	4856      	ldr	r0, [pc, #344]	@ (800c644 <acc_calibration_a121_calibrate+0x39c>)
 800c4ec:	f004 fbfa 	bl	8010ce4 <acc_diagnostic_log_set_scope>
 800c4f0:	483c      	ldr	r0, [pc, #240]	@ (800c5e4 <acc_calibration_a121_calibrate+0x33c>)
 800c4f2:	4629      	mov	r1, r5
 800c4f4:	f004 fc06 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c4f8:	493b      	ldr	r1, [pc, #236]	@ (800c5e8 <acc_calibration_a121_calibrate+0x340>)
 800c4fa:	4853      	ldr	r0, [pc, #332]	@ (800c648 <acc_calibration_a121_calibrate+0x3a0>)
 800c4fc:	f004 fbfa 	bl	8010cf4 <acc_diagnostic_log_array>
 800c500:	9808      	ldr	r0, [sp, #32]
 800c502:	2130      	movs	r1, #48	@ 0x30
 800c504:	f004 fc06 	bl	8010d14 <acc_diagnostic_log_data_u16>
 800c508:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c50c:	484f      	ldr	r0, [pc, #316]	@ (800c64c <acc_calibration_a121_calibrate+0x3a4>)
 800c50e:	f004 fbf9 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c512:	9908      	ldr	r1, [sp, #32]
 800c514:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800c518:	f10d 020e 	add.w	r2, sp, #14
 800c51c:	f000 faf0 	bl	800cb00 <acc_cal_algorithms_vfast2_ldo>
 800c520:	2800      	cmp	r0, #0
 800c522:	f43f af69 	beq.w	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c526:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800c52a:	4849      	ldr	r0, [pc, #292]	@ (800c650 <acc_calibration_a121_calibrate+0x3a8>)
 800c52c:	f004 fbea 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c530:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800c534:	4847      	ldr	r0, [pc, #284]	@ (800c654 <acc_calibration_a121_calibrate+0x3ac>)
 800c536:	817b      	strh	r3, [r7, #10]
 800c538:	f004 fbd4 	bl	8010ce4 <acc_diagnostic_log_set_scope>
 800c53c:	2001      	movs	r0, #1
 800c53e:	ab02      	add	r3, sp, #8
 800c540:	e9cd 3000 	strd	r3, r0, [sp]
 800c544:	4632      	mov	r2, r6
 800c546:	4641      	mov	r1, r8
 800c548:	f44f 567e 	mov.w	r6, #16256	@ 0x3f80
 800c54c:	2300      	movs	r3, #0
 800c54e:	4628      	mov	r0, r5
 800c550:	f8ad 6008 	strh.w	r6, [sp, #8]
 800c554:	f002 f9e4 	bl	800e920 <acc_sensor_protocol_a121_load_lut>
 800c558:	b920      	cbnz	r0, 800c564 <acc_calibration_a121_calibrate+0x2bc>
 800c55a:	4b28      	ldr	r3, [pc, #160]	@ (800c5fc <acc_calibration_a121_calibrate+0x354>)
 800c55c:	4a3e      	ldr	r2, [pc, #248]	@ (800c658 <acc_calibration_a121_calibrate+0x3b0>)
 800c55e:	691b      	ldr	r3, [r3, #16]
 800c560:	4928      	ldr	r1, [pc, #160]	@ (800c604 <acc_calibration_a121_calibrate+0x35c>)
 800c562:	4798      	blx	r3
 800c564:	4628      	mov	r0, r5
 800c566:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800c56a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800c56e:	f001 f94b 	bl	800d808 <acc_a121_cal_session_start_3_delay_cbank_program>
 800c572:	4605      	mov	r5, r0
 800c574:	2303      	movs	r3, #3
 800c576:	2d00      	cmp	r5, #0
 800c578:	d190      	bne.n	800c49c <acc_calibration_a121_calibrate+0x1f4>
 800c57a:	e73d      	b.n	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c57c:	2300      	movs	r3, #0
 800c57e:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c582:	f001 fab3 	bl	800daec <acc_a121_cal_session_ack_program>
 800c586:	2800      	cmp	r0, #0
 800c588:	f43f af36 	beq.w	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c58c:	aa08      	add	r2, sp, #32
 800c58e:	4641      	mov	r1, r8
 800c590:	4628      	mov	r0, r5
 800c592:	f001 faf5 	bl	800db80 <acc_a121_cal_session_get_3_delay_cbank_program_data>
 800c596:	4813      	ldr	r0, [pc, #76]	@ (800c5e4 <acc_calibration_a121_calibrate+0x33c>)
 800c598:	4629      	mov	r1, r5
 800c59a:	f004 fbb3 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c59e:	4912      	ldr	r1, [pc, #72]	@ (800c5e8 <acc_calibration_a121_calibrate+0x340>)
 800c5a0:	482e      	ldr	r0, [pc, #184]	@ (800c65c <acc_calibration_a121_calibrate+0x3b4>)
 800c5a2:	f004 fba7 	bl	8010cf4 <acc_diagnostic_log_array>
 800c5a6:	9808      	ldr	r0, [sp, #32]
 800c5a8:	2120      	movs	r1, #32
 800c5aa:	f004 fbbb 	bl	8010d24 <acc_diagnostic_log_data_i16>
 800c5ae:	9808      	ldr	r0, [sp, #32]
 800c5b0:	a905      	add	r1, sp, #20
 800c5b2:	f000 faf1 	bl	800cb98 <acc_cal_algorithms_delay_cbank>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	f43f af1e 	beq.w	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c5bc:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800c5c0:	4827      	ldr	r0, [pc, #156]	@ (800c660 <acc_calibration_a121_calibrate+0x3b8>)
 800c5c2:	f004 fb9f 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c5c6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c5ca:	80fb      	strh	r3, [r7, #6]
 800c5cc:	4825      	ldr	r0, [pc, #148]	@ (800c664 <acc_calibration_a121_calibrate+0x3bc>)
 800c5ce:	f004 fb89 	bl	8010ce4 <acc_diagnostic_log_set_scope>
 800c5d2:	4628      	mov	r0, r5
 800c5d4:	f001 f946 	bl	800d864 <acc_a121_cal_session_start_4_bba_vga_program>
 800c5d8:	4605      	mov	r5, r0
 800c5da:	2304      	movs	r3, #4
 800c5dc:	2d00      	cmp	r5, #0
 800c5de:	f47f af5d 	bne.w	800c49c <acc_calibration_a121_calibrate+0x1f4>
 800c5e2:	e709      	b.n	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c5e4:	080149b4 	.word	0x080149b4
 800c5e8:	080150f8 	.word	0x080150f8
 800c5ec:	08014b60 	.word	0x08014b60
 800c5f0:	2000003c 	.word	0x2000003c
 800c5f4:	08014b78 	.word	0x08014b78
 800c5f8:	080173bc 	.word	0x080173bc
 800c5fc:	200009ec 	.word	0x200009ec
 800c600:	08014b90 	.word	0x08014b90
 800c604:	08014b08 	.word	0x08014b08
 800c608:	08014e30 	.word	0x08014e30
 800c60c:	08015af4 	.word	0x08015af4
 800c610:	080149c0 	.word	0x080149c0
 800c614:	080149d0 	.word	0x080149d0
 800c618:	080149dc 	.word	0x080149dc
 800c61c:	080149e8 	.word	0x080149e8
 800c620:	080149f8 	.word	0x080149f8
 800c624:	08014a08 	.word	0x08014a08
 800c628:	08014a14 	.word	0x08014a14
 800c62c:	08014a30 	.word	0x08014a30
 800c630:	08014a3c 	.word	0x08014a3c
 800c634:	08014a44 	.word	0x08014a44
 800c638:	08014a50 	.word	0x08014a50
 800c63c:	08014a5c 	.word	0x08014a5c
 800c640:	08014a7c 	.word	0x08014a7c
 800c644:	08014a88 	.word	0x08014a88
 800c648:	08014aa0 	.word	0x08014aa0
 800c64c:	08014ab4 	.word	0x08014ab4
 800c650:	08014ac0 	.word	0x08014ac0
 800c654:	08014acc 	.word	0x08014acc
 800c658:	08014ae4 	.word	0x08014ae4
 800c65c:	08014b1c 	.word	0x08014b1c
 800c660:	08014b40 	.word	0x08014b40
 800c664:	08014b4c 	.word	0x08014b4c
 800c668:	f001 fa40 	bl	800daec <acc_a121_cal_session_ack_program>
 800c66c:	2800      	cmp	r0, #0
 800c66e:	f43f aec3 	beq.w	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c672:	aa08      	add	r2, sp, #32
 800c674:	4641      	mov	r1, r8
 800c676:	4628      	mov	r0, r5
 800c678:	f001 fa92 	bl	800dba0 <acc_a121_cal_session_get_5_area_index_program_data>
 800c67c:	49bb      	ldr	r1, [pc, #748]	@ (800c96c <acc_calibration_a121_calibrate+0x6c4>)
 800c67e:	48bc      	ldr	r0, [pc, #752]	@ (800c970 <acc_calibration_a121_calibrate+0x6c8>)
 800c680:	f004 fb38 	bl	8010cf4 <acc_diagnostic_log_array>
 800c684:	9808      	ldr	r0, [sp, #32]
 800c686:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800c68a:	f004 fb4b 	bl	8010d24 <acc_diagnostic_log_data_i16>
 800c68e:	9808      	ldr	r0, [sp, #32]
 800c690:	a905      	add	r1, sp, #20
 800c692:	f000 fb7b 	bl	800cd8c <acc_cal_algorithms_area_index>
 800c696:	2800      	cmp	r0, #0
 800c698:	f43f aeae 	beq.w	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c69c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800c6a0:	48b4      	ldr	r0, [pc, #720]	@ (800c974 <acc_calibration_a121_calibrate+0x6cc>)
 800c6a2:	f004 fb2f 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c6a6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c6aa:	813b      	strh	r3, [r7, #8]
 800c6ac:	48b2      	ldr	r0, [pc, #712]	@ (800c978 <acc_calibration_a121_calibrate+0x6d0>)
 800c6ae:	f004 fb19 	bl	8010ce4 <acc_diagnostic_log_set_scope>
 800c6b2:	8938      	ldrh	r0, [r7, #8]
 800c6b4:	aa08      	add	r2, sp, #32
 800c6b6:	2160      	movs	r1, #96	@ 0x60
 800c6b8:	f004 fab4 	bl	8010c24 <acc_dll_calculate_area_settings>
 800c6bc:	4628      	mov	r0, r5
 800c6be:	a908      	add	r1, sp, #32
 800c6c0:	f001 f924 	bl	800d90c <acc_a121_cal_session_start_6_tx_freq_program>
 800c6c4:	4605      	mov	r5, r0
 800c6c6:	2306      	movs	r3, #6
 800c6c8:	2d00      	cmp	r5, #0
 800c6ca:	f47f aee7 	bne.w	800c49c <acc_calibration_a121_calibrate+0x1f4>
 800c6ce:	e693      	b.n	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c6d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c6d4:	f8ad 3010 	strh.w	r3, [sp, #16]
 800c6d8:	f001 fa08 	bl	800daec <acc_a121_cal_session_ack_program>
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	f43f ae8b 	beq.w	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c6e2:	f001 fabd 	bl	800dc60 <acc_rss_integration_get_sensor_reference_frequency>
 800c6e6:	4ea5      	ldr	r6, [pc, #660]	@ (800c97c <acc_calibration_a121_calibrate+0x6d4>)
 800c6e8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800c6ec:	f8df 92ec 	ldr.w	r9, [pc, #748]	@ 800c9dc <acc_calibration_a121_calibrate+0x734>
 800c6f0:	fba6 2600 	umull	r2, r6, r6, r0
 800c6f4:	4641      	mov	r1, r8
 800c6f6:	aa05      	add	r2, sp, #20
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	09b6      	lsrs	r6, r6, #6
 800c6fc:	fb06 f603 	mul.w	r6, r6, r3
 800c700:	f001 fa58 	bl	800dbb4 <acc_a121_cal_session_get_6_tx_freq_program_data>
 800c704:	4999      	ldr	r1, [pc, #612]	@ (800c96c <acc_calibration_a121_calibrate+0x6c4>)
 800c706:	489e      	ldr	r0, [pc, #632]	@ (800c980 <acc_calibration_a121_calibrate+0x6d8>)
 800c708:	f004 faf4 	bl	8010cf4 <acc_diagnostic_log_array>
 800c70c:	9805      	ldr	r0, [sp, #20]
 800c70e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800c712:	f004 fb07 	bl	8010d24 <acc_diagnostic_log_data_i16>
 800c716:	ab04      	add	r3, sp, #16
 800c718:	4630      	mov	r0, r6
 800c71a:	9300      	str	r3, [sp, #0]
 800c71c:	4a99      	ldr	r2, [pc, #612]	@ (800c984 <acc_calibration_a121_calibrate+0x6dc>)
 800c71e:	9905      	ldr	r1, [sp, #20]
 800c720:	ab08      	add	r3, sp, #32
 800c722:	f000 fd27 	bl	800d174 <acc_cal_algorithms_tx_freq_ctrl>
 800c726:	46cb      	mov	fp, r9
 800c728:	4682      	mov	sl, r0
 800c72a:	f10d 081c 	add.w	r8, sp, #28
 800c72e:	2630      	movs	r6, #48	@ 0x30
 800c730:	f889 600c 	strb.w	r6, [r9, #12]
 800c734:	3601      	adds	r6, #1
 800c736:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800c73a:	4658      	mov	r0, fp
 800c73c:	b2f6      	uxtb	r6, r6
 800c73e:	f004 fae1 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c742:	2e38      	cmp	r6, #56	@ 0x38
 800c744:	d1f4      	bne.n	800c730 <acc_calibration_a121_calibrate+0x488>
 800c746:	f1ba 0f00 	cmp.w	sl, #0
 800c74a:	f43f ae55 	beq.w	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c74e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c752:	488d      	ldr	r0, [pc, #564]	@ (800c988 <acc_calibration_a121_calibrate+0x6e0>)
 800c754:	f004 fad6 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c758:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800c75c:	488b      	ldr	r0, [pc, #556]	@ (800c98c <acc_calibration_a121_calibrate+0x6e4>)
 800c75e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c760:	f004 fac0 	bl	8010ce4 <acc_diagnostic_log_set_scope>
 800c764:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c768:	4628      	mov	r0, r5
 800c76a:	f001 f95f 	bl	800da2c <acc_a121_cal_session_start_7_rx_freq_program>
 800c76e:	2800      	cmp	r0, #0
 800c770:	f43f ae42 	beq.w	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c774:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c778:	9805      	ldr	r0, [sp, #20]
 800c77a:	2201      	movs	r2, #1
 800c77c:	2100      	movs	r1, #0
 800c77e:	f000 fbcd 	bl	800cf1c <acc_cal_algorithms_iq_imbalance>
 800c782:	4605      	mov	r5, r0
 800c784:	2307      	movs	r3, #7
 800c786:	2d00      	cmp	r5, #0
 800c788:	f47f ae88 	bne.w	800c49c <acc_calibration_a121_calibrate+0x1f4>
 800c78c:	e634      	b.n	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c78e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c792:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c796:	f001 f9a9 	bl	800daec <acc_a121_cal_session_ack_program>
 800c79a:	2800      	cmp	r0, #0
 800c79c:	f43f ae2c 	beq.w	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c7a0:	aa08      	add	r2, sp, #32
 800c7a2:	4641      	mov	r1, r8
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	f001 fa07 	bl	800dbb8 <acc_a121_cal_session_get_7_rx_freq_program_data>
 800c7aa:	4970      	ldr	r1, [pc, #448]	@ (800c96c <acc_calibration_a121_calibrate+0x6c4>)
 800c7ac:	4878      	ldr	r0, [pc, #480]	@ (800c990 <acc_calibration_a121_calibrate+0x6e8>)
 800c7ae:	f004 faa1 	bl	8010cf4 <acc_diagnostic_log_array>
 800c7b2:	9808      	ldr	r0, [sp, #32]
 800c7b4:	2110      	movs	r1, #16
 800c7b6:	f004 fab5 	bl	8010d24 <acc_diagnostic_log_data_i16>
 800c7ba:	9808      	ldr	r0, [sp, #32]
 800c7bc:	aa05      	add	r2, sp, #20
 800c7be:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800c7c2:	f000 fc55 	bl	800d070 <acc_cal_algorithms_rx_freq_ctrl>
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	f43f ae16 	beq.w	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c7cc:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800c7d0:	4870      	ldr	r0, [pc, #448]	@ (800c994 <acc_calibration_a121_calibrate+0x6ec>)
 800c7d2:	f004 fa97 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c7d6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c7da:	843b      	strh	r3, [r7, #32]
 800c7dc:	486e      	ldr	r0, [pc, #440]	@ (800c998 <acc_calibration_a121_calibrate+0x6f0>)
 800c7de:	f004 fa81 	bl	8010ce4 <acc_diagnostic_log_set_scope>
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800c7e8:	f001 f93e 	bl	800da68 <acc_a121_cal_session_start_8_phase_enhancement_program>
 800c7ec:	4605      	mov	r5, r0
 800c7ee:	2308      	movs	r3, #8
 800c7f0:	2d00      	cmp	r5, #0
 800c7f2:	f47f ae53 	bne.w	800c49c <acc_calibration_a121_calibrate+0x1f4>
 800c7f6:	e5ff      	b.n	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c7f8:	f001 f978 	bl	800daec <acc_a121_cal_session_ack_program>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	f43f adfb 	beq.w	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c802:	aa08      	add	r2, sp, #32
 800c804:	4641      	mov	r1, r8
 800c806:	4628      	mov	r0, r5
 800c808:	f001 f9de 	bl	800dbc8 <acc_a121_cal_session_get_8_phase_enhancement_program_data>
 800c80c:	4957      	ldr	r1, [pc, #348]	@ (800c96c <acc_calibration_a121_calibrate+0x6c4>)
 800c80e:	4863      	ldr	r0, [pc, #396]	@ (800c99c <acc_calibration_a121_calibrate+0x6f4>)
 800c810:	f004 fa70 	bl	8010cf4 <acc_diagnostic_log_array>
 800c814:	f107 0626 	add.w	r6, r7, #38	@ 0x26
 800c818:	9808      	ldr	r0, [sp, #32]
 800c81a:	2160      	movs	r1, #96	@ 0x60
 800c81c:	f004 fa82 	bl	8010d24 <acc_diagnostic_log_data_i16>
 800c820:	9808      	ldr	r0, [sp, #32]
 800c822:	4631      	mov	r1, r6
 800c824:	f107 0256 	add.w	r2, r7, #86	@ 0x56
 800c828:	f000 fd34 	bl	800d294 <acc_cal_algorithms_phase_enhancement>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	f43f ade3 	beq.w	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c832:	494e      	ldr	r1, [pc, #312]	@ (800c96c <acc_calibration_a121_calibrate+0x6c4>)
 800c834:	485a      	ldr	r0, [pc, #360]	@ (800c9a0 <acc_calibration_a121_calibrate+0x6f8>)
 800c836:	f004 fa5d 	bl	8010cf4 <acc_diagnostic_log_array>
 800c83a:	4630      	mov	r0, r6
 800c83c:	2118      	movs	r1, #24
 800c83e:	f004 fa71 	bl	8010d24 <acc_diagnostic_log_data_i16>
 800c842:	f9b7 1056 	ldrsh.w	r1, [r7, #86]	@ 0x56
 800c846:	4857      	ldr	r0, [pc, #348]	@ (800c9a4 <acc_calibration_a121_calibrate+0x6fc>)
 800c848:	f004 fa5c 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c84c:	4856      	ldr	r0, [pc, #344]	@ (800c9a8 <acc_calibration_a121_calibrate+0x700>)
 800c84e:	f004 fa49 	bl	8010ce4 <acc_diagnostic_log_set_scope>
 800c852:	4628      	mov	r0, r5
 800c854:	f001 f946 	bl	800dae4 <acc_a121_cal_session_start_9_pulseshaper_program>
 800c858:	4605      	mov	r5, r0
 800c85a:	2309      	movs	r3, #9
 800c85c:	2d00      	cmp	r5, #0
 800c85e:	f47f ae1d 	bne.w	800c49c <acc_calibration_a121_calibrate+0x1f4>
 800c862:	e5c9      	b.n	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c864:	f001 f942 	bl	800daec <acc_a121_cal_session_ack_program>
 800c868:	2800      	cmp	r0, #0
 800c86a:	f43f adc5 	beq.w	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c86e:	aa08      	add	r2, sp, #32
 800c870:	ab04      	add	r3, sp, #16
 800c872:	4641      	mov	r1, r8
 800c874:	4628      	mov	r0, r5
 800c876:	f001 f9af 	bl	800dbd8 <acc_a121_cal_session_get_9_pulseshaper_program_data>
 800c87a:	493c      	ldr	r1, [pc, #240]	@ (800c96c <acc_calibration_a121_calibrate+0x6c4>)
 800c87c:	484b      	ldr	r0, [pc, #300]	@ (800c9ac <acc_calibration_a121_calibrate+0x704>)
 800c87e:	f004 fa39 	bl	8010cf4 <acc_diagnostic_log_array>
 800c882:	9808      	ldr	r0, [sp, #32]
 800c884:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800c888:	f004 fa44 	bl	8010d14 <acc_diagnostic_log_data_u16>
 800c88c:	9808      	ldr	r0, [sp, #32]
 800c88e:	a905      	add	r1, sp, #20
 800c890:	f000 fe58 	bl	800d544 <acc_cal_algorithms_pulseshaper_wavelet>
 800c894:	2800      	cmp	r0, #0
 800c896:	f43f adaf 	beq.w	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c89a:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 800c89e:	9b07      	ldr	r3, [sp, #28]
 800c8a0:	667b      	str	r3, [r7, #100]	@ 0x64
 800c8a2:	e9c7 2117 	strd	r2, r1, [r7, #92]	@ 0x5c
 800c8a6:	4842      	ldr	r0, [pc, #264]	@ (800c9b0 <acc_calibration_a121_calibrate+0x708>)
 800c8a8:	f004 fa2c 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c8ac:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800c8ae:	4841      	ldr	r0, [pc, #260]	@ (800c9b4 <acc_calibration_a121_calibrate+0x70c>)
 800c8b0:	f004 fa28 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c8b4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c8b6:	4840      	ldr	r0, [pc, #256]	@ (800c9b8 <acc_calibration_a121_calibrate+0x710>)
 800c8b8:	f004 fa24 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c8bc:	483f      	ldr	r0, [pc, #252]	@ (800c9bc <acc_calibration_a121_calibrate+0x714>)
 800c8be:	f004 fa11 	bl	8010ce4 <acc_diagnostic_log_set_scope>
 800c8c2:	492a      	ldr	r1, [pc, #168]	@ (800c96c <acc_calibration_a121_calibrate+0x6c4>)
 800c8c4:	483e      	ldr	r0, [pc, #248]	@ (800c9c0 <acc_calibration_a121_calibrate+0x718>)
 800c8c6:	f004 fa15 	bl	8010cf4 <acc_diagnostic_log_array>
 800c8ca:	9804      	ldr	r0, [sp, #16]
 800c8cc:	f44f 7158 	mov.w	r1, #864	@ 0x360
 800c8d0:	f004 fa20 	bl	8010d14 <acc_diagnostic_log_data_u16>
 800c8d4:	9804      	ldr	r0, [sp, #16]
 800c8d6:	a908      	add	r1, sp, #32
 800c8d8:	f000 fe7c 	bl	800d5d4 <acc_cal_algorithms_pulseshaper_supply>
 800c8dc:	4605      	mov	r5, r0
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	f43f ad8a 	beq.w	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c8e4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800c8e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8ea:	66b9      	str	r1, [r7, #104]	@ 0x68
 800c8ec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c8ee:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c8f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c8f2:	673b      	str	r3, [r7, #112]	@ 0x70
 800c8f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c8f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c8f8:	e9c7 121d 	strd	r1, r2, [r7, #116]	@ 0x74
 800c8fc:	4638      	mov	r0, r7
 800c8fe:	218c      	movs	r1, #140	@ 0x8c
 800c900:	f003 fda2 	bl	8010448 <acc_alg_basic_util_crc32>
 800c904:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c906:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800c90a:	482e      	ldr	r0, [pc, #184]	@ (800c9c4 <acc_calibration_a121_calibrate+0x71c>)
 800c90c:	f004 f9fa 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c910:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c912:	482d      	ldr	r0, [pc, #180]	@ (800c9c8 <acc_calibration_a121_calibrate+0x720>)
 800c914:	f004 f9f6 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c918:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c91a:	482c      	ldr	r0, [pc, #176]	@ (800c9cc <acc_calibration_a121_calibrate+0x724>)
 800c91c:	f004 f9f2 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c920:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c922:	482b      	ldr	r0, [pc, #172]	@ (800c9d0 <acc_calibration_a121_calibrate+0x728>)
 800c924:	f004 f9ee 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c928:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c92a:	482a      	ldr	r0, [pc, #168]	@ (800c9d4 <acc_calibration_a121_calibrate+0x72c>)
 800c92c:	f004 f9ea 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c930:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c932:	4829      	ldr	r0, [pc, #164]	@ (800c9d8 <acc_calibration_a121_calibrate+0x730>)
 800c934:	f004 f9e6 	bl	8010d04 <acc_diagnostic_log_scalar>
 800c938:	230a      	movs	r3, #10
 800c93a:	e522      	b.n	800c382 <acc_calibration_a121_calibrate+0xda>
 800c93c:	4653      	mov	r3, sl
 800c93e:	4628      	mov	r0, r5
 800c940:	4632      	mov	r2, r6
 800c942:	4641      	mov	r1, r8
 800c944:	f000 feca 	bl	800d6dc <acc_a121_cal_session_start_1_pll_cbank_temp_program>
 800c948:	4605      	mov	r5, r0
 800c94a:	2301      	movs	r3, #1
 800c94c:	2d00      	cmp	r5, #0
 800c94e:	f47f ada5 	bne.w	800c49c <acc_calibration_a121_calibrate+0x1f4>
 800c952:	e551      	b.n	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c954:	4628      	mov	r0, r5
 800c956:	88fa      	ldrh	r2, [r7, #6]
 800c958:	f107 010c 	add.w	r1, r7, #12
 800c95c:	f000 ff86 	bl	800d86c <acc_a121_cal_session_start_5_area_index_program>
 800c960:	4605      	mov	r5, r0
 800c962:	2305      	movs	r3, #5
 800c964:	2d00      	cmp	r5, #0
 800c966:	f47f ad99 	bne.w	800c49c <acc_calibration_a121_calibrate+0x1f4>
 800c96a:	e545      	b.n	800c3f8 <acc_calibration_a121_calibrate+0x150>
 800c96c:	080150f8 	.word	0x080150f8
 800c970:	08014bbc 	.word	0x08014bbc
 800c974:	08014be0 	.word	0x08014be0
 800c978:	08014bec 	.word	0x08014bec
 800c97c:	10624dd3 	.word	0x10624dd3
 800c980:	08014c08 	.word	0x08014c08
 800c984:	039b2820 	.word	0x039b2820
 800c988:	08014c2c 	.word	0x08014c2c
 800c98c:	08014c3c 	.word	0x08014c3c
 800c990:	08014c58 	.word	0x08014c58
 800c994:	08014c7c 	.word	0x08014c7c
 800c998:	08014c8c 	.word	0x08014c8c
 800c99c:	08014cac 	.word	0x08014cac
 800c9a0:	08014cd8 	.word	0x08014cd8
 800c9a4:	08014d04 	.word	0x08014d04
 800c9a8:	08014d20 	.word	0x08014d20
 800c9ac:	08014d38 	.word	0x08014d38
 800c9b0:	08014d4c 	.word	0x08014d4c
 800c9b4:	08014d60 	.word	0x08014d60
 800c9b8:	08014d74 	.word	0x08014d74
 800c9bc:	08014d84 	.word	0x08014d84
 800c9c0:	08014d9c 	.word	0x08014d9c
 800c9c4:	08014db0 	.word	0x08014db0
 800c9c8:	08014dc4 	.word	0x08014dc4
 800c9cc:	08014dd8 	.word	0x08014dd8
 800c9d0:	08014dec 	.word	0x08014dec
 800c9d4:	08014e00 	.word	0x08014e00
 800c9d8:	08014e18 	.word	0x08014e18
 800c9dc:	2000004c 	.word	0x2000004c

0800c9e0 <acc_calibration_a121_validate_calibration>:
 800c9e0:	b510      	push	{r4, lr}
 800c9e2:	218c      	movs	r1, #140	@ 0x8c
 800c9e4:	4604      	mov	r4, r0
 800c9e6:	f003 fd2f 	bl	8010448 <acc_alg_basic_util_crc32>
 800c9ea:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800c9ee:	1a18      	subs	r0, r3, r0
 800c9f0:	fab0 f080 	clz	r0, r0
 800c9f4:	0940      	lsrs	r0, r0, #5
 800c9f6:	bd10      	pop	{r4, pc}

0800c9f8 <acc_cal_algorithms_pll_cbank>:
 800c9f8:	b4f0      	push	{r4, r5, r6, r7}
 800c9fa:	2400      	movs	r4, #0
 800c9fc:	46a4      	mov	ip, r4
 800c9fe:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800ca02:	fa40 f504 	asr.w	r5, r0, r4
 800ca06:	07ed      	lsls	r5, r5, #31
 800ca08:	b2a6      	uxth	r6, r4
 800ca0a:	d50a      	bpl.n	800ca22 <acc_cal_algorithms_pll_cbank+0x2a>
 800ca0c:	f832 5014 	ldrh.w	r5, [r2, r4, lsl #1]
 800ca10:	1a6d      	subs	r5, r5, r1
 800ca12:	2d00      	cmp	r5, #0
 800ca14:	bfb8      	it	lt
 800ca16:	426d      	neglt	r5, r5
 800ca18:	b2ad      	uxth	r5, r5
 800ca1a:	42bd      	cmp	r5, r7
 800ca1c:	bf3c      	itt	cc
 800ca1e:	462f      	movcc	r7, r5
 800ca20:	46b4      	movcc	ip, r6
 800ca22:	3401      	adds	r4, #1
 800ca24:	2c10      	cmp	r4, #16
 800ca26:	d1ec      	bne.n	800ca02 <acc_cal_algorithms_pll_cbank+0xa>
 800ca28:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ca2c:	290d      	cmp	r1, #13
 800ca2e:	d80c      	bhi.n	800ca4a <acc_cal_algorithms_pll_cbank+0x52>
 800ca30:	f10c 4100 	add.w	r1, ip, #2147483648	@ 0x80000000
 800ca34:	3901      	subs	r1, #1
 800ca36:	eb02 0541 	add.w	r5, r2, r1, lsl #1
 800ca3a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800ca3e:	8869      	ldrh	r1, [r5, #2]
 800ca40:	f241 3487 	movw	r4, #4999	@ 0x1387
 800ca44:	1a52      	subs	r2, r2, r1
 800ca46:	42a2      	cmp	r2, r4
 800ca48:	dc02      	bgt.n	800ca50 <acc_cal_algorithms_pll_cbank+0x58>
 800ca4a:	2000      	movs	r0, #0
 800ca4c:	bcf0      	pop	{r4, r5, r6, r7}
 800ca4e:	4770      	bx	lr
 800ca50:	88aa      	ldrh	r2, [r5, #4]
 800ca52:	1a89      	subs	r1, r1, r2
 800ca54:	42a1      	cmp	r1, r4
 800ca56:	ddf8      	ble.n	800ca4a <acc_cal_algorithms_pll_cbank+0x52>
 800ca58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ca5c:	4290      	cmp	r0, r2
 800ca5e:	d0f4      	beq.n	800ca4a <acc_cal_algorithms_pll_cbank+0x52>
 800ca60:	2001      	movs	r0, #1
 800ca62:	bcf0      	pop	{r4, r5, r6, r7}
 800ca64:	f8a3 c000 	strh.w	ip, [r3]
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop

0800ca6c <acc_cal_algorithms_pll_ibias>:
 800ca6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca70:	2400      	movs	r4, #0
 800ca72:	f1a0 0c02 	sub.w	ip, r0, #2
 800ca76:	4625      	mov	r5, r4
 800ca78:	4627      	mov	r7, r4
 800ca7a:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800ca7e:	e01b      	b.n	800cab8 <acc_cal_algorithms_pll_ibias+0x4c>
 800ca80:	f930 8014 	ldrsh.w	r8, [r0, r4, lsl #1]
 800ca84:	f93c a014 	ldrsh.w	sl, [ip, r4, lsl #1]
 800ca88:	f508 727a 	add.w	r2, r8, #1000	@ 0x3e8
 800ca8c:	eba8 080a 	sub.w	r8, r8, sl
 800ca90:	4598      	cmp	r8, r3
 800ca92:	db30      	blt.n	800caf6 <acc_cal_algorithms_pll_ibias+0x8a>
 800ca94:	45c8      	cmp	r8, r9
 800ca96:	dc2e      	bgt.n	800caf6 <acc_cal_algorithms_pll_ibias+0x8a>
 800ca98:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800ca9c:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	42b3      	cmp	r3, r6
 800caa4:	d204      	bcs.n	800cab0 <acc_cal_algorithms_pll_ibias+0x44>
 800caa6:	ea4f 058e 	mov.w	r5, lr, lsl #2
 800caaa:	461e      	mov	r6, r3
 800caac:	b2ad      	uxth	r5, r5
 800caae:	2701      	movs	r7, #1
 800cab0:	f1be 0f0f 	cmp.w	lr, #15
 800cab4:	d018      	beq.n	800cae8 <acc_cal_algorithms_pll_ibias+0x7c>
 800cab6:	3401      	adds	r4, #1
 800cab8:	1e63      	subs	r3, r4, #1
 800caba:	fb03 f303 	mul.w	r3, r3, r3
 800cabe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800cac2:	005a      	lsls	r2, r3, #1
 800cac4:	f502 7916 	add.w	r9, r2, #600	@ 0x258
 800cac8:	3bc8      	subs	r3, #200	@ 0xc8
 800caca:	fa1f fe84 	uxth.w	lr, r4
 800cace:	2c00      	cmp	r4, #0
 800cad0:	d1d6      	bne.n	800ca80 <acc_cal_algorithms_pll_ibias+0x14>
 800cad2:	f9b0 3000 	ldrsh.w	r3, [r0]
 800cad6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cada:	2b00      	cmp	r3, #0
 800cadc:	bfb8      	it	lt
 800cade:	425b      	neglt	r3, r3
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	42b3      	cmp	r3, r6
 800cae4:	d3df      	bcc.n	800caa6 <acc_cal_algorithms_pll_ibias+0x3a>
 800cae6:	e7e6      	b.n	800cab6 <acc_cal_algorithms_pll_ibias+0x4a>
 800cae8:	b117      	cbz	r7, 800caf0 <acc_cal_algorithms_pll_ibias+0x84>
 800caea:	f085 0530 	eor.w	r5, r5, #48	@ 0x30
 800caee:	800d      	strh	r5, [r1, #0]
 800caf0:	4638      	mov	r0, r7
 800caf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf6:	2700      	movs	r7, #0
 800caf8:	4638      	mov	r0, r7
 800cafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cafe:	bf00      	nop

0800cb00 <acc_cal_algorithms_vfast2_ldo>:
 800cb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb04:	f8b1 305e 	ldrh.w	r3, [r1, #94]	@ 0x5e
 800cb08:	880c      	ldrh	r4, [r1, #0]
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	1b1b      	subs	r3, r3, r4
 800cb0e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800cb12:	9201      	str	r2, [sp, #4]
 800cb14:	db3a      	blt.n	800cb8c <acc_cal_algorithms_vfast2_ldo+0x8c>
 800cb16:	4a1f      	ldr	r2, [pc, #124]	@ (800cb94 <acc_cal_algorithms_vfast2_ldo+0x94>)
 800cb18:	ea4f 4803 	mov.w	r8, r3, lsl #16
 800cb1c:	fba2 3808 	umull	r3, r8, r2, r8
 800cb20:	2500      	movs	r5, #0
 800cb22:	4681      	mov	r9, r0
 800cb24:	460e      	mov	r6, r1
 800cb26:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800cb2a:	46ab      	mov	fp, r5
 800cb2c:	46a2      	mov	sl, r4
 800cb2e:	2210      	movs	r2, #16
 800cb30:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 800cb34:	2001      	movs	r0, #1
 800cb36:	e009      	b.n	800cb4c <acc_cal_algorithms_vfast2_ldo+0x4c>
 800cb38:	3201      	adds	r2, #1
 800cb3a:	b292      	uxth	r2, r2
 800cb3c:	458e      	cmp	lr, r1
 800cb3e:	bf38      	it	cc
 800cb40:	2000      	movcc	r0, #0
 800cb42:	2a40      	cmp	r2, #64	@ 0x40
 800cb44:	4445      	add	r5, r8
 800cb46:	d01a      	beq.n	800cb7e <acc_cal_algorithms_vfast2_ldo+0x7e>
 800cb48:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 800cb4c:	eba4 0309 	sub.w	r3, r4, r9
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	bfb8      	it	lt
 800cb54:	425b      	neglt	r3, r3
 800cb56:	b29b      	uxth	r3, r3
 800cb58:	eb0a 4115 	add.w	r1, sl, r5, lsr #16
 800cb5c:	4563      	cmp	r3, ip
 800cb5e:	f501 7748 	add.w	r7, r1, #800	@ 0x320
 800cb62:	bf3c      	itt	cc
 800cb64:	469c      	movcc	ip, r3
 800cb66:	4693      	movcc	fp, r2
 800cb68:	42bc      	cmp	r4, r7
 800cb6a:	f504 7e48 	add.w	lr, r4, #800	@ 0x320
 800cb6e:	d9e3      	bls.n	800cb38 <acc_cal_algorithms_vfast2_ldo+0x38>
 800cb70:	3201      	adds	r2, #1
 800cb72:	b292      	uxth	r2, r2
 800cb74:	2a40      	cmp	r2, #64	@ 0x40
 800cb76:	f04f 0000 	mov.w	r0, #0
 800cb7a:	4445      	add	r5, r8
 800cb7c:	d1e4      	bne.n	800cb48 <acc_cal_algorithms_vfast2_ldo+0x48>
 800cb7e:	b130      	cbz	r0, 800cb8e <acc_cal_algorithms_vfast2_ldo+0x8e>
 800cb80:	9b01      	ldr	r3, [sp, #4]
 800cb82:	f8a3 b000 	strh.w	fp, [r3]
 800cb86:	b003      	add	sp, #12
 800cb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	b003      	add	sp, #12
 800cb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb94:	aaaaaaab 	.word	0xaaaaaaab

0800cb98 <acc_cal_algorithms_delay_cbank>:
 800cb98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb9a:	f9b0 2000 	ldrsh.w	r2, [r0]
 800cb9e:	460e      	mov	r6, r1
 800cba0:	b0b1      	sub	sp, #196	@ 0xc4
 800cba2:	4611      	mov	r1, r2
 800cba4:	4605      	mov	r5, r0
 800cba6:	2401      	movs	r4, #1
 800cba8:	2700      	movs	r7, #0
 800cbaa:	e008      	b.n	800cbbe <acc_cal_algorithms_delay_cbank+0x26>
 800cbac:	428a      	cmp	r2, r1
 800cbae:	bfa8      	it	ge
 800cbb0:	4627      	movge	r7, r4
 800cbb2:	f104 0401 	add.w	r4, r4, #1
 800cbb6:	bfa8      	it	ge
 800cbb8:	4611      	movge	r1, r2
 800cbba:	2c20      	cmp	r4, #32
 800cbbc:	d00c      	beq.n	800cbd8 <acc_cal_algorithms_delay_cbank+0x40>
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
 800cbc4:	f5c3 7348 	rsb	r3, r3, #800	@ 0x320
 800cbc8:	4413      	add	r3, r2
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cbd0:	d9ec      	bls.n	800cbac <acc_cal_algorithms_delay_cbank+0x14>
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	b031      	add	sp, #196	@ 0xc4
 800cbd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbd8:	2f07      	cmp	r7, #7
 800cbda:	d85f      	bhi.n	800cc9c <acc_cal_algorithms_delay_cbank+0x104>
 800cbdc:	2300      	movs	r3, #0
 800cbde:	f107 0208 	add.w	r2, r7, #8
 800cbe2:	1ad2      	subs	r2, r2, r3
 800cbe4:	af03      	add	r7, sp, #12
 800cbe6:	b30a      	cbz	r2, 800cc2c <acc_cal_algorithms_delay_cbank+0x94>
 800cbe8:	18d5      	adds	r5, r2, r3
 800cbea:	4639      	mov	r1, r7
 800cbec:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800cbf0:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 800cbf4:	f934 0b02 	ldrsh.w	r0, [r4], #2
 800cbf8:	ee07 0a10 	vmov	s14, r0
 800cbfc:	fb03 f003 	mul.w	r0, r3, r3
 800cc00:	ee06 3a90 	vmov	s13, r3
 800cc04:	ee07 0a90 	vmov	s15, r0
 800cc08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cc0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc10:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800cc14:	42a5      	cmp	r5, r4
 800cc16:	ed81 7a00 	vstr	s14, [r1]
 800cc1a:	edc1 7a01 	vstr	s15, [r1, #4]
 800cc1e:	edc1 6a02 	vstr	s13, [r1, #8]
 800cc22:	f103 0301 	add.w	r3, r3, #1
 800cc26:	f101 010c 	add.w	r1, r1, #12
 800cc2a:	d1e3      	bne.n	800cbf4 <acc_cal_algorithms_delay_cbank+0x5c>
 800cc2c:	4638      	mov	r0, r7
 800cc2e:	4669      	mov	r1, sp
 800cc30:	f003 fc26 	bl	8010480 <acc_alg_least_square_fit>
 800cc34:	2800      	cmp	r0, #0
 800cc36:	d0cc      	beq.n	800cbd2 <acc_cal_algorithms_delay_cbank+0x3a>
 800cc38:	ed9d 6a00 	vldr	s12, [sp]
 800cc3c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800cc40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc44:	d0c5      	beq.n	800cbd2 <acc_cal_algorithms_delay_cbank+0x3a>
 800cc46:	eddd 6a01 	vldr	s13, [sp, #4]
 800cc4a:	eef5 6a40 	vcmp.f32	s13, #0.0
 800cc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc52:	d0be      	beq.n	800cbd2 <acc_cal_algorithms_delay_cbank+0x3a>
 800cc54:	eddd 7a02 	vldr	s15, [sp, #8]
 800cc58:	eef1 7a67 	vneg.f32	s15, s15
 800cc5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800cc60:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800cc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc68:	dbb3      	blt.n	800cbd2 <acc_cal_algorithms_delay_cbank+0x3a>
 800cc6a:	eef1 6a66 	vneg.f32	s13, s13
 800cc6e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800cc72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc7a:	d5aa      	bpl.n	800cbd2 <acc_cal_algorithms_delay_cbank+0x3a>
 800cc7c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cc80:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc88:	ee17 3a90 	vmov	r3, s15
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	2b3f      	cmp	r3, #63	@ 0x3f
 800cc90:	d89f      	bhi.n	800cbd2 <acc_cal_algorithms_delay_cbank+0x3a>
 800cc92:	085b      	lsrs	r3, r3, #1
 800cc94:	f083 0310 	eor.w	r3, r3, #16
 800cc98:	8033      	strh	r3, [r6, #0]
 800cc9a:	e79b      	b.n	800cbd4 <acc_cal_algorithms_delay_cbank+0x3c>
 800cc9c:	1ffb      	subs	r3, r7, #7
 800cc9e:	2f17      	cmp	r7, #23
 800cca0:	bf88      	it	hi
 800cca2:	f1c3 0220 	rsbhi	r2, r3, #32
 800cca6:	d89d      	bhi.n	800cbe4 <acc_cal_algorithms_delay_cbank+0x4c>
 800cca8:	e799      	b.n	800cbde <acc_cal_algorithms_delay_cbank+0x46>
 800ccaa:	bf00      	nop

0800ccac <acc_cal_algorithms_bba_cal_ctrl>:
 800ccac:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 800cd88 <acc_cal_algorithms_bba_cal_ctrl+0xdc>
 800ccb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccb4:	f04f 0e00 	mov.w	lr, #0
 800ccb8:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 800ccbc:	f9b0 4000 	ldrsh.w	r4, [r0]
 800ccc0:	4665      	mov	r5, ip
 800ccc2:	46f0      	mov	r8, lr
 800ccc4:	463e      	mov	r6, r7
 800ccc6:	f06f 021b 	mvn.w	r2, #27
 800ccca:	e014      	b.n	800ccf6 <acc_cal_algorithms_bba_cal_ctrl+0x4a>
 800cccc:	42a7      	cmp	r7, r4
 800ccce:	bfc4      	itt	gt
 800ccd0:	4627      	movgt	r7, r4
 800ccd2:	4696      	movgt	lr, r2
 800ccd4:	2a1c      	cmp	r2, #28
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	d016      	beq.n	800cd08 <acc_cal_algorithms_bba_cal_ctrl+0x5c>
 800ccda:	881b      	ldrh	r3, [r3, #0]
 800ccdc:	f930 4f02 	ldrsh.w	r4, [r0, #2]!
 800cce0:	1ae3      	subs	r3, r4, r3
 800cce2:	b21b      	sxth	r3, r3
 800cce4:	429e      	cmp	r6, r3
 800cce6:	f102 0208 	add.w	r2, r2, #8
 800ccea:	bfa8      	it	ge
 800ccec:	461e      	movge	r6, r3
 800ccee:	429d      	cmp	r5, r3
 800ccf0:	b212      	sxth	r2, r2
 800ccf2:	bfb8      	it	lt
 800ccf4:	461d      	movlt	r5, r3
 800ccf6:	2c00      	cmp	r4, #0
 800ccf8:	dae8      	bge.n	800cccc <acc_cal_algorithms_bba_cal_ctrl+0x20>
 800ccfa:	45a4      	cmp	ip, r4
 800ccfc:	daea      	bge.n	800ccd4 <acc_cal_algorithms_bba_cal_ctrl+0x28>
 800ccfe:	2a1c      	cmp	r2, #28
 800cd00:	46a4      	mov	ip, r4
 800cd02:	4690      	mov	r8, r2
 800cd04:	4603      	mov	r3, r0
 800cd06:	d1e8      	bne.n	800ccda <acc_cal_algorithms_bba_cal_ctrl+0x2e>
 800cd08:	f5a5 551c 	sub.w	r5, r5, #9984	@ 0x2700
 800cd0c:	3d10      	subs	r5, #16
 800cd0e:	b2ad      	uxth	r5, r5
 800cd10:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800cd14:	429d      	cmp	r5, r3
 800cd16:	d800      	bhi.n	800cd1a <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800cd18:	b116      	cbz	r6, 800cd20 <acc_cal_algorithms_bba_cal_ctrl+0x74>
 800cd1a:	2000      	movs	r0, #0
 800cd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd20:	f51c 4f00 	cmn.w	ip, #32768	@ 0x8000
 800cd24:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800cd28:	d011      	beq.n	800cd4e <acc_cal_algorithms_bba_cal_ctrl+0xa2>
 800cd2a:	429f      	cmp	r7, r3
 800cd2c:	d029      	beq.n	800cd82 <acc_cal_algorithms_bba_cal_ctrl+0xd6>
 800cd2e:	ebae 0e08 	sub.w	lr, lr, r8
 800cd32:	f1be 0f08 	cmp.w	lr, #8
 800cd36:	d1f0      	bne.n	800cd1a <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800cd38:	eba7 070c 	sub.w	r7, r7, ip
 800cd3c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800cd40:	fb9c f7f7 	sdiv	r7, ip, r7
 800cd44:	eba8 0e07 	sub.w	lr, r8, r7
 800cd48:	fa0f fe8e 	sxth.w	lr, lr
 800cd4c:	e001      	b.n	800cd52 <acc_cal_algorithms_bba_cal_ctrl+0xa6>
 800cd4e:	429f      	cmp	r7, r3
 800cd50:	d0e3      	beq.n	800cd1a <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800cd52:	f1be 0f00 	cmp.w	lr, #0
 800cd56:	db07      	blt.n	800cd68 <acc_cal_algorithms_bba_cal_ctrl+0xbc>
 800cd58:	f1be 0f1f 	cmp.w	lr, #31
 800cd5c:	dcdd      	bgt.n	800cd1a <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800cd5e:	f8a1 e000 	strh.w	lr, [r1]
 800cd62:	2001      	movs	r0, #1
 800cd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd68:	f1ce 0e00 	rsb	lr, lr, #0
 800cd6c:	fa1f fe8e 	uxth.w	lr, lr
 800cd70:	f1be 0f1f 	cmp.w	lr, #31
 800cd74:	d8d1      	bhi.n	800cd1a <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800cd76:	f04e 0e20 	orr.w	lr, lr, #32
 800cd7a:	f8a1 e000 	strh.w	lr, [r1]
 800cd7e:	2001      	movs	r0, #1
 800cd80:	e7cc      	b.n	800cd1c <acc_cal_algorithms_bba_cal_ctrl+0x70>
 800cd82:	46c6      	mov	lr, r8
 800cd84:	e7e5      	b.n	800cd52 <acc_cal_algorithms_bba_cal_ctrl+0xa6>
 800cd86:	bf00      	nop
 800cd88:	ffff8000 	.word	0xffff8000

0800cd8c <acc_cal_algorithms_area_index>:
 800cd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd90:	f5ad 7d7f 	sub.w	sp, sp, #1020	@ 0x3fc
 800cd94:	ab05      	add	r3, sp, #20
 800cd96:	f500 62c0 	add.w	r2, r0, #1536	@ 0x600
 800cd9a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800cd9e:	9304      	str	r3, [sp, #16]
 800cda0:	4c5c      	ldr	r4, [pc, #368]	@ (800cf14 <acc_cal_algorithms_area_index+0x188>)
 800cda2:	4d5d      	ldr	r5, [pc, #372]	@ (800cf18 <acc_cal_algorithms_area_index+0x18c>)
 800cda4:	9105      	str	r1, [sp, #20]
 800cda6:	2300      	movs	r3, #0
 800cda8:	4681      	mov	r9, r0
 800cdaa:	9301      	str	r3, [sp, #4]
 800cdac:	f10d 0898 	add.w	r8, sp, #152	@ 0x98
 800cdb0:	af3d      	add	r7, sp, #244	@ 0xf4
 800cdb2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800cdb6:	464e      	mov	r6, r9
 800cdb8:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 800cdbc:	f936 0b04 	ldrsh.w	r0, [r6], #4
 800cdc0:	f003 fad2 	bl	8010368 <acc_alg_atan2_q16>
 800cdc4:	f84a 0b04 	str.w	r0, [sl], #4
 800cdc8:	45c2      	cmp	sl, r8
 800cdca:	d1f5      	bne.n	800cdb8 <acc_cal_algorithms_area_index+0x2c>
 800cdcc:	f10d 0b94 	add.w	fp, sp, #148	@ 0x94
 800cdd0:	46da      	mov	sl, fp
 800cdd2:	464e      	mov	r6, r9
 800cdd4:	f9b6 1062 	ldrsh.w	r1, [r6, #98]	@ 0x62
 800cdd8:	f9b6 0060 	ldrsh.w	r0, [r6, #96]	@ 0x60
 800cddc:	f003 fac4 	bl	8010368 <acc_alg_atan2_q16>
 800cde0:	f84a 0f04 	str.w	r0, [sl, #4]!
 800cde4:	4557      	cmp	r7, sl
 800cde6:	f106 0604 	add.w	r6, r6, #4
 800cdea:	d1f3      	bne.n	800cdd4 <acc_cal_algorithms_area_index+0x48>
 800cdec:	9a01      	ldr	r2, [sp, #4]
 800cdee:	ab3e      	add	r3, sp, #248	@ 0xf8
 800cdf0:	ae0d      	add	r6, sp, #52	@ 0x34
 800cdf2:	1898      	adds	r0, r3, r2
 800cdf4:	2100      	movs	r1, #0
 800cdf6:	f85b 3f04 	ldr.w	r3, [fp, #4]!
 800cdfa:	f856 2f04 	ldr.w	r2, [r6, #4]!
 800cdfe:	1a9b      	subs	r3, r3, r2
 800ce00:	42a3      	cmp	r3, r4
 800ce02:	dd61      	ble.n	800cec8 <acc_cal_algorithms_area_index+0x13c>
 800ce04:	f5a3 23c9 	sub.w	r3, r3, #411648	@ 0x64800
 800ce08:	3b7e      	subs	r3, #126	@ 0x7e
 800ce0a:	42a3      	cmp	r3, r4
 800ce0c:	dcfa      	bgt.n	800ce04 <acc_cal_algorithms_area_index+0x78>
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	bfb8      	it	lt
 800ce12:	425b      	neglt	r3, r3
 800ce14:	4299      	cmp	r1, r3
 800ce16:	bfb8      	it	lt
 800ce18:	4619      	movlt	r1, r3
 800ce1a:	45bb      	cmp	fp, r7
 800ce1c:	f840 3b04 	str.w	r3, [r0], #4
 800ce20:	d1e9      	bne.n	800cdf6 <acc_cal_algorithms_area_index+0x6a>
 800ce22:	9b02      	ldr	r3, [sp, #8]
 800ce24:	1049      	asrs	r1, r1, #1
 800ce26:	f843 1f04 	str.w	r1, [r3, #4]!
 800ce2a:	9302      	str	r3, [sp, #8]
 800ce2c:	9b01      	ldr	r3, [sp, #4]
 800ce2e:	3360      	adds	r3, #96	@ 0x60
 800ce30:	9301      	str	r3, [sp, #4]
 800ce32:	9b03      	ldr	r3, [sp, #12]
 800ce34:	f109 09c0 	add.w	r9, r9, #192	@ 0xc0
 800ce38:	4599      	cmp	r9, r3
 800ce3a:	d1ba      	bne.n	800cdb2 <acc_cal_algorithms_area_index+0x26>
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	9c04      	ldr	r4, [sp, #16]
 800ce40:	4618      	mov	r0, r3
 800ce42:	4619      	mov	r1, r3
 800ce44:	f854 2f04 	ldr.w	r2, [r4, #4]!
 800ce48:	428a      	cmp	r2, r1
 800ce4a:	bfc8      	it	gt
 800ce4c:	4618      	movgt	r0, r3
 800ce4e:	f103 0301 	add.w	r3, r3, #1
 800ce52:	bfc8      	it	gt
 800ce54:	4611      	movgt	r1, r2
 800ce56:	2b08      	cmp	r3, #8
 800ce58:	d1f4      	bne.n	800ce44 <acc_cal_algorithms_area_index+0xb8>
 800ce5a:	ab06      	add	r3, sp, #24
 800ce5c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800ce60:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800ce64:	ab3e      	add	r3, sp, #248	@ 0xf8
 800ce66:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800ce6a:	f10d 0297 	add.w	r2, sp, #151	@ 0x97
 800ce6e:	f10d 00af 	add.w	r0, sp, #175	@ 0xaf
 800ce72:	f851 3b04 	ldr.w	r3, [r1], #4
 800ce76:	42a3      	cmp	r3, r4
 800ce78:	bfac      	ite	ge
 800ce7a:	2300      	movge	r3, #0
 800ce7c:	2301      	movlt	r3, #1
 800ce7e:	f802 3f01 	strb.w	r3, [r2, #1]!
 800ce82:	4290      	cmp	r0, r2
 800ce84:	7613      	strb	r3, [r2, #24]
 800ce86:	d1f4      	bne.n	800ce72 <acc_cal_algorithms_area_index+0xe6>
 800ce88:	2200      	movs	r2, #0
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	b321      	cbz	r1, 800ceda <acc_cal_algorithms_area_index+0x14e>
 800ce90:	f818 0003 	ldrb.w	r0, [r8, r3]
 800ce94:	b1d8      	cbz	r0, 800cece <acc_cal_algorithms_area_index+0x142>
 800ce96:	3201      	adds	r2, #1
 800ce98:	3301      	adds	r3, #1
 800ce9a:	2b30      	cmp	r3, #48	@ 0x30
 800ce9c:	d1f7      	bne.n	800ce8e <acc_cal_algorithms_area_index+0x102>
 800ce9e:	f1a2 030c 	sub.w	r3, r2, #12
 800cea2:	2b08      	cmp	r3, #8
 800cea4:	d82e      	bhi.n	800cf04 <acc_cal_algorithms_area_index+0x178>
 800cea6:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 800ceaa:	2a17      	cmp	r2, #23
 800ceac:	d902      	bls.n	800ceb4 <acc_cal_algorithms_area_index+0x128>
 800ceae:	3a18      	subs	r2, #24
 800ceb0:	2a17      	cmp	r2, #23
 800ceb2:	d8fc      	bhi.n	800ceae <acc_cal_algorithms_area_index+0x122>
 800ceb4:	9b05      	ldr	r3, [sp, #20]
 800ceb6:	2001      	movs	r0, #1
 800ceb8:	801a      	strh	r2, [r3, #0]
 800ceba:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 800cebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec2:	f503 23c9 	add.w	r3, r3, #411648	@ 0x64800
 800cec6:	337e      	adds	r3, #126	@ 0x7e
 800cec8:	42ab      	cmp	r3, r5
 800ceca:	dbfa      	blt.n	800cec2 <acc_cal_algorithms_area_index+0x136>
 800cecc:	e79f      	b.n	800ce0e <acc_cal_algorithms_area_index+0x82>
 800cece:	2a0b      	cmp	r2, #11
 800ced0:	d8e5      	bhi.n	800ce9e <acc_cal_algorithms_area_index+0x112>
 800ced2:	3301      	adds	r3, #1
 800ced4:	2b30      	cmp	r3, #48	@ 0x30
 800ced6:	d0f0      	beq.n	800ceba <acc_cal_algorithms_area_index+0x12e>
 800ced8:	4602      	mov	r2, r0
 800ceda:	1e58      	subs	r0, r3, #1
 800cedc:	4440      	add	r0, r8
 800cede:	1c59      	adds	r1, r3, #1
 800cee0:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800cee4:	1e4b      	subs	r3, r1, #1
 800cee6:	b12c      	cbz	r4, 800cef4 <acc_cal_algorithms_area_index+0x168>
 800cee8:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 800ceec:	b914      	cbnz	r4, 800cef4 <acc_cal_algorithms_area_index+0x168>
 800ceee:	4619      	mov	r1, r3
 800cef0:	2201      	movs	r2, #1
 800cef2:	e7d1      	b.n	800ce98 <acc_cal_algorithms_area_index+0x10c>
 800cef4:	2930      	cmp	r1, #48	@ 0x30
 800cef6:	d001      	beq.n	800cefc <acc_cal_algorithms_area_index+0x170>
 800cef8:	3101      	adds	r1, #1
 800cefa:	e7f1      	b.n	800cee0 <acc_cal_algorithms_area_index+0x154>
 800cefc:	f1a2 030c 	sub.w	r3, r2, #12
 800cf00:	2b08      	cmp	r3, #8
 800cf02:	d904      	bls.n	800cf0e <acc_cal_algorithms_area_index+0x182>
 800cf04:	2000      	movs	r0, #0
 800cf06:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 800cf0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf0e:	0852      	lsrs	r2, r2, #1
 800cf10:	e7d0      	b.n	800ceb4 <acc_cal_algorithms_area_index+0x128>
 800cf12:	bf00      	nop
 800cf14:	0003243f 	.word	0x0003243f
 800cf18:	fffcdbc1 	.word	0xfffcdbc1

0800cf1c <acc_cal_algorithms_iq_imbalance>:
 800cf1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf20:	ed2d 8b02 	vpush	{d8}
 800cf24:	eddf 5a51 	vldr	s11, [pc, #324]	@ 800d06c <acc_cal_algorithms_iq_imbalance+0x150>
 800cf28:	b0bd      	sub	sp, #244	@ 0xf4
 800cf2a:	4680      	mov	r8, r0
 800cf2c:	4689      	mov	r9, r1
 800cf2e:	f500 6cd8 	add.w	ip, r0, #1728	@ 0x6c0
 800cf32:	f100 01c0 	add.w	r1, r0, #192	@ 0xc0
 800cf36:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800cf3a:	a804      	add	r0, sp, #16
 800cf3c:	f1a1 04c0 	sub.w	r4, r1, #192	@ 0xc0
 800cf40:	2700      	movs	r7, #0
 800cf42:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 800cf46:	f9b4 5000 	ldrsh.w	r5, [r4]
 800cf4a:	fb06 f606 	mul.w	r6, r6, r6
 800cf4e:	3404      	adds	r4, #4
 800cf50:	fb05 6505 	mla	r5, r5, r5, r6
 800cf54:	42a1      	cmp	r1, r4
 800cf56:	442f      	add	r7, r5
 800cf58:	d1f3      	bne.n	800cf42 <acc_cal_algorithms_iq_imbalance+0x26>
 800cf5a:	ee07 7a90 	vmov	s15, r7
 800cf5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf62:	31c0      	adds	r1, #192	@ 0xc0
 800cf64:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 800cf68:	458c      	cmp	ip, r1
 800cf6a:	eeb1 7ae6 	vsqrt.f32	s14, s13
 800cf6e:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800cf72:	ece0 7a01 	vstmia	r0!, {s15}
 800cf76:	d1e1      	bne.n	800cf3c <acc_cal_algorithms_iq_imbalance+0x20>
 800cf78:	2a00      	cmp	r2, #0
 800cf7a:	d070      	beq.n	800d05e <acc_cal_algorithms_iq_imbalance+0x142>
 800cf7c:	461c      	mov	r4, r3
 800cf7e:	eb02 0509 	add.w	r5, r2, r9
 800cf82:	ae24      	add	r6, sp, #144	@ 0x90
 800cf84:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 800cf88:	eeb1 8a00 	vmov.f32	s16, #16	@ 0x40800000  4.0
 800cf8c:	eb08 0289 	add.w	r2, r8, r9, lsl #2
 800cf90:	ab0c      	add	r3, sp, #48	@ 0x30
 800cf92:	a904      	add	r1, sp, #16
 800cf94:	f9b2 0000 	ldrsh.w	r0, [r2]
 800cf98:	ecf1 5a01 	vldmia	r1!, {s11}
 800cf9c:	ee06 0a10 	vmov	s12, r0
 800cfa0:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800cfa4:	ee06 0a90 	vmov	s13, r0
 800cfa8:	f9b2 0060 	ldrsh.w	r0, [r2, #96]	@ 0x60
 800cfac:	ee07 0a10 	vmov	s14, r0
 800cfb0:	f9b2 0062 	ldrsh.w	r0, [r2, #98]	@ 0x62
 800cfb4:	ee07 0a90 	vmov	s15, r0
 800cfb8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800cfbc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800cfc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cfc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfc8:	ee26 6a25 	vmul.f32	s12, s12, s11
 800cfcc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800cfd0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cfd4:	ee27 7a25 	vmul.f32	s14, s14, s11
 800cfd8:	ee26 5a06 	vmul.f32	s10, s12, s12
 800cfdc:	ee67 5a07 	vmul.f32	s11, s14, s14
 800cfe0:	ee26 6a26 	vmul.f32	s12, s12, s13
 800cfe4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cfe8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800cfec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cff0:	ed83 5a00 	vstr	s10, [r3]
 800cff4:	ed83 6a01 	vstr	s12, [r3, #4]
 800cff8:	edc3 6a02 	vstr	s13, [r3, #8]
 800cffc:	edc3 5a18 	vstr	s11, [r3, #96]	@ 0x60
 800d000:	ed83 7a19 	vstr	s14, [r3, #100]	@ 0x64
 800d004:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
 800d008:	330c      	adds	r3, #12
 800d00a:	429e      	cmp	r6, r3
 800d00c:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 800d010:	d1c0      	bne.n	800cf94 <acc_cal_algorithms_iq_imbalance+0x78>
 800d012:	2210      	movs	r2, #16
 800d014:	a901      	add	r1, sp, #4
 800d016:	a80c      	add	r0, sp, #48	@ 0x30
 800d018:	f003 fa32 	bl	8010480 <acc_alg_least_square_fit>
 800d01c:	b300      	cbz	r0, 800d060 <acc_cal_algorithms_iq_imbalance+0x144>
 800d01e:	eddd 7a01 	vldr	s15, [sp, #4]
 800d022:	ed9d 7a03 	vldr	s14, [sp, #12]
 800d026:	eddd 0a02 	vldr	s1, [sp, #8]
 800d02a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800d02e:	4620      	mov	r0, r4
 800d030:	f109 0901 	add.w	r9, r9, #1
 800d034:	3402      	adds	r4, #2
 800d036:	ee67 7a88 	vmul.f32	s15, s15, s16
 800d03a:	ee60 6aa0 	vmul.f32	s13, s1, s1
 800d03e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d042:	ee88 7a80 	vdiv.f32	s14, s17, s0
 800d046:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d04a:	ee67 0a20 	vmul.f32	s1, s14, s1
 800d04e:	eeb1 1ae7 	vsqrt.f32	s2, s15
 800d052:	ee27 1a01 	vmul.f32	s2, s14, s2
 800d056:	f003 fe99 	bl	8010d8c <acc_alg_iq_imb_comp_to_fix_point>
 800d05a:	454d      	cmp	r5, r9
 800d05c:	d196      	bne.n	800cf8c <acc_cal_algorithms_iq_imbalance+0x70>
 800d05e:	2001      	movs	r0, #1
 800d060:	b03d      	add	sp, #244	@ 0xf4
 800d062:	ecbd 8b02 	vpop	{d8}
 800d066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d06a:	bf00      	nop
 800d06c:	42400000 	.word	0x42400000

0800d070 <acc_cal_algorithms_rx_freq_ctrl>:
 800d070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d074:	b087      	sub	sp, #28
 800d076:	2400      	movs	r4, #0
 800d078:	4606      	mov	r6, r0
 800d07a:	468b      	mov	fp, r1
 800d07c:	9203      	str	r2, [sp, #12]
 800d07e:	f100 0902 	add.w	r9, r0, #2
 800d082:	9402      	str	r4, [sp, #8]
 800d084:	4625      	mov	r5, r4
 800d086:	46a0      	mov	r8, r4
 800d088:	46a2      	mov	sl, r4
 800d08a:	f10d 0716 	add.w	r7, sp, #22
 800d08e:	e006      	b.n	800d09e <acc_cal_algorithms_rx_freq_ctrl+0x2e>
 800d090:	4553      	cmp	r3, sl
 800d092:	d82a      	bhi.n	800d0ea <acc_cal_algorithms_rx_freq_ctrl+0x7a>
 800d094:	4645      	mov	r5, r8
 800d096:	4698      	mov	r8, r3
 800d098:	3401      	adds	r4, #1
 800d09a:	2c08      	cmp	r4, #8
 800d09c:	d019      	beq.n	800d0d2 <acc_cal_algorithms_rx_freq_ctrl+0x62>
 800d09e:	9700      	str	r7, [sp, #0]
 800d0a0:	ab05      	add	r3, sp, #20
 800d0a2:	465a      	mov	r2, fp
 800d0a4:	f939 1024 	ldrsh.w	r1, [r9, r4, lsl #2]
 800d0a8:	f936 0024 	ldrsh.w	r0, [r6, r4, lsl #2]
 800d0ac:	f003 fe4a 	bl	8010d44 <acc_alg_comp_iq_imb>
 800d0b0:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 800d0b4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800d0b8:	fb02 f202 	mul.w	r2, r2, r2
 800d0bc:	fb03 2303 	mla	r3, r3, r3, r2
 800d0c0:	42ab      	cmp	r3, r5
 800d0c2:	b2a2      	uxth	r2, r4
 800d0c4:	d9e8      	bls.n	800d098 <acc_cal_algorithms_rx_freq_ctrl+0x28>
 800d0c6:	4543      	cmp	r3, r8
 800d0c8:	d8e2      	bhi.n	800d090 <acc_cal_algorithms_rx_freq_ctrl+0x20>
 800d0ca:	3401      	adds	r4, #1
 800d0cc:	2c08      	cmp	r4, #8
 800d0ce:	461d      	mov	r5, r3
 800d0d0:	d1e5      	bne.n	800d09e <acc_cal_algorithms_rx_freq_ctrl+0x2e>
 800d0d2:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 800d0d6:	45aa      	cmp	sl, r5
 800d0d8:	bf85      	ittet	hi
 800d0da:	e9dd 2302 	ldrdhi	r2, r3, [sp, #8]
 800d0de:	2001      	movhi	r0, #1
 800d0e0:	2000      	movls	r0, #0
 800d0e2:	801a      	strhhi	r2, [r3, #0]
 800d0e4:	b007      	add	sp, #28
 800d0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ea:	4645      	mov	r5, r8
 800d0ec:	9202      	str	r2, [sp, #8]
 800d0ee:	46d0      	mov	r8, sl
 800d0f0:	469a      	mov	sl, r3
 800d0f2:	e7d1      	b.n	800d098 <acc_cal_algorithms_rx_freq_ctrl+0x28>

0800d0f4 <acc_cal_algorithms_wavelet_duration_p1>:
 800d0f4:	b508      	push	{r3, lr}
 800d0f6:	f003 fded 	bl	8010cd4 <acc_alg_temp>
 800d0fa:	f110 0f14 	cmn.w	r0, #20
 800d0fe:	db06      	blt.n	800d10e <acc_cal_algorithms_wavelet_duration_p1+0x1a>
 800d100:	282c      	cmp	r0, #44	@ 0x2c
 800d102:	dd06      	ble.n	800d112 <acc_cal_algorithms_wavelet_duration_p1+0x1e>
 800d104:	2850      	cmp	r0, #80	@ 0x50
 800d106:	bfb4      	ite	lt
 800d108:	2003      	movlt	r0, #3
 800d10a:	2004      	movge	r0, #4
 800d10c:	bd08      	pop	{r3, pc}
 800d10e:	2001      	movs	r0, #1
 800d110:	bd08      	pop	{r3, pc}
 800d112:	2002      	movs	r0, #2
 800d114:	bd08      	pop	{r3, pc}
 800d116:	bf00      	nop

0800d118 <acc_cal_algorithms_phase_unwrap>:
 800d118:	2901      	cmp	r1, #1
 800d11a:	d926      	bls.n	800d16a <acc_cal_algorithms_phase_unwrap+0x52>
 800d11c:	b470      	push	{r4, r5, r6}
 800d11e:	1f03      	subs	r3, r0, #4
 800d120:	4e12      	ldr	r6, [pc, #72]	@ (800d16c <acc_cal_algorithms_phase_unwrap+0x54>)
 800d122:	4d13      	ldr	r5, [pc, #76]	@ (800d170 <acc_cal_algorithms_phase_unwrap+0x58>)
 800d124:	eb03 0481 	add.w	r4, r3, r1, lsl #2
 800d128:	2100      	movs	r1, #0
 800d12a:	6843      	ldr	r3, [r0, #4]
 800d12c:	440b      	add	r3, r1
 800d12e:	4602      	mov	r2, r0
 800d130:	f840 3f04 	str.w	r3, [r0, #4]!
 800d134:	6812      	ldr	r2, [r2, #0]
 800d136:	1a9a      	subs	r2, r3, r2
 800d138:	42b2      	cmp	r2, r6
 800d13a:	dd09      	ble.n	800d150 <acc_cal_algorithms_phase_unwrap+0x38>
 800d13c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800d140:	f5a3 23c9 	sub.w	r3, r3, #411648	@ 0x64800
 800d144:	3b7e      	subs	r3, #126	@ 0x7e
 800d146:	f5a1 21c9 	sub.w	r1, r1, #411648	@ 0x64800
 800d14a:	6003      	str	r3, [r0, #0]
 800d14c:	397e      	subs	r1, #126	@ 0x7e
 800d14e:	1a9a      	subs	r2, r3, r2
 800d150:	42aa      	cmp	r2, r5
 800d152:	da06      	bge.n	800d162 <acc_cal_algorithms_phase_unwrap+0x4a>
 800d154:	f503 23c9 	add.w	r3, r3, #411648	@ 0x64800
 800d158:	337e      	adds	r3, #126	@ 0x7e
 800d15a:	f501 21c9 	add.w	r1, r1, #411648	@ 0x64800
 800d15e:	6003      	str	r3, [r0, #0]
 800d160:	317e      	adds	r1, #126	@ 0x7e
 800d162:	4284      	cmp	r4, r0
 800d164:	d1e1      	bne.n	800d12a <acc_cal_algorithms_phase_unwrap+0x12>
 800d166:	bc70      	pop	{r4, r5, r6}
 800d168:	4770      	bx	lr
 800d16a:	4770      	bx	lr
 800d16c:	0003243f 	.word	0x0003243f
 800d170:	fffcdbc1 	.word	0xfffcdbc1

0800d174 <acc_cal_algorithms_tx_freq_ctrl>:
 800d174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d178:	f2ad 6d0c 	subw	sp, sp, #1548	@ 0x60c
 800d17c:	4606      	mov	r6, r0
 800d17e:	1c8c      	adds	r4, r1, #2
 800d180:	4690      	mov	r8, r2
 800d182:	4699      	mov	r9, r3
 800d184:	ad01      	add	r5, sp, #4
 800d186:	f20d 6704 	addw	r7, sp, #1540	@ 0x604
 800d18a:	f9b4 1000 	ldrsh.w	r1, [r4]
 800d18e:	f934 0c02 	ldrsh.w	r0, [r4, #-2]
 800d192:	f003 f8e9 	bl	8010368 <acc_alg_atan2_q16>
 800d196:	f845 0f04 	str.w	r0, [r5, #4]!
 800d19a:	42bd      	cmp	r5, r7
 800d19c:	f104 0404 	add.w	r4, r4, #4
 800d1a0:	d1f3      	bne.n	800d18a <acc_cal_algorithms_tx_freq_ctrl+0x16>
 800d1a2:	46ca      	mov	sl, r9
 800d1a4:	f1a9 0304 	sub.w	r3, r9, #4
 800d1a8:	f109 001c 	add.w	r0, r9, #28
 800d1ac:	2100      	movs	r1, #0
 800d1ae:	f843 1f04 	str.w	r1, [r3, #4]!
 800d1b2:	4298      	cmp	r0, r3
 800d1b4:	d1fb      	bne.n	800d1ae <acc_cal_algorithms_tx_freq_ctrl+0x3a>
 800d1b6:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 800d1ba:	f04f 0b00 	mov.w	fp, #0
 800d1be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d1c2:	4f33      	ldr	r7, [pc, #204]	@ (800d290 <acc_cal_algorithms_tx_freq_ctrl+0x11c>)
 800d1c4:	f8cd b000 	str.w	fp, [sp]
 800d1c8:	ac19      	add	r4, sp, #100	@ 0x64
 800d1ca:	00ed      	lsls	r5, r5, #3
 800d1cc:	9301      	str	r3, [sp, #4]
 800d1ce:	f640 5994 	movw	r9, #3476	@ 0xd94
 800d1d2:	2130      	movs	r1, #48	@ 0x30
 800d1d4:	f1a4 005c 	sub.w	r0, r4, #92	@ 0x5c
 800d1d8:	f7ff ff9e 	bl	800d118 <acc_cal_algorithms_phase_unwrap>
 800d1dc:	f1a4 0160 	sub.w	r1, r4, #96	@ 0x60
 800d1e0:	f04f 0c00 	mov.w	ip, #0
 800d1e4:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800d1e8:	6e08      	ldr	r0, [r1, #96]	@ 0x60
 800d1ea:	428c      	cmp	r4, r1
 800d1ec:	eba3 0000 	sub.w	r0, r3, r0
 800d1f0:	4484      	add	ip, r0
 800d1f2:	d1f7      	bne.n	800d1e4 <acc_cal_algorithms_tx_freq_ctrl+0x70>
 800d1f4:	f1bc 0f00 	cmp.w	ip, #0
 800d1f8:	db35      	blt.n	800d266 <acc_cal_algorithms_tx_freq_ctrl+0xf2>
 800d1fa:	ea4f 119c 	mov.w	r1, ip, lsr #6
 800d1fe:	fb09 f101 	mul.w	r1, r9, r1
 800d202:	0d49      	lsrs	r1, r1, #21
 800d204:	fb06 f101 	mul.w	r1, r6, r1
 800d208:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 800d20c:	f8ca 1000 	str.w	r1, [sl]
 800d210:	f1bb 0f00 	cmp.w	fp, #0
 800d214:	d003      	beq.n	800d21e <acc_cal_algorithms_tx_freq_ctrl+0xaa>
 800d216:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d21a:	4288      	cmp	r0, r1
 800d21c:	d930      	bls.n	800d280 <acc_cal_algorithms_tx_freq_ctrl+0x10c>
 800d21e:	f8da 1000 	ldr.w	r1, [sl]
 800d222:	eba1 0108 	sub.w	r1, r1, r8
 800d226:	2900      	cmp	r1, #0
 800d228:	bfb8      	it	lt
 800d22a:	4249      	neglt	r1, r1
 800d22c:	42b9      	cmp	r1, r7
 800d22e:	d204      	bcs.n	800d23a <acc_cal_algorithms_tx_freq_ctrl+0xc6>
 800d230:	2301      	movs	r3, #1
 800d232:	460f      	mov	r7, r1
 800d234:	f8cd b004 	str.w	fp, [sp, #4]
 800d238:	9300      	str	r3, [sp, #0]
 800d23a:	f10b 0301 	add.w	r3, fp, #1
 800d23e:	fa1f fb83 	uxth.w	fp, r3
 800d242:	f1bb 0f08 	cmp.w	fp, #8
 800d246:	f10a 0a04 	add.w	sl, sl, #4
 800d24a:	f104 04c0 	add.w	r4, r4, #192	@ 0xc0
 800d24e:	d1c0      	bne.n	800d1d2 <acc_cal_algorithms_tx_freq_ctrl+0x5e>
 800d250:	9b00      	ldr	r3, [sp, #0]
 800d252:	b11b      	cbz	r3, 800d25c <acc_cal_algorithms_tx_freq_ctrl+0xe8>
 800d254:	f8dd 3630 	ldr.w	r3, [sp, #1584]	@ 0x630
 800d258:	9a01      	ldr	r2, [sp, #4]
 800d25a:	801a      	strh	r2, [r3, #0]
 800d25c:	9800      	ldr	r0, [sp, #0]
 800d25e:	f20d 6d0c 	addw	sp, sp, #1548	@ 0x60c
 800d262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d266:	f1cc 0100 	rsb	r1, ip, #0
 800d26a:	0989      	lsrs	r1, r1, #6
 800d26c:	fb09 f101 	mul.w	r1, r9, r1
 800d270:	0d49      	lsrs	r1, r1, #21
 800d272:	fb06 f101 	mul.w	r1, r6, r1
 800d276:	eba5 2111 	sub.w	r1, r5, r1, lsr #8
 800d27a:	f8ca 1000 	str.w	r1, [sl]
 800d27e:	e7c7      	b.n	800d210 <acc_cal_algorithms_tx_freq_ctrl+0x9c>
 800d280:	2300      	movs	r3, #0
 800d282:	9300      	str	r3, [sp, #0]
 800d284:	9800      	ldr	r0, [sp, #0]
 800d286:	f20d 6d0c 	addw	sp, sp, #1548	@ 0x60c
 800d28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d28e:	bf00      	nop
 800d290:	000f4240 	.word	0x000f4240

0800d294 <acc_cal_algorithms_phase_enhancement>:
 800d294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d298:	b0bc      	sub	sp, #240	@ 0xf0
 800d29a:	4606      	mov	r6, r0
 800d29c:	460d      	mov	r5, r1
 800d29e:	4617      	mov	r7, r2
 800d2a0:	f100 0902 	add.w	r9, r0, #2
 800d2a4:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 800d2a8:	2400      	movs	r4, #0
 800d2aa:	f640 38b7 	movw	r8, #2999	@ 0xbb7
 800d2ae:	e005      	b.n	800d2bc <acc_cal_algorithms_phase_enhancement+0x28>
 800d2b0:	f003 f85a 	bl	8010368 <acc_alg_atan2_q16>
 800d2b4:	2c30      	cmp	r4, #48	@ 0x30
 800d2b6:	f84a 0b04 	str.w	r0, [sl], #4
 800d2ba:	d00f      	beq.n	800d2dc <acc_cal_algorithms_phase_enhancement+0x48>
 800d2bc:	f939 1024 	ldrsh.w	r1, [r9, r4, lsl #2]
 800d2c0:	f936 0024 	ldrsh.w	r0, [r6, r4, lsl #2]
 800d2c4:	fb01 f301 	mul.w	r3, r1, r1
 800d2c8:	fb00 3300 	mla	r3, r0, r0, r3
 800d2cc:	4543      	cmp	r3, r8
 800d2ce:	f104 0401 	add.w	r4, r4, #1
 800d2d2:	dced      	bgt.n	800d2b0 <acc_cal_algorithms_phase_enhancement+0x1c>
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	b03c      	add	sp, #240	@ 0xf0
 800d2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2dc:	ac0b      	add	r4, sp, #44	@ 0x2c
 800d2de:	f1ad 0602 	sub.w	r6, sp, #2
 800d2e2:	4621      	mov	r1, r4
 800d2e4:	4632      	mov	r2, r6
 800d2e6:	f10d 088c 	add.w	r8, sp, #140	@ 0x8c
 800d2ea:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	bfb8      	it	lt
 800d2f2:	330f      	addlt	r3, #15
 800d2f4:	3202      	adds	r2, #2
 800d2f6:	111b      	asrs	r3, r3, #4
 800d2f8:	4541      	cmp	r1, r8
 800d2fa:	8013      	strh	r3, [r2, #0]
 800d2fc:	d1f5      	bne.n	800d2ea <acc_cal_algorithms_phase_enhancement+0x56>
 800d2fe:	a80c      	add	r0, sp, #48	@ 0x30
 800d300:	2130      	movs	r1, #48	@ 0x30
 800d302:	f7ff ff09 	bl	800d118 <acc_cal_algorithms_phase_unwrap>
 800d306:	2200      	movs	r2, #0
 800d308:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800d30c:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800d30e:	4544      	cmp	r4, r8
 800d310:	eba3 0301 	sub.w	r3, r3, r1
 800d314:	441a      	add	r2, r3
 800d316:	d1f7      	bne.n	800d308 <acc_cal_algorithms_phase_enhancement+0x74>
 800d318:	490d      	ldr	r1, [pc, #52]	@ (800d350 <acc_cal_algorithms_phase_enhancement+0xbc>)
 800d31a:	17d3      	asrs	r3, r2, #31
 800d31c:	fb81 1202 	smull	r1, r2, r1, r2
 800d320:	ebc3 12a2 	rsb	r2, r3, r2, asr #6
 800d324:	f502 4399 	add.w	r3, r2, #19584	@ 0x4c80
 800d328:	3330      	adds	r3, #48	@ 0x30
 800d32a:	f64c 1162 	movw	r1, #51554	@ 0xc962
 800d32e:	428b      	cmp	r3, r1
 800d330:	d8d0      	bhi.n	800d2d4 <acc_cal_algorithms_phase_enhancement+0x40>
 800d332:	3d02      	subs	r5, #2
 800d334:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800d338:	f836 3f02 	ldrh.w	r3, [r6, #2]!
 800d33c:	f825 3f02 	strh.w	r3, [r5, #2]!
 800d340:	42b1      	cmp	r1, r6
 800d342:	d1f9      	bne.n	800d338 <acc_cal_algorithms_phase_enhancement+0xa4>
 800d344:	2001      	movs	r0, #1
 800d346:	803a      	strh	r2, [r7, #0]
 800d348:	b03c      	add	sp, #240	@ 0xf0
 800d34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d34e:	bf00      	nop
 800d350:	2aaaaaab 	.word	0x2aaaaaab

0800d354 <acc_cal_algorithms_calc_pulse_params>:
 800d354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d358:	b085      	sub	sp, #20
 800d35a:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
 800d35e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800d362:	9203      	str	r2, [sp, #12]
 800d364:	d349      	bcc.n	800d3fa <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d366:	9b02      	ldr	r3, [sp, #8]
 800d368:	2b08      	cmp	r3, #8
 800d36a:	d046      	beq.n	800d3fa <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d36c:	9a01      	ldr	r2, [sp, #4]
 800d36e:	9c03      	ldr	r4, [sp, #12]
 800d370:	f1a2 0c12 	sub.w	ip, r2, #18
 800d374:	2000      	movs	r0, #0
 800d376:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
 800d37a:	f8cd c000 	str.w	ip, [sp]
 800d37e:	4680      	mov	r8, r0
 800d380:	4682      	mov	sl, r0
 800d382:	4683      	mov	fp, r0
 800d384:	3a02      	subs	r2, #2
 800d386:	2701      	movs	r7, #1
 800d388:	f240 29ee 	movw	r9, #750	@ 0x2ee
 800d38c:	4684      	mov	ip, r0
 800d38e:	e014      	b.n	800d3ba <acc_cal_algorithms_calc_pulse_params+0x66>
 800d390:	2800      	cmp	r0, #0
 800d392:	d136      	bne.n	800d402 <acc_cal_algorithms_calc_pulse_params+0xae>
 800d394:	459b      	cmp	fp, r3
 800d396:	da3a      	bge.n	800d40e <acc_cal_algorithms_calc_pulse_params+0xba>
 800d398:	469b      	mov	fp, r3
 800d39a:	f04f 0801 	mov.w	r8, #1
 800d39e:	f1cc 0600 	rsb	r6, ip, #0
 800d3a2:	429e      	cmp	r6, r3
 800d3a4:	9b00      	ldr	r3, [sp, #0]
 800d3a6:	bfc8      	it	gt
 800d3a8:	ebae 0c05 	subgt.w	ip, lr, r5
 800d3ac:	458a      	cmp	sl, r1
 800d3ae:	bf38      	it	cc
 800d3b0:	468a      	movcc	sl, r1
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	f104 0402 	add.w	r4, r4, #2
 800d3b8:	d01c      	beq.n	800d3f4 <acc_cal_algorithms_calc_pulse_params+0xa0>
 800d3ba:	8a55      	ldrh	r5, [r2, #18]
 800d3bc:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800d3c0:	1a6b      	subs	r3, r5, r1
 800d3c2:	f503 4600 	add.w	r6, r3, #32768	@ 0x8000
 800d3c6:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 800d3ca:	bf38      	it	cc
 800d3cc:	8023      	strhcc	r3, [r4, #0]
 800d3ce:	468e      	mov	lr, r1
 800d3d0:	bf2c      	ite	cs
 800d3d2:	2700      	movcs	r7, #0
 800d3d4:	8811      	ldrhcc	r1, [r2, #0]
 800d3d6:	454b      	cmp	r3, r9
 800d3d8:	dcda      	bgt.n	800d390 <acc_cal_algorithms_calc_pulse_params+0x3c>
 800d3da:	4e58      	ldr	r6, [pc, #352]	@ (800d53c <acc_cal_algorithms_calc_pulse_params+0x1e8>)
 800d3dc:	459b      	cmp	fp, r3
 800d3de:	bfb8      	it	lt
 800d3e0:	469b      	movlt	fp, r3
 800d3e2:	42b3      	cmp	r3, r6
 800d3e4:	dadb      	bge.n	800d39e <acc_cal_algorithms_calc_pulse_params+0x4a>
 800d3e6:	f1b8 0f00 	cmp.w	r8, #0
 800d3ea:	bf0a      	itet	eq
 800d3ec:	2700      	moveq	r7, #0
 800d3ee:	4640      	movne	r0, r8
 800d3f0:	2001      	moveq	r0, #1
 800d3f2:	e7d4      	b.n	800d39e <acc_cal_algorithms_calc_pulse_params+0x4a>
 800d3f4:	f8cd c000 	str.w	ip, [sp]
 800d3f8:	b977      	cbnz	r7, 800d418 <acc_cal_algorithms_calc_pulse_params+0xc4>
 800d3fa:	2000      	movs	r0, #0
 800d3fc:	b005      	add	sp, #20
 800d3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d402:	459b      	cmp	fp, r3
 800d404:	4680      	mov	r8, r0
 800d406:	da05      	bge.n	800d414 <acc_cal_algorithms_calc_pulse_params+0xc0>
 800d408:	469b      	mov	fp, r3
 800d40a:	2700      	movs	r7, #0
 800d40c:	e7c7      	b.n	800d39e <acc_cal_algorithms_calc_pulse_params+0x4a>
 800d40e:	f04f 0801 	mov.w	r8, #1
 800d412:	e7c4      	b.n	800d39e <acc_cal_algorithms_calc_pulse_params+0x4a>
 800d414:	2700      	movs	r7, #0
 800d416:	e7c2      	b.n	800d39e <acc_cal_algorithms_calc_pulse_params+0x4a>
 800d418:	f1b8 0f00 	cmp.w	r8, #0
 800d41c:	d0ed      	beq.n	800d3fa <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d41e:	2800      	cmp	r0, #0
 800d420:	d0eb      	beq.n	800d3fa <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d422:	9b02      	ldr	r3, [sp, #8]
 800d424:	f1b3 0e1c 	subs.w	lr, r3, #28
 800d428:	d0e7      	beq.n	800d3fa <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d42a:	9f03      	ldr	r7, [sp, #12]
 800d42c:	f8cd a008 	str.w	sl, [sp, #8]
 800d430:	f04f 0c00 	mov.w	ip, #0
 800d434:	9003      	str	r0, [sp, #12]
 800d436:	3712      	adds	r7, #18
 800d438:	46e1      	mov	r9, ip
 800d43a:	46e0      	mov	r8, ip
 800d43c:	46e2      	mov	sl, ip
 800d43e:	4660      	mov	r0, ip
 800d440:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
 800d444:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800d448:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800d44c:	463d      	mov	r5, r7
 800d44e:	463c      	mov	r4, r7
 800d450:	210a      	movs	r1, #10
 800d452:	f934 6d02 	ldrsh.w	r6, [r4, #-2]!
 800d456:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
 800d45a:	fb01 3306 	mla	r3, r1, r6, r3
 800d45e:	fb01 3302 	mla	r3, r1, r2, r3
 800d462:	3901      	subs	r1, #1
 800d464:	d1f5      	bne.n	800d452 <acc_cal_algorithms_calc_pulse_params+0xfe>
 800d466:	4543      	cmp	r3, r8
 800d468:	dc64      	bgt.n	800d534 <acc_cal_algorithms_calc_pulse_params+0x1e0>
 800d46a:	454b      	cmp	r3, r9
 800d46c:	bfa8      	it	ge
 800d46e:	4643      	movge	r3, r8
 800d470:	da61      	bge.n	800d536 <acc_cal_algorithms_calc_pulse_params+0x1e2>
 800d472:	4699      	mov	r9, r3
 800d474:	46e2      	mov	sl, ip
 800d476:	f10c 0c01 	add.w	ip, ip, #1
 800d47a:	45f4      	cmp	ip, lr
 800d47c:	d1e0      	bne.n	800d440 <acc_cal_algorithms_calc_pulse_params+0xec>
 800d47e:	f24c 3350 	movw	r3, #50000	@ 0xc350
 800d482:	4598      	cmp	r8, r3
 800d484:	4605      	mov	r5, r0
 800d486:	4656      	mov	r6, sl
 800d488:	e9dd a002 	ldrd	sl, r0, [sp, #8]
 800d48c:	ddb5      	ble.n	800d3fa <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d48e:	4b2c      	ldr	r3, [pc, #176]	@ (800d540 <acc_cal_algorithms_calc_pulse_params+0x1ec>)
 800d490:	4599      	cmp	r9, r3
 800d492:	dab2      	bge.n	800d3fa <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d494:	f1bb 0f00 	cmp.w	fp, #0
 800d498:	d0af      	beq.n	800d3fa <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d49a:	9b00      	ldr	r3, [sp, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d0ac      	beq.n	800d3fa <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d4a0:	9b01      	ldr	r3, [sp, #4]
 800d4a2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800d4a4:	881b      	ldrh	r3, [r3, #0]
 800d4a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d4aa:	00db      	lsls	r3, r3, #3
 800d4ac:	b144      	cbz	r4, 800d4c0 <acc_cal_algorithms_calc_pulse_params+0x16c>
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d204      	bcs.n	800d4bc <acc_cal_algorithms_calc_pulse_params+0x168>
 800d4b2:	43d9      	mvns	r1, r3
 800d4b4:	4459      	add	r1, fp
 800d4b6:	4411      	add	r1, r2
 800d4b8:	fbb1 f1fb 	udiv	r1, r1, fp
 800d4bc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800d4be:	6021      	str	r1, [r4, #0]
 800d4c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d4c2:	2900      	cmp	r1, #0
 800d4c4:	d09a      	beq.n	800d3fc <acc_cal_algorithms_calc_pulse_params+0xa8>
 800d4c6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d4c8:	2900      	cmp	r1, #0
 800d4ca:	d097      	beq.n	800d3fc <acc_cal_algorithms_calc_pulse_params+0xa8>
 800d4cc:	4629      	mov	r1, r5
 800d4ce:	9c01      	ldr	r4, [sp, #4]
 800d4d0:	310e      	adds	r1, #14
 800d4d2:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 800d4d6:	ebb3 0fc4 	cmp.w	r3, r4, lsl #3
 800d4da:	ea4f 05c4 	mov.w	r5, r4, lsl #3
 800d4de:	d205      	bcs.n	800d4ec <acc_cal_algorithms_calc_pulse_params+0x198>
 800d4e0:	43db      	mvns	r3, r3
 800d4e2:	445b      	add	r3, fp
 800d4e4:	442b      	add	r3, r5
 800d4e6:	fbb3 f3fb 	udiv	r3, r3, fp
 800d4ea:	1ac9      	subs	r1, r1, r3
 800d4ec:	9b01      	ldr	r3, [sp, #4]
 800d4ee:	f106 0b0e 	add.w	fp, r6, #14
 800d4f2:	f833 301b 	ldrh.w	r3, [r3, fp, lsl #1]
 800d4f6:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
 800d4fa:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 800d4fe:	d907      	bls.n	800d510 <acc_cal_algorithms_calc_pulse_params+0x1bc>
 800d500:	9d00      	ldr	r5, [sp, #0]
 800d502:	1e6b      	subs	r3, r5, #1
 800d504:	4413      	add	r3, r2
 800d506:	1b1b      	subs	r3, r3, r4
 800d508:	fbb3 f3f5 	udiv	r3, r3, r5
 800d50c:	ebab 0b03 	sub.w	fp, fp, r3
 800d510:	2900      	cmp	r1, #0
 800d512:	f6ff af72 	blt.w	800d3fa <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d516:	f1bb 0f00 	cmp.w	fp, #0
 800d51a:	f6ff af6e 	blt.w	800d3fa <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d51e:	4559      	cmp	r1, fp
 800d520:	f73f af6b 	bgt.w	800d3fa <acc_cal_algorithms_calc_pulse_params+0xa6>
 800d524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d526:	ebab 0b01 	sub.w	fp, fp, r1
 800d52a:	f8c3 b000 	str.w	fp, [r3]
 800d52e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d530:	6019      	str	r1, [r3, #0]
 800d532:	e763      	b.n	800d3fc <acc_cal_algorithms_calc_pulse_params+0xa8>
 800d534:	4660      	mov	r0, ip
 800d536:	4698      	mov	r8, r3
 800d538:	e79d      	b.n	800d476 <acc_cal_algorithms_calc_pulse_params+0x122>
 800d53a:	bf00      	nop
 800d53c:	fffffd12 	.word	0xfffffd12
 800d540:	ffff3cb0 	.word	0xffff3cb0

0800d544 <acc_cal_algorithms_pulseshaper_wavelet>:
 800d544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d548:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 800d54c:	ae04      	add	r6, sp, #16
 800d54e:	af05      	add	r7, sp, #20
 800d550:	2400      	movs	r4, #0
 800d552:	e9cd 7401 	strd	r7, r4, [sp, #4]
 800d556:	9600      	str	r6, [sp, #0]
 800d558:	460d      	mov	r5, r1
 800d55a:	aa08      	add	r2, sp, #32
 800d55c:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800d560:	2190      	movs	r1, #144	@ 0x90
 800d562:	6034      	str	r4, [r6, #0]
 800d564:	603c      	str	r4, [r7, #0]
 800d566:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800d56a:	4680      	mov	r8, r0
 800d56c:	f7ff fef2 	bl	800d354 <acc_cal_algorithms_calc_pulse_params>
 800d570:	b920      	cbnz	r0, 800d57c <acc_cal_algorithms_pulseshaper_wavelet+0x38>
 800d572:	2000      	movs	r0, #0
 800d574:	f50d 7d44 	add.w	sp, sp, #784	@ 0x310
 800d578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d57c:	ab07      	add	r3, sp, #28
 800d57e:	9301      	str	r3, [sp, #4]
 800d580:	ab06      	add	r3, sp, #24
 800d582:	9300      	str	r3, [sp, #0]
 800d584:	9402      	str	r4, [sp, #8]
 800d586:	aa08      	add	r2, sp, #32
 800d588:	f508 7090 	add.w	r0, r8, #288	@ 0x120
 800d58c:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800d590:	21f0      	movs	r1, #240	@ 0xf0
 800d592:	f7ff fedf 	bl	800d354 <acc_cal_algorithms_calc_pulse_params>
 800d596:	2800      	cmp	r0, #0
 800d598:	d0eb      	beq.n	800d572 <acc_cal_algorithms_pulseshaper_wavelet+0x2e>
 800d59a:	683f      	ldr	r7, [r7, #0]
 800d59c:	9c07      	ldr	r4, [sp, #28]
 800d59e:	4b0b      	ldr	r3, [pc, #44]	@ (800d5cc <acc_cal_algorithms_pulseshaper_wavelet+0x88>)
 800d5a0:	490b      	ldr	r1, [pc, #44]	@ (800d5d0 <acc_cal_algorithms_pulseshaper_wavelet+0x8c>)
 800d5a2:	6832      	ldr	r2, [r6, #0]
 800d5a4:	1be4      	subs	r4, r4, r7
 800d5a6:	fb03 f304 	mul.w	r3, r3, r4
 800d5aa:	fb01 f707 	mul.w	r7, r1, r7
 800d5ae:	fb01 f202 	mul.w	r2, r1, r2
 800d5b2:	0c1b      	lsrs	r3, r3, #16
 800d5b4:	ebc3 3357 	rsb	r3, r3, r7, lsr #13
 800d5b8:	fb01 f104 	mul.w	r1, r1, r4
 800d5bc:	0b52      	lsrs	r2, r2, #13
 800d5be:	e9c5 3100 	strd	r3, r1, [r5]
 800d5c2:	60aa      	str	r2, [r5, #8]
 800d5c4:	f50d 7d44 	add.w	sp, sp, #784	@ 0x310
 800d5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5cc:	00042aa8 	.word	0x00042aa8
 800d5d0:	00010aaa 	.word	0x00010aaa

0800d5d4 <acc_cal_algorithms_pulseshaper_supply>:
 800d5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d8:	f5ad 7d47 	sub.w	sp, sp, #796	@ 0x31c
 800d5dc:	2600      	movs	r6, #0
 800d5de:	af06      	add	r7, sp, #24
 800d5e0:	f10d 0814 	add.w	r8, sp, #20
 800d5e4:	4605      	mov	r5, r0
 800d5e6:	460c      	mov	r4, r1
 800d5e8:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800d5ec:	3002      	adds	r0, #2
 800d5ee:	aa0a      	add	r2, sp, #40	@ 0x28
 800d5f0:	f8cd 8000 	str.w	r8, [sp]
 800d5f4:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800d5f8:	f240 111f 	movw	r1, #287	@ 0x11f
 800d5fc:	f7ff feaa 	bl	800d354 <acc_cal_algorithms_calc_pulse_params>
 800d600:	b920      	cbnz	r0, 800d60c <acc_cal_algorithms_pulseshaper_supply+0x38>
 800d602:	2000      	movs	r0, #0
 800d604:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 800d608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d60c:	ab08      	add	r3, sp, #32
 800d60e:	f10d 0a1c 	add.w	sl, sp, #28
 800d612:	f10d 0b10 	add.w	fp, sp, #16
 800d616:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d61a:	f8cd b000 	str.w	fp, [sp]
 800d61e:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800d622:	aa0a      	add	r2, sp, #40	@ 0x28
 800d624:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800d628:	f505 7010 	add.w	r0, r5, #576	@ 0x240
 800d62c:	f7ff fe92 	bl	800d354 <acc_cal_algorithms_calc_pulse_params>
 800d630:	2800      	cmp	r0, #0
 800d632:	d0e6      	beq.n	800d602 <acc_cal_algorithms_pulseshaper_supply+0x2e>
 800d634:	f10d 0924 	add.w	r9, sp, #36	@ 0x24
 800d638:	e9cd 6600 	strd	r6, r6, [sp]
 800d63c:	aa0a      	add	r2, sp, #40	@ 0x28
 800d63e:	f505 6090 	add.w	r0, r5, #1152	@ 0x480
 800d642:	f8cd 9008 	str.w	r9, [sp, #8]
 800d646:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800d64a:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800d64e:	f7ff fe81 	bl	800d354 <acc_cal_algorithms_calc_pulse_params>
 800d652:	2800      	cmp	r0, #0
 800d654:	d0d5      	beq.n	800d602 <acc_cal_algorithms_pulseshaper_supply+0x2e>
 800d656:	f8db c000 	ldr.w	ip, [fp]
 800d65a:	f8d8 6000 	ldr.w	r6, [r8]
 800d65e:	f8dd e020 	ldr.w	lr, [sp, #32]
 800d662:	f8d7 8000 	ldr.w	r8, [r7]
 800d666:	f8da 2000 	ldr.w	r2, [sl]
 800d66a:	f8d9 9000 	ldr.w	r9, [r9]
 800d66e:	4f17      	ldr	r7, [pc, #92]	@ (800d6cc <acc_cal_algorithms_pulseshaper_supply+0xf8>)
 800d670:	4d17      	ldr	r5, [pc, #92]	@ (800d6d0 <acc_cal_algorithms_pulseshaper_supply+0xfc>)
 800d672:	4918      	ldr	r1, [pc, #96]	@ (800d6d4 <acc_cal_algorithms_pulseshaper_supply+0x100>)
 800d674:	4b18      	ldr	r3, [pc, #96]	@ (800d6d8 <acc_cal_algorithms_pulseshaper_supply+0x104>)
 800d676:	eba9 090e 	sub.w	r9, r9, lr
 800d67a:	eba6 060c 	sub.w	r6, r6, ip
 800d67e:	eba2 0208 	sub.w	r2, r2, r8
 800d682:	fb07 f706 	mul.w	r7, r7, r6
 800d686:	fb05 f502 	mul.w	r5, r5, r2
 800d68a:	fb01 f109 	mul.w	r1, r1, r9
 800d68e:	fb03 fc0c 	mul.w	ip, r3, ip
 800d692:	fb03 f808 	mul.w	r8, r3, r8
 800d696:	fb03 fe0e 	mul.w	lr, r3, lr
 800d69a:	0c3f      	lsrs	r7, r7, #16
 800d69c:	0c2d      	lsrs	r5, r5, #16
 800d69e:	0c09      	lsrs	r1, r1, #16
 800d6a0:	fb03 f606 	mul.w	r6, r3, r6
 800d6a4:	fb03 f202 	mul.w	r2, r3, r2
 800d6a8:	ebc7 375c 	rsb	r7, r7, ip, lsr #13
 800d6ac:	ebc5 3558 	rsb	r5, r5, r8, lsr #13
 800d6b0:	fb03 f309 	mul.w	r3, r3, r9
 800d6b4:	ebc1 315e 	rsb	r1, r1, lr, lsr #13
 800d6b8:	e9c4 7600 	strd	r7, r6, [r4]
 800d6bc:	e9c4 5202 	strd	r5, r2, [r4, #8]
 800d6c0:	e9c4 1304 	strd	r1, r3, [r4, #16]
 800d6c4:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 800d6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6cc:	00021554 	.word	0x00021554
 800d6d0:	00074aa6 	.word	0x00074aa6
 800d6d4:	000b754e 	.word	0x000b754e
 800d6d8:	00010aaa 	.word	0x00010aaa

0800d6dc <acc_a121_cal_session_start_1_pll_cbank_temp_program>:
 800d6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e0:	468a      	mov	sl, r1
 800d6e2:	b085      	sub	sp, #20
 800d6e4:	4681      	mov	r9, r0
 800d6e6:	4611      	mov	r1, r2
 800d6e8:	4650      	mov	r0, sl
 800d6ea:	461f      	mov	r7, r3
 800d6ec:	2500      	movs	r5, #0
 800d6ee:	ab03      	add	r3, sp, #12
 800d6f0:	aa02      	add	r2, sp, #8
 800d6f2:	e9cd 5502 	strd	r5, r5, [sp, #8]
 800d6f6:	f000 ffd5 	bl	800e6a4 <acc_sensor_a121_prepare_load_confmem>
 800d6fa:	4648      	mov	r0, r9
 800d6fc:	f001 f87c 	bl	800e7f8 <acc_sensor_protocol_a121_prepare_load>
 800d700:	b300      	cbz	r0, 800d744 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800d702:	9b03      	ldr	r3, [sp, #12]
 800d704:	f640 3b4a 	movw	fp, #2890	@ 0xb4a
 800d708:	ebab 0405 	sub.w	r4, fp, r5
 800d70c:	429c      	cmp	r4, r3
 800d70e:	bf2c      	ite	cs
 800d710:	b29c      	uxthcs	r4, r3
 800d712:	b2a4      	uxthcc	r4, r4
 800d714:	9e02      	ldr	r6, [sp, #8]
 800d716:	f003 fb0d 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800d71a:	ea4f 0855 	mov.w	r8, r5, lsr #1
 800d71e:	0862      	lsrs	r2, r4, #1
 800d720:	4631      	mov	r1, r6
 800d722:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 800d726:	f003 f8cd 	bl	80108c4 <acc_confprogram_copy>
 800d72a:	f003 fb07 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800d72e:	887a      	ldrh	r2, [r7, #2]
 800d730:	211c      	movs	r1, #28
 800d732:	e9cd 1200 	strd	r1, r2, [sp]
 800d736:	4603      	mov	r3, r0
 800d738:	4622      	mov	r2, r4
 800d73a:	4629      	mov	r1, r5
 800d73c:	4630      	mov	r0, r6
 800d73e:	f002 fff7 	bl	8010730 <acc_confprogram_patch_offset>
 800d742:	b918      	cbnz	r0, 800d74c <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x70>
 800d744:	2000      	movs	r0, #0
 800d746:	b005      	add	sp, #20
 800d748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d74c:	f003 faf6 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800d750:	88ba      	ldrh	r2, [r7, #4]
 800d752:	211a      	movs	r1, #26
 800d754:	e9cd 1200 	strd	r1, r2, [sp]
 800d758:	4603      	mov	r3, r0
 800d75a:	4622      	mov	r2, r4
 800d75c:	4629      	mov	r1, r5
 800d75e:	4630      	mov	r0, r6
 800d760:	f002 ffe6 	bl	8010730 <acc_confprogram_patch_offset>
 800d764:	2800      	cmp	r0, #0
 800d766:	d0ed      	beq.n	800d744 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800d768:	f003 fae8 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800d76c:	88fa      	ldrh	r2, [r7, #6]
 800d76e:	9201      	str	r2, [sp, #4]
 800d770:	221b      	movs	r2, #27
 800d772:	4603      	mov	r3, r0
 800d774:	9200      	str	r2, [sp, #0]
 800d776:	4629      	mov	r1, r5
 800d778:	4622      	mov	r2, r4
 800d77a:	4630      	mov	r0, r6
 800d77c:	f002 ffd8 	bl	8010730 <acc_confprogram_patch_offset>
 800d780:	2800      	cmp	r0, #0
 800d782:	d0df      	beq.n	800d744 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800d784:	f003 fada 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800d788:	893a      	ldrh	r2, [r7, #8]
 800d78a:	9201      	str	r2, [sp, #4]
 800d78c:	2219      	movs	r2, #25
 800d78e:	4603      	mov	r3, r0
 800d790:	9200      	str	r2, [sp, #0]
 800d792:	4630      	mov	r0, r6
 800d794:	4622      	mov	r2, r4
 800d796:	4629      	mov	r1, r5
 800d798:	f002 ffca 	bl	8010730 <acc_confprogram_patch_offset>
 800d79c:	4606      	mov	r6, r0
 800d79e:	4623      	mov	r3, r4
 800d7a0:	4652      	mov	r2, sl
 800d7a2:	4641      	mov	r1, r8
 800d7a4:	4648      	mov	r0, r9
 800d7a6:	2e00      	cmp	r6, #0
 800d7a8:	d0cc      	beq.n	800d744 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800d7aa:	f000 ff93 	bl	800e6d4 <acc_sensor_a121_load_confmem>
 800d7ae:	9b03      	ldr	r3, [sp, #12]
 800d7b0:	441d      	add	r5, r3
 800d7b2:	b2ad      	uxth	r5, r5
 800d7b4:	f640 3249 	movw	r2, #2889	@ 0xb49
 800d7b8:	4295      	cmp	r5, r2
 800d7ba:	d9a5      	bls.n	800d708 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x2c>
 800d7bc:	4648      	mov	r0, r9
 800d7be:	f240 115b 	movw	r1, #347	@ 0x15b
 800d7c2:	f001 f86f 	bl	800e8a4 <acc_sensor_protocol_a121_run_program>
 800d7c6:	b005      	add	sp, #20
 800d7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d7cc <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program>:
 800d7cc:	b570      	push	{r4, r5, r6, lr}
 800d7ce:	b086      	sub	sp, #24
 800d7d0:	460d      	mov	r5, r1
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	f003 faae 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800d7d8:	9005      	str	r0, [sp, #20]
 800d7da:	f003 faaf 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800d7de:	4e09      	ldr	r6, [pc, #36]	@ (800d804 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program+0x38>)
 800d7e0:	9905      	ldr	r1, [sp, #20]
 800d7e2:	9501      	str	r5, [sp, #4]
 800d7e4:	2225      	movs	r2, #37	@ 0x25
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	9200      	str	r2, [sp, #0]
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	9602      	str	r6, [sp, #8]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f003 f800 	bl	80107f4 <acc_confprogram_live_patch>
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	f240 2132 	movw	r1, #562	@ 0x232
 800d7fa:	b006      	add	sp, #24
 800d7fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d800:	f001 b850 	b.w	800e8a4 <acc_sensor_protocol_a121_run_program>
 800d804:	0800e671 	.word	0x0800e671

0800d808 <acc_a121_cal_session_start_3_delay_cbank_program>:
 800d808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d80a:	b087      	sub	sp, #28
 800d80c:	4604      	mov	r4, r0
 800d80e:	460e      	mov	r6, r1
 800d810:	4615      	mov	r5, r2
 800d812:	f003 fa8f 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800d816:	9005      	str	r0, [sp, #20]
 800d818:	f003 fa90 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800d81c:	4f10      	ldr	r7, [pc, #64]	@ (800d860 <acc_a121_cal_session_start_3_delay_cbank_program+0x58>)
 800d81e:	9905      	ldr	r1, [sp, #20]
 800d820:	9601      	str	r6, [sp, #4]
 800d822:	2226      	movs	r2, #38	@ 0x26
 800d824:	4603      	mov	r3, r0
 800d826:	9200      	str	r2, [sp, #0]
 800d828:	4620      	mov	r0, r4
 800d82a:	2200      	movs	r2, #0
 800d82c:	9702      	str	r7, [sp, #8]
 800d82e:	f002 ffe1 	bl	80107f4 <acc_confprogram_live_patch>
 800d832:	f003 fa7f 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800d836:	9005      	str	r0, [sp, #20]
 800d838:	f003 fa80 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800d83c:	2224      	movs	r2, #36	@ 0x24
 800d83e:	9905      	ldr	r1, [sp, #20]
 800d840:	9200      	str	r2, [sp, #0]
 800d842:	4603      	mov	r3, r0
 800d844:	9501      	str	r5, [sp, #4]
 800d846:	9702      	str	r7, [sp, #8]
 800d848:	4620      	mov	r0, r4
 800d84a:	2200      	movs	r2, #0
 800d84c:	f002 ffd2 	bl	80107f4 <acc_confprogram_live_patch>
 800d850:	4620      	mov	r0, r4
 800d852:	f240 21c5 	movw	r1, #709	@ 0x2c5
 800d856:	b007      	add	sp, #28
 800d858:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d85c:	f001 b822 	b.w	800e8a4 <acc_sensor_protocol_a121_run_program>
 800d860:	0800e671 	.word	0x0800e671

0800d864 <acc_a121_cal_session_start_4_bba_vga_program>:
 800d864:	f44f 7145 	mov.w	r1, #788	@ 0x314
 800d868:	f001 b81c 	b.w	800e8a4 <acc_sensor_protocol_a121_run_program>

0800d86c <acc_a121_cal_session_start_5_area_index_program>:
 800d86c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d86e:	b087      	sub	sp, #28
 800d870:	4604      	mov	r4, r0
 800d872:	460f      	mov	r7, r1
 800d874:	4616      	mov	r6, r2
 800d876:	f003 fa5d 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800d87a:	9005      	str	r0, [sp, #20]
 800d87c:	f003 fa5e 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800d880:	883a      	ldrh	r2, [r7, #0]
 800d882:	4d21      	ldr	r5, [pc, #132]	@ (800d908 <acc_a121_cal_session_start_5_area_index_program+0x9c>)
 800d884:	9201      	str	r2, [sp, #4]
 800d886:	2207      	movs	r2, #7
 800d888:	9905      	ldr	r1, [sp, #20]
 800d88a:	9200      	str	r2, [sp, #0]
 800d88c:	4603      	mov	r3, r0
 800d88e:	2200      	movs	r2, #0
 800d890:	4620      	mov	r0, r4
 800d892:	9502      	str	r5, [sp, #8]
 800d894:	f002 ffae 	bl	80107f4 <acc_confprogram_live_patch>
 800d898:	f003 fa4c 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800d89c:	9005      	str	r0, [sp, #20]
 800d89e:	f003 fa4d 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800d8a2:	2208      	movs	r2, #8
 800d8a4:	9905      	ldr	r1, [sp, #20]
 800d8a6:	9601      	str	r6, [sp, #4]
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	9200      	str	r2, [sp, #0]
 800d8ac:	9502      	str	r5, [sp, #8]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	f002 ff9f 	bl	80107f4 <acc_confprogram_live_patch>
 800d8b6:	f003 fa3d 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800d8ba:	9005      	str	r0, [sp, #20]
 800d8bc:	f003 fa3e 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800d8c0:	2603      	movs	r6, #3
 800d8c2:	2209      	movs	r2, #9
 800d8c4:	9905      	ldr	r1, [sp, #20]
 800d8c6:	9502      	str	r5, [sp, #8]
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	e9cd 2600 	strd	r2, r6, [sp]
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	f002 ff8f 	bl	80107f4 <acc_confprogram_live_patch>
 800d8d6:	f003 fa2d 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800d8da:	9005      	str	r0, [sp, #20]
 800d8dc:	f003 fa2e 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800d8e0:	2606      	movs	r6, #6
 800d8e2:	220a      	movs	r2, #10
 800d8e4:	e9cd 2600 	strd	r2, r6, [sp]
 800d8e8:	9905      	ldr	r1, [sp, #20]
 800d8ea:	9502      	str	r5, [sp, #8]
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	f002 ff7f 	bl	80107f4 <acc_confprogram_live_patch>
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	f240 31d5 	movw	r1, #981	@ 0x3d5
 800d8fc:	b007      	add	sp, #28
 800d8fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d902:	f000 bfcf 	b.w	800e8a4 <acc_sensor_protocol_a121_run_program>
 800d906:	bf00      	nop
 800d908:	0800e671 	.word	0x0800e671

0800d90c <acc_a121_cal_session_start_6_tx_freq_program>:
 800d90c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d90e:	b087      	sub	sp, #28
 800d910:	460d      	mov	r5, r1
 800d912:	4604      	mov	r4, r0
 800d914:	f003 fa0e 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800d918:	9005      	str	r0, [sp, #20]
 800d91a:	f003 fa0f 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800d91e:	882a      	ldrh	r2, [r5, #0]
 800d920:	4e41      	ldr	r6, [pc, #260]	@ (800da28 <acc_a121_cal_session_start_6_tx_freq_program+0x11c>)
 800d922:	9201      	str	r2, [sp, #4]
 800d924:	2221      	movs	r2, #33	@ 0x21
 800d926:	9905      	ldr	r1, [sp, #20]
 800d928:	9200      	str	r2, [sp, #0]
 800d92a:	4603      	mov	r3, r0
 800d92c:	2200      	movs	r2, #0
 800d92e:	4620      	mov	r0, r4
 800d930:	9602      	str	r6, [sp, #8]
 800d932:	f002 ff5f 	bl	80107f4 <acc_confprogram_live_patch>
 800d936:	f003 f9fd 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800d93a:	9005      	str	r0, [sp, #20]
 800d93c:	f003 f9fe 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800d940:	886f      	ldrh	r7, [r5, #2]
 800d942:	9905      	ldr	r1, [sp, #20]
 800d944:	9701      	str	r7, [sp, #4]
 800d946:	2222      	movs	r2, #34	@ 0x22
 800d948:	4603      	mov	r3, r0
 800d94a:	9200      	str	r2, [sp, #0]
 800d94c:	9602      	str	r6, [sp, #8]
 800d94e:	2200      	movs	r2, #0
 800d950:	4620      	mov	r0, r4
 800d952:	f002 ff4f 	bl	80107f4 <acc_confprogram_live_patch>
 800d956:	f003 f9ed 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800d95a:	9005      	str	r0, [sp, #20]
 800d95c:	f003 f9ee 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800d960:	88ef      	ldrh	r7, [r5, #6]
 800d962:	9905      	ldr	r1, [sp, #20]
 800d964:	9701      	str	r7, [sp, #4]
 800d966:	2201      	movs	r2, #1
 800d968:	4603      	mov	r3, r0
 800d96a:	9200      	str	r2, [sp, #0]
 800d96c:	9602      	str	r6, [sp, #8]
 800d96e:	2200      	movs	r2, #0
 800d970:	4620      	mov	r0, r4
 800d972:	f002 ff3f 	bl	80107f4 <acc_confprogram_live_patch>
 800d976:	f003 f9dd 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800d97a:	9005      	str	r0, [sp, #20]
 800d97c:	f003 f9de 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800d980:	892f      	ldrh	r7, [r5, #8]
 800d982:	9905      	ldr	r1, [sp, #20]
 800d984:	9701      	str	r7, [sp, #4]
 800d986:	2202      	movs	r2, #2
 800d988:	4603      	mov	r3, r0
 800d98a:	9200      	str	r2, [sp, #0]
 800d98c:	9602      	str	r6, [sp, #8]
 800d98e:	2200      	movs	r2, #0
 800d990:	4620      	mov	r0, r4
 800d992:	f002 ff2f 	bl	80107f4 <acc_confprogram_live_patch>
 800d996:	f003 f9cd 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800d99a:	9005      	str	r0, [sp, #20]
 800d99c:	f003 f9ce 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800d9a0:	89af      	ldrh	r7, [r5, #12]
 800d9a2:	9905      	ldr	r1, [sp, #20]
 800d9a4:	9701      	str	r7, [sp, #4]
 800d9a6:	2203      	movs	r2, #3
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	9200      	str	r2, [sp, #0]
 800d9ac:	9602      	str	r6, [sp, #8]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	f002 ff1f 	bl	80107f4 <acc_confprogram_live_patch>
 800d9b6:	f003 f9bd 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800d9ba:	9005      	str	r0, [sp, #20]
 800d9bc:	f003 f9be 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800d9c0:	89ef      	ldrh	r7, [r5, #14]
 800d9c2:	9905      	ldr	r1, [sp, #20]
 800d9c4:	9701      	str	r7, [sp, #4]
 800d9c6:	2204      	movs	r2, #4
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	9200      	str	r2, [sp, #0]
 800d9cc:	9602      	str	r6, [sp, #8]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	f002 ff0f 	bl	80107f4 <acc_confprogram_live_patch>
 800d9d6:	f003 f9ad 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800d9da:	9005      	str	r0, [sp, #20]
 800d9dc:	f003 f9ae 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800d9e0:	8a6f      	ldrh	r7, [r5, #18]
 800d9e2:	9905      	ldr	r1, [sp, #20]
 800d9e4:	9602      	str	r6, [sp, #8]
 800d9e6:	2205      	movs	r2, #5
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	9200      	str	r2, [sp, #0]
 800d9ec:	9701      	str	r7, [sp, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f002 feff 	bl	80107f4 <acc_confprogram_live_patch>
 800d9f6:	f003 f99d 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800d9fa:	9005      	str	r0, [sp, #20]
 800d9fc:	f003 f99e 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800da00:	2206      	movs	r2, #6
 800da02:	4603      	mov	r3, r0
 800da04:	8aa8      	ldrh	r0, [r5, #20]
 800da06:	9905      	ldr	r1, [sp, #20]
 800da08:	9001      	str	r0, [sp, #4]
 800da0a:	9200      	str	r2, [sp, #0]
 800da0c:	9602      	str	r6, [sp, #8]
 800da0e:	4620      	mov	r0, r4
 800da10:	2200      	movs	r2, #0
 800da12:	f002 feef 	bl	80107f4 <acc_confprogram_live_patch>
 800da16:	4620      	mov	r0, r4
 800da18:	f44f 717b 	mov.w	r1, #1004	@ 0x3ec
 800da1c:	b007      	add	sp, #28
 800da1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800da22:	f000 bf3f 	b.w	800e8a4 <acc_sensor_protocol_a121_run_program>
 800da26:	bf00      	nop
 800da28:	0800e671 	.word	0x0800e671

0800da2c <acc_a121_cal_session_start_7_rx_freq_program>:
 800da2c:	b570      	push	{r4, r5, r6, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	460d      	mov	r5, r1
 800da32:	4604      	mov	r4, r0
 800da34:	f003 f97e 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800da38:	9005      	str	r0, [sp, #20]
 800da3a:	f003 f97f 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800da3e:	4e09      	ldr	r6, [pc, #36]	@ (800da64 <acc_a121_cal_session_start_7_rx_freq_program+0x38>)
 800da40:	9905      	ldr	r1, [sp, #20]
 800da42:	9501      	str	r5, [sp, #4]
 800da44:	220c      	movs	r2, #12
 800da46:	4603      	mov	r3, r0
 800da48:	9200      	str	r2, [sp, #0]
 800da4a:	4620      	mov	r0, r4
 800da4c:	9602      	str	r6, [sp, #8]
 800da4e:	2200      	movs	r2, #0
 800da50:	f002 fed0 	bl	80107f4 <acc_confprogram_live_patch>
 800da54:	4620      	mov	r0, r4
 800da56:	f240 4116 	movw	r1, #1046	@ 0x416
 800da5a:	b006      	add	sp, #24
 800da5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da60:	f000 bf20 	b.w	800e8a4 <acc_sensor_protocol_a121_run_program>
 800da64:	0800e671 	.word	0x0800e671

0800da68 <acc_a121_cal_session_start_8_phase_enhancement_program>:
 800da68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da6a:	b087      	sub	sp, #28
 800da6c:	4604      	mov	r4, r0
 800da6e:	460e      	mov	r6, r1
 800da70:	f003 f960 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800da74:	9005      	str	r0, [sp, #20]
 800da76:	f003 f961 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800da7a:	4d19      	ldr	r5, [pc, #100]	@ (800dae0 <acc_a121_cal_session_start_8_phase_enhancement_program+0x78>)
 800da7c:	9905      	ldr	r1, [sp, #20]
 800da7e:	9601      	str	r6, [sp, #4]
 800da80:	220b      	movs	r2, #11
 800da82:	4603      	mov	r3, r0
 800da84:	9200      	str	r2, [sp, #0]
 800da86:	4620      	mov	r0, r4
 800da88:	2200      	movs	r2, #0
 800da8a:	9502      	str	r5, [sp, #8]
 800da8c:	f002 feb2 	bl	80107f4 <acc_confprogram_live_patch>
 800da90:	f003 f950 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800da94:	9005      	str	r0, [sp, #20]
 800da96:	f003 f951 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800da9a:	2609      	movs	r6, #9
 800da9c:	2200      	movs	r2, #0
 800da9e:	e9cd 6200 	strd	r6, r2, [sp]
 800daa2:	9905      	ldr	r1, [sp, #20]
 800daa4:	9502      	str	r5, [sp, #8]
 800daa6:	4603      	mov	r3, r0
 800daa8:	4620      	mov	r0, r4
 800daaa:	f002 fea3 	bl	80107f4 <acc_confprogram_live_patch>
 800daae:	f003 f941 	bl	8010d34 <acc_image_a121_r1a_cal_session_get>
 800dab2:	9005      	str	r0, [sp, #20]
 800dab4:	f003 f942 	bl	8010d3c <acc_image_a121_r1a_cal_session_param_table_get>
 800dab8:	277e      	movs	r7, #126	@ 0x7e
 800daba:	260a      	movs	r6, #10
 800dabc:	9905      	ldr	r1, [sp, #20]
 800dabe:	9502      	str	r5, [sp, #8]
 800dac0:	4603      	mov	r3, r0
 800dac2:	e9cd 6700 	strd	r6, r7, [sp]
 800dac6:	2200      	movs	r2, #0
 800dac8:	4620      	mov	r0, r4
 800daca:	f002 fe93 	bl	80107f4 <acc_confprogram_live_patch>
 800dace:	4620      	mov	r0, r4
 800dad0:	f240 4152 	movw	r1, #1106	@ 0x452
 800dad4:	b007      	add	sp, #28
 800dad6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dada:	f000 bee3 	b.w	800e8a4 <acc_sensor_protocol_a121_run_program>
 800dade:	bf00      	nop
 800dae0:	0800e671 	.word	0x0800e671

0800dae4 <acc_a121_cal_session_start_9_pulseshaper_program>:
 800dae4:	f240 417b 	movw	r1, #1147	@ 0x47b
 800dae8:	f000 bedc 	b.w	800e8a4 <acc_sensor_protocol_a121_run_program>

0800daec <acc_a121_cal_session_ack_program>:
 800daec:	b530      	push	{r4, r5, lr}
 800daee:	b083      	sub	sp, #12
 800daf0:	4604      	mov	r4, r0
 800daf2:	aa01      	add	r2, sp, #4
 800daf4:	2101      	movs	r1, #1
 800daf6:	f000 ff9f 	bl	800ea38 <acc_sensor_protocol_a121_get_event>
 800dafa:	4620      	mov	r0, r4
 800dafc:	2200      	movs	r2, #0
 800dafe:	2101      	movs	r1, #1
 800db00:	f000 ff52 	bl	800e9a8 <acc_sensor_protocol_a121_ack_event>
 800db04:	a801      	add	r0, sp, #4
 800db06:	f001 f809 	bl	800eb1c <acc_sensor_protocol_a121_is_done>
 800db0a:	4604      	mov	r4, r0
 800db0c:	b930      	cbnz	r0, 800db1c <acc_a121_cal_session_ack_program+0x30>
 800db0e:	4a05      	ldr	r2, [pc, #20]	@ (800db24 <acc_a121_cal_session_ack_program+0x38>)
 800db10:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800db14:	6915      	ldr	r5, [r2, #16]
 800db16:	4904      	ldr	r1, [pc, #16]	@ (800db28 <acc_a121_cal_session_ack_program+0x3c>)
 800db18:	4a04      	ldr	r2, [pc, #16]	@ (800db2c <acc_a121_cal_session_ack_program+0x40>)
 800db1a:	47a8      	blx	r5
 800db1c:	4620      	mov	r0, r4
 800db1e:	b003      	add	sp, #12
 800db20:	bd30      	pop	{r4, r5, pc}
 800db22:	bf00      	nop
 800db24:	200009ec 	.word	0x200009ec
 800db28:	08014e9c 	.word	0x08014e9c
 800db2c:	08014e54 	.word	0x08014e54

0800db30 <acc_a121_cal_session_get_1_pll_cbank_temp_program_data>:
 800db30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db34:	4688      	mov	r8, r1
 800db36:	4607      	mov	r7, r0
 800db38:	2132      	movs	r1, #50	@ 0x32
 800db3a:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800db3e:	461e      	mov	r6, r3
 800db40:	f002 ff1a 	bl	8010978 <acc_sensor_reg_read>
 800db44:	2312      	movs	r3, #18
 800db46:	2200      	movs	r2, #0
 800db48:	4641      	mov	r1, r8
 800db4a:	4638      	mov	r0, r7
 800db4c:	f000 fdec 	bl	800e728 <acc_sensor_a121_buffer_processed_read>
 800db50:	8802      	ldrh	r2, [r0, #0]
 800db52:	8032      	strh	r2, [r6, #0]
 800db54:	8842      	ldrh	r2, [r0, #2]
 800db56:	802a      	strh	r2, [r5, #0]
 800db58:	1d03      	adds	r3, r0, #4
 800db5a:	6023      	str	r3, [r4, #0]
 800db5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800db60 <acc_a121_cal_session_get_2_pll_ibias_vfast2_ldo_program_data>:
 800db60:	b570      	push	{r4, r5, r6, lr}
 800db62:	4616      	mov	r6, r2
 800db64:	461c      	mov	r4, r3
 800db66:	2200      	movs	r2, #0
 800db68:	2341      	movs	r3, #65	@ 0x41
 800db6a:	9d04      	ldr	r5, [sp, #16]
 800db6c:	f000 fddc 	bl	800e728 <acc_sensor_a121_buffer_processed_read>
 800db70:	8c02      	ldrh	r2, [r0, #32]
 800db72:	6030      	str	r0, [r6, #0]
 800db74:	f100 0322 	add.w	r3, r0, #34	@ 0x22
 800db78:	8022      	strh	r2, [r4, #0]
 800db7a:	602b      	str	r3, [r5, #0]
 800db7c:	bd70      	pop	{r4, r5, r6, pc}
 800db7e:	bf00      	nop

0800db80 <acc_a121_cal_session_get_3_delay_cbank_program_data>:
 800db80:	b510      	push	{r4, lr}
 800db82:	2320      	movs	r3, #32
 800db84:	4614      	mov	r4, r2
 800db86:	2200      	movs	r2, #0
 800db88:	f000 fdce 	bl	800e728 <acc_sensor_a121_buffer_processed_read>
 800db8c:	6020      	str	r0, [r4, #0]
 800db8e:	bd10      	pop	{r4, pc}

0800db90 <acc_a121_cal_session_get_4_bba_vga_program_data>:
 800db90:	b510      	push	{r4, lr}
 800db92:	2350      	movs	r3, #80	@ 0x50
 800db94:	4614      	mov	r4, r2
 800db96:	2200      	movs	r2, #0
 800db98:	f000 fdc6 	bl	800e728 <acc_sensor_a121_buffer_processed_read>
 800db9c:	6020      	str	r0, [r4, #0]
 800db9e:	bd10      	pop	{r4, pc}

0800dba0 <acc_a121_cal_session_get_5_area_index_program_data>:
 800dba0:	b510      	push	{r4, lr}
 800dba2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800dba6:	4614      	mov	r4, r2
 800dba8:	2200      	movs	r2, #0
 800dbaa:	f000 fdbd 	bl	800e728 <acc_sensor_a121_buffer_processed_read>
 800dbae:	6020      	str	r0, [r4, #0]
 800dbb0:	bd10      	pop	{r4, pc}
 800dbb2:	bf00      	nop

0800dbb4 <acc_a121_cal_session_get_6_tx_freq_program_data>:
 800dbb4:	f7ff bff4 	b.w	800dba0 <acc_a121_cal_session_get_5_area_index_program_data>

0800dbb8 <acc_a121_cal_session_get_7_rx_freq_program_data>:
 800dbb8:	b510      	push	{r4, lr}
 800dbba:	2310      	movs	r3, #16
 800dbbc:	4614      	mov	r4, r2
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	f000 fdb2 	bl	800e728 <acc_sensor_a121_buffer_processed_read>
 800dbc4:	6020      	str	r0, [r4, #0]
 800dbc6:	bd10      	pop	{r4, pc}

0800dbc8 <acc_a121_cal_session_get_8_phase_enhancement_program_data>:
 800dbc8:	b510      	push	{r4, lr}
 800dbca:	2360      	movs	r3, #96	@ 0x60
 800dbcc:	4614      	mov	r4, r2
 800dbce:	2200      	movs	r2, #0
 800dbd0:	f000 fdaa 	bl	800e728 <acc_sensor_a121_buffer_processed_read>
 800dbd4:	6020      	str	r0, [r4, #0]
 800dbd6:	bd10      	pop	{r4, pc}

0800dbd8 <acc_a121_cal_session_get_9_pulseshaper_program_data>:
 800dbd8:	b538      	push	{r3, r4, r5, lr}
 800dbda:	4615      	mov	r5, r2
 800dbdc:	461c      	mov	r4, r3
 800dbde:	2200      	movs	r2, #0
 800dbe0:	f44f 639c 	mov.w	r3, #1248	@ 0x4e0
 800dbe4:	f000 fda0 	bl	800e728 <acc_sensor_a121_buffer_processed_read>
 800dbe8:	f500 7340 	add.w	r3, r0, #768	@ 0x300
 800dbec:	6028      	str	r0, [r5, #0]
 800dbee:	6023      	str	r3, [r4, #0]
 800dbf0:	bd38      	pop	{r3, r4, r5, pc}
 800dbf2:	bf00      	nop

0800dbf4 <acc_rss_integration_register_a121>:
 800dbf4:	68c3      	ldr	r3, [r0, #12]
 800dbf6:	b570      	push	{r4, r5, r6, lr}
 800dbf8:	b1c3      	cbz	r3, 800dc2c <acc_rss_integration_register_a121+0x38>
 800dbfa:	6843      	ldr	r3, [r0, #4]
 800dbfc:	b1cb      	cbz	r3, 800dc32 <acc_rss_integration_register_a121+0x3e>
 800dbfe:	6883      	ldr	r3, [r0, #8]
 800dc00:	b1bb      	cbz	r3, 800dc32 <acc_rss_integration_register_a121+0x3e>
 800dc02:	6903      	ldr	r3, [r0, #16]
 800dc04:	b1eb      	cbz	r3, 800dc42 <acc_rss_integration_register_a121+0x4e>
 800dc06:	8802      	ldrh	r2, [r0, #0]
 800dc08:	2a0f      	cmp	r2, #15
 800dc0a:	d914      	bls.n	800dc36 <acc_rss_integration_register_a121+0x42>
 800dc0c:	4604      	mov	r4, r0
 800dc0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc10:	4d0d      	ldr	r5, [pc, #52]	@ (800dc48 <acc_rss_integration_register_a121+0x54>)
 800dc12:	4e0e      	ldr	r6, [pc, #56]	@ (800dc4c <acc_rss_integration_register_a121+0x58>)
 800dc14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dc16:	4b0e      	ldr	r3, [pc, #56]	@ (800dc50 <acc_rss_integration_register_a121+0x5c>)
 800dc18:	4a0e      	ldr	r2, [pc, #56]	@ (800dc54 <acc_rss_integration_register_a121+0x60>)
 800dc1a:	601a      	str	r2, [r3, #0]
 800dc1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dc20:	2302      	movs	r3, #2
 800dc22:	e885 0003 	stmia.w	r5, {r0, r1}
 800dc26:	7033      	strb	r3, [r6, #0]
 800dc28:	2001      	movs	r0, #1
 800dc2a:	bd70      	pop	{r4, r5, r6, pc}
 800dc2c:	6943      	ldr	r3, [r0, #20]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d1e3      	bne.n	800dbfa <acc_rss_integration_register_a121+0x6>
 800dc32:	6903      	ldr	r3, [r0, #16]
 800dc34:	b12b      	cbz	r3, 800dc42 <acc_rss_integration_register_a121+0x4e>
 800dc36:	4a08      	ldr	r2, [pc, #32]	@ (800dc58 <acc_rss_integration_register_a121+0x64>)
 800dc38:	4908      	ldr	r1, [pc, #32]	@ (800dc5c <acc_rss_integration_register_a121+0x68>)
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	4798      	blx	r3
 800dc3e:	2000      	movs	r0, #0
 800dc40:	bd70      	pop	{r4, r5, r6, pc}
 800dc42:	4618      	mov	r0, r3
 800dc44:	bd70      	pop	{r4, r5, r6, pc}
 800dc46:	bf00      	nop
 800dc48:	200009ec 	.word	0x200009ec
 800dc4c:	20000894 	.word	0x20000894
 800dc50:	20000898 	.word	0x20000898
 800dc54:	016e3600 	.word	0x016e3600
 800dc58:	08014ebc 	.word	0x08014ebc
 800dc5c:	08014ed0 	.word	0x08014ed0

0800dc60 <acc_rss_integration_get_sensor_reference_frequency>:
 800dc60:	4b01      	ldr	r3, [pc, #4]	@ (800dc68 <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 800dc62:	6818      	ldr	r0, [r3, #0]
 800dc64:	4770      	bx	lr
 800dc66:	bf00      	nop
 800dc68:	20000898 	.word	0x20000898

0800dc6c <acc_rss_integration_get_max_spi_transfer_size>:
 800dc6c:	4b01      	ldr	r3, [pc, #4]	@ (800dc74 <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 800dc6e:	8818      	ldrh	r0, [r3, #0]
 800dc70:	4770      	bx	lr
 800dc72:	bf00      	nop
 800dc74:	200009ec 	.word	0x200009ec

0800dc78 <acc_rss_integration_sensor_device_transfer>:
 800dc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc7c:	4f10      	ldr	r7, [pc, #64]	@ (800dcc0 <acc_rss_integration_sensor_device_transfer+0x48>)
 800dc7e:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800dc82:	f1be 0f00 	cmp.w	lr, #0
 800dc86:	d003      	beq.n	800dc90 <acc_rss_integration_sensor_device_transfer+0x18>
 800dc88:	4673      	mov	r3, lr
 800dc8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc8e:	4718      	bx	r3
 800dc90:	460c      	mov	r4, r1
 800dc92:	4606      	mov	r6, r0
 800dc94:	4611      	mov	r1, r2
 800dc96:	4615      	mov	r5, r2
 800dc98:	4620      	mov	r0, r4
 800dc9a:	4698      	mov	r8, r3
 800dc9c:	f002 ffee 	bl	8010c7c <acc_utils_swap16_array>
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	4630      	mov	r0, r6
 800dca4:	006a      	lsls	r2, r5, #1
 800dca6:	4621      	mov	r1, r4
 800dca8:	4798      	blx	r3
 800dcaa:	f1b8 0f00 	cmp.w	r8, #0
 800dcae:	d101      	bne.n	800dcb4 <acc_rss_integration_sensor_device_transfer+0x3c>
 800dcb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb4:	4629      	mov	r1, r5
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcbc:	f002 bfde 	b.w	8010c7c <acc_utils_swap16_array>
 800dcc0:	200009ec 	.word	0x200009ec

0800dcc4 <acc_rss_integration_mem_alloc_debug>:
 800dcc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcc8:	4f0c      	ldr	r7, [pc, #48]	@ (800dcfc <acc_rss_integration_mem_alloc_debug+0x38>)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	4688      	mov	r8, r1
 800dcce:	4616      	mov	r6, r2
 800dcd0:	4605      	mov	r5, r0
 800dcd2:	4798      	blx	r3
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	b150      	cbz	r0, 800dcee <acc_rss_integration_mem_alloc_debug+0x2a>
 800dcd8:	4b09      	ldr	r3, [pc, #36]	@ (800dd00 <acc_rss_integration_mem_alloc_debug+0x3c>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	b123      	cbz	r3, 800dce8 <acc_rss_integration_mem_alloc_debug+0x24>
 800dcde:	689f      	ldr	r7, [r3, #8]
 800dce0:	4642      	mov	r2, r8
 800dce2:	4633      	mov	r3, r6
 800dce4:	4629      	mov	r1, r5
 800dce6:	47b8      	blx	r7
 800dce8:	4620      	mov	r0, r4
 800dcea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	4a04      	ldr	r2, [pc, #16]	@ (800dd04 <acc_rss_integration_mem_alloc_debug+0x40>)
 800dcf2:	4905      	ldr	r1, [pc, #20]	@ (800dd08 <acc_rss_integration_mem_alloc_debug+0x44>)
 800dcf4:	4798      	blx	r3
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcfc:	200009ec 	.word	0x200009ec
 800dd00:	20000890 	.word	0x20000890
 800dd04:	08014ee0 	.word	0x08014ee0
 800dd08:	08014ed0 	.word	0x08014ed0

0800dd0c <acc_rss_integration_mem_calloc_debug>:
 800dd0c:	b538      	push	{r3, r4, r5, lr}
 800dd0e:	b1a8      	cbz	r0, 800dd3c <acc_rss_integration_mem_calloc_debug+0x30>
 800dd10:	4614      	mov	r4, r2
 800dd12:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800dd16:	fbb2 f2f0 	udiv	r2, r2, r0
 800dd1a:	428a      	cmp	r2, r1
 800dd1c:	d90e      	bls.n	800dd3c <acc_rss_integration_mem_calloc_debug+0x30>
 800dd1e:	fb01 f500 	mul.w	r5, r1, r0
 800dd22:	461a      	mov	r2, r3
 800dd24:	4621      	mov	r1, r4
 800dd26:	4628      	mov	r0, r5
 800dd28:	f7ff ffcc 	bl	800dcc4 <acc_rss_integration_mem_alloc_debug>
 800dd2c:	4604      	mov	r4, r0
 800dd2e:	b130      	cbz	r0, 800dd3e <acc_rss_integration_mem_calloc_debug+0x32>
 800dd30:	462a      	mov	r2, r5
 800dd32:	2100      	movs	r1, #0
 800dd34:	f004 f8d8 	bl	8011ee8 <memset>
 800dd38:	4620      	mov	r0, r4
 800dd3a:	bd38      	pop	{r3, r4, r5, pc}
 800dd3c:	2400      	movs	r4, #0
 800dd3e:	4620      	mov	r0, r4
 800dd40:	bd38      	pop	{r3, r4, r5, pc}
 800dd42:	bf00      	nop

0800dd44 <acc_rss_integration_mem_free>:
 800dd44:	4b07      	ldr	r3, [pc, #28]	@ (800dd64 <acc_rss_integration_mem_free+0x20>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	b510      	push	{r4, lr}
 800dd4a:	4604      	mov	r4, r0
 800dd4c:	b10b      	cbz	r3, 800dd52 <acc_rss_integration_mem_free+0xe>
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	4798      	blx	r3
 800dd52:	b12c      	cbz	r4, 800dd60 <acc_rss_integration_mem_free+0x1c>
 800dd54:	4b04      	ldr	r3, [pc, #16]	@ (800dd68 <acc_rss_integration_mem_free+0x24>)
 800dd56:	4620      	mov	r0, r4
 800dd58:	689b      	ldr	r3, [r3, #8]
 800dd5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd5e:	4718      	bx	r3
 800dd60:	bd10      	pop	{r4, pc}
 800dd62:	bf00      	nop
 800dd64:	20000890 	.word	0x20000890
 800dd68:	200009ec 	.word	0x200009ec

0800dd6c <acc_rss_integration_log_level>:
 800dd6c:	4b01      	ldr	r3, [pc, #4]	@ (800dd74 <acc_rss_integration_log_level+0x8>)
 800dd6e:	7818      	ldrb	r0, [r3, #0]
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	20000894 	.word	0x20000894

0800dd78 <pipeline_a121_produce>:
 800dd78:	6803      	ldr	r3, [r0, #0]
 800dd7a:	f8d0 20e8 	ldr.w	r2, [r0, #232]	@ 0xe8
 800dd7e:	f8c0 20f0 	str.w	r2, [r0, #240]	@ 0xf0
 800dd82:	685a      	ldr	r2, [r3, #4]
 800dd84:	4618      	mov	r0, r3
 800dd86:	4710      	bx	r2

0800dd88 <pipeline_a121_disassemble>:
 800dd88:	b538      	push	{r3, r4, r5, lr}
 800dd8a:	6805      	ldr	r5, [r0, #0]
 800dd8c:	4604      	mov	r4, r0
 800dd8e:	b175      	cbz	r5, 800ddae <pipeline_a121_disassemble+0x26>
 800dd90:	f8d5 0098 	ldr.w	r0, [r5, #152]	@ 0x98
 800dd94:	f003 f95a 	bl	801104c <acc_element_frame_release>
 800dd98:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 800dd9c:	f003 f9da 	bl	8011154 <acc_element_frame_aux_release>
 800dda0:	f8d5 0098 	ldr.w	r0, [r5, #152]	@ 0x98
 800dda4:	f7ff ffce 	bl	800dd44 <acc_rss_integration_mem_free>
 800dda8:	4628      	mov	r0, r5
 800ddaa:	f7ff ffcb 	bl	800dd44 <acc_rss_integration_mem_free>
 800ddae:	4620      	mov	r0, r4
 800ddb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddb4:	f7ff bfc6 	b.w	800dd44 <acc_rss_integration_mem_free>

0800ddb8 <acc_pipeline_get_buffer_size>:
 800ddb8:	b510      	push	{r4, lr}
 800ddba:	b08e      	sub	sp, #56	@ 0x38
 800ddbc:	460c      	mov	r4, r1
 800ddbe:	4669      	mov	r1, sp
 800ddc0:	f000 fbda 	bl	800e578 <acc_radar_engine_a121_get_metadata>
 800ddc4:	b110      	cbz	r0, 800ddcc <acc_pipeline_get_buffer_size+0x14>
 800ddc6:	f8bd 3000 	ldrh.w	r3, [sp]
 800ddca:	6023      	str	r3, [r4, #0]
 800ddcc:	b00e      	add	sp, #56	@ 0x38
 800ddce:	bd10      	pop	{r4, pc}

0800ddd0 <acc_pipeline_a121_assemble>:
 800ddd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddd4:	6803      	ldr	r3, [r0, #0]
 800ddd6:	f893 204e 	ldrb.w	r2, [r3, #78]	@ 0x4e
 800ddda:	b09b      	sub	sp, #108	@ 0x6c
 800dddc:	4606      	mov	r6, r0
 800ddde:	460f      	mov	r7, r1
 800dde0:	b122      	cbz	r2, 800ddec <acc_pipeline_a121_assemble+0x1c>
 800dde2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	f040 810d 	bne.w	800e006 <acc_pipeline_a121_assemble+0x236>
 800ddec:	4aa5      	ldr	r2, [pc, #660]	@ (800e084 <acc_pipeline_a121_assemble+0x2b4>)
 800ddee:	233d      	movs	r3, #61	@ 0x3d
 800ddf0:	2110      	movs	r1, #16
 800ddf2:	2001      	movs	r0, #1
 800ddf4:	f7ff ff8a 	bl	800dd0c <acc_rss_integration_mem_calloc_debug>
 800ddf8:	4aa2      	ldr	r2, [pc, #648]	@ (800e084 <acc_pipeline_a121_assemble+0x2b4>)
 800ddfa:	4605      	mov	r5, r0
 800ddfc:	233e      	movs	r3, #62	@ 0x3e
 800ddfe:	21fc      	movs	r1, #252	@ 0xfc
 800de00:	2001      	movs	r0, #1
 800de02:	f7ff ff83 	bl	800dd0c <acc_rss_integration_mem_calloc_debug>
 800de06:	4604      	mov	r4, r0
 800de08:	2d00      	cmp	r5, #0
 800de0a:	f000 8134 	beq.w	800e076 <acc_pipeline_a121_assemble+0x2a6>
 800de0e:	2c00      	cmp	r4, #0
 800de10:	f000 812f 	beq.w	800e072 <acc_pipeline_a121_assemble+0x2a2>
 800de14:	f04f 0800 	mov.w	r8, #0
 800de18:	f8d6 9000 	ldr.w	r9, [r6]
 800de1c:	f8c4 8098 	str.w	r8, [r4, #152]	@ 0x98
 800de20:	4648      	mov	r0, r9
 800de22:	602c      	str	r4, [r5, #0]
 800de24:	a90c      	add	r1, sp, #48	@ 0x30
 800de26:	f000 fba7 	bl	800e578 <acc_radar_engine_a121_get_metadata>
 800de2a:	2800      	cmp	r0, #0
 800de2c:	f000 80de 	beq.w	800dfec <acc_pipeline_a121_assemble+0x21c>
 800de30:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800de34:	f8d6 c008 	ldr.w	ip, [r6, #8]
 800de38:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800de3c:	f8bd 004a 	ldrh.w	r0, [sp, #74]	@ 0x4a
 800de40:	8723      	strh	r3, [r4, #56]	@ 0x38
 800de42:	0049      	lsls	r1, r1, #1
 800de44:	f8c4 10e8 	str.w	r1, [r4, #232]	@ 0xe8
 800de48:	2100      	movs	r1, #0
 800de4a:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94
 800de4e:	f8a4 109c 	strh.w	r1, [r4, #156]	@ 0x9c
 800de52:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800de56:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 800de5a:	f104 01f4 	add.w	r1, r4, #244	@ 0xf4
 800de5e:	4403      	add	r3, r0
 800de60:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
 800de64:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800de68:	f104 01f6 	add.w	r1, r4, #246	@ 0xf6
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 800de72:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
 800de76:	f104 01f7 	add.w	r1, r4, #247	@ 0xf7
 800de7a:	f8a4 309e 	strh.w	r3, [r4, #158]	@ 0x9e
 800de7e:	6260      	str	r0, [r4, #36]	@ 0x24
 800de80:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
 800de84:	b13a      	cbz	r2, 800de96 <acc_pipeline_a121_assemble+0xc6>
 800de86:	f104 0eec 	add.w	lr, r4, #236	@ 0xec
 800de8a:	f104 01f5 	add.w	r1, r4, #245	@ 0xf5
 800de8e:	6250      	str	r0, [r2, #36]	@ 0x24
 800de90:	f8c2 e018 	str.w	lr, [r2, #24]
 800de94:	65d1      	str	r1, [r2, #92]	@ 0x5c
 800de96:	e9c4 0c36 	strd	r0, ip, [r4, #216]	@ 0xd8
 800de9a:	f8a4 30e4 	strh.w	r3, [r4, #228]	@ 0xe4
 800de9e:	2008      	movs	r0, #8
 800dea0:	f002 fd44 	bl	801092c <acc_element_sizeof>
 800dea4:	f899 304e 	ldrb.w	r3, [r9, #78]	@ 0x4e
 800dea8:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800deac:	b183      	cbz	r3, 800ded0 <acc_pipeline_a121_assemble+0x100>
 800deae:	f103 3cff 	add.w	ip, r3, #4294967295
 800deb2:	fa5f fc8c 	uxtb.w	ip, ip
 800deb6:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
 800deba:	f10d 0156 	add.w	r1, sp, #86	@ 0x56
 800debe:	1eba      	subs	r2, r7, #2
 800dec0:	f831 3b02 	ldrh.w	r3, [r1], #2
 800dec4:	fbb3 f3f0 	udiv	r3, r3, r0
 800dec8:	f822 3f02 	strh.w	r3, [r2, #2]!
 800decc:	4562      	cmp	r2, ip
 800dece:	d1f7      	bne.n	800dec0 <acc_pipeline_a121_assemble+0xf0>
 800ded0:	f8d6 8000 	ldr.w	r8, [r6]
 800ded4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800ded8:	f8bd 2046 	ldrh.w	r2, [sp, #70]	@ 0x46
 800dedc:	f8b8 9048 	ldrh.w	r9, [r8, #72]	@ 0x48
 800dee0:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800dee2:	f89d 1064 	ldrb.w	r1, [sp, #100]	@ 0x64
 800dee6:	60b8      	str	r0, [r7, #8]
 800dee8:	441a      	add	r2, r3
 800deea:	81fa      	strh	r2, [r7, #14]
 800deec:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 800def0:	7339      	strb	r1, [r7, #12]
 800def2:	823a      	strh	r2, [r7, #16]
 800def4:	f1b9 0f00 	cmp.w	r9, #0
 800def8:	d003      	beq.n	800df02 <acc_pipeline_a121_assemble+0x132>
 800defa:	f8bd 204c 	ldrh.w	r2, [sp, #76]	@ 0x4c
 800defe:	fbb2 f9f9 	udiv	r9, r2, r9
 800df02:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 800df06:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800df0a:	f8bd 0032 	ldrh.w	r0, [sp, #50]	@ 0x32
 800df0e:	f8ad 0000 	strh.w	r0, [sp]
 800df12:	441a      	add	r2, r3
 800df14:	440b      	add	r3, r1
 800df16:	f8ad 2006 	strh.w	r2, [sp, #6]
 800df1a:	f8ad 3008 	strh.w	r3, [sp, #8]
 800df1e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800df22:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800df26:	f8ad 2002 	strh.w	r2, [sp, #2]
 800df2a:	f104 073c 	add.w	r7, r4, #60	@ 0x3c
 800df2e:	220f      	movs	r2, #15
 800df30:	f8ad 3004 	strh.w	r3, [sp, #4]
 800df34:	4638      	mov	r0, r7
 800df36:	2303      	movs	r3, #3
 800df38:	4669      	mov	r1, sp
 800df3a:	f8ad 200a 	strh.w	r2, [sp, #10]
 800df3e:	f88d 300c 	strb.w	r3, [sp, #12]
 800df42:	f003 f8e5 	bl	8011110 <acc_element_frame_aux_init>
 800df46:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800df4a:	b370      	cbz	r0, 800dfaa <acc_pipeline_a121_assemble+0x1da>
 800df4c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 800df50:	f8bd 103e 	ldrh.w	r1, [sp, #62]	@ 0x3e
 800df54:	f8b8 c048 	ldrh.w	ip, [r8, #72]	@ 0x48
 800df58:	f8ad 901a 	strh.w	r9, [sp, #26]
 800df5c:	2200      	movs	r2, #0
 800df5e:	4419      	add	r1, r3
 800df60:	f898 304e 	ldrb.w	r3, [r8, #78]	@ 0x4e
 800df64:	9205      	str	r2, [sp, #20]
 800df66:	e9cd 2208 	strd	r2, r2, [sp, #32]
 800df6a:	9207      	str	r2, [sp, #28]
 800df6c:	920a      	str	r2, [sp, #40]	@ 0x28
 800df6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df70:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 800df74:	f8ad 1014 	strh.w	r1, [sp, #20]
 800df78:	f88d 3016 	strb.w	r3, [sp, #22]
 800df7c:	f8ad c018 	strh.w	ip, [sp, #24]
 800df80:	9204      	str	r2, [sp, #16]
 800df82:	b17b      	cbz	r3, 800dfa4 <acc_pipeline_a121_assemble+0x1d4>
 800df84:	3b01      	subs	r3, #1
 800df86:	b2db      	uxtb	r3, r3
 800df88:	aa14      	add	r2, sp, #80	@ 0x50
 800df8a:	eb02 0c43 	add.w	ip, r2, r3, lsl #1
 800df8e:	f10d 034e 	add.w	r3, sp, #78	@ 0x4e
 800df92:	aa07      	add	r2, sp, #28
 800df94:	f833 1b02 	ldrh.w	r1, [r3], #2
 800df98:	f822 1b02 	strh.w	r1, [r2], #2
 800df9c:	459c      	cmp	ip, r3
 800df9e:	88d9      	ldrh	r1, [r3, #6]
 800dfa0:	80d1      	strh	r1, [r2, #6]
 800dfa2:	d1f7      	bne.n	800df94 <acc_pipeline_a121_assemble+0x1c4>
 800dfa4:	a904      	add	r1, sp, #16
 800dfa6:	f002 ffd9 	bl	8010f5c <acc_element_frame_init>
 800dfaa:	f104 08a0 	add.w	r8, r4, #160	@ 0xa0
 800dfae:	6871      	ldr	r1, [r6, #4]
 800dfb0:	4640      	mov	r0, r8
 800dfb2:	f003 f901 	bl	80111b8 <acc_element_sink_a121_callback_init>
 800dfb6:	4639      	mov	r1, r7
 800dfb8:	4620      	mov	r0, r4
 800dfba:	f002 fcc3 	bl	8010944 <acc_element_connect>
 800dfbe:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 800dfc2:	2900      	cmp	r1, #0
 800dfc4:	d059      	beq.n	800e07a <acc_pipeline_a121_assemble+0x2aa>
 800dfc6:	4638      	mov	r0, r7
 800dfc8:	f002 fcbc 	bl	8010944 <acc_element_connect>
 800dfcc:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800dfd0:	4641      	mov	r1, r8
 800dfd2:	f002 fcb7 	bl	8010944 <acc_element_connect>
 800dfd6:	6820      	ldr	r0, [r4, #0]
 800dfd8:	6883      	ldr	r3, [r0, #8]
 800dfda:	4798      	blx	r3
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	d13b      	bne.n	800e058 <acc_pipeline_a121_assemble+0x288>
 800dfe0:	4b29      	ldr	r3, [pc, #164]	@ (800e088 <acc_pipeline_a121_assemble+0x2b8>)
 800dfe2:	4a2a      	ldr	r2, [pc, #168]	@ (800e08c <acc_pipeline_a121_assemble+0x2bc>)
 800dfe4:	691b      	ldr	r3, [r3, #16]
 800dfe6:	4927      	ldr	r1, [pc, #156]	@ (800e084 <acc_pipeline_a121_assemble+0x2b4>)
 800dfe8:	4798      	blx	r3
 800dfea:	e004      	b.n	800dff6 <acc_pipeline_a121_assemble+0x226>
 800dfec:	4b26      	ldr	r3, [pc, #152]	@ (800e088 <acc_pipeline_a121_assemble+0x2b8>)
 800dfee:	4a28      	ldr	r2, [pc, #160]	@ (800e090 <acc_pipeline_a121_assemble+0x2c0>)
 800dff0:	691b      	ldr	r3, [r3, #16]
 800dff2:	4924      	ldr	r1, [pc, #144]	@ (800e084 <acc_pipeline_a121_assemble+0x2b4>)
 800dff4:	4798      	blx	r3
 800dff6:	4628      	mov	r0, r5
 800dff8:	f7ff fec6 	bl	800dd88 <pipeline_a121_disassemble>
 800dffc:	2500      	movs	r5, #0
 800dffe:	4628      	mov	r0, r5
 800e000:	b01b      	add	sp, #108	@ 0x6c
 800e002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e006:	4a1f      	ldr	r2, [pc, #124]	@ (800e084 <acc_pipeline_a121_assemble+0x2b4>)
 800e008:	233d      	movs	r3, #61	@ 0x3d
 800e00a:	2110      	movs	r1, #16
 800e00c:	2001      	movs	r0, #1
 800e00e:	f7ff fe7d 	bl	800dd0c <acc_rss_integration_mem_calloc_debug>
 800e012:	4a1c      	ldr	r2, [pc, #112]	@ (800e084 <acc_pipeline_a121_assemble+0x2b4>)
 800e014:	233e      	movs	r3, #62	@ 0x3e
 800e016:	21fc      	movs	r1, #252	@ 0xfc
 800e018:	4605      	mov	r5, r0
 800e01a:	2001      	movs	r0, #1
 800e01c:	f7ff fe76 	bl	800dd0c <acc_rss_integration_mem_calloc_debug>
 800e020:	4a18      	ldr	r2, [pc, #96]	@ (800e084 <acc_pipeline_a121_assemble+0x2b4>)
 800e022:	4604      	mov	r4, r0
 800e024:	2343      	movs	r3, #67	@ 0x43
 800e026:	2160      	movs	r1, #96	@ 0x60
 800e028:	2001      	movs	r0, #1
 800e02a:	f7ff fe6f 	bl	800dd0c <acc_rss_integration_mem_calloc_debug>
 800e02e:	4680      	mov	r8, r0
 800e030:	b125      	cbz	r5, 800e03c <acc_pipeline_a121_assemble+0x26c>
 800e032:	b11c      	cbz	r4, 800e03c <acc_pipeline_a121_assemble+0x26c>
 800e034:	f1b8 0f00 	cmp.w	r8, #0
 800e038:	f47f aeee 	bne.w	800de18 <acc_pipeline_a121_assemble+0x48>
 800e03c:	4628      	mov	r0, r5
 800e03e:	f7ff fe81 	bl	800dd44 <acc_rss_integration_mem_free>
 800e042:	4620      	mov	r0, r4
 800e044:	f7ff fe7e 	bl	800dd44 <acc_rss_integration_mem_free>
 800e048:	4640      	mov	r0, r8
 800e04a:	f7ff fe7b 	bl	800dd44 <acc_rss_integration_mem_free>
 800e04e:	2500      	movs	r5, #0
 800e050:	4628      	mov	r0, r5
 800e052:	b01b      	add	sp, #108	@ 0x6c
 800e054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e058:	6820      	ldr	r0, [r4, #0]
 800e05a:	68c3      	ldr	r3, [r0, #12]
 800e05c:	4798      	blx	r3
 800e05e:	4b0d      	ldr	r3, [pc, #52]	@ (800e094 <acc_pipeline_a121_assemble+0x2c4>)
 800e060:	4a0d      	ldr	r2, [pc, #52]	@ (800e098 <acc_pipeline_a121_assemble+0x2c8>)
 800e062:	606b      	str	r3, [r5, #4]
 800e064:	4628      	mov	r0, r5
 800e066:	2300      	movs	r3, #0
 800e068:	e9c5 3202 	strd	r3, r2, [r5, #8]
 800e06c:	b01b      	add	sp, #108	@ 0x6c
 800e06e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e072:	46a0      	mov	r8, r4
 800e074:	e7e2      	b.n	800e03c <acc_pipeline_a121_assemble+0x26c>
 800e076:	46a8      	mov	r8, r5
 800e078:	e7e0      	b.n	800e03c <acc_pipeline_a121_assemble+0x26c>
 800e07a:	4641      	mov	r1, r8
 800e07c:	4638      	mov	r0, r7
 800e07e:	f002 fc61 	bl	8010944 <acc_element_connect>
 800e082:	e7a8      	b.n	800dfd6 <acc_pipeline_a121_assemble+0x206>
 800e084:	08014f14 	.word	0x08014f14
 800e088:	200009ec 	.word	0x200009ec
 800e08c:	08014f24 	.word	0x08014f24
 800e090:	08014ef0 	.word	0x08014ef0
 800e094:	0800dd79 	.word	0x0800dd79
 800e098:	0800dd89 	.word	0x0800dd89

0800e09c <acc_pipeline_a121_prepare_memory>:
 800e09c:	6803      	ldr	r3, [r0, #0]
 800e09e:	b430      	push	{r4, r5}
 800e0a0:	f8b3 0094 	ldrh.w	r0, [r3, #148]	@ 0x94
 800e0a4:	8f1c      	ldrh	r4, [r3, #56]	@ 0x38
 800e0a6:	f8b3 2096 	ldrh.w	r2, [r3, #150]	@ 0x96
 800e0aa:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
 800e0ae:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 800e0b2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800e0b6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e0ba:	e9c3 0213 	strd	r0, r2, [r3, #76]	@ 0x4c
 800e0be:	615c      	str	r4, [r3, #20]
 800e0c0:	b14d      	cbz	r5, 800e0d6 <acc_pipeline_a121_prepare_memory+0x3a>
 800e0c2:	f8b3 009c 	ldrh.w	r0, [r3, #156]	@ 0x9c
 800e0c6:	f8b3 209e 	ldrh.w	r2, [r3, #158]	@ 0x9e
 800e0ca:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800e0ce:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e0d2:	e9c5 0204 	strd	r0, r2, [r5, #16]
 800e0d6:	f8b3 20e4 	ldrh.w	r2, [r3, #228]	@ 0xe4
 800e0da:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800e0de:	bc30      	pop	{r4, r5}
 800e0e0:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
 800e0e4:	4770      	bx	lr
 800e0e6:	bf00      	nop

0800e0e8 <acc_radar_engine_a121_context_create>:
 800e0e8:	b508      	push	{r3, lr}
 800e0ea:	4a07      	ldr	r2, [pc, #28]	@ (800e108 <acc_radar_engine_a121_context_create+0x20>)
 800e0ec:	2373      	movs	r3, #115	@ 0x73
 800e0ee:	f44f 71fe 	mov.w	r1, #508	@ 0x1fc
 800e0f2:	2001      	movs	r0, #1
 800e0f4:	f7ff fe0a 	bl	800dd0c <acc_rss_integration_mem_calloc_debug>
 800e0f8:	b120      	cbz	r0, 800e104 <acc_radar_engine_a121_context_create+0x1c>
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	f8a0 31c4 	strh.w	r3, [r0, #452]	@ 0x1c4
 800e100:	f880 31c6 	strb.w	r3, [r0, #454]	@ 0x1c6
 800e104:	bd08      	pop	{r3, pc}
 800e106:	bf00      	nop
 800e108:	08014f44 	.word	0x08014f44

0800e10c <acc_radar_engine_a121_context_destroy>:
 800e10c:	b108      	cbz	r0, 800e112 <acc_radar_engine_a121_context_destroy+0x6>
 800e10e:	f7ff be19 	b.w	800dd44 <acc_rss_integration_mem_free>
 800e112:	4770      	bx	lr

0800e114 <acc_radar_engine_a121_run_program>:
 800e114:	f003 b902 	b.w	801131c <acc_cpd_a121_meas_session_run_program>

0800e118 <acc_radar_engine_a121_measure>:
 800e118:	b510      	push	{r4, lr}
 800e11a:	460c      	mov	r4, r1
 800e11c:	2201      	movs	r2, #1
 800e11e:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800e122:	f000 fc41 	bl	800e9a8 <acc_sensor_protocol_a121_ack_event>
 800e126:	f894 31c5 	ldrb.w	r3, [r4, #453]	@ 0x1c5
 800e12a:	b143      	cbz	r3, 800e13e <acc_radar_engine_a121_measure+0x26>
 800e12c:	f894 31c6 	ldrb.w	r3, [r4, #454]	@ 0x1c6
 800e130:	2b02      	cmp	r3, #2
 800e132:	bf0c      	ite	eq
 800e134:	2301      	moveq	r3, #1
 800e136:	2302      	movne	r3, #2
 800e138:	f884 31c6 	strb.w	r3, [r4, #454]	@ 0x1c6
 800e13c:	bd10      	pop	{r4, pc}
 800e13e:	2301      	movs	r3, #1
 800e140:	f884 31c6 	strb.w	r3, [r4, #454]	@ 0x1c6
 800e144:	bd10      	pop	{r4, pc}
 800e146:	bf00      	nop

0800e148 <acc_radar_engine_a121_transfer_data>:
 800e148:	b538      	push	{r3, r4, r5, lr}
 800e14a:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800e14e:	9c04      	ldr	r4, [sp, #16]
 800e150:	2901      	cmp	r1, #1
 800e152:	bf14      	ite	ne
 800e154:	f44f 5180 	movne.w	r1, #4096	@ 0x1000
 800e158:	2100      	moveq	r1, #0
 800e15a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800e15e:	461d      	mov	r5, r3
 800e160:	f003 f954 	bl	801140c <acc_cpd_a121_meas_session_transfer_data>
 800e164:	b118      	cbz	r0, 800e16e <acc_radar_engine_a121_transfer_data+0x26>
 800e166:	1e28      	subs	r0, r5, #0
 800e168:	bf18      	it	ne
 800e16a:	2001      	movne	r0, #1
 800e16c:	bd38      	pop	{r3, r4, r5, pc}
 800e16e:	4b04      	ldr	r3, [pc, #16]	@ (800e180 <acc_radar_engine_a121_transfer_data+0x38>)
 800e170:	4a04      	ldr	r2, [pc, #16]	@ (800e184 <acc_radar_engine_a121_transfer_data+0x3c>)
 800e172:	691b      	ldr	r3, [r3, #16]
 800e174:	4904      	ldr	r1, [pc, #16]	@ (800e188 <acc_radar_engine_a121_transfer_data+0x40>)
 800e176:	4604      	mov	r4, r0
 800e178:	4798      	blx	r3
 800e17a:	4620      	mov	r0, r4
 800e17c:	bd38      	pop	{r3, r4, r5, pc}
 800e17e:	bf00      	nop
 800e180:	200009ec 	.word	0x200009ec
 800e184:	08014f58 	.word	0x08014f58
 800e188:	08014f44 	.word	0x08014f44

0800e18c <acc_radar_engine_a121_verify_radar_data_ready>:
 800e18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e190:	b084      	sub	sp, #16
 800e192:	460d      	mov	r5, r1
 800e194:	2400      	movs	r4, #0
 800e196:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800e19a:	9403      	str	r4, [sp, #12]
 800e19c:	4690      	mov	r8, r2
 800e19e:	4607      	mov	r7, r0
 800e1a0:	f000 fbe6 	bl	800e970 <acc_sensor_protocol_a121_is_event_pending>
 800e1a4:	b980      	cbnz	r0, 800e1c8 <acc_radar_engine_a121_verify_radar_data_ready+0x3c>
 800e1a6:	4b15      	ldr	r3, [pc, #84]	@ (800e1fc <acc_radar_engine_a121_verify_radar_data_ready+0x70>)
 800e1a8:	4a15      	ldr	r2, [pc, #84]	@ (800e200 <acc_radar_engine_a121_verify_radar_data_ready+0x74>)
 800e1aa:	691d      	ldr	r5, [r3, #16]
 800e1ac:	4915      	ldr	r1, [pc, #84]	@ (800e204 <acc_radar_engine_a121_verify_radar_data_ready+0x78>)
 800e1ae:	463b      	mov	r3, r7
 800e1b0:	4604      	mov	r4, r0
 800e1b2:	47a8      	blx	r5
 800e1b4:	ae03      	add	r6, sp, #12
 800e1b6:	4630      	mov	r0, r6
 800e1b8:	f000 fcb8 	bl	800eb2c <acc_sensor_protocol_a121_get_frame_delayed_flag>
 800e1bc:	f888 0000 	strb.w	r0, [r8]
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	b004      	add	sp, #16
 800e1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1c8:	ae03      	add	r6, sp, #12
 800e1ca:	f895 11c6 	ldrb.w	r1, [r5, #454]	@ 0x1c6
 800e1ce:	4632      	mov	r2, r6
 800e1d0:	4638      	mov	r0, r7
 800e1d2:	f000 fc31 	bl	800ea38 <acc_sensor_protocol_a121_get_event>
 800e1d6:	4604      	mov	r4, r0
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	d0ec      	beq.n	800e1b6 <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 800e1dc:	4630      	mov	r0, r6
 800e1de:	f000 fc95 	bl	800eb0c <acc_sensor_protocol_a121_is_handshake>
 800e1e2:	4604      	mov	r4, r0
 800e1e4:	2800      	cmp	r0, #0
 800e1e6:	d1e6      	bne.n	800e1b6 <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 800e1e8:	4a04      	ldr	r2, [pc, #16]	@ (800e1fc <acc_radar_engine_a121_verify_radar_data_ready+0x70>)
 800e1ea:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800e1ee:	6915      	ldr	r5, [r2, #16]
 800e1f0:	4904      	ldr	r1, [pc, #16]	@ (800e204 <acc_radar_engine_a121_verify_radar_data_ready+0x78>)
 800e1f2:	9300      	str	r3, [sp, #0]
 800e1f4:	4a04      	ldr	r2, [pc, #16]	@ (800e208 <acc_radar_engine_a121_verify_radar_data_ready+0x7c>)
 800e1f6:	463b      	mov	r3, r7
 800e1f8:	47a8      	blx	r5
 800e1fa:	e7dc      	b.n	800e1b6 <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 800e1fc:	200009ec 	.word	0x200009ec
 800e200:	08014f84 	.word	0x08014f84
 800e204:	08014f44 	.word	0x08014f44
 800e208:	08014fa4 	.word	0x08014fa4

0800e20c <acc_radar_engine_a121_update_buffer_header>:
 800e20c:	f890 31c4 	ldrb.w	r3, [r0, #452]	@ 0x1c4
 800e210:	8011      	strh	r1, [r2, #0]
 800e212:	b4f0      	push	{r4, r5, r6, r7}
 800e214:	b133      	cbz	r3, 800e224 <acc_radar_engine_a121_update_buffer_header+0x18>
 800e216:	f890 31c6 	ldrb.w	r3, [r0, #454]	@ 0x1c6
 800e21a:	f1a3 0301 	sub.w	r3, r3, #1
 800e21e:	fab3 f383 	clz	r3, r3
 800e222:	095b      	lsrs	r3, r3, #5
 800e224:	8053      	strh	r3, [r2, #2]
 800e226:	f8b0 31c8 	ldrh.w	r3, [r0, #456]	@ 0x1c8
 800e22a:	8093      	strh	r3, [r2, #4]
 800e22c:	1d91      	adds	r1, r2, #6
 800e22e:	f500 73e5 	add.w	r3, r0, #458	@ 0x1ca
 800e232:	f500 74fd 	add.w	r4, r0, #506	@ 0x1fa
 800e236:	681f      	ldr	r7, [r3, #0]
 800e238:	685e      	ldr	r6, [r3, #4]
 800e23a:	689d      	ldr	r5, [r3, #8]
 800e23c:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800e240:	f8c1 c00c 	str.w	ip, [r1, #12]
 800e244:	3310      	adds	r3, #16
 800e246:	42a3      	cmp	r3, r4
 800e248:	600f      	str	r7, [r1, #0]
 800e24a:	604e      	str	r6, [r1, #4]
 800e24c:	608d      	str	r5, [r1, #8]
 800e24e:	f101 0110 	add.w	r1, r1, #16
 800e252:	d1f0      	bne.n	800e236 <acc_radar_engine_a121_update_buffer_header+0x2a>
 800e254:	f8b0 31fa 	ldrh.w	r3, [r0, #506]	@ 0x1fa
 800e258:	86d3      	strh	r3, [r2, #54]	@ 0x36
 800e25a:	bcf0      	pop	{r4, r5, r6, r7}
 800e25c:	4770      	bx	lr
 800e25e:	bf00      	nop

0800e260 <acc_radar_engine_a121_check_asic_id>:
 800e260:	f000 bc68 	b.w	800eb34 <acc_sensor_protocol_a121_check_asic_id>

0800e264 <acc_radar_engine_a121_is_sensor_running>:
 800e264:	f000 bb72 	b.w	800e94c <acc_sensor_protocol_a121_is_sensor_running>

0800e268 <acc_radar_engine_121_populate_metadata>:
 800e268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e26c:	8804      	ldrh	r4, [r0, #0]
 800e26e:	2a00      	cmp	r2, #0
 800e270:	bf14      	ite	ne
 800e272:	f44f 5280 	movne.w	r2, #4096	@ 0x1000
 800e276:	f44f 5200 	moveq.w	r2, #8192	@ 0x2000
 800e27a:	f5b4 6f9c 	cmp.w	r4, #1248	@ 0x4e0
 800e27e:	bf38      	it	cc
 800e280:	f44f 649c 	movcc.w	r4, #1248	@ 0x4e0
 800e284:	42a2      	cmp	r2, r4
 800e286:	4606      	mov	r6, r0
 800e288:	4688      	mov	r8, r1
 800e28a:	461d      	mov	r5, r3
 800e28c:	d22b      	bcs.n	800e2e6 <acc_radar_engine_121_populate_metadata+0x7e>
 800e28e:	4b17      	ldr	r3, [pc, #92]	@ (800e2ec <acc_radar_engine_121_populate_metadata+0x84>)
 800e290:	4a17      	ldr	r2, [pc, #92]	@ (800e2f0 <acc_radar_engine_121_populate_metadata+0x88>)
 800e292:	691b      	ldr	r3, [r3, #16]
 800e294:	4917      	ldr	r1, [pc, #92]	@ (800e2f4 <acc_radar_engine_121_populate_metadata+0x8c>)
 800e296:	2000      	movs	r0, #0
 800e298:	4798      	blx	r3
 800e29a:	2700      	movs	r7, #0
 800e29c:	4916      	ldr	r1, [pc, #88]	@ (800e2f8 <acc_radar_engine_121_populate_metadata+0x90>)
 800e29e:	4a17      	ldr	r2, [pc, #92]	@ (800e2fc <acc_radar_engine_121_populate_metadata+0x94>)
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	806b      	strh	r3, [r5, #2]
 800e2a4:	231c      	movs	r3, #28
 800e2a6:	81ab      	strh	r3, [r5, #12]
 800e2a8:	e9c5 1201 	strd	r1, r2, [r5, #4]
 800e2ac:	f000 f9de 	bl	800e66c <acc_sensor_a121_get_max_header_length>
 800e2b0:	301c      	adds	r0, #28
 800e2b2:	b280      	uxth	r0, r0
 800e2b4:	1903      	adds	r3, r0, r4
 800e2b6:	462c      	mov	r4, r5
 800e2b8:	005b      	lsls	r3, r3, #1
 800e2ba:	81e8      	strh	r0, [r5, #14]
 800e2bc:	6871      	ldr	r1, [r6, #4]
 800e2be:	6830      	ldr	r0, [r6, #0]
 800e2c0:	68b2      	ldr	r2, [r6, #8]
 800e2c2:	f824 3b10 	strh.w	r3, [r4], #16
 800e2c6:	68f3      	ldr	r3, [r6, #12]
 800e2c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2ca:	6930      	ldr	r0, [r6, #16]
 800e2cc:	6971      	ldr	r1, [r6, #20]
 800e2ce:	69b2      	ldr	r2, [r6, #24]
 800e2d0:	c407      	stmia	r4!, {r0, r1, r2}
 800e2d2:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e2d6:	8bb3      	ldrh	r3, [r6, #28]
 800e2d8:	8023      	strh	r3, [r4, #0]
 800e2da:	3530      	adds	r5, #48	@ 0x30
 800e2dc:	e885 0003 	stmia.w	r5, {r0, r1}
 800e2e0:	4638      	mov	r0, r7
 800e2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2e6:	2701      	movs	r7, #1
 800e2e8:	e7d8      	b.n	800e29c <acc_radar_engine_121_populate_metadata+0x34>
 800e2ea:	bf00      	nop
 800e2ec:	200009ec 	.word	0x200009ec
 800e2f0:	08014fd0 	.word	0x08014fd0
 800e2f4:	08014f44 	.word	0x08014f44
 800e2f8:	00020001 	.word	0x00020001
 800e2fc:	001b0003 	.word	0x001b0003

0800e300 <acc_radar_engine_a121_prepare>:
 800e300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e304:	f5ad 7d0d 	sub.w	sp, sp, #564	@ 0x234
 800e308:	460c      	mov	r4, r1
 800e30a:	4615      	mov	r5, r2
 800e30c:	2100      	movs	r1, #0
 800e30e:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800e312:	4606      	mov	r6, r0
 800e314:	a81b      	add	r0, sp, #108	@ 0x6c
 800e316:	4699      	mov	r9, r3
 800e318:	9f95      	ldr	r7, [sp, #596]	@ 0x254
 800e31a:	f10d 080c 	add.w	r8, sp, #12
 800e31e:	f003 fde3 	bl	8011ee8 <memset>
 800e322:	2238      	movs	r2, #56	@ 0x38
 800e324:	2100      	movs	r1, #0
 800e326:	a80d      	add	r0, sp, #52	@ 0x34
 800e328:	f003 fdde 	bl	8011ee8 <memset>
 800e32c:	4629      	mov	r1, r5
 800e32e:	4620      	mov	r0, r4
 800e330:	aa1b      	add	r2, sp, #108	@ 0x6c
 800e332:	ab05      	add	r3, sp, #20
 800e334:	f8cd 8000 	str.w	r8, [sp]
 800e338:	f001 fb44 	bl	800f9c4 <acc_translation_a121_translate>
 800e33c:	b930      	cbnz	r0, 800e34c <acc_radar_engine_a121_prepare+0x4c>
 800e33e:	f04f 0800 	mov.w	r8, #0
 800e342:	4640      	mov	r0, r8
 800e344:	f50d 7d0d 	add.w	sp, sp, #564	@ 0x234
 800e348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e34c:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800e350:	4641      	mov	r1, r8
 800e352:	a805      	add	r0, sp, #20
 800e354:	ab0d      	add	r3, sp, #52	@ 0x34
 800e356:	f7ff ff87 	bl	800e268 <acc_radar_engine_121_populate_metadata>
 800e35a:	2800      	cmp	r0, #0
 800e35c:	d0ef      	beq.n	800e33e <acc_radar_engine_a121_prepare+0x3e>
 800e35e:	9996      	ldr	r1, [sp, #600]	@ 0x258
 800e360:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e364:	800b      	strh	r3, [r1, #0]
 800e366:	9997      	ldr	r1, [sp, #604]	@ 0x25c
 800e368:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 800e36c:	800a      	strh	r2, [r1, #0]
 800e36e:	2304      	movs	r3, #4
 800e370:	aa1b      	add	r2, sp, #108	@ 0x6c
 800e372:	4631      	mov	r1, r6
 800e374:	2014      	movs	r0, #20
 800e376:	f002 fae7 	bl	8010948 <acc_probes_execute_struct>
 800e37a:	2800      	cmp	r0, #0
 800e37c:	d0df      	beq.n	800e33e <acc_radar_engine_a121_prepare+0x3e>
 800e37e:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800e380:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e382:	464a      	mov	r2, r9
 800e384:	4630      	mov	r0, r6
 800e386:	f002 ff95 	bl	80112b4 <acc_cpd_a121_meas_session_load_program>
 800e38a:	4680      	mov	r8, r0
 800e38c:	b928      	cbnz	r0, 800e39a <acc_radar_engine_a121_prepare+0x9a>
 800e38e:	4b27      	ldr	r3, [pc, #156]	@ (800e42c <acc_radar_engine_a121_prepare+0x12c>)
 800e390:	4a27      	ldr	r2, [pc, #156]	@ (800e430 <acc_radar_engine_a121_prepare+0x130>)
 800e392:	691b      	ldr	r3, [r3, #16]
 800e394:	4927      	ldr	r1, [pc, #156]	@ (800e434 <acc_radar_engine_a121_prepare+0x134>)
 800e396:	4798      	blx	r3
 800e398:	e7d3      	b.n	800e342 <acc_radar_engine_a121_prepare+0x42>
 800e39a:	4b27      	ldr	r3, [pc, #156]	@ (800e438 <acc_radar_engine_a121_prepare+0x138>)
 800e39c:	9300      	str	r3, [sp, #0]
 800e39e:	2260      	movs	r2, #96	@ 0x60
 800e3a0:	9201      	str	r2, [sp, #4]
 800e3a2:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800e3a4:	464a      	mov	r2, r9
 800e3a6:	4630      	mov	r0, r6
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	f000 fab9 	bl	800e920 <acc_sensor_protocol_a121_load_lut>
 800e3ae:	4680      	mov	r8, r0
 800e3b0:	b3a8      	cbz	r0, 800e41e <acc_radar_engine_a121_prepare+0x11e>
 800e3b2:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800e3b6:	a91b      	add	r1, sp, #108	@ 0x6c
 800e3b8:	4638      	mov	r0, r7
 800e3ba:	f003 fe34 	bl	8012026 <memcpy>
 800e3be:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 800e3c2:	b122      	cbz	r2, 800e3ce <acc_radar_engine_a121_prepare+0xce>
 800e3c4:	f894 304e 	ldrb.w	r3, [r4, #78]	@ 0x4e
 800e3c8:	1e1a      	subs	r2, r3, #0
 800e3ca:	bf18      	it	ne
 800e3cc:	2201      	movne	r2, #1
 800e3ce:	2101      	movs	r1, #1
 800e3d0:	462b      	mov	r3, r5
 800e3d2:	f894 004b 	ldrb.w	r0, [r4, #75]	@ 0x4b
 800e3d6:	f887 11c6 	strb.w	r1, [r7, #454]	@ 0x1c6
 800e3da:	f833 1b26 	ldrh.w	r1, [r3], #38
 800e3de:	f8a7 11c8 	strh.w	r1, [r7, #456]	@ 0x1c8
 800e3e2:	f887 01c5 	strb.w	r0, [r7, #453]	@ 0x1c5
 800e3e6:	f887 21c4 	strb.w	r2, [r7, #452]	@ 0x1c4
 800e3ea:	f507 71e5 	add.w	r1, r7, #458	@ 0x1ca
 800e3ee:	f105 0c56 	add.w	ip, r5, #86	@ 0x56
 800e3f2:	681c      	ldr	r4, [r3, #0]
 800e3f4:	6858      	ldr	r0, [r3, #4]
 800e3f6:	689a      	ldr	r2, [r3, #8]
 800e3f8:	68de      	ldr	r6, [r3, #12]
 800e3fa:	60ce      	str	r6, [r1, #12]
 800e3fc:	3310      	adds	r3, #16
 800e3fe:	4563      	cmp	r3, ip
 800e400:	600c      	str	r4, [r1, #0]
 800e402:	6048      	str	r0, [r1, #4]
 800e404:	608a      	str	r2, [r1, #8]
 800e406:	f101 0110 	add.w	r1, r1, #16
 800e40a:	d1f2      	bne.n	800e3f2 <acc_radar_engine_a121_prepare+0xf2>
 800e40c:	f8b5 3056 	ldrh.w	r3, [r5, #86]	@ 0x56
 800e410:	f8a7 31fa 	strh.w	r3, [r7, #506]	@ 0x1fa
 800e414:	4640      	mov	r0, r8
 800e416:	f50d 7d0d 	add.w	sp, sp, #564	@ 0x234
 800e41a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e41e:	4b03      	ldr	r3, [pc, #12]	@ (800e42c <acc_radar_engine_a121_prepare+0x12c>)
 800e420:	4a06      	ldr	r2, [pc, #24]	@ (800e43c <acc_radar_engine_a121_prepare+0x13c>)
 800e422:	691b      	ldr	r3, [r3, #16]
 800e424:	4903      	ldr	r1, [pc, #12]	@ (800e434 <acc_radar_engine_a121_prepare+0x134>)
 800e426:	4798      	blx	r3
 800e428:	e78b      	b.n	800e342 <acc_radar_engine_a121_prepare+0x42>
 800e42a:	bf00      	nop
 800e42c:	200009ec 	.word	0x200009ec
 800e430:	08014ff0 	.word	0x08014ff0
 800e434:	08014f44 	.word	0x08014f44
 800e438:	080173bc 	.word	0x080173bc
 800e43c:	08015004 	.word	0x08015004

0800e440 <acc_radar_engine_a121_reconfigure>:
 800e440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e444:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800e448:	4607      	mov	r7, r0
 800e44a:	9c95      	ldr	r4, [sp, #596]	@ 0x254
 800e44c:	460d      	mov	r5, r1
 800e44e:	4616      	mov	r6, r2
 800e450:	2100      	movs	r1, #0
 800e452:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800e456:	a81b      	add	r0, sp, #108	@ 0x6c
 800e458:	4699      	mov	r9, r3
 800e45a:	f003 fd45 	bl	8011ee8 <memset>
 800e45e:	a80d      	add	r0, sp, #52	@ 0x34
 800e460:	2238      	movs	r2, #56	@ 0x38
 800e462:	2100      	movs	r1, #0
 800e464:	f003 fd40 	bl	8011ee8 <memset>
 800e468:	f894 a1c5 	ldrb.w	sl, [r4, #453]	@ 0x1c5
 800e46c:	f1ba 0f00 	cmp.w	sl, #0
 800e470:	d00c      	beq.n	800e48c <acc_radar_engine_a121_reconfigure+0x4c>
 800e472:	4b3e      	ldr	r3, [pc, #248]	@ (800e56c <acc_radar_engine_a121_reconfigure+0x12c>)
 800e474:	4a3e      	ldr	r2, [pc, #248]	@ (800e570 <acc_radar_engine_a121_reconfigure+0x130>)
 800e476:	691b      	ldr	r3, [r3, #16]
 800e478:	493e      	ldr	r1, [pc, #248]	@ (800e574 <acc_radar_engine_a121_reconfigure+0x134>)
 800e47a:	2000      	movs	r0, #0
 800e47c:	4798      	blx	r3
 800e47e:	f04f 0800 	mov.w	r8, #0
 800e482:	4640      	mov	r0, r8
 800e484:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 800e488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e48c:	f10d 080c 	add.w	r8, sp, #12
 800e490:	ab05      	add	r3, sp, #20
 800e492:	f8cd 8000 	str.w	r8, [sp]
 800e496:	aa1b      	add	r2, sp, #108	@ 0x6c
 800e498:	4631      	mov	r1, r6
 800e49a:	4628      	mov	r0, r5
 800e49c:	f001 fa92 	bl	800f9c4 <acc_translation_a121_translate>
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	d0ec      	beq.n	800e47e <acc_radar_engine_a121_reconfigure+0x3e>
 800e4a4:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 800e4a8:	4641      	mov	r1, r8
 800e4aa:	a805      	add	r0, sp, #20
 800e4ac:	ab0d      	add	r3, sp, #52	@ 0x34
 800e4ae:	f7ff fedb 	bl	800e268 <acc_radar_engine_121_populate_metadata>
 800e4b2:	2800      	cmp	r0, #0
 800e4b4:	d0e3      	beq.n	800e47e <acc_radar_engine_a121_reconfigure+0x3e>
 800e4b6:	9996      	ldr	r1, [sp, #600]	@ 0x258
 800e4b8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e4bc:	800b      	strh	r3, [r1, #0]
 800e4be:	9997      	ldr	r1, [sp, #604]	@ 0x25c
 800e4c0:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 800e4c4:	800a      	strh	r2, [r1, #0]
 800e4c6:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 800e4ca:	aa1b      	add	r2, sp, #108	@ 0x6c
 800e4cc:	4639      	mov	r1, r7
 800e4ce:	2014      	movs	r0, #20
 800e4d0:	f002 fa3a 	bl	8010948 <acc_probes_execute_struct>
 800e4d4:	4680      	mov	r8, r0
 800e4d6:	2800      	cmp	r0, #0
 800e4d8:	d0d1      	beq.n	800e47e <acc_radar_engine_a121_reconfigure+0x3e>
 800e4da:	a91b      	add	r1, sp, #108	@ 0x6c
 800e4dc:	4620      	mov	r0, r4
 800e4de:	f002 ff21 	bl	8011324 <acc_cpd_a121_meas_session_is_patch_needed>
 800e4e2:	bbc0      	cbnz	r0, 800e556 <acc_radar_engine_a121_reconfigure+0x116>
 800e4e4:	a91b      	add	r1, sp, #108	@ 0x6c
 800e4e6:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800e4ea:	4620      	mov	r0, r4
 800e4ec:	f003 fd9b 	bl	8012026 <memcpy>
 800e4f0:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 800e4f4:	bb3b      	cbnz	r3, 800e546 <acc_radar_engine_a121_reconfigure+0x106>
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	4633      	mov	r3, r6
 800e4fa:	f895 104b 	ldrb.w	r1, [r5, #75]	@ 0x4b
 800e4fe:	f884 21c6 	strb.w	r2, [r4, #454]	@ 0x1c6
 800e502:	f833 2b26 	ldrh.w	r2, [r3], #38
 800e506:	f8a4 21c8 	strh.w	r2, [r4, #456]	@ 0x1c8
 800e50a:	f884 11c5 	strb.w	r1, [r4, #453]	@ 0x1c5
 800e50e:	f884 a1c4 	strb.w	sl, [r4, #452]	@ 0x1c4
 800e512:	f504 71e5 	add.w	r1, r4, #458	@ 0x1ca
 800e516:	f106 0c56 	add.w	ip, r6, #86	@ 0x56
 800e51a:	681d      	ldr	r5, [r3, #0]
 800e51c:	6858      	ldr	r0, [r3, #4]
 800e51e:	689a      	ldr	r2, [r3, #8]
 800e520:	68df      	ldr	r7, [r3, #12]
 800e522:	60cf      	str	r7, [r1, #12]
 800e524:	3310      	adds	r3, #16
 800e526:	4563      	cmp	r3, ip
 800e528:	600d      	str	r5, [r1, #0]
 800e52a:	6048      	str	r0, [r1, #4]
 800e52c:	608a      	str	r2, [r1, #8]
 800e52e:	f101 0110 	add.w	r1, r1, #16
 800e532:	d1f2      	bne.n	800e51a <acc_radar_engine_a121_reconfigure+0xda>
 800e534:	f8b6 3056 	ldrh.w	r3, [r6, #86]	@ 0x56
 800e538:	f8a4 31fa 	strh.w	r3, [r4, #506]	@ 0x1fa
 800e53c:	4640      	mov	r0, r8
 800e53e:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 800e542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e546:	f895 a04e 	ldrb.w	sl, [r5, #78]	@ 0x4e
 800e54a:	f1ba 0a00 	subs.w	sl, sl, #0
 800e54e:	bf18      	it	ne
 800e550:	f04f 0a01 	movne.w	sl, #1
 800e554:	e7cf      	b.n	800e4f6 <acc_radar_engine_a121_reconfigure+0xb6>
 800e556:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e558:	9300      	str	r3, [sp, #0]
 800e55a:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800e55c:	464a      	mov	r2, r9
 800e55e:	4638      	mov	r0, r7
 800e560:	4623      	mov	r3, r4
 800e562:	f002 fef1 	bl	8011348 <acc_cpd_a121_meas_session_update_program>
 800e566:	2800      	cmp	r0, #0
 800e568:	d089      	beq.n	800e47e <acc_radar_engine_a121_reconfigure+0x3e>
 800e56a:	e7bb      	b.n	800e4e4 <acc_radar_engine_a121_reconfigure+0xa4>
 800e56c:	200009ec 	.word	0x200009ec
 800e570:	08015014 	.word	0x08015014
 800e574:	08014f44 	.word	0x08014f44

0800e578 <acc_radar_engine_a121_get_metadata>:
 800e578:	b570      	push	{r4, r5, r6, lr}
 800e57a:	b0fe      	sub	sp, #504	@ 0x1f8
 800e57c:	4604      	mov	r4, r0
 800e57e:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800e582:	460d      	mov	r5, r1
 800e584:	a80d      	add	r0, sp, #52	@ 0x34
 800e586:	2100      	movs	r1, #0
 800e588:	ae03      	add	r6, sp, #12
 800e58a:	f003 fcad 	bl	8011ee8 <memset>
 800e58e:	aa0d      	add	r2, sp, #52	@ 0x34
 800e590:	4620      	mov	r0, r4
 800e592:	ab05      	add	r3, sp, #20
 800e594:	9600      	str	r6, [sp, #0]
 800e596:	2100      	movs	r1, #0
 800e598:	f001 fa14 	bl	800f9c4 <acc_translation_a121_translate>
 800e59c:	b908      	cbnz	r0, 800e5a2 <acc_radar_engine_a121_get_metadata+0x2a>
 800e59e:	b07e      	add	sp, #504	@ 0x1f8
 800e5a0:	bd70      	pop	{r4, r5, r6, pc}
 800e5a2:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800e5a6:	462b      	mov	r3, r5
 800e5a8:	4631      	mov	r1, r6
 800e5aa:	a805      	add	r0, sp, #20
 800e5ac:	f7ff fe5c 	bl	800e268 <acc_radar_engine_121_populate_metadata>
 800e5b0:	b07e      	add	sp, #504	@ 0x1f8
 800e5b2:	bd70      	pop	{r4, r5, r6, pc}

0800e5b4 <acc_radar_engine_a121_init_interrupts>:
 800e5b4:	f000 b906 	b.w	800e7c4 <acc_sensor_protocol_a121_init_interrupts>

0800e5b8 <acc_radar_engine_a121_hibernate_off>:
 800e5b8:	f000 baf2 	b.w	800eba0 <acc_sensor_protocol_a121_hibernate_off>

0800e5bc <acc_radar_engine_a121_is_hibernate>:
 800e5bc:	f000 bb2a 	b.w	800ec14 <acc_sensor_protocol_a121_is_hibernate>

0800e5c0 <internal_buffer_processed_read.part.0>:
 800e5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5c4:	b085      	sub	sp, #20
 800e5c6:	469a      	mov	sl, r3
 800e5c8:	2600      	movs	r6, #0
 800e5ca:	f89d 4038 	ldrb.w	r4, [sp, #56]	@ 0x38
 800e5ce:	9200      	str	r2, [sp, #0]
 800e5d0:	4683      	mov	fp, r0
 800e5d2:	4689      	mov	r9, r1
 800e5d4:	f7ff fb4a 	bl	800dc6c <acc_rss_integration_get_max_spi_transfer_size>
 800e5d8:	e9cd 6602 	strd	r6, r6, [sp, #8]
 800e5dc:	f1ba 0f00 	cmp.w	sl, #0
 800e5e0:	d03e      	beq.n	800e660 <internal_buffer_processed_read.part.0+0xa0>
 800e5e2:	42b4      	cmp	r4, r6
 800e5e4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800e5e8:	bf14      	ite	ne
 800e5ea:	f44f 43e0 	movne.w	r3, #28672	@ 0x7000
 800e5ee:	f44f 4300 	moveq.w	r3, #32768	@ 0x8000
 800e5f2:	f1a0 0804 	sub.w	r8, r0, #4
 800e5f6:	9301      	str	r3, [sp, #4]
 800e5f8:	464d      	mov	r5, r9
 800e5fa:	4657      	mov	r7, sl
 800e5fc:	e025      	b.n	800e64a <internal_buffer_processed_read.part.0+0x8a>
 800e5fe:	9b00      	ldr	r3, [sp, #0]
 800e600:	9901      	ldr	r1, [sp, #4]
 800e602:	8029      	strh	r1, [r5, #0]
 800e604:	199a      	adds	r2, r3, r6
 800e606:	f04f 0100 	mov.w	r1, #0
 800e60a:	1e63      	subs	r3, r4, #1
 800e60c:	80e9      	strh	r1, [r5, #6]
 800e60e:	806a      	strh	r2, [r5, #2]
 800e610:	80ab      	strh	r3, [r5, #4]
 800e612:	0062      	lsls	r2, r4, #1
 800e614:	2100      	movs	r1, #0
 800e616:	f105 0008 	add.w	r0, r5, #8
 800e61a:	f003 fc65 	bl	8011ee8 <memset>
 800e61e:	4629      	mov	r1, r5
 800e620:	2301      	movs	r3, #1
 800e622:	4658      	mov	r0, fp
 800e624:	1d22      	adds	r2, r4, #4
 800e626:	f7ff fb27 	bl	800dc78 <acc_rss_integration_sensor_device_transfer>
 800e62a:	ab02      	add	r3, sp, #8
 800e62c:	cb03      	ldmia	r3!, {r0, r1}
 800e62e:	4426      	add	r6, r4
 800e630:	6069      	str	r1, [r5, #4]
 800e632:	6028      	str	r0, [r5, #0]
 800e634:	eb09 0546 	add.w	r5, r9, r6, lsl #1
 800e638:	f859 0016 	ldr.w	r0, [r9, r6, lsl #1]
 800e63c:	6869      	ldr	r1, [r5, #4]
 800e63e:	ab02      	add	r3, sp, #8
 800e640:	4556      	cmp	r6, sl
 800e642:	c303      	stmia	r3!, {r0, r1}
 800e644:	eba7 0704 	sub.w	r7, r7, r4
 800e648:	d20a      	bcs.n	800e660 <internal_buffer_processed_read.part.0+0xa0>
 800e64a:	45b8      	cmp	r8, r7
 800e64c:	4644      	mov	r4, r8
 800e64e:	bf28      	it	cs
 800e650:	463c      	movcs	r4, r7
 800e652:	45b8      	cmp	r8, r7
 800e654:	d2d3      	bcs.n	800e5fe <internal_buffer_processed_read.part.0+0x3e>
 800e656:	e000      	b.n	800e65a <internal_buffer_processed_read.part.0+0x9a>
 800e658:	3c01      	subs	r4, #1
 800e65a:	07e3      	lsls	r3, r4, #31
 800e65c:	d4fc      	bmi.n	800e658 <internal_buffer_processed_read.part.0+0x98>
 800e65e:	e7ce      	b.n	800e5fe <internal_buffer_processed_read.part.0+0x3e>
 800e660:	f109 0008 	add.w	r0, r9, #8
 800e664:	b005      	add	sp, #20
 800e666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e66a:	bf00      	nop

0800e66c <acc_sensor_a121_get_max_header_length>:
 800e66c:	2004      	movs	r0, #4
 800e66e:	4770      	bx	lr

0800e670 <acc_sensor_a121_conf_write_instr>:
 800e670:	b570      	push	{r4, r5, r6, lr}
 800e672:	2501      	movs	r5, #1
 800e674:	b084      	sub	sp, #16
 800e676:	f441 43a0 	orr.w	r3, r1, #20480	@ 0x5000
 800e67a:	4604      	mov	r4, r0
 800e67c:	4616      	mov	r6, r2
 800e67e:	a903      	add	r1, sp, #12
 800e680:	462a      	mov	r2, r5
 800e682:	a801      	add	r0, sp, #4
 800e684:	f8ad 3008 	strh.w	r3, [sp, #8]
 800e688:	9601      	str	r6, [sp, #4]
 800e68a:	f8ad 500a 	strh.w	r5, [sp, #10]
 800e68e:	f002 fb01 	bl	8010c94 <acc_utils_uint32_to_transfer_buffer>
 800e692:	4620      	mov	r0, r4
 800e694:	a902      	add	r1, sp, #8
 800e696:	2300      	movs	r3, #0
 800e698:	2204      	movs	r2, #4
 800e69a:	f7ff faed 	bl	800dc78 <acc_rss_integration_sensor_device_transfer>
 800e69e:	b004      	add	sp, #16
 800e6a0:	bd70      	pop	{r4, r5, r6, pc}
 800e6a2:	bf00      	nop

0800e6a4 <acc_sensor_a121_prepare_load_confmem>:
 800e6a4:	0849      	lsrs	r1, r1, #1
 800e6a6:	b570      	push	{r4, r5, r6, lr}
 800e6a8:	6019      	str	r1, [r3, #0]
 800e6aa:	461c      	mov	r4, r3
 800e6ac:	4605      	mov	r5, r0
 800e6ae:	4616      	mov	r6, r2
 800e6b0:	f7ff fadc 	bl	800dc6c <acc_rss_integration_get_max_spi_transfer_size>
 800e6b4:	6821      	ldr	r1, [r4, #0]
 800e6b6:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 800e6ba:	d806      	bhi.n	800e6ca <acc_sensor_a121_prepare_load_confmem+0x26>
 800e6bc:	3902      	subs	r1, #2
 800e6be:	f021 0101 	bic.w	r1, r1, #1
 800e6c2:	3504      	adds	r5, #4
 800e6c4:	6035      	str	r5, [r6, #0]
 800e6c6:	6021      	str	r1, [r4, #0]
 800e6c8:	bd70      	pop	{r4, r5, r6, pc}
 800e6ca:	f7ff facf 	bl	800dc6c <acc_rss_integration_get_max_spi_transfer_size>
 800e6ce:	0841      	lsrs	r1, r0, #1
 800e6d0:	e7f4      	b.n	800e6bc <acc_sensor_a121_prepare_load_confmem+0x18>
 800e6d2:	bf00      	nop

0800e6d4 <acc_sensor_a121_load_confmem>:
 800e6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6d8:	f103 0802 	add.w	r8, r3, #2
 800e6dc:	461c      	mov	r4, r3
 800e6de:	4607      	mov	r7, r0
 800e6e0:	460e      	mov	r6, r1
 800e6e2:	4615      	mov	r5, r2
 800e6e4:	f7ff fac2 	bl	800dc6c <acc_rss_integration_get_max_spi_transfer_size>
 800e6e8:	ebb0 0f48 	cmp.w	r0, r8, lsl #1
 800e6ec:	d207      	bcs.n	800e6fe <acc_sensor_a121_load_confmem+0x2a>
 800e6ee:	4b0b      	ldr	r3, [pc, #44]	@ (800e71c <acc_sensor_a121_load_confmem+0x48>)
 800e6f0:	4a0b      	ldr	r2, [pc, #44]	@ (800e720 <acc_sensor_a121_load_confmem+0x4c>)
 800e6f2:	691b      	ldr	r3, [r3, #16]
 800e6f4:	490b      	ldr	r1, [pc, #44]	@ (800e724 <acc_sensor_a121_load_confmem+0x50>)
 800e6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6fa:	2000      	movs	r0, #0
 800e6fc:	4718      	bx	r3
 800e6fe:	f446 41a0 	orr.w	r1, r6, #20480	@ 0x5000
 800e702:	3c01      	subs	r4, #1
 800e704:	8029      	strh	r1, [r5, #0]
 800e706:	806c      	strh	r4, [r5, #2]
 800e708:	f028 4200 	bic.w	r2, r8, #2147483648	@ 0x80000000
 800e70c:	4629      	mov	r1, r5
 800e70e:	4638      	mov	r0, r7
 800e710:	2300      	movs	r3, #0
 800e712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e716:	f7ff baaf 	b.w	800dc78 <acc_rss_integration_sensor_device_transfer>
 800e71a:	bf00      	nop
 800e71c:	200009ec 	.word	0x200009ec
 800e720:	08015080 	.word	0x08015080
 800e724:	0801506c 	.word	0x0801506c

0800e728 <acc_sensor_a121_buffer_processed_read>:
 800e728:	b510      	push	{r4, lr}
 800e72a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e72e:	b082      	sub	sp, #8
 800e730:	d805      	bhi.n	800e73e <acc_sensor_a121_buffer_processed_read+0x16>
 800e732:	2400      	movs	r4, #0
 800e734:	9400      	str	r4, [sp, #0]
 800e736:	f7ff ff43 	bl	800e5c0 <internal_buffer_processed_read.part.0>
 800e73a:	b002      	add	sp, #8
 800e73c:	bd10      	pop	{r4, pc}
 800e73e:	4b04      	ldr	r3, [pc, #16]	@ (800e750 <acc_sensor_a121_buffer_processed_read+0x28>)
 800e740:	4a04      	ldr	r2, [pc, #16]	@ (800e754 <acc_sensor_a121_buffer_processed_read+0x2c>)
 800e742:	691b      	ldr	r3, [r3, #16]
 800e744:	4904      	ldr	r1, [pc, #16]	@ (800e758 <acc_sensor_a121_buffer_processed_read+0x30>)
 800e746:	2000      	movs	r0, #0
 800e748:	4798      	blx	r3
 800e74a:	2000      	movs	r0, #0
 800e74c:	b002      	add	sp, #8
 800e74e:	bd10      	pop	{r4, pc}
 800e750:	200009ec 	.word	0x200009ec
 800e754:	080150a0 	.word	0x080150a0
 800e758:	0801506c 	.word	0x0801506c

0800e75c <acc_sensor_a121_lut_buffer_write>:
 800e75c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e760:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e762:	460d      	mov	r5, r1
 800e764:	4614      	mov	r4, r2
 800e766:	4681      	mov	r9, r0
 800e768:	4698      	mov	r8, r3
 800e76a:	f7ff fa7f 	bl	800dc6c <acc_rss_integration_get_max_spi_transfer_size>
 800e76e:	3c04      	subs	r4, #4
 800e770:	1f07      	subs	r7, r0, #4
 800e772:	0864      	lsrs	r4, r4, #1
 800e774:	087f      	lsrs	r7, r7, #1
 800e776:	42a7      	cmp	r7, r4
 800e778:	bf28      	it	cs
 800e77a:	4627      	movcs	r7, r4
 800e77c:	f105 0a04 	add.w	sl, r5, #4
 800e780:	2400      	movs	r4, #0
 800e782:	1b33      	subs	r3, r6, r4
 800e784:	42bb      	cmp	r3, r7
 800e786:	bf28      	it	cs
 800e788:	463b      	movcs	r3, r7
 800e78a:	1e5a      	subs	r2, r3, #1
 800e78c:	eb08 0104 	add.w	r1, r8, r4
 800e790:	469b      	mov	fp, r3
 800e792:	806a      	strh	r2, [r5, #2]
 800e794:	ea6f 4181 	mvn.w	r1, r1, lsl #18
 800e798:	005a      	lsls	r2, r3, #1
 800e79a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e79c:	ea6f 4191 	mvn.w	r1, r1, lsr #18
 800e7a0:	8029      	strh	r1, [r5, #0]
 800e7a2:	4650      	mov	r0, sl
 800e7a4:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800e7a8:	f003 fc3d 	bl	8012026 <memcpy>
 800e7ac:	445c      	add	r4, fp
 800e7ae:	f10b 0202 	add.w	r2, fp, #2
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	4629      	mov	r1, r5
 800e7b6:	4648      	mov	r0, r9
 800e7b8:	f7ff fa5e 	bl	800dc78 <acc_rss_integration_sensor_device_transfer>
 800e7bc:	42a6      	cmp	r6, r4
 800e7be:	d8e0      	bhi.n	800e782 <acc_sensor_a121_lut_buffer_write+0x26>
 800e7c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e7c4 <acc_sensor_protocol_a121_init_interrupts>:
 800e7c4:	b530      	push	{r4, r5, lr}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	2500      	movs	r5, #0
 800e7ca:	4629      	mov	r1, r5
 800e7cc:	9500      	str	r5, [sp, #0]
 800e7ce:	237b      	movs	r3, #123	@ 0x7b
 800e7d0:	22ff      	movs	r2, #255	@ 0xff
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	f002 f8f6 	bl	80109c4 <acc_sensor_reg_field_write>
 800e7d8:	2101      	movs	r1, #1
 800e7da:	4620      	mov	r0, r4
 800e7dc:	9100      	str	r1, [sp, #0]
 800e7de:	238b      	movs	r3, #139	@ 0x8b
 800e7e0:	2202      	movs	r2, #2
 800e7e2:	f002 f8ef 	bl	80109c4 <acc_sensor_reg_field_write>
 800e7e6:	9500      	str	r5, [sp, #0]
 800e7e8:	4620      	mov	r0, r4
 800e7ea:	238b      	movs	r3, #139	@ 0x8b
 800e7ec:	2280      	movs	r2, #128	@ 0x80
 800e7ee:	2107      	movs	r1, #7
 800e7f0:	f002 f8e8 	bl	80109c4 <acc_sensor_reg_field_write>
 800e7f4:	b003      	add	sp, #12
 800e7f6:	bd30      	pop	{r4, r5, pc}

0800e7f8 <acc_sensor_protocol_a121_prepare_load>:
 800e7f8:	b570      	push	{r4, r5, r6, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	f10d 0206 	add.w	r2, sp, #6
 800e800:	2400      	movs	r4, #0
 800e802:	2137      	movs	r1, #55	@ 0x37
 800e804:	4605      	mov	r5, r0
 800e806:	f8ad 4006 	strh.w	r4, [sp, #6]
 800e80a:	f002 f8b5 	bl	8010978 <acc_sensor_reg_read>
 800e80e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e812:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e816:	b9b3      	cbnz	r3, 800e846 <acc_sensor_protocol_a121_prepare_load+0x4e>
 800e818:	f10d 0206 	add.w	r2, sp, #6
 800e81c:	2400      	movs	r4, #0
 800e81e:	211c      	movs	r1, #28
 800e820:	4628      	mov	r0, r5
 800e822:	f8ad 4006 	strh.w	r4, [sp, #6]
 800e826:	f002 f8a7 	bl	8010978 <acc_sensor_reg_read>
 800e82a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e82e:	051b      	lsls	r3, r3, #20
 800e830:	d515      	bpl.n	800e85e <acc_sensor_protocol_a121_prepare_load+0x66>
 800e832:	4b0e      	ldr	r3, [pc, #56]	@ (800e86c <acc_sensor_protocol_a121_prepare_load+0x74>)
 800e834:	4a0e      	ldr	r2, [pc, #56]	@ (800e870 <acc_sensor_protocol_a121_prepare_load+0x78>)
 800e836:	691e      	ldr	r6, [r3, #16]
 800e838:	490e      	ldr	r1, [pc, #56]	@ (800e874 <acc_sensor_protocol_a121_prepare_load+0x7c>)
 800e83a:	4620      	mov	r0, r4
 800e83c:	462b      	mov	r3, r5
 800e83e:	47b0      	blx	r6
 800e840:	4620      	mov	r0, r4
 800e842:	b002      	add	sp, #8
 800e844:	bd70      	pop	{r4, r5, r6, pc}
 800e846:	f7ff fa91 	bl	800dd6c <acc_rss_integration_log_level>
 800e84a:	2800      	cmp	r0, #0
 800e84c:	d0e4      	beq.n	800e818 <acc_sensor_protocol_a121_prepare_load+0x20>
 800e84e:	4b07      	ldr	r3, [pc, #28]	@ (800e86c <acc_sensor_protocol_a121_prepare_load+0x74>)
 800e850:	4a09      	ldr	r2, [pc, #36]	@ (800e878 <acc_sensor_protocol_a121_prepare_load+0x80>)
 800e852:	691c      	ldr	r4, [r3, #16]
 800e854:	4907      	ldr	r1, [pc, #28]	@ (800e874 <acc_sensor_protocol_a121_prepare_load+0x7c>)
 800e856:	462b      	mov	r3, r5
 800e858:	2001      	movs	r0, #1
 800e85a:	47a0      	blx	r4
 800e85c:	e7dc      	b.n	800e818 <acc_sensor_protocol_a121_prepare_load+0x20>
 800e85e:	4628      	mov	r0, r5
 800e860:	f7ff ffb0 	bl	800e7c4 <acc_sensor_protocol_a121_init_interrupts>
 800e864:	2001      	movs	r0, #1
 800e866:	b002      	add	sp, #8
 800e868:	bd70      	pop	{r4, r5, r6, pc}
 800e86a:	bf00      	nop
 800e86c:	200009ec 	.word	0x200009ec
 800e870:	080150fc 	.word	0x080150fc
 800e874:	080150e4 	.word	0x080150e4
 800e878:	080150b8 	.word	0x080150b8

0800e87c <acc_sensor_protocol_a121_is_ready_to_update>:
 800e87c:	b500      	push	{lr}
 800e87e:	b083      	sub	sp, #12
 800e880:	2300      	movs	r3, #0
 800e882:	f10d 0206 	add.w	r2, sp, #6
 800e886:	2137      	movs	r1, #55	@ 0x37
 800e888:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e88c:	f002 f874 	bl	8010978 <acc_sensor_reg_read>
 800e890:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800e894:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 800e898:	3800      	subs	r0, #0
 800e89a:	bf18      	it	ne
 800e89c:	2001      	movne	r0, #1
 800e89e:	b003      	add	sp, #12
 800e8a0:	f85d fb04 	ldr.w	pc, [sp], #4

0800e8a4 <acc_sensor_protocol_a121_run_program>:
 800e8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	f10d 0206 	add.w	r2, sp, #6
 800e8ac:	460e      	mov	r6, r1
 800e8ae:	2400      	movs	r4, #0
 800e8b0:	211c      	movs	r1, #28
 800e8b2:	4607      	mov	r7, r0
 800e8b4:	f8ad 4006 	strh.w	r4, [sp, #6]
 800e8b8:	f002 f85e 	bl	8010978 <acc_sensor_reg_read>
 800e8bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e8c0:	f412 6500 	ands.w	r5, r2, #2048	@ 0x800
 800e8c4:	d10c      	bne.n	800e8e0 <acc_sensor_protocol_a121_run_program+0x3c>
 800e8c6:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 800e8ca:	d313      	bcc.n	800e8f4 <acc_sensor_protocol_a121_run_program+0x50>
 800e8cc:	4b10      	ldr	r3, [pc, #64]	@ (800e910 <acc_sensor_protocol_a121_run_program+0x6c>)
 800e8ce:	4a11      	ldr	r2, [pc, #68]	@ (800e914 <acc_sensor_protocol_a121_run_program+0x70>)
 800e8d0:	691c      	ldr	r4, [r3, #16]
 800e8d2:	4911      	ldr	r1, [pc, #68]	@ (800e918 <acc_sensor_protocol_a121_run_program+0x74>)
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	4633      	mov	r3, r6
 800e8d8:	47a0      	blx	r4
 800e8da:	4628      	mov	r0, r5
 800e8dc:	b003      	add	sp, #12
 800e8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8e0:	4b0b      	ldr	r3, [pc, #44]	@ (800e910 <acc_sensor_protocol_a121_run_program+0x6c>)
 800e8e2:	4a0e      	ldr	r2, [pc, #56]	@ (800e91c <acc_sensor_protocol_a121_run_program+0x78>)
 800e8e4:	691d      	ldr	r5, [r3, #16]
 800e8e6:	490c      	ldr	r1, [pc, #48]	@ (800e918 <acc_sensor_protocol_a121_run_program+0x74>)
 800e8e8:	4620      	mov	r0, r4
 800e8ea:	463b      	mov	r3, r7
 800e8ec:	47a8      	blx	r5
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	b003      	add	sp, #12
 800e8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8f4:	462a      	mov	r2, r5
 800e8f6:	4638      	mov	r0, r7
 800e8f8:	211b      	movs	r1, #27
 800e8fa:	f002 f853 	bl	80109a4 <acc_sensor_reg_write>
 800e8fe:	4638      	mov	r0, r7
 800e900:	f446 6200 	orr.w	r2, r6, #2048	@ 0x800
 800e904:	211b      	movs	r1, #27
 800e906:	f002 f84d 	bl	80109a4 <acc_sensor_reg_write>
 800e90a:	2001      	movs	r0, #1
 800e90c:	b003      	add	sp, #12
 800e90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e910:	200009ec 	.word	0x200009ec
 800e914:	0801515c 	.word	0x0801515c
 800e918:	080150e4 	.word	0x080150e4
 800e91c:	0801512c 	.word	0x0801512c

0800e920 <acc_sensor_protocol_a121_load_lut>:
 800e920:	2b7f      	cmp	r3, #127	@ 0x7f
 800e922:	d809      	bhi.n	800e938 <acc_sensor_protocol_a121_load_lut+0x18>
 800e924:	b530      	push	{r4, r5, lr}
 800e926:	b083      	sub	sp, #12
 800e928:	461c      	mov	r4, r3
 800e92a:	9d07      	ldr	r5, [sp, #28]
 800e92c:	442c      	add	r4, r5
 800e92e:	2c80      	cmp	r4, #128	@ 0x80
 800e930:	d904      	bls.n	800e93c <acc_sensor_protocol_a121_load_lut+0x1c>
 800e932:	2000      	movs	r0, #0
 800e934:	b003      	add	sp, #12
 800e936:	bd30      	pop	{r4, r5, pc}
 800e938:	2000      	movs	r0, #0
 800e93a:	4770      	bx	lr
 800e93c:	9c06      	ldr	r4, [sp, #24]
 800e93e:	9501      	str	r5, [sp, #4]
 800e940:	9400      	str	r4, [sp, #0]
 800e942:	f7ff ff0b 	bl	800e75c <acc_sensor_a121_lut_buffer_write>
 800e946:	2001      	movs	r0, #1
 800e948:	b003      	add	sp, #12
 800e94a:	bd30      	pop	{r4, r5, pc}

0800e94c <acc_sensor_protocol_a121_is_sensor_running>:
 800e94c:	b500      	push	{lr}
 800e94e:	b083      	sub	sp, #12
 800e950:	2300      	movs	r3, #0
 800e952:	f10d 0206 	add.w	r2, sp, #6
 800e956:	211c      	movs	r1, #28
 800e958:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e95c:	f002 f80c 	bl	8010978 <acc_sensor_reg_read>
 800e960:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800e964:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 800e968:	b003      	add	sp, #12
 800e96a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e96e:	bf00      	nop

0800e970 <acc_sensor_protocol_a121_is_event_pending>:
 800e970:	b510      	push	{r4, lr}
 800e972:	b082      	sub	sp, #8
 800e974:	460c      	mov	r4, r1
 800e976:	2300      	movs	r3, #0
 800e978:	f10d 0206 	add.w	r2, sp, #6
 800e97c:	2137      	movs	r1, #55	@ 0x37
 800e97e:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e982:	f001 fff9 	bl	8010978 <acc_sensor_reg_read>
 800e986:	2c01      	cmp	r4, #1
 800e988:	d00b      	beq.n	800e9a2 <acc_sensor_protocol_a121_is_event_pending+0x32>
 800e98a:	2c02      	cmp	r4, #2
 800e98c:	bf14      	ite	ne
 800e98e:	23c0      	movne	r3, #192	@ 0xc0
 800e990:	2380      	moveq	r3, #128	@ 0x80
 800e992:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e996:	4213      	tst	r3, r2
 800e998:	bf14      	ite	ne
 800e99a:	2001      	movne	r0, #1
 800e99c:	2000      	moveq	r0, #0
 800e99e:	b002      	add	sp, #8
 800e9a0:	bd10      	pop	{r4, pc}
 800e9a2:	2340      	movs	r3, #64	@ 0x40
 800e9a4:	e7f5      	b.n	800e992 <acc_sensor_protocol_a121_is_event_pending+0x22>
 800e9a6:	bf00      	nop

0800e9a8 <acc_sensor_protocol_a121_ack_event>:
 800e9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	2400      	movs	r4, #0
 800e9ae:	2901      	cmp	r1, #1
 800e9b0:	4607      	mov	r7, r0
 800e9b2:	4616      	mov	r6, r2
 800e9b4:	f8ad 4006 	strh.w	r4, [sp, #6]
 800e9b8:	d019      	beq.n	800e9ee <acc_sensor_protocol_a121_ack_event+0x46>
 800e9ba:	2902      	cmp	r1, #2
 800e9bc:	d009      	beq.n	800e9d2 <acc_sensor_protocol_a121_ack_event+0x2a>
 800e9be:	4b1a      	ldr	r3, [pc, #104]	@ (800ea28 <acc_sensor_protocol_a121_ack_event+0x80>)
 800e9c0:	4a1a      	ldr	r2, [pc, #104]	@ (800ea2c <acc_sensor_protocol_a121_ack_event+0x84>)
 800e9c2:	691d      	ldr	r5, [r3, #16]
 800e9c4:	491a      	ldr	r1, [pc, #104]	@ (800ea30 <acc_sensor_protocol_a121_ack_event+0x88>)
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	47a8      	blx	r5
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	b003      	add	sp, #12
 800e9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9d2:	2146      	movs	r1, #70	@ 0x46
 800e9d4:	f10d 0206 	add.w	r2, sp, #6
 800e9d8:	4638      	mov	r0, r7
 800e9da:	f001 ffcd 	bl	8010978 <acc_sensor_reg_read>
 800e9de:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800e9e2:	2484      	movs	r4, #132	@ 0x84
 800e9e4:	b175      	cbz	r5, 800ea04 <acc_sensor_protocol_a121_ack_event+0x5c>
 800e9e6:	b9be      	cbnz	r6, 800ea18 <acc_sensor_protocol_a121_ack_event+0x70>
 800e9e8:	2001      	movs	r0, #1
 800e9ea:	b003      	add	sp, #12
 800e9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9ee:	2145      	movs	r1, #69	@ 0x45
 800e9f0:	f10d 0206 	add.w	r2, sp, #6
 800e9f4:	4638      	mov	r0, r7
 800e9f6:	f001 ffbf 	bl	8010978 <acc_sensor_reg_read>
 800e9fa:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800e9fe:	2483      	movs	r4, #131	@ 0x83
 800ea00:	2d00      	cmp	r5, #0
 800ea02:	d1f0      	bne.n	800e9e6 <acc_sensor_protocol_a121_ack_event+0x3e>
 800ea04:	4b08      	ldr	r3, [pc, #32]	@ (800ea28 <acc_sensor_protocol_a121_ack_event+0x80>)
 800ea06:	4a0b      	ldr	r2, [pc, #44]	@ (800ea34 <acc_sensor_protocol_a121_ack_event+0x8c>)
 800ea08:	691c      	ldr	r4, [r3, #16]
 800ea0a:	4909      	ldr	r1, [pc, #36]	@ (800ea30 <acc_sensor_protocol_a121_ack_event+0x88>)
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	463b      	mov	r3, r7
 800ea10:	47a0      	blx	r4
 800ea12:	4628      	mov	r0, r5
 800ea14:	b003      	add	sp, #12
 800ea16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea18:	4638      	mov	r0, r7
 800ea1a:	4621      	mov	r1, r4
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	f001 ffc1 	bl	80109a4 <acc_sensor_reg_write>
 800ea22:	4630      	mov	r0, r6
 800ea24:	e7d3      	b.n	800e9ce <acc_sensor_protocol_a121_ack_event+0x26>
 800ea26:	bf00      	nop
 800ea28:	200009ec 	.word	0x200009ec
 800ea2c:	08015178 	.word	0x08015178
 800ea30:	080150e4 	.word	0x080150e4
 800ea34:	08015194 	.word	0x08015194

0800ea38 <acc_sensor_protocol_a121_get_event>:
 800ea38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	2400      	movs	r4, #0
 800ea3e:	4615      	mov	r5, r2
 800ea40:	f8ad 400e 	strh.w	r4, [sp, #14]
 800ea44:	2a00      	cmp	r2, #0
 800ea46:	d03d      	beq.n	800eac4 <acc_sensor_protocol_a121_get_event+0x8c>
 800ea48:	2901      	cmp	r1, #1
 800ea4a:	4607      	mov	r7, r0
 800ea4c:	d028      	beq.n	800eaa0 <acc_sensor_protocol_a121_get_event+0x68>
 800ea4e:	2902      	cmp	r1, #2
 800ea50:	d11d      	bne.n	800ea8e <acc_sensor_protocol_a121_get_event+0x56>
 800ea52:	2132      	movs	r1, #50	@ 0x32
 800ea54:	2401      	movs	r4, #1
 800ea56:	f10d 020e 	add.w	r2, sp, #14
 800ea5a:	4638      	mov	r0, r7
 800ea5c:	f001 ff8c 	bl	8010978 <acc_sensor_reg_read>
 800ea60:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800ea64:	806b      	strh	r3, [r5, #2]
 800ea66:	f003 0607 	and.w	r6, r3, #7
 800ea6a:	2e01      	cmp	r6, #1
 800ea6c:	802e      	strh	r6, [r5, #0]
 800ea6e:	d033      	beq.n	800ead8 <acc_sensor_protocol_a121_get_event+0xa0>
 800ea70:	f013 0f06 	tst.w	r3, #6
 800ea74:	d117      	bne.n	800eaa6 <acc_sensor_protocol_a121_get_event+0x6e>
 800ea76:	b9ce      	cbnz	r6, 800eaac <acc_sensor_protocol_a121_get_event+0x74>
 800ea78:	4a1d      	ldr	r2, [pc, #116]	@ (800eaf0 <acc_sensor_protocol_a121_get_event+0xb8>)
 800ea7a:	9700      	str	r7, [sp, #0]
 800ea7c:	6914      	ldr	r4, [r2, #16]
 800ea7e:	491d      	ldr	r1, [pc, #116]	@ (800eaf4 <acc_sensor_protocol_a121_get_event+0xbc>)
 800ea80:	4a1d      	ldr	r2, [pc, #116]	@ (800eaf8 <acc_sensor_protocol_a121_get_event+0xc0>)
 800ea82:	4630      	mov	r0, r6
 800ea84:	47a0      	blx	r4
 800ea86:	4634      	mov	r4, r6
 800ea88:	4620      	mov	r0, r4
 800ea8a:	b005      	add	sp, #20
 800ea8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea8e:	4b18      	ldr	r3, [pc, #96]	@ (800eaf0 <acc_sensor_protocol_a121_get_event+0xb8>)
 800ea90:	4918      	ldr	r1, [pc, #96]	@ (800eaf4 <acc_sensor_protocol_a121_get_event+0xbc>)
 800ea92:	691e      	ldr	r6, [r3, #16]
 800ea94:	4a19      	ldr	r2, [pc, #100]	@ (800eafc <acc_sensor_protocol_a121_get_event+0xc4>)
 800ea96:	4603      	mov	r3, r0
 800ea98:	4620      	mov	r0, r4
 800ea9a:	47b0      	blx	r6
 800ea9c:	4621      	mov	r1, r4
 800ea9e:	e7da      	b.n	800ea56 <acc_sensor_protocol_a121_get_event+0x1e>
 800eaa0:	460c      	mov	r4, r1
 800eaa2:	2133      	movs	r1, #51	@ 0x33
 800eaa4:	e7d7      	b.n	800ea56 <acc_sensor_protocol_a121_get_event+0x1e>
 800eaa6:	3e02      	subs	r6, #2
 800eaa8:	2e01      	cmp	r6, #1
 800eaaa:	d9ed      	bls.n	800ea88 <acc_sensor_protocol_a121_get_event+0x50>
 800eaac:	4a10      	ldr	r2, [pc, #64]	@ (800eaf0 <acc_sensor_protocol_a121_get_event+0xb8>)
 800eaae:	9700      	str	r7, [sp, #0]
 800eab0:	6914      	ldr	r4, [r2, #16]
 800eab2:	4910      	ldr	r1, [pc, #64]	@ (800eaf4 <acc_sensor_protocol_a121_get_event+0xbc>)
 800eab4:	4a12      	ldr	r2, [pc, #72]	@ (800eb00 <acc_sensor_protocol_a121_get_event+0xc8>)
 800eab6:	2000      	movs	r0, #0
 800eab8:	47a0      	blx	r4
 800eaba:	2400      	movs	r4, #0
 800eabc:	4620      	mov	r0, r4
 800eabe:	802c      	strh	r4, [r5, #0]
 800eac0:	b005      	add	sp, #20
 800eac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eac4:	4b0a      	ldr	r3, [pc, #40]	@ (800eaf0 <acc_sensor_protocol_a121_get_event+0xb8>)
 800eac6:	4a0f      	ldr	r2, [pc, #60]	@ (800eb04 <acc_sensor_protocol_a121_get_event+0xcc>)
 800eac8:	691b      	ldr	r3, [r3, #16]
 800eaca:	490a      	ldr	r1, [pc, #40]	@ (800eaf4 <acc_sensor_protocol_a121_get_event+0xbc>)
 800eacc:	4628      	mov	r0, r5
 800eace:	4798      	blx	r3
 800ead0:	462c      	mov	r4, r5
 800ead2:	4620      	mov	r0, r4
 800ead4:	b005      	add	sp, #20
 800ead6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ead8:	4a05      	ldr	r2, [pc, #20]	@ (800eaf0 <acc_sensor_protocol_a121_get_event+0xb8>)
 800eada:	9700      	str	r7, [sp, #0]
 800eadc:	6914      	ldr	r4, [r2, #16]
 800eade:	4905      	ldr	r1, [pc, #20]	@ (800eaf4 <acc_sensor_protocol_a121_get_event+0xbc>)
 800eae0:	4a09      	ldr	r2, [pc, #36]	@ (800eb08 <acc_sensor_protocol_a121_get_event+0xd0>)
 800eae2:	2000      	movs	r0, #0
 800eae4:	47a0      	blx	r4
 800eae6:	2400      	movs	r4, #0
 800eae8:	4620      	mov	r0, r4
 800eaea:	b005      	add	sp, #20
 800eaec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eaee:	bf00      	nop
 800eaf0:	200009ec 	.word	0x200009ec
 800eaf4:	080150e4 	.word	0x080150e4
 800eaf8:	080151dc 	.word	0x080151dc
 800eafc:	08015178 	.word	0x08015178
 800eb00:	08015240 	.word	0x08015240
 800eb04:	080151c8 	.word	0x080151c8
 800eb08:	0801520c 	.word	0x0801520c

0800eb0c <acc_sensor_protocol_a121_is_handshake>:
 800eb0c:	8800      	ldrh	r0, [r0, #0]
 800eb0e:	f1a0 0003 	sub.w	r0, r0, #3
 800eb12:	fab0 f080 	clz	r0, r0
 800eb16:	0940      	lsrs	r0, r0, #5
 800eb18:	4770      	bx	lr
 800eb1a:	bf00      	nop

0800eb1c <acc_sensor_protocol_a121_is_done>:
 800eb1c:	8800      	ldrh	r0, [r0, #0]
 800eb1e:	f1a0 0002 	sub.w	r0, r0, #2
 800eb22:	fab0 f080 	clz	r0, r0
 800eb26:	0940      	lsrs	r0, r0, #5
 800eb28:	4770      	bx	lr
 800eb2a:	bf00      	nop

0800eb2c <acc_sensor_protocol_a121_get_frame_delayed_flag>:
 800eb2c:	8840      	ldrh	r0, [r0, #2]
 800eb2e:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800eb32:	4770      	bx	lr

0800eb34 <acc_sensor_protocol_a121_check_asic_id>:
 800eb34:	b570      	push	{r4, r5, r6, lr}
 800eb36:	2300      	movs	r3, #0
 800eb38:	b082      	sub	sp, #8
 800eb3a:	f10d 0206 	add.w	r2, sp, #6
 800eb3e:	460d      	mov	r5, r1
 800eb40:	4619      	mov	r1, r3
 800eb42:	f8ad 3006 	strh.w	r3, [sp, #6]
 800eb46:	4604      	mov	r4, r0
 800eb48:	f001 ff16 	bl	8010978 <acc_sensor_reg_read>
 800eb4c:	480f      	ldr	r0, [pc, #60]	@ (800eb8c <acc_sensor_protocol_a121_check_asic_id+0x58>)
 800eb4e:	f002 f8c9 	bl	8010ce4 <acc_diagnostic_log_set_scope>
 800eb52:	4621      	mov	r1, r4
 800eb54:	480e      	ldr	r0, [pc, #56]	@ (800eb90 <acc_sensor_protocol_a121_check_asic_id+0x5c>)
 800eb56:	f002 f8d5 	bl	8010d04 <acc_diagnostic_log_scalar>
 800eb5a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800eb5e:	480b      	ldr	r0, [pc, #44]	@ (800eb8c <acc_sensor_protocol_a121_check_asic_id+0x58>)
 800eb60:	f002 f8d0 	bl	8010d04 <acc_diagnostic_log_scalar>
 800eb64:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800eb68:	f241 2210 	movw	r2, #4624	@ 0x1210
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	bf0c      	ite	eq
 800eb70:	2401      	moveq	r4, #1
 800eb72:	2400      	movne	r4, #0
 800eb74:	d006      	beq.n	800eb84 <acc_sensor_protocol_a121_check_asic_id+0x50>
 800eb76:	b92d      	cbnz	r5, 800eb84 <acc_sensor_protocol_a121_check_asic_id+0x50>
 800eb78:	4906      	ldr	r1, [pc, #24]	@ (800eb94 <acc_sensor_protocol_a121_check_asic_id+0x60>)
 800eb7a:	4a07      	ldr	r2, [pc, #28]	@ (800eb98 <acc_sensor_protocol_a121_check_asic_id+0x64>)
 800eb7c:	690e      	ldr	r6, [r1, #16]
 800eb7e:	4907      	ldr	r1, [pc, #28]	@ (800eb9c <acc_sensor_protocol_a121_check_asic_id+0x68>)
 800eb80:	4628      	mov	r0, r5
 800eb82:	47b0      	blx	r6
 800eb84:	4620      	mov	r0, r4
 800eb86:	b002      	add	sp, #8
 800eb88:	bd70      	pop	{r4, r5, r6, pc}
 800eb8a:	bf00      	nop
 800eb8c:	08015274 	.word	0x08015274
 800eb90:	080149b4 	.word	0x080149b4
 800eb94:	200009ec 	.word	0x200009ec
 800eb98:	0801527c 	.word	0x0801527c
 800eb9c:	080150e4 	.word	0x080150e4

0800eba0 <acc_sensor_protocol_a121_hibernate_off>:
 800eba0:	b570      	push	{r4, r5, r6, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	2203      	movs	r2, #3
 800eba6:	460e      	mov	r6, r1
 800eba8:	2100      	movs	r1, #0
 800ebaa:	460d      	mov	r5, r1
 800ebac:	4604      	mov	r4, r0
 800ebae:	9200      	str	r2, [sp, #0]
 800ebb0:	f240 1349 	movw	r3, #329	@ 0x149
 800ebb4:	f001 ff06 	bl	80109c4 <acc_sensor_reg_field_write>
 800ebb8:	4620      	mov	r0, r4
 800ebba:	f240 1349 	movw	r3, #329	@ 0x149
 800ebbe:	2204      	movs	r2, #4
 800ebc0:	2102      	movs	r1, #2
 800ebc2:	9500      	str	r5, [sp, #0]
 800ebc4:	f001 fefe 	bl	80109c4 <acc_sensor_reg_field_write>
 800ebc8:	4620      	mov	r0, r4
 800ebca:	f240 1349 	movw	r3, #329	@ 0x149
 800ebce:	2210      	movs	r2, #16
 800ebd0:	2104      	movs	r1, #4
 800ebd2:	9500      	str	r5, [sp, #0]
 800ebd4:	f001 fef6 	bl	80109c4 <acc_sensor_reg_field_write>
 800ebd8:	4620      	mov	r0, r4
 800ebda:	f240 1349 	movw	r3, #329	@ 0x149
 800ebde:	2220      	movs	r2, #32
 800ebe0:	2105      	movs	r1, #5
 800ebe2:	9500      	str	r5, [sp, #0]
 800ebe4:	f001 feee 	bl	80109c4 <acc_sensor_reg_field_write>
 800ebe8:	9500      	str	r5, [sp, #0]
 800ebea:	4620      	mov	r0, r4
 800ebec:	f240 1349 	movw	r3, #329	@ 0x149
 800ebf0:	f44f 527f 	mov.w	r2, #16320	@ 0x3fc0
 800ebf4:	2106      	movs	r1, #6
 800ebf6:	f001 fee5 	bl	80109c4 <acc_sensor_reg_field_write>
 800ebfa:	b90e      	cbnz	r6, 800ec00 <acc_sensor_protocol_a121_hibernate_off+0x60>
 800ebfc:	b002      	add	sp, #8
 800ebfe:	bd70      	pop	{r4, r5, r6, pc}
 800ec00:	4620      	mov	r0, r4
 800ec02:	f64a 42c0 	movw	r2, #44224	@ 0xacc0
 800ec06:	2131      	movs	r1, #49	@ 0x31
 800ec08:	b002      	add	sp, #8
 800ec0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec0e:	f001 bec9 	b.w	80109a4 <acc_sensor_reg_write>
 800ec12:	bf00      	nop

0800ec14 <acc_sensor_protocol_a121_is_hibernate>:
 800ec14:	b500      	push	{lr}
 800ec16:	b083      	sub	sp, #12
 800ec18:	2300      	movs	r3, #0
 800ec1a:	f10d 0206 	add.w	r2, sp, #6
 800ec1e:	2131      	movs	r1, #49	@ 0x31
 800ec20:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ec24:	f001 fea8 	bl	8010978 <acc_sensor_reg_read>
 800ec28:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800ec2c:	f64a 43c0 	movw	r3, #44224	@ 0xacc0
 800ec30:	1ac0      	subs	r0, r0, r3
 800ec32:	fab0 f080 	clz	r0, r0
 800ec36:	0940      	lsrs	r0, r0, #5
 800ec38:	b003      	add	sp, #12
 800ec3a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec3e:	bf00      	nop

0800ec40 <acc_sensor_protocol_a121_reconfigure>:
 800ec40:	b508      	push	{r3, lr}
 800ec42:	2201      	movs	r2, #1
 800ec44:	2180      	movs	r1, #128	@ 0x80
 800ec46:	f001 fead 	bl	80109a4 <acc_sensor_reg_write>
 800ec4a:	2001      	movs	r0, #1
 800ec4c:	bd08      	pop	{r3, pc}
 800ec4e:	bf00      	nop

0800ec50 <a121_diagnostics_decode_stack_level>:
 800ec50:	b570      	push	{r4, r5, r6, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	4605      	mov	r5, r0
 800ec56:	460c      	mov	r4, r1
 800ec58:	4616      	mov	r6, r2
 800ec5a:	f7ff f887 	bl	800dd6c <acc_rss_integration_log_level>
 800ec5e:	2801      	cmp	r0, #1
 800ec60:	d90c      	bls.n	800ec7c <a121_diagnostics_decode_stack_level+0x2c>
 800ec62:	f5a4 738c 	sub.w	r3, r4, #280	@ 0x118
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	e9cd 3400 	strd	r3, r4, [sp]
 800ec6c:	4a04      	ldr	r2, [pc, #16]	@ (800ec80 <a121_diagnostics_decode_stack_level+0x30>)
 800ec6e:	9602      	str	r6, [sp, #8]
 800ec70:	6914      	ldr	r4, [r2, #16]
 800ec72:	4904      	ldr	r1, [pc, #16]	@ (800ec84 <a121_diagnostics_decode_stack_level+0x34>)
 800ec74:	4a04      	ldr	r2, [pc, #16]	@ (800ec88 <a121_diagnostics_decode_stack_level+0x38>)
 800ec76:	462b      	mov	r3, r5
 800ec78:	2002      	movs	r0, #2
 800ec7a:	47a0      	blx	r4
 800ec7c:	b004      	add	sp, #16
 800ec7e:	bd70      	pop	{r4, r5, r6, pc}
 800ec80:	200009ec 	.word	0x200009ec
 800ec84:	08015378 	.word	0x08015378
 800ec88:	08015350 	.word	0x08015350

0800ec8c <a121_diagnostics_decode_wakeupinputwakeup>:
 800ec8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec8e:	460c      	mov	r4, r1
 800ec90:	3962      	subs	r1, #98	@ 0x62
 800ec92:	07cb      	lsls	r3, r1, #31
 800ec94:	b085      	sub	sp, #20
 800ec96:	4605      	mov	r5, r0
 800ec98:	4616      	mov	r6, r2
 800ec9a:	b28f      	uxth	r7, r1
 800ec9c:	d410      	bmi.n	800ecc0 <a121_diagnostics_decode_wakeupinputwakeup+0x34>
 800ec9e:	f7ff f865 	bl	800dd6c <acc_rss_integration_log_level>
 800eca2:	2801      	cmp	r0, #1
 800eca4:	d90a      	bls.n	800ecbc <a121_diagnostics_decode_wakeupinputwakeup+0x30>
 800eca6:	087f      	lsrs	r7, r7, #1
 800eca8:	e9cd 7400 	strd	r7, r4, [sp]
 800ecac:	490d      	ldr	r1, [pc, #52]	@ (800ece4 <a121_diagnostics_decode_wakeupinputwakeup+0x58>)
 800ecae:	9602      	str	r6, [sp, #8]
 800ecb0:	690c      	ldr	r4, [r1, #16]
 800ecb2:	4a0d      	ldr	r2, [pc, #52]	@ (800ece8 <a121_diagnostics_decode_wakeupinputwakeup+0x5c>)
 800ecb4:	490d      	ldr	r1, [pc, #52]	@ (800ecec <a121_diagnostics_decode_wakeupinputwakeup+0x60>)
 800ecb6:	462b      	mov	r3, r5
 800ecb8:	2002      	movs	r0, #2
 800ecba:	47a0      	blx	r4
 800ecbc:	b005      	add	sp, #20
 800ecbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecc0:	f7ff f854 	bl	800dd6c <acc_rss_integration_log_level>
 800ecc4:	2801      	cmp	r0, #1
 800ecc6:	d9f9      	bls.n	800ecbc <a121_diagnostics_decode_wakeupinputwakeup+0x30>
 800ecc8:	087f      	lsrs	r7, r7, #1
 800ecca:	e9cd 7400 	strd	r7, r4, [sp]
 800ecce:	4905      	ldr	r1, [pc, #20]	@ (800ece4 <a121_diagnostics_decode_wakeupinputwakeup+0x58>)
 800ecd0:	9602      	str	r6, [sp, #8]
 800ecd2:	690c      	ldr	r4, [r1, #16]
 800ecd4:	4a06      	ldr	r2, [pc, #24]	@ (800ecf0 <a121_diagnostics_decode_wakeupinputwakeup+0x64>)
 800ecd6:	4905      	ldr	r1, [pc, #20]	@ (800ecec <a121_diagnostics_decode_wakeupinputwakeup+0x60>)
 800ecd8:	462b      	mov	r3, r5
 800ecda:	2002      	movs	r0, #2
 800ecdc:	47a0      	blx	r4
 800ecde:	b005      	add	sp, #20
 800ece0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ece2:	bf00      	nop
 800ece4:	200009ec 	.word	0x200009ec
 800ece8:	0801538c 	.word	0x0801538c
 800ecec:	08015378 	.word	0x08015378
 800ecf0:	080153c4 	.word	0x080153c4

0800ecf4 <a121_diagnostics_decode_inputmuxwakeupinput>:
 800ecf4:	b570      	push	{r4, r5, r6, lr}
 800ecf6:	b082      	sub	sp, #8
 800ecf8:	4605      	mov	r5, r0
 800ecfa:	460c      	mov	r4, r1
 800ecfc:	4616      	mov	r6, r2
 800ecfe:	f7ff f835 	bl	800dd6c <acc_rss_integration_log_level>
 800ed02:	2801      	cmp	r0, #1
 800ed04:	d90b      	bls.n	800ed1e <a121_diagnostics_decode_inputmuxwakeupinput+0x2a>
 800ed06:	f1a4 017d 	sub.w	r1, r4, #125	@ 0x7d
 800ed0a:	4a06      	ldr	r2, [pc, #24]	@ (800ed24 <a121_diagnostics_decode_inputmuxwakeupinput+0x30>)
 800ed0c:	9601      	str	r6, [sp, #4]
 800ed0e:	b289      	uxth	r1, r1
 800ed10:	9100      	str	r1, [sp, #0]
 800ed12:	6914      	ldr	r4, [r2, #16]
 800ed14:	4904      	ldr	r1, [pc, #16]	@ (800ed28 <a121_diagnostics_decode_inputmuxwakeupinput+0x34>)
 800ed16:	4a05      	ldr	r2, [pc, #20]	@ (800ed2c <a121_diagnostics_decode_inputmuxwakeupinput+0x38>)
 800ed18:	462b      	mov	r3, r5
 800ed1a:	2002      	movs	r0, #2
 800ed1c:	47a0      	blx	r4
 800ed1e:	b002      	add	sp, #8
 800ed20:	bd70      	pop	{r4, r5, r6, pc}
 800ed22:	bf00      	nop
 800ed24:	200009ec 	.word	0x200009ec
 800ed28:	08015378 	.word	0x08015378
 800ed2c:	080153fc 	.word	0x080153fc

0800ed30 <a121_diagnostics_decode_scratchpad>:
 800ed30:	b570      	push	{r4, r5, r6, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	4605      	mov	r5, r0
 800ed36:	460c      	mov	r4, r1
 800ed38:	4616      	mov	r6, r2
 800ed3a:	f7ff f817 	bl	800dd6c <acc_rss_integration_log_level>
 800ed3e:	2801      	cmp	r0, #1
 800ed40:	d90b      	bls.n	800ed5a <a121_diagnostics_decode_scratchpad+0x2a>
 800ed42:	f1a4 012c 	sub.w	r1, r4, #44	@ 0x2c
 800ed46:	4a06      	ldr	r2, [pc, #24]	@ (800ed60 <a121_diagnostics_decode_scratchpad+0x30>)
 800ed48:	9601      	str	r6, [sp, #4]
 800ed4a:	b289      	uxth	r1, r1
 800ed4c:	9100      	str	r1, [sp, #0]
 800ed4e:	6914      	ldr	r4, [r2, #16]
 800ed50:	4904      	ldr	r1, [pc, #16]	@ (800ed64 <a121_diagnostics_decode_scratchpad+0x34>)
 800ed52:	4a05      	ldr	r2, [pc, #20]	@ (800ed68 <a121_diagnostics_decode_scratchpad+0x38>)
 800ed54:	462b      	mov	r3, r5
 800ed56:	2002      	movs	r0, #2
 800ed58:	47a0      	blx	r4
 800ed5a:	b002      	add	sp, #8
 800ed5c:	bd70      	pop	{r4, r5, r6, pc}
 800ed5e:	bf00      	nop
 800ed60:	200009ec 	.word	0x200009ec
 800ed64:	08015378 	.word	0x08015378
 800ed68:	0801542c 	.word	0x0801542c

0800ed6c <a121_diagnostics_decode_run_status>:
 800ed6c:	b570      	push	{r4, r5, r6, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	4605      	mov	r5, r0
 800ed72:	4614      	mov	r4, r2
 800ed74:	f7fe fffa 	bl	800dd6c <acc_rss_integration_log_level>
 800ed78:	2801      	cmp	r0, #1
 800ed7a:	d910      	bls.n	800ed9e <a121_diagnostics_decode_run_status+0x32>
 800ed7c:	4b09      	ldr	r3, [pc, #36]	@ (800eda4 <a121_diagnostics_decode_run_status+0x38>)
 800ed7e:	480a      	ldr	r0, [pc, #40]	@ (800eda8 <a121_diagnostics_decode_run_status+0x3c>)
 800ed80:	490a      	ldr	r1, [pc, #40]	@ (800edac <a121_diagnostics_decode_run_status+0x40>)
 800ed82:	6906      	ldr	r6, [r0, #16]
 800ed84:	4a0a      	ldr	r2, [pc, #40]	@ (800edb0 <a121_diagnostics_decode_run_status+0x44>)
 800ed86:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 800ed8a:	bf18      	it	ne
 800ed8c:	4619      	movne	r1, r3
 800ed8e:	f3c4 040a 	ubfx	r4, r4, #0, #11
 800ed92:	9100      	str	r1, [sp, #0]
 800ed94:	9401      	str	r4, [sp, #4]
 800ed96:	4907      	ldr	r1, [pc, #28]	@ (800edb4 <a121_diagnostics_decode_run_status+0x48>)
 800ed98:	462b      	mov	r3, r5
 800ed9a:	2002      	movs	r0, #2
 800ed9c:	47b0      	blx	r6
 800ed9e:	b002      	add	sp, #8
 800eda0:	bd70      	pop	{r4, r5, r6, pc}
 800eda2:	bf00      	nop
 800eda4:	0801545c 	.word	0x0801545c
 800eda8:	200009ec 	.word	0x200009ec
 800edac:	08015454 	.word	0x08015454
 800edb0:	08015464 	.word	0x08015464
 800edb4:	08015378 	.word	0x08015378

0800edb8 <a121_diagnostics_decode_asic_error>:
 800edb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edbc:	4e1e      	ldr	r6, [pc, #120]	@ (800ee38 <a121_diagnostics_decode_asic_error+0x80>)
 800edbe:	4680      	mov	r8, r0
 800edc0:	4615      	mov	r5, r2
 800edc2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800edc4:	b091      	sub	sp, #68	@ 0x44
 800edc6:	ac02      	add	r4, sp, #8
 800edc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800edca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800edcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800edce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800edd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800edd2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800edd6:	e884 0003 	stmia.w	r4, {r0, r1}
 800edda:	f7fe ffc7 	bl	800dd6c <acc_rss_integration_log_level>
 800edde:	2801      	cmp	r0, #1
 800ede0:	d907      	bls.n	800edf2 <a121_diagnostics_decode_asic_error+0x3a>
 800ede2:	4b16      	ldr	r3, [pc, #88]	@ (800ee3c <a121_diagnostics_decode_asic_error+0x84>)
 800ede4:	9500      	str	r5, [sp, #0]
 800ede6:	691c      	ldr	r4, [r3, #16]
 800ede8:	4a15      	ldr	r2, [pc, #84]	@ (800ee40 <a121_diagnostics_decode_asic_error+0x88>)
 800edea:	4916      	ldr	r1, [pc, #88]	@ (800ee44 <a121_diagnostics_decode_asic_error+0x8c>)
 800edec:	4643      	mov	r3, r8
 800edee:	2002      	movs	r0, #2
 800edf0:	47a0      	blx	r4
 800edf2:	f8df b048 	ldr.w	fp, [pc, #72]	@ 800ee3c <a121_diagnostics_decode_asic_error+0x84>
 800edf6:	f8df a050 	ldr.w	sl, [pc, #80]	@ 800ee48 <a121_diagnostics_decode_asic_error+0x90>
 800edfa:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 800ee44 <a121_diagnostics_decode_asic_error+0x8c>
 800edfe:	ac02      	add	r4, sp, #8
 800ee00:	ae10      	add	r6, sp, #64	@ 0x40
 800ee02:	e002      	b.n	800ee0a <a121_diagnostics_decode_asic_error+0x52>
 800ee04:	3408      	adds	r4, #8
 800ee06:	42b4      	cmp	r4, r6
 800ee08:	d013      	beq.n	800ee32 <a121_diagnostics_decode_asic_error+0x7a>
 800ee0a:	88a3      	ldrh	r3, [r4, #4]
 800ee0c:	421d      	tst	r5, r3
 800ee0e:	d0f9      	beq.n	800ee04 <a121_diagnostics_decode_asic_error+0x4c>
 800ee10:	f7fe ffac 	bl	800dd6c <acc_rss_integration_log_level>
 800ee14:	2801      	cmp	r0, #1
 800ee16:	4643      	mov	r3, r8
 800ee18:	4652      	mov	r2, sl
 800ee1a:	4649      	mov	r1, r9
 800ee1c:	f04f 0002 	mov.w	r0, #2
 800ee20:	d9f0      	bls.n	800ee04 <a121_diagnostics_decode_asic_error+0x4c>
 800ee22:	6827      	ldr	r7, [r4, #0]
 800ee24:	9700      	str	r7, [sp, #0]
 800ee26:	3408      	adds	r4, #8
 800ee28:	f8db 7010 	ldr.w	r7, [fp, #16]
 800ee2c:	47b8      	blx	r7
 800ee2e:	42b4      	cmp	r4, r6
 800ee30:	d1eb      	bne.n	800ee0a <a121_diagnostics_decode_asic_error+0x52>
 800ee32:	b011      	add	sp, #68	@ 0x44
 800ee34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee38:	080142dc 	.word	0x080142dc
 800ee3c:	200009ec 	.word	0x200009ec
 800ee40:	08015478 	.word	0x08015478
 800ee44:	08015378 	.word	0x08015378
 800ee48:	08015494 	.word	0x08015494

0800ee4c <a121_diagnostics_decode_wakeup_status0>:
 800ee4c:	b570      	push	{r4, r5, r6, lr}
 800ee4e:	b082      	sub	sp, #8
 800ee50:	4605      	mov	r5, r0
 800ee52:	4614      	mov	r4, r2
 800ee54:	f7fe ff8a 	bl	800dd6c <acc_rss_integration_log_level>
 800ee58:	2801      	cmp	r0, #1
 800ee5a:	d909      	bls.n	800ee70 <a121_diagnostics_decode_wakeup_status0+0x24>
 800ee5c:	4b05      	ldr	r3, [pc, #20]	@ (800ee74 <a121_diagnostics_decode_wakeup_status0+0x28>)
 800ee5e:	4a06      	ldr	r2, [pc, #24]	@ (800ee78 <a121_diagnostics_decode_wakeup_status0+0x2c>)
 800ee60:	691e      	ldr	r6, [r3, #16]
 800ee62:	4906      	ldr	r1, [pc, #24]	@ (800ee7c <a121_diagnostics_decode_wakeup_status0+0x30>)
 800ee64:	f004 040f 	and.w	r4, r4, #15
 800ee68:	9400      	str	r4, [sp, #0]
 800ee6a:	462b      	mov	r3, r5
 800ee6c:	2002      	movs	r0, #2
 800ee6e:	47b0      	blx	r6
 800ee70:	b002      	add	sp, #8
 800ee72:	bd70      	pop	{r4, r5, r6, pc}
 800ee74:	200009ec 	.word	0x200009ec
 800ee78:	080154a8 	.word	0x080154a8
 800ee7c:	08015378 	.word	0x08015378

0800ee80 <acc_sensor_status_a121>:
 800ee80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee84:	ed2d 8b02 	vpush	{d8}
 800ee88:	b0a3      	sub	sp, #140	@ 0x8c
 800ee8a:	4606      	mov	r6, r0
 800ee8c:	f7fe ff6e 	bl	800dd6c <acc_rss_integration_log_level>
 800ee90:	2801      	cmp	r0, #1
 800ee92:	d905      	bls.n	800eea0 <acc_sensor_status_a121+0x20>
 800ee94:	4b2e      	ldr	r3, [pc, #184]	@ (800ef50 <acc_sensor_status_a121+0xd0>)
 800ee96:	4a2f      	ldr	r2, [pc, #188]	@ (800ef54 <acc_sensor_status_a121+0xd4>)
 800ee98:	691b      	ldr	r3, [r3, #16]
 800ee9a:	492f      	ldr	r1, [pc, #188]	@ (800ef58 <acc_sensor_status_a121+0xd8>)
 800ee9c:	2002      	movs	r0, #2
 800ee9e:	4798      	blx	r3
 800eea0:	492e      	ldr	r1, [pc, #184]	@ (800ef5c <acc_sensor_status_a121+0xdc>)
 800eea2:	f8df a0ac 	ldr.w	sl, [pc, #172]	@ 800ef50 <acc_sensor_status_a121+0xd0>
 800eea6:	f8df 90bc 	ldr.w	r9, [pc, #188]	@ 800ef64 <acc_sensor_status_a121+0xe4>
 800eeaa:	2278      	movs	r2, #120	@ 0x78
 800eeac:	a804      	add	r0, sp, #16
 800eeae:	f003 f8ba 	bl	8012026 <memcpy>
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	21d5      	movs	r1, #213	@ 0xd5
 800eeb6:	4630      	mov	r0, r6
 800eeb8:	f001 fd74 	bl	80109a4 <acc_sensor_reg_write>
 800eebc:	ab22      	add	r3, sp, #136	@ 0x88
 800eebe:	ee08 3a10 	vmov	s16, r3
 800eec2:	ac04      	add	r4, sp, #16
 800eec4:	88a5      	ldrh	r5, [r4, #4]
 800eec6:	f8b4 8006 	ldrh.w	r8, [r4, #6]
 800eeca:	44a8      	add	r8, r5
 800eecc:	4545      	cmp	r5, r8
 800eece:	da2a      	bge.n	800ef26 <acc_sensor_status_a121+0xa6>
 800eed0:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ef58 <acc_sensor_status_a121+0xd8>
 800eed4:	e006      	b.n	800eee4 <acc_sensor_status_a121+0x64>
 800eed6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800eeda:	4798      	blx	r3
 800eedc:	3501      	adds	r5, #1
 800eede:	b2ad      	uxth	r5, r5
 800eee0:	4545      	cmp	r5, r8
 800eee2:	da20      	bge.n	800ef26 <acc_sensor_status_a121+0xa6>
 800eee4:	4629      	mov	r1, r5
 800eee6:	4630      	mov	r0, r6
 800eee8:	f10d 020e 	add.w	r2, sp, #14
 800eeec:	f001 fd44 	bl	8010978 <acc_sensor_reg_read>
 800eef0:	68a3      	ldr	r3, [r4, #8]
 800eef2:	4629      	mov	r1, r5
 800eef4:	4630      	mov	r0, r6
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d1ed      	bne.n	800eed6 <acc_sensor_status_a121+0x56>
 800eefa:	f7fe ff37 	bl	800dd6c <acc_rss_integration_log_level>
 800eefe:	2801      	cmp	r0, #1
 800ef00:	4633      	mov	r3, r6
 800ef02:	464a      	mov	r2, r9
 800ef04:	4659      	mov	r1, fp
 800ef06:	f04f 0002 	mov.w	r0, #2
 800ef0a:	d9e7      	bls.n	800eedc <acc_sensor_status_a121+0x5c>
 800ef0c:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 800ef10:	f8cd c004 	str.w	ip, [sp, #4]
 800ef14:	6827      	ldr	r7, [r4, #0]
 800ef16:	9700      	str	r7, [sp, #0]
 800ef18:	3501      	adds	r5, #1
 800ef1a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800ef1e:	b2ad      	uxth	r5, r5
 800ef20:	47b8      	blx	r7
 800ef22:	4545      	cmp	r5, r8
 800ef24:	dbde      	blt.n	800eee4 <acc_sensor_status_a121+0x64>
 800ef26:	ee18 3a10 	vmov	r3, s16
 800ef2a:	340c      	adds	r4, #12
 800ef2c:	42a3      	cmp	r3, r4
 800ef2e:	d1c9      	bne.n	800eec4 <acc_sensor_status_a121+0x44>
 800ef30:	f7fe ff1c 	bl	800dd6c <acc_rss_integration_log_level>
 800ef34:	2801      	cmp	r0, #1
 800ef36:	d905      	bls.n	800ef44 <acc_sensor_status_a121+0xc4>
 800ef38:	4b05      	ldr	r3, [pc, #20]	@ (800ef50 <acc_sensor_status_a121+0xd0>)
 800ef3a:	4a09      	ldr	r2, [pc, #36]	@ (800ef60 <acc_sensor_status_a121+0xe0>)
 800ef3c:	691b      	ldr	r3, [r3, #16]
 800ef3e:	4906      	ldr	r1, [pc, #24]	@ (800ef58 <acc_sensor_status_a121+0xd8>)
 800ef40:	2002      	movs	r0, #2
 800ef42:	4798      	blx	r3
 800ef44:	b023      	add	sp, #140	@ 0x8c
 800ef46:	ecbd 8b02 	vpop	{d8}
 800ef4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef4e:	bf00      	nop
 800ef50:	200009ec 	.word	0x200009ec
 800ef54:	080154c8 	.word	0x080154c8
 800ef58:	08015378 	.word	0x08015378
 800ef5c:	08014314 	.word	0x08014314
 800ef60:	08015518 	.word	0x08015518
 800ef64:	08015504 	.word	0x08015504

0800ef68 <get_pll_freq>:
 800ef68:	b508      	push	{r3, lr}
 800ef6a:	ed2d 8b02 	vpush	{d8}
 800ef6e:	f7fe fe77 	bl	800dc60 <acc_rss_integration_get_sensor_reference_frequency>
 800ef72:	ee07 0a90 	vmov	s15, r0
 800ef76:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800ef7a:	eeb0 0a48 	vmov.f32	s0, s16
 800ef7e:	f001 fe49 	bl	8010c14 <acc_cpd_pll_divisors_ref_divisor>
 800ef82:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ef86:	ecbd 8b02 	vpop	{d8}
 800ef8a:	bd08      	pop	{r3, pc}

0800ef8c <acc_translation_a121_profile_to_pulse_params>:
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	3801      	subs	r0, #1
 800ef90:	b430      	push	{r4, r5}
 800ef92:	e9c2 3301 	strd	r3, r3, [r2, #4]
 800ef96:	60d3      	str	r3, [r2, #12]
 800ef98:	2804      	cmp	r0, #4
 800ef9a:	d836      	bhi.n	800f00a <acc_translation_a121_profile_to_pulse_params+0x7e>
 800ef9c:	e8df f000 	tbb	[pc, r0]
 800efa0:	2d291b0d 	.word	0x2d291b0d
 800efa4:	03          	.byte	0x03
 800efa5:	00          	.byte	0x00
 800efa6:	4b1c      	ldr	r3, [pc, #112]	@ (800f018 <acc_translation_a121_profile_to_pulse_params+0x8c>)
 800efa8:	491c      	ldr	r1, [pc, #112]	@ (800f01c <acc_translation_a121_profile_to_pulse_params+0x90>)
 800efaa:	2000      	movs	r0, #0
 800efac:	e9c2 3305 	strd	r3, r3, [r2, #20]
 800efb0:	7010      	strb	r0, [r2, #0]
 800efb2:	61d1      	str	r1, [r2, #28]
 800efb4:	2001      	movs	r0, #1
 800efb6:	bc30      	pop	{r4, r5}
 800efb8:	4770      	bx	lr
 800efba:	2001      	movs	r0, #1
 800efbc:	2400      	movs	r4, #0
 800efbe:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800efc2:	7014      	strb	r4, [r2, #0]
 800efc4:	82d0      	strh	r0, [r2, #22]
 800efc6:	8350      	strh	r0, [r2, #26]
 800efc8:	61d3      	str	r3, [r2, #28]
 800efca:	b1d1      	cbz	r1, 800f002 <acc_translation_a121_profile_to_pulse_params+0x76>
 800efcc:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
 800efce:	8293      	strh	r3, [r2, #20]
 800efd0:	bc30      	pop	{r4, r5}
 800efd2:	8313      	strh	r3, [r2, #24]
 800efd4:	4770      	bx	lr
 800efd6:	4b12      	ldr	r3, [pc, #72]	@ (800f020 <acc_translation_a121_profile_to_pulse_params+0x94>)
 800efd8:	4c12      	ldr	r4, [pc, #72]	@ (800f024 <acc_translation_a121_profile_to_pulse_params+0x98>)
 800efda:	61d4      	str	r4, [r2, #28]
 800efdc:	2001      	movs	r0, #1
 800efde:	2596      	movs	r5, #150	@ 0x96
 800efe0:	21fa      	movs	r1, #250	@ 0xfa
 800efe2:	60d5      	str	r5, [r2, #12]
 800efe4:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800efe8:	bc30      	pop	{r4, r5}
 800efea:	e9c2 3305 	strd	r3, r3, [r2, #20]
 800efee:	7010      	strb	r0, [r2, #0]
 800eff0:	4770      	bx	lr
 800eff2:	4b0d      	ldr	r3, [pc, #52]	@ (800f028 <acc_translation_a121_profile_to_pulse_params+0x9c>)
 800eff4:	490d      	ldr	r1, [pc, #52]	@ (800f02c <acc_translation_a121_profile_to_pulse_params+0xa0>)
 800eff6:	2000      	movs	r0, #0
 800eff8:	e7d8      	b.n	800efac <acc_translation_a121_profile_to_pulse_params+0x20>
 800effa:	4b0d      	ldr	r3, [pc, #52]	@ (800f030 <acc_translation_a121_profile_to_pulse_params+0xa4>)
 800effc:	490d      	ldr	r1, [pc, #52]	@ (800f034 <acc_translation_a121_profile_to_pulse_params+0xa8>)
 800effe:	2000      	movs	r0, #0
 800f000:	e7d4      	b.n	800efac <acc_translation_a121_profile_to_pulse_params+0x20>
 800f002:	2302      	movs	r3, #2
 800f004:	8293      	strh	r3, [r2, #20]
 800f006:	8313      	strh	r3, [r2, #24]
 800f008:	e7d5      	b.n	800efb6 <acc_translation_a121_profile_to_pulse_params+0x2a>
 800f00a:	2000      	movs	r0, #0
 800f00c:	e9c2 0005 	strd	r0, r0, [r2, #20]
 800f010:	7010      	strb	r0, [r2, #0]
 800f012:	61d0      	str	r0, [r2, #28]
 800f014:	e7cf      	b.n	800efb6 <acc_translation_a121_profile_to_pulse_params+0x2a>
 800f016:	bf00      	nop
 800f018:	00050008 	.word	0x00050008
 800f01c:	0002000b 	.word	0x0002000b
 800f020:	00010008 	.word	0x00010008
 800f024:	00030002 	.word	0x00030002
 800f028:	00020008 	.word	0x00020008
 800f02c:	00020004 	.word	0x00020004
 800f030:	00030008 	.word	0x00030008
 800f034:	00020006 	.word	0x00020006

0800f038 <acc_translation_a121_profile_to_start_point_offset>:
 800f038:	3801      	subs	r0, #1
 800f03a:	2804      	cmp	r0, #4
 800f03c:	d818      	bhi.n	800f070 <acc_translation_a121_profile_to_start_point_offset+0x38>
 800f03e:	e8df f000 	tbb	[pc, r0]
 800f042:	0812      	.short	0x0812
 800f044:	0d03      	.short	0x0d03
 800f046:	03          	.byte	0x03
 800f047:	00          	.byte	0x00
 800f048:	f06f 030c 	mvn.w	r3, #12
 800f04c:	600b      	str	r3, [r1, #0]
 800f04e:	2001      	movs	r0, #1
 800f050:	4770      	bx	lr
 800f052:	f06f 0306 	mvn.w	r3, #6
 800f056:	600b      	str	r3, [r1, #0]
 800f058:	2001      	movs	r0, #1
 800f05a:	4770      	bx	lr
 800f05c:	f06f 030f 	mvn.w	r3, #15
 800f060:	600b      	str	r3, [r1, #0]
 800f062:	2001      	movs	r0, #1
 800f064:	4770      	bx	lr
 800f066:	f06f 030b 	mvn.w	r3, #11
 800f06a:	600b      	str	r3, [r1, #0]
 800f06c:	2001      	movs	r0, #1
 800f06e:	4770      	bx	lr
 800f070:	2000      	movs	r0, #0
 800f072:	6008      	str	r0, [r1, #0]
 800f074:	4770      	bx	lr
 800f076:	bf00      	nop

0800f078 <acc_translation_a121_set_calibration_params>:
 800f078:	b530      	push	{r4, r5, lr}
 800f07a:	460c      	mov	r4, r1
 800f07c:	f8b0 2084 	ldrh.w	r2, [r0, #132]	@ 0x84
 800f080:	f8b0 3086 	ldrh.w	r3, [r0, #134]	@ 0x86
 800f084:	f8b0 5082 	ldrh.w	r5, [r0, #130]	@ 0x82
 800f088:	f8b0 1088 	ldrh.w	r1, [r0, #136]	@ 0x88
 800f08c:	8062      	strh	r2, [r4, #2]
 800f08e:	8842      	ldrh	r2, [r0, #2]
 800f090:	80a3      	strh	r3, [r4, #4]
 800f092:	8883      	ldrh	r3, [r0, #4]
 800f094:	8025      	strh	r5, [r4, #0]
 800f096:	b087      	sub	sp, #28
 800f098:	88c5      	ldrh	r5, [r0, #6]
 800f09a:	80e1      	strh	r1, [r4, #6]
 800f09c:	8941      	ldrh	r1, [r0, #10]
 800f09e:	8122      	strh	r2, [r4, #8]
 800f0a0:	8c02      	ldrh	r2, [r0, #32]
 800f0a2:	8163      	strh	r3, [r4, #10]
 800f0a4:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800f0a6:	8263      	strh	r3, [r4, #18]
 800f0a8:	81a5      	strh	r5, [r4, #12]
 800f0aa:	81e1      	strh	r1, [r4, #14]
 800f0ac:	8222      	strh	r2, [r4, #16]
 800f0ae:	8900      	ldrh	r0, [r0, #8]
 800f0b0:	466a      	mov	r2, sp
 800f0b2:	2160      	movs	r1, #96	@ 0x60
 800f0b4:	f001 fdb6 	bl	8010c24 <acc_dll_calculate_area_settings>
 800f0b8:	f8bd 1000 	ldrh.w	r1, [sp]
 800f0bc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f0c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f0c4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
 800f0c8:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800f0cc:	82a1      	strh	r1, [r4, #20]
 800f0ce:	82e2      	strh	r2, [r4, #22]
 800f0d0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800f0d4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f0d8:	8323      	strh	r3, [r4, #24]
 800f0da:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800f0de:	8365      	strh	r5, [r4, #26]
 800f0e0:	83a0      	strh	r0, [r4, #28]
 800f0e2:	83e1      	strh	r1, [r4, #30]
 800f0e4:	8422      	strh	r2, [r4, #32]
 800f0e6:	8463      	strh	r3, [r4, #34]	@ 0x22
 800f0e8:	b007      	add	sp, #28
 800f0ea:	bd30      	pop	{r4, r5, pc}

0800f0ec <acc_translation_a121_set_gain_params>:
 800f0ec:	7a83      	ldrb	r3, [r0, #10]
 800f0ee:	2b17      	cmp	r3, #23
 800f0f0:	d80e      	bhi.n	800f110 <acc_translation_a121_set_gain_params+0x24>
 800f0f2:	2b09      	cmp	r3, #9
 800f0f4:	d80e      	bhi.n	800f114 <acc_translation_a121_set_gain_params+0x28>
 800f0f6:	f1c3 0309 	rsb	r3, r3, #9
 800f0fa:	2015      	movs	r0, #21
 800f0fc:	8053      	strh	r3, [r2, #2]
 800f0fe:	8010      	strh	r0, [r2, #0]
 800f100:	b199      	cbz	r1, 800f12a <acc_translation_a121_set_gain_params+0x3e>
 800f102:	8853      	ldrh	r3, [r2, #2]
 800f104:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800f108:	2001      	movs	r0, #1
 800f10a:	898b      	ldrh	r3, [r1, #12]
 800f10c:	8093      	strh	r3, [r2, #4]
 800f10e:	4770      	bx	lr
 800f110:	2000      	movs	r0, #0
 800f112:	4770      	bx	lr
 800f114:	2b10      	cmp	r3, #16
 800f116:	bf94      	ite	ls
 800f118:	f1c3 031e 	rsbls	r3, r3, #30
 800f11c:	f1c3 0317 	rsbhi	r3, r3, #23
 800f120:	2000      	movs	r0, #0
 800f122:	8013      	strh	r3, [r2, #0]
 800f124:	8050      	strh	r0, [r2, #2]
 800f126:	2900      	cmp	r1, #0
 800f128:	d1eb      	bne.n	800f102 <acc_translation_a121_set_gain_params+0x16>
 800f12a:	8091      	strh	r1, [r2, #4]
 800f12c:	2001      	movs	r0, #1
 800f12e:	4770      	bx	lr

0800f130 <acc_translation_a121_set_pulse_length_params>:
 800f130:	8a83      	ldrh	r3, [r0, #20]
 800f132:	2b08      	cmp	r3, #8
 800f134:	d802      	bhi.n	800f13c <acc_translation_a121_set_pulse_length_params+0xc>
 800f136:	8ac2      	ldrh	r2, [r0, #22]
 800f138:	2a07      	cmp	r2, #7
 800f13a:	d901      	bls.n	800f140 <acc_translation_a121_set_pulse_length_params+0x10>
 800f13c:	2000      	movs	r0, #0
 800f13e:	4770      	bx	lr
 800f140:	b470      	push	{r4, r5, r6}
 800f142:	8b05      	ldrh	r5, [r0, #24]
 800f144:	2d08      	cmp	r5, #8
 800f146:	d902      	bls.n	800f14e <acc_translation_a121_set_pulse_length_params+0x1e>
 800f148:	2000      	movs	r0, #0
 800f14a:	bc70      	pop	{r4, r5, r6}
 800f14c:	4770      	bx	lr
 800f14e:	8b44      	ldrh	r4, [r0, #26]
 800f150:	2c08      	cmp	r4, #8
 800f152:	d8f9      	bhi.n	800f148 <acc_translation_a121_set_pulse_length_params+0x18>
 800f154:	2001      	movs	r0, #1
 800f156:	1e66      	subs	r6, r4, #1
 800f158:	fa00 f202 	lsl.w	r2, r0, r2
 800f15c:	3a01      	subs	r2, #1
 800f15e:	fa00 f404 	lsl.w	r4, r0, r4
 800f162:	fa00 f606 	lsl.w	r6, r0, r6
 800f166:	b292      	uxth	r2, r2
 800f168:	3c01      	subs	r4, #1
 800f16a:	3e01      	subs	r6, #1
 800f16c:	01a4      	lsls	r4, r4, #6
 800f16e:	0276      	lsls	r6, r6, #9
 800f170:	800b      	strh	r3, [r1, #0]
 800f172:	0193      	lsls	r3, r2, #6
 800f174:	0252      	lsls	r2, r2, #9
 800f176:	804d      	strh	r5, [r1, #2]
 800f178:	808b      	strh	r3, [r1, #4]
 800f17a:	810a      	strh	r2, [r1, #8]
 800f17c:	80cc      	strh	r4, [r1, #6]
 800f17e:	814e      	strh	r6, [r1, #10]
 800f180:	e7e3      	b.n	800f14a <acc_translation_a121_set_pulse_length_params+0x1a>
 800f182:	bf00      	nop

0800f184 <acc_translation_a121_set_range_params>:
 800f184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f188:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 800f18c:	f890 704c 	ldrb.w	r7, [r0, #76]	@ 0x4c
 800f190:	888d      	ldrh	r5, [r1, #4]
 800f192:	b08d      	sub	sp, #52	@ 0x34
 800f194:	f1ba 0f18 	cmp.w	sl, #24
 800f198:	9102      	str	r1, [sp, #8]
 800f19a:	4691      	mov	r9, r2
 800f19c:	461c      	mov	r4, r3
 800f19e:	f240 812e 	bls.w	800f3fe <acc_translation_a121_set_range_params+0x27a>
 800f1a2:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 800f1a6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800f1aa:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 800f1ae:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 800f1b2:	f3c3 02cc 	ubfx	r2, r3, #3, #13
 800f1b6:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	f640 22aa 	movw	r2, #2730	@ 0xaaa
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	f240 8141 	bls.w	800f448 <acc_translation_a121_set_range_params+0x2c4>
 800f1c6:	4bb3      	ldr	r3, [pc, #716]	@ (800f494 <acc_translation_a121_set_range_params+0x310>)
 800f1c8:	4ab3      	ldr	r2, [pc, #716]	@ (800f498 <acc_translation_a121_set_range_params+0x314>)
 800f1ca:	691b      	ldr	r3, [r3, #16]
 800f1cc:	49b3      	ldr	r1, [pc, #716]	@ (800f49c <acc_translation_a121_set_range_params+0x318>)
 800f1ce:	2000      	movs	r0, #0
 800f1d0:	4606      	mov	r6, r0
 800f1d2:	9001      	str	r0, [sp, #4]
 800f1d4:	f04f 0801 	mov.w	r8, #1
 800f1d8:	4798      	blx	r3
 800f1da:	46c3      	mov	fp, r8
 800f1dc:	9604      	str	r6, [sp, #16]
 800f1de:	2f00      	cmp	r7, #0
 800f1e0:	f040 812f 	bne.w	800f442 <acc_translation_a121_set_range_params+0x2be>
 800f1e4:	2204      	movs	r2, #4
 800f1e6:	9b02      	ldr	r3, [sp, #8]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	4499      	add	r9, r3
 800f1ec:	f509 43c3 	add.w	r3, r9, #24960	@ 0x6180
 800f1f0:	fb12 f205 	smulbb	r2, r2, r5
 800f1f4:	3328      	adds	r3, #40	@ 0x28
 800f1f6:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f1fa:	3d01      	subs	r5, #1
 800f1fc:	b292      	uxth	r2, r2
 800f1fe:	428b      	cmp	r3, r1
 800f200:	9205      	str	r2, [sp, #20]
 800f202:	fb0a 9a05 	mla	sl, sl, r5, r9
 800f206:	d906      	bls.n	800f216 <acc_translation_a121_set_range_params+0x92>
 800f208:	4ba2      	ldr	r3, [pc, #648]	@ (800f494 <acc_translation_a121_set_range_params+0x310>)
 800f20a:	4aa5      	ldr	r2, [pc, #660]	@ (800f4a0 <acc_translation_a121_set_range_params+0x31c>)
 800f20c:	691b      	ldr	r3, [r3, #16]
 800f20e:	49a3      	ldr	r1, [pc, #652]	@ (800f49c <acc_translation_a121_set_range_params+0x318>)
 800f210:	2000      	movs	r0, #0
 800f212:	4798      	blx	r3
 800f214:	2700      	movs	r7, #0
 800f216:	f50a 43c3 	add.w	r3, sl, #24960	@ 0x6180
 800f21a:	3328      	adds	r3, #40	@ 0x28
 800f21c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f220:	4293      	cmp	r3, r2
 800f222:	d906      	bls.n	800f232 <acc_translation_a121_set_range_params+0xae>
 800f224:	4b9b      	ldr	r3, [pc, #620]	@ (800f494 <acc_translation_a121_set_range_params+0x310>)
 800f226:	4a9f      	ldr	r2, [pc, #636]	@ (800f4a4 <acc_translation_a121_set_range_params+0x320>)
 800f228:	691b      	ldr	r3, [r3, #16]
 800f22a:	499c      	ldr	r1, [pc, #624]	@ (800f49c <acc_translation_a121_set_range_params+0x318>)
 800f22c:	2000      	movs	r0, #0
 800f22e:	4798      	blx	r3
 800f230:	2700      	movs	r7, #0
 800f232:	f1b9 0f00 	cmp.w	r9, #0
 800f236:	f2c0 817c 	blt.w	800f532 <acc_translation_a121_set_range_params+0x3ae>
 800f23a:	4b9b      	ldr	r3, [pc, #620]	@ (800f4a8 <acc_translation_a121_set_range_params+0x324>)
 800f23c:	ea4f 72e9 	mov.w	r2, r9, asr #31
 800f240:	fb83 1309 	smull	r1, r3, r3, r9
 800f244:	ebc2 03a3 	rsb	r3, r2, r3, asr #2
 800f248:	f1ba 0f00 	cmp.w	sl, #0
 800f24c:	b21b      	sxth	r3, r3
 800f24e:	f2c0 817e 	blt.w	800f54e <acc_translation_a121_set_range_params+0x3ca>
 800f252:	4995      	ldr	r1, [pc, #596]	@ (800f4a8 <acc_translation_a121_set_range_params+0x324>)
 800f254:	ea4f 7cea 	mov.w	ip, sl, asr #31
 800f258:	fb81 010a 	smull	r0, r1, r1, sl
 800f25c:	ebcc 01a1 	rsb	r1, ip, r1, asr #2
 800f260:	b209      	sxth	r1, r1
 800f262:	4891      	ldr	r0, [pc, #580]	@ (800f4a8 <acc_translation_a121_set_range_params+0x324>)
 800f264:	fb80 5009 	smull	r5, r0, r0, r9
 800f268:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 800f26c:	b29b      	uxth	r3, r3
 800f26e:	1ac9      	subs	r1, r1, r3
 800f270:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f274:	b288      	uxth	r0, r1
 800f276:	ebb9 02c2 	subs.w	r2, r9, r2, lsl #3
 800f27a:	b209      	sxth	r1, r1
 800f27c:	fbb0 fbfb 	udiv	fp, r0, fp
 800f280:	f10b 0b01 	add.w	fp, fp, #1
 800f284:	9106      	str	r1, [sp, #24]
 800f286:	fa1f fb8b 	uxth.w	fp, fp
 800f28a:	f04f 0118 	mov.w	r1, #24
 800f28e:	fbb1 f1f8 	udiv	r1, r1, r8
 800f292:	f100 816e 	bmi.w	800f572 <acc_translation_a121_set_range_params+0x3ee>
 800f296:	b210      	sxth	r0, r2
 800f298:	b292      	uxth	r2, r2
 800f29a:	f8df 920c 	ldr.w	r9, [pc, #524]	@ 800f4a8 <acc_translation_a121_set_range_params+0x324>
 800f29e:	fbb2 f5f8 	udiv	r5, r2, r8
 800f2a2:	fb89 690a 	smull	r6, r9, r9, sl
 800f2a6:	ebcc 09a9 	rsb	r9, ip, r9, asr #2
 800f2aa:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 800f2ae:	fb08 2515 	mls	r5, r8, r5, r2
 800f2b2:	b2ad      	uxth	r5, r5
 800f2b4:	ebba 09c9 	subs.w	r9, sl, r9, lsl #3
 800f2b8:	9500      	str	r5, [sp, #0]
 800f2ba:	f100 8153 	bmi.w	800f564 <acc_translation_a121_set_range_params+0x3e0>
 800f2be:	fa0f f589 	sxth.w	r5, r9
 800f2c2:	950a      	str	r5, [sp, #40]	@ 0x28
 800f2c4:	fa1f f989 	uxth.w	r9, r9
 800f2c8:	9d00      	ldr	r5, [sp, #0]
 800f2ca:	3901      	subs	r1, #1
 800f2cc:	b289      	uxth	r1, r1
 800f2ce:	9109      	str	r1, [sp, #36]	@ 0x24
 800f2d0:	f1bb 0f01 	cmp.w	fp, #1
 800f2d4:	fb11 5108 	smlabb	r1, r1, r8, r5
 800f2d8:	b289      	uxth	r1, r1
 800f2da:	f000 80f3 	beq.w	800f4c4 <acc_translation_a121_set_range_params+0x340>
 800f2de:	9d00      	ldr	r5, [sp, #0]
 800f2e0:	ebb9 0901 	subs.w	r9, r9, r1
 800f2e4:	bf18      	it	ne
 800f2e6:	f04f 0901 	movne.w	r9, #1
 800f2ea:	4295      	cmp	r5, r2
 800f2ec:	bf14      	ite	ne
 800f2ee:	2501      	movne	r5, #1
 800f2f0:	2500      	moveq	r5, #0
 800f2f2:	ebab 0505 	sub.w	r5, fp, r5
 800f2f6:	eba5 0509 	sub.w	r5, r5, r9
 800f2fa:	fa1f f689 	uxth.w	r6, r9
 800f2fe:	b2ad      	uxth	r5, r5
 800f300:	9607      	str	r6, [sp, #28]
 800f302:	f040 80e6 	bne.w	800f4d2 <acc_translation_a121_set_range_params+0x34e>
 800f306:	2100      	movs	r1, #0
 800f308:	9108      	str	r1, [sp, #32]
 800f30a:	9103      	str	r1, [sp, #12]
 800f30c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f30e:	9900      	ldr	r1, [sp, #0]
 800f310:	0092      	lsls	r2, r2, #2
 800f312:	0089      	lsls	r1, r1, #2
 800f314:	87a2      	strh	r2, [r4, #60]	@ 0x3c
 800f316:	87e1      	strh	r1, [r4, #62]	@ 0x3e
 800f318:	2f00      	cmp	r7, #0
 800f31a:	f000 80b4 	beq.w	800f486 <acc_translation_a121_set_range_params+0x302>
 800f31e:	9a02      	ldr	r2, [sp, #8]
 800f320:	7b92      	ldrb	r2, [r2, #14]
 800f322:	2a05      	cmp	r2, #5
 800f324:	f200 812a 	bhi.w	800f57c <acc_translation_a121_set_range_params+0x3f8>
 800f328:	4960      	ldr	r1, [pc, #384]	@ (800f4ac <acc_translation_a121_set_range_params+0x328>)
 800f32a:	f831 a012 	ldrh.w	sl, [r1, r2, lsl #1]
 800f32e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 800f332:	f1aa 0003 	sub.w	r0, sl, #3
 800f336:	f1aa 0b4a 	sub.w	fp, sl, #74	@ 0x4a
 800f33a:	3903      	subs	r1, #3
 800f33c:	b289      	uxth	r1, r1
 800f33e:	b280      	uxth	r0, r0
 800f340:	fa1f fb8b 	uxth.w	fp, fp
 800f344:	f1aa 0a14 	sub.w	sl, sl, #20
 800f348:	f1c3 0629 	rsb	r6, r3, #41	@ 0x29
 800f34c:	445e      	add	r6, fp
 800f34e:	9a06      	ldr	r2, [sp, #24]
 800f350:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800f352:	b233      	sxth	r3, r6
 800f354:	1a9a      	subs	r2, r3, r2
 800f356:	2a29      	cmp	r2, #41	@ 0x29
 800f358:	86e1      	strh	r1, [r4, #54]	@ 0x36
 800f35a:	b2b6      	uxth	r6, r6
 800f35c:	dc08      	bgt.n	800f370 <acc_translation_a121_set_range_params+0x1ec>
 800f35e:	494d      	ldr	r1, [pc, #308]	@ (800f494 <acc_translation_a121_set_range_params+0x310>)
 800f360:	4a53      	ldr	r2, [pc, #332]	@ (800f4b0 <acc_translation_a121_set_range_params+0x32c>)
 800f362:	690f      	ldr	r7, [r1, #16]
 800f364:	494d      	ldr	r1, [pc, #308]	@ (800f49c <acc_translation_a121_set_range_params+0x318>)
 800f366:	9302      	str	r3, [sp, #8]
 800f368:	2000      	movs	r0, #0
 800f36a:	47b8      	blx	r7
 800f36c:	9b02      	ldr	r3, [sp, #8]
 800f36e:	2700      	movs	r7, #0
 800f370:	4553      	cmp	r3, sl
 800f372:	db06      	blt.n	800f382 <acc_translation_a121_set_range_params+0x1fe>
 800f374:	4b47      	ldr	r3, [pc, #284]	@ (800f494 <acc_translation_a121_set_range_params+0x310>)
 800f376:	4a4f      	ldr	r2, [pc, #316]	@ (800f4b4 <acc_translation_a121_set_range_params+0x330>)
 800f378:	691b      	ldr	r3, [r3, #16]
 800f37a:	4948      	ldr	r1, [pc, #288]	@ (800f49c <acc_translation_a121_set_range_params+0x318>)
 800f37c:	2000      	movs	r0, #0
 800f37e:	4798      	blx	r3
 800f380:	2700      	movs	r7, #0
 800f382:	9b01      	ldr	r3, [sp, #4]
 800f384:	f8a4 b038 	strh.w	fp, [r4, #56]	@ 0x38
 800f388:	2b2c      	cmp	r3, #44	@ 0x2c
 800f38a:	8766      	strh	r6, [r4, #58]	@ 0x3a
 800f38c:	f240 80c4 	bls.w	800f518 <acc_translation_a121_set_range_params+0x394>
 800f390:	2300      	movs	r3, #0
 800f392:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 800f396:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800f39a:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800f39e:	9b04      	ldr	r3, [sp, #16]
 800f3a0:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 800f3a4:	9b08      	ldr	r3, [sp, #32]
 800f3a6:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800f3aa:	2d00      	cmp	r5, #0
 800f3ac:	f000 809a 	beq.w	800f4e4 <acc_translation_a121_set_range_params+0x360>
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 800f3b6:	9b03      	ldr	r3, [sp, #12]
 800f3b8:	9a07      	ldr	r2, [sp, #28]
 800f3ba:	f8a4 204c 	strh.w	r2, [r4, #76]	@ 0x4c
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	f000 80fc 	beq.w	800f5bc <acc_translation_a121_set_range_params+0x438>
 800f3c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3c6:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800f3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3cc:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 800f3d0:	f1b9 0f00 	cmp.w	r9, #0
 800f3d4:	f000 80ef 	beq.w	800f5b6 <acc_translation_a121_set_range_params+0x432>
 800f3d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3da:	9a00      	ldr	r2, [sp, #0]
 800f3dc:	eba3 0902 	sub.w	r9, r3, r2
 800f3e0:	fb99 f8f8 	sdiv	r8, r9, r8
 800f3e4:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
 800f3e8:	3d01      	subs	r5, #1
 800f3ea:	b2ad      	uxth	r5, r5
 800f3ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f3ee:	9a05      	ldr	r2, [sp, #20]
 800f3f0:	f8a4 5040 	strh.w	r5, [r4, #64]	@ 0x40
 800f3f4:	4638      	mov	r0, r7
 800f3f6:	801a      	strh	r2, [r3, #0]
 800f3f8:	b00d      	add	sp, #52	@ 0x34
 800f3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3fe:	f1ba 0f00 	cmp.w	sl, #0
 800f402:	f43f aee0 	beq.w	800f1c6 <acc_translation_a121_set_range_params+0x42>
 800f406:	2318      	movs	r3, #24
 800f408:	fbb3 f3fa 	udiv	r3, r3, sl
 800f40c:	fb0a f303 	mul.w	r3, sl, r3
 800f410:	f1c3 0318 	rsb	r3, r3, #24
 800f414:	b29b      	uxth	r3, r3
 800f416:	9304      	str	r3, [sp, #16]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	f47f aed4 	bne.w	800f1c6 <acc_translation_a121_set_range_params+0x42>
 800f41e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f422:	009b      	lsls	r3, r3, #2
 800f424:	b29b      	uxth	r3, r3
 800f426:	9301      	str	r3, [sp, #4]
 800f428:	46d0      	mov	r8, sl
 800f42a:	f04f 0b01 	mov.w	fp, #1
 800f42e:	b9d5      	cbnz	r5, 800f466 <acc_translation_a121_set_range_params+0x2e2>
 800f430:	4b18      	ldr	r3, [pc, #96]	@ (800f494 <acc_translation_a121_set_range_params+0x310>)
 800f432:	4a21      	ldr	r2, [pc, #132]	@ (800f4b8 <acc_translation_a121_set_range_params+0x334>)
 800f434:	691b      	ldr	r3, [r3, #16]
 800f436:	4919      	ldr	r1, [pc, #100]	@ (800f49c <acc_translation_a121_set_range_params+0x318>)
 800f438:	4628      	mov	r0, r5
 800f43a:	4798      	blx	r3
 800f43c:	2f00      	cmp	r7, #0
 800f43e:	f43f aed1 	beq.w	800f1e4 <acc_translation_a121_set_range_params+0x60>
 800f442:	2700      	movs	r7, #0
 800f444:	2202      	movs	r2, #2
 800f446:	e6ce      	b.n	800f1e6 <acc_translation_a121_set_range_params+0x62>
 800f448:	4b1c      	ldr	r3, [pc, #112]	@ (800f4bc <acc_translation_a121_set_range_params+0x338>)
 800f44a:	fba3 3b0a 	umull	r3, fp, r3, sl
 800f44e:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 800f452:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f456:	b29b      	uxth	r3, r3
 800f458:	9304      	str	r3, [sp, #16]
 800f45a:	235c      	movs	r3, #92	@ 0x5c
 800f45c:	9301      	str	r3, [sp, #4]
 800f45e:	f04f 0818 	mov.w	r8, #24
 800f462:	2d00      	cmp	r5, #0
 800f464:	d0e4      	beq.n	800f430 <acc_translation_a121_set_range_params+0x2ac>
 800f466:	2f00      	cmp	r7, #0
 800f468:	f040 80b2 	bne.w	800f5d0 <acc_translation_a121_set_range_params+0x44c>
 800f46c:	9b02      	ldr	r3, [sp, #8]
 800f46e:	7b1b      	ldrb	r3, [r3, #12]
 800f470:	2b00      	cmp	r3, #0
 800f472:	f000 80c4 	beq.w	800f5fe <acc_translation_a121_set_range_params+0x47a>
 800f476:	4b07      	ldr	r3, [pc, #28]	@ (800f494 <acc_translation_a121_set_range_params+0x310>)
 800f478:	4a11      	ldr	r2, [pc, #68]	@ (800f4c0 <acc_translation_a121_set_range_params+0x33c>)
 800f47a:	691b      	ldr	r3, [r3, #16]
 800f47c:	4907      	ldr	r1, [pc, #28]	@ (800f49c <acc_translation_a121_set_range_params+0x318>)
 800f47e:	4638      	mov	r0, r7
 800f480:	4798      	blx	r3
 800f482:	2204      	movs	r2, #4
 800f484:	e6af      	b.n	800f1e6 <acc_translation_a121_set_range_params+0x62>
 800f486:	f04f 0b36 	mov.w	fp, #54	@ 0x36
 800f48a:	f04f 0a6c 	mov.w	sl, #108	@ 0x6c
 800f48e:	213d      	movs	r1, #61	@ 0x3d
 800f490:	207d      	movs	r0, #125	@ 0x7d
 800f492:	e759      	b.n	800f348 <acc_translation_a121_set_range_params+0x1c4>
 800f494:	200009ec 	.word	0x200009ec
 800f498:	08015554 	.word	0x08015554
 800f49c:	08015568 	.word	0x08015568
 800f4a0:	080155c8 	.word	0x080155c8
 800f4a4:	080155dc 	.word	0x080155dc
 800f4a8:	2aaaaaab 	.word	0x2aaaaaab
 800f4ac:	0801586c 	.word	0x0801586c
 800f4b0:	08015610 	.word	0x08015610
 800f4b4:	08015630 	.word	0x08015630
 800f4b8:	0801557c 	.word	0x0801557c
 800f4bc:	aaaaaaab 	.word	0xaaaaaaab
 800f4c0:	08015590 	.word	0x08015590
 800f4c4:	4295      	cmp	r5, r2
 800f4c6:	f000 808e 	beq.w	800f5e6 <acc_translation_a121_set_range_params+0x462>
 800f4ca:	2500      	movs	r5, #0
 800f4cc:	4649      	mov	r1, r9
 800f4ce:	9507      	str	r5, [sp, #28]
 800f4d0:	46a9      	mov	r9, r5
 800f4d2:	2601      	movs	r6, #1
 800f4d4:	1a08      	subs	r0, r1, r0
 800f4d6:	fb90 f0f8 	sdiv	r0, r0, r8
 800f4da:	b281      	uxth	r1, r0
 800f4dc:	9608      	str	r6, [sp, #32]
 800f4de:	9603      	str	r6, [sp, #12]
 800f4e0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f4e2:	e714      	b.n	800f30e <acc_translation_a121_set_range_params+0x18a>
 800f4e4:	9b07      	ldr	r3, [sp, #28]
 800f4e6:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
 800f4ea:	9b03      	ldr	r3, [sp, #12]
 800f4ec:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d06a      	beq.n	800f5ca <acc_translation_a121_set_range_params+0x446>
 800f4f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4f6:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 800f500:	f1b9 0f00 	cmp.w	r9, #0
 800f504:	d05e      	beq.n	800f5c4 <acc_translation_a121_set_range_params+0x440>
 800f506:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f508:	9a00      	ldr	r2, [sp, #0]
 800f50a:	eba3 0902 	sub.w	r9, r3, r2
 800f50e:	fb99 f8f8 	sdiv	r8, r9, r8
 800f512:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
 800f516:	e769      	b.n	800f3ec <acc_translation_a121_set_range_params+0x268>
 800f518:	9b01      	ldr	r3, [sp, #4]
 800f51a:	2b1e      	cmp	r3, #30
 800f51c:	d93e      	bls.n	800f59c <acc_translation_a121_set_range_params+0x418>
 800f51e:	f1a3 021e 	sub.w	r2, r3, #30
 800f522:	230f      	movs	r3, #15
 800f524:	f8a4 2054 	strh.w	r2, [r4, #84]	@ 0x54
 800f528:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 800f52c:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800f530:	e735      	b.n	800f39e <acc_translation_a121_set_range_params+0x21a>
 800f532:	4a36      	ldr	r2, [pc, #216]	@ (800f60c <acc_translation_a121_set_range_params+0x488>)
 800f534:	ea6f 0309 	mvn.w	r3, r9
 800f538:	fba2 2303 	umull	r2, r3, r2, r3
 800f53c:	ea6f 1313 	mvn.w	r3, r3, lsr #4
 800f540:	f1ba 0f00 	cmp.w	sl, #0
 800f544:	b21b      	sxth	r3, r3
 800f546:	ea4f 72e9 	mov.w	r2, r9, asr #31
 800f54a:	f6bf ae82 	bge.w	800f252 <acc_translation_a121_set_range_params+0xce>
 800f54e:	482f      	ldr	r0, [pc, #188]	@ (800f60c <acc_translation_a121_set_range_params+0x488>)
 800f550:	ea6f 010a 	mvn.w	r1, sl
 800f554:	fba0 0101 	umull	r0, r1, r0, r1
 800f558:	ea6f 1111 	mvn.w	r1, r1, lsr #4
 800f55c:	b209      	sxth	r1, r1
 800f55e:	ea4f 7cea 	mov.w	ip, sl, asr #31
 800f562:	e67e      	b.n	800f262 <acc_translation_a121_set_range_params+0xde>
 800f564:	f109 0518 	add.w	r5, r9, #24
 800f568:	fa1f f985 	uxth.w	r9, r5
 800f56c:	b22d      	sxth	r5, r5
 800f56e:	950a      	str	r5, [sp, #40]	@ 0x28
 800f570:	e6aa      	b.n	800f2c8 <acc_translation_a121_set_range_params+0x144>
 800f572:	f102 0018 	add.w	r0, r2, #24
 800f576:	b282      	uxth	r2, r0
 800f578:	b200      	sxth	r0, r0
 800f57a:	e68e      	b.n	800f29a <acc_translation_a121_set_range_params+0x116>
 800f57c:	4924      	ldr	r1, [pc, #144]	@ (800f610 <acc_translation_a121_set_range_params+0x48c>)
 800f57e:	4a25      	ldr	r2, [pc, #148]	@ (800f614 <acc_translation_a121_set_range_params+0x490>)
 800f580:	690e      	ldr	r6, [r1, #16]
 800f582:	4925      	ldr	r1, [pc, #148]	@ (800f618 <acc_translation_a121_set_range_params+0x494>)
 800f584:	9302      	str	r3, [sp, #8]
 800f586:	2000      	movs	r0, #0
 800f588:	47b0      	blx	r6
 800f58a:	f04f 0b36 	mov.w	fp, #54	@ 0x36
 800f58e:	9b02      	ldr	r3, [sp, #8]
 800f590:	f04f 0a6c 	mov.w	sl, #108	@ 0x6c
 800f594:	213d      	movs	r1, #61	@ 0x3d
 800f596:	207d      	movs	r0, #125	@ 0x7d
 800f598:	2700      	movs	r7, #0
 800f59a:	e6d5      	b.n	800f348 <acc_translation_a121_set_range_params+0x1c4>
 800f59c:	9b01      	ldr	r3, [sp, #4]
 800f59e:	2b0f      	cmp	r3, #15
 800f5a0:	d918      	bls.n	800f5d4 <acc_translation_a121_set_range_params+0x450>
 800f5a2:	3b0f      	subs	r3, #15
 800f5a4:	220f      	movs	r2, #15
 800f5a6:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 800f5b0:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800f5b4:	e6f3      	b.n	800f39e <acc_translation_a121_set_range_params+0x21a>
 800f5b6:	f8a4 9046 	strh.w	r9, [r4, #70]	@ 0x46
 800f5ba:	e715      	b.n	800f3e8 <acc_translation_a121_set_range_params+0x264>
 800f5bc:	9b03      	ldr	r3, [sp, #12]
 800f5be:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800f5c2:	e702      	b.n	800f3ca <acc_translation_a121_set_range_params+0x246>
 800f5c4:	f8a4 9046 	strh.w	r9, [r4, #70]	@ 0x46
 800f5c8:	e710      	b.n	800f3ec <acc_translation_a121_set_range_params+0x268>
 800f5ca:	f8a4 5042 	strh.w	r5, [r4, #66]	@ 0x42
 800f5ce:	e794      	b.n	800f4fa <acc_translation_a121_set_range_params+0x376>
 800f5d0:	2202      	movs	r2, #2
 800f5d2:	e608      	b.n	800f1e6 <acc_translation_a121_set_range_params+0x62>
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	9a01      	ldr	r2, [sp, #4]
 800f5d8:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 800f5dc:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800f5e0:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800f5e4:	e6db      	b.n	800f39e <acc_translation_a121_set_range_params+0x21a>
 800f5e6:	4589      	cmp	r9, r1
 800f5e8:	bf0c      	ite	eq
 800f5ea:	2501      	moveq	r5, #1
 800f5ec:	2500      	movne	r5, #0
 800f5ee:	d108      	bne.n	800f602 <acc_translation_a121_set_range_params+0x47e>
 800f5f0:	2100      	movs	r1, #0
 800f5f2:	e9cd 1107 	strd	r1, r1, [sp, #28]
 800f5f6:	4689      	mov	r9, r1
 800f5f8:	9103      	str	r1, [sp, #12]
 800f5fa:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f5fc:	e687      	b.n	800f30e <acc_translation_a121_set_range_params+0x18a>
 800f5fe:	2701      	movs	r7, #1
 800f600:	e5f0      	b.n	800f1e4 <acc_translation_a121_set_range_params+0x60>
 800f602:	2600      	movs	r6, #0
 800f604:	4649      	mov	r1, r9
 800f606:	9607      	str	r6, [sp, #28]
 800f608:	46b1      	mov	r9, r6
 800f60a:	e762      	b.n	800f4d2 <acc_translation_a121_set_range_params+0x34e>
 800f60c:	aaaaaaab 	.word	0xaaaaaaab
 800f610:	200009ec 	.word	0x200009ec
 800f614:	08015604 	.word	0x08015604
 800f618:	08015568 	.word	0x08015568

0800f61c <acc_translation_a121_subsweep_translate>:
 800f61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f620:	f890 c04c 	ldrb.w	ip, [r0, #76]	@ 0x4c
 800f624:	4607      	mov	r7, r0
 800f626:	8908      	ldrh	r0, [r1, #8]
 800f628:	460e      	mov	r6, r1
 800f62a:	f240 35ff 	movw	r5, #1023	@ 0x3ff
 800f62e:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800f632:	b08c      	sub	sp, #48	@ 0x30
 800f634:	f1bc 0f00 	cmp.w	ip, #0
 800f638:	bf08      	it	eq
 800f63a:	4629      	moveq	r1, r5
 800f63c:	b108      	cbz	r0, 800f642 <acc_translation_a121_subsweep_translate+0x26>
 800f63e:	4281      	cmp	r1, r0
 800f640:	d20a      	bcs.n	800f658 <acc_translation_a121_subsweep_translate+0x3c>
 800f642:	4b55      	ldr	r3, [pc, #340]	@ (800f798 <acc_translation_a121_subsweep_translate+0x17c>)
 800f644:	4a55      	ldr	r2, [pc, #340]	@ (800f79c <acc_translation_a121_subsweep_translate+0x180>)
 800f646:	691b      	ldr	r3, [r3, #16]
 800f648:	4955      	ldr	r1, [pc, #340]	@ (800f7a0 <acc_translation_a121_subsweep_translate+0x184>)
 800f64a:	2000      	movs	r0, #0
 800f64c:	4798      	blx	r3
 800f64e:	2500      	movs	r5, #0
 800f650:	4628      	mov	r0, r5
 800f652:	b00c      	add	sp, #48	@ 0x30
 800f654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f658:	461c      	mov	r4, r3
 800f65a:	7b73      	ldrb	r3, [r6, #13]
 800f65c:	4690      	mov	r8, r2
 800f65e:	b97b      	cbnz	r3, 800f680 <acc_translation_a121_subsweep_translate+0x64>
 800f660:	7bf0      	ldrb	r0, [r6, #15]
 800f662:	7bb5      	ldrb	r5, [r6, #14]
 800f664:	2d00      	cmp	r5, #0
 800f666:	d12d      	bne.n	800f6c4 <acc_translation_a121_subsweep_translate+0xa8>
 800f668:	2801      	cmp	r0, #1
 800f66a:	d00f      	beq.n	800f68c <acc_translation_a121_subsweep_translate+0x70>
 800f66c:	4b4a      	ldr	r3, [pc, #296]	@ (800f798 <acc_translation_a121_subsweep_translate+0x17c>)
 800f66e:	4a4d      	ldr	r2, [pc, #308]	@ (800f7a4 <acc_translation_a121_subsweep_translate+0x188>)
 800f670:	691b      	ldr	r3, [r3, #16]
 800f672:	494b      	ldr	r1, [pc, #300]	@ (800f7a0 <acc_translation_a121_subsweep_translate+0x184>)
 800f674:	4628      	mov	r0, r5
 800f676:	4798      	blx	r3
 800f678:	4628      	mov	r0, r5
 800f67a:	b00c      	add	sp, #48	@ 0x30
 800f67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f680:	7bf0      	ldrb	r0, [r6, #15]
 800f682:	2802      	cmp	r0, #2
 800f684:	d1ed      	bne.n	800f662 <acc_translation_a121_subsweep_translate+0x46>
 800f686:	4b44      	ldr	r3, [pc, #272]	@ (800f798 <acc_translation_a121_subsweep_translate+0x17c>)
 800f688:	4a47      	ldr	r2, [pc, #284]	@ (800f7a8 <acc_translation_a121_subsweep_translate+0x18c>)
 800f68a:	e7dc      	b.n	800f646 <acc_translation_a121_subsweep_translate+0x2a>
 800f68c:	4b47      	ldr	r3, [pc, #284]	@ (800f7ac <acc_translation_a121_subsweep_translate+0x190>)
 800f68e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f690:	9200      	str	r2, [sp, #0]
 800f692:	4631      	mov	r1, r6
 800f694:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 800f698:	4638      	mov	r0, r7
 800f69a:	4623      	mov	r3, r4
 800f69c:	f7ff fd72 	bl	800f184 <acc_translation_a121_set_range_params>
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	d0d4      	beq.n	800f64e <acc_translation_a121_subsweep_translate+0x32>
 800f6a4:	4622      	mov	r2, r4
 800f6a6:	4641      	mov	r1, r8
 800f6a8:	4630      	mov	r0, r6
 800f6aa:	f7ff fd1f 	bl	800f0ec <acc_translation_a121_set_gain_params>
 800f6ae:	4605      	mov	r5, r0
 800f6b0:	b978      	cbnz	r0, 800f6d2 <acc_translation_a121_subsweep_translate+0xb6>
 800f6b2:	4b39      	ldr	r3, [pc, #228]	@ (800f798 <acc_translation_a121_subsweep_translate+0x17c>)
 800f6b4:	4a3e      	ldr	r2, [pc, #248]	@ (800f7b0 <acc_translation_a121_subsweep_translate+0x194>)
 800f6b6:	691b      	ldr	r3, [r3, #16]
 800f6b8:	4939      	ldr	r1, [pc, #228]	@ (800f7a0 <acc_translation_a121_subsweep_translate+0x184>)
 800f6ba:	4798      	blx	r3
 800f6bc:	4628      	mov	r0, r5
 800f6be:	b00c      	add	sp, #48	@ 0x30
 800f6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6c4:	1e45      	subs	r5, r0, #1
 800f6c6:	b2ed      	uxtb	r5, r5
 800f6c8:	2d04      	cmp	r5, #4
 800f6ca:	d9df      	bls.n	800f68c <acc_translation_a121_subsweep_translate+0x70>
 800f6cc:	4b32      	ldr	r3, [pc, #200]	@ (800f798 <acc_translation_a121_subsweep_translate+0x17c>)
 800f6ce:	4a39      	ldr	r2, [pc, #228]	@ (800f7b4 <acc_translation_a121_subsweep_translate+0x198>)
 800f6d0:	e7b9      	b.n	800f646 <acc_translation_a121_subsweep_translate+0x2a>
 800f6d2:	7bf0      	ldrb	r0, [r6, #15]
 800f6d4:	aa04      	add	r2, sp, #16
 800f6d6:	4641      	mov	r1, r8
 800f6d8:	f7ff fc58 	bl	800ef8c <acc_translation_a121_profile_to_pulse_params>
 800f6dc:	4605      	mov	r5, r0
 800f6de:	b970      	cbnz	r0, 800f6fe <acc_translation_a121_subsweep_translate+0xe2>
 800f6e0:	4b2d      	ldr	r3, [pc, #180]	@ (800f798 <acc_translation_a121_subsweep_translate+0x17c>)
 800f6e2:	4a34      	ldr	r2, [pc, #208]	@ (800f7b4 <acc_translation_a121_subsweep_translate+0x198>)
 800f6e4:	691b      	ldr	r3, [r3, #16]
 800f6e6:	492e      	ldr	r1, [pc, #184]	@ (800f7a0 <acc_translation_a121_subsweep_translate+0x184>)
 800f6e8:	4798      	blx	r3
 800f6ea:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800f6ee:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800f6f2:	8562      	strh	r2, [r4, #42]	@ 0x2a
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	8523      	strh	r3, [r4, #40]	@ 0x28
 800f6f8:	b00c      	add	sp, #48	@ 0x30
 800f6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6fe:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800f702:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800f706:	8562      	strh	r2, [r4, #42]	@ 0x2a
 800f708:	8523      	strh	r3, [r4, #40]	@ 0x28
 800f70a:	f104 0108 	add.w	r1, r4, #8
 800f70e:	a804      	add	r0, sp, #16
 800f710:	f7ff fd0e 	bl	800f130 <acc_translation_a121_set_pulse_length_params>
 800f714:	2800      	cmp	r0, #0
 800f716:	d09a      	beq.n	800f64e <acc_translation_a121_subsweep_translate+0x32>
 800f718:	f104 0214 	add.w	r2, r4, #20
 800f71c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800f720:	9203      	str	r2, [sp, #12]
 800f722:	4611      	mov	r1, r2
 800f724:	a804      	add	r0, sp, #16
 800f726:	9308      	str	r3, [sp, #32]
 800f728:	f000 fdd0 	bl	80102cc <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>
 800f72c:	9a03      	ldr	r2, [sp, #12]
 800f72e:	4605      	mov	r5, r0
 800f730:	b940      	cbnz	r0, 800f744 <acc_translation_a121_subsweep_translate+0x128>
 800f732:	4b19      	ldr	r3, [pc, #100]	@ (800f798 <acc_translation_a121_subsweep_translate+0x17c>)
 800f734:	4a20      	ldr	r2, [pc, #128]	@ (800f7b8 <acc_translation_a121_subsweep_translate+0x19c>)
 800f736:	691b      	ldr	r3, [r3, #16]
 800f738:	4919      	ldr	r1, [pc, #100]	@ (800f7a0 <acc_translation_a121_subsweep_translate+0x184>)
 800f73a:	4798      	blx	r3
 800f73c:	4628      	mov	r0, r5
 800f73e:	b00c      	add	sp, #48	@ 0x30
 800f740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f744:	f1b8 0f00 	cmp.w	r8, #0
 800f748:	d00f      	beq.n	800f76a <acc_translation_a121_subsweep_translate+0x14e>
 800f74a:	f108 015c 	add.w	r1, r8, #92	@ 0x5c
 800f74e:	a804      	add	r0, sp, #16
 800f750:	f000 fcb6 	bl	80100c0 <acc_translation_pulseshaper_calc_settings>
 800f754:	b948      	cbnz	r0, 800f76a <acc_translation_a121_subsweep_translate+0x14e>
 800f756:	4910      	ldr	r1, [pc, #64]	@ (800f798 <acc_translation_a121_subsweep_translate+0x17c>)
 800f758:	4a18      	ldr	r2, [pc, #96]	@ (800f7bc <acc_translation_a121_subsweep_translate+0x1a0>)
 800f75a:	690c      	ldr	r4, [r1, #16]
 800f75c:	4910      	ldr	r1, [pc, #64]	@ (800f7a0 <acc_translation_a121_subsweep_translate+0x184>)
 800f75e:	4605      	mov	r5, r0
 800f760:	47a0      	blx	r4
 800f762:	4628      	mov	r0, r5
 800f764:	b00c      	add	sp, #48	@ 0x30
 800f766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f76a:	8933      	ldrh	r3, [r6, #8]
 800f76c:	7af2      	ldrb	r2, [r6, #11]
 800f76e:	8622      	strh	r2, [r4, #48]	@ 0x30
 800f770:	2b01      	cmp	r3, #1
 800f772:	d00c      	beq.n	800f78e <acc_translation_a121_subsweep_translate+0x172>
 800f774:	3b02      	subs	r3, #2
 800f776:	2201      	movs	r2, #1
 800f778:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 800f77a:	85e2      	strh	r2, [r4, #46]	@ 0x2e
 800f77c:	7b73      	ldrb	r3, [r6, #13]
 800f77e:	80e3      	strh	r3, [r4, #6]
 800f780:	4628      	mov	r0, r5
 800f782:	f083 0301 	eor.w	r3, r3, #1
 800f786:	8663      	strh	r3, [r4, #50]	@ 0x32
 800f788:	b00c      	add	sp, #48	@ 0x30
 800f78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f78e:	2300      	movs	r3, #0
 800f790:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 800f792:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 800f794:	e7f2      	b.n	800f77c <acc_translation_a121_subsweep_translate+0x160>
 800f796:	bf00      	nop
 800f798:	200009ec 	.word	0x200009ec
 800f79c:	08015648 	.word	0x08015648
 800f7a0:	08015568 	.word	0x08015568
 800f7a4:	08015684 	.word	0x08015684
 800f7a8:	08015658 	.word	0x08015658
 800f7ac:	08015878 	.word	0x08015878
 800f7b0:	080156bc 	.word	0x080156bc
 800f7b4:	080156ac 	.word	0x080156ac
 800f7b8:	080156d4 	.word	0x080156d4
 800f7bc:	080156f4 	.word	0x080156f4

0800f7c0 <acc_translation_a121_point_to_coarse>:
 800f7c0:	2800      	cmp	r0, #0
 800f7c2:	db04      	blt.n	800f7ce <acc_translation_a121_point_to_coarse+0xe>
 800f7c4:	b209      	sxth	r1, r1
 800f7c6:	fb90 f0f1 	sdiv	r0, r0, r1
 800f7ca:	b200      	sxth	r0, r0
 800f7cc:	4770      	bx	lr
 800f7ce:	43c3      	mvns	r3, r0
 800f7d0:	b208      	sxth	r0, r1
 800f7d2:	fb93 f0f0 	sdiv	r0, r3, r0
 800f7d6:	43c0      	mvns	r0, r0
 800f7d8:	b200      	sxth	r0, r0
 800f7da:	4770      	bx	lr

0800f7dc <acc_translation_a121_point_in_coarse>:
 800f7dc:	fb90 f3f1 	sdiv	r3, r0, r1
 800f7e0:	fb03 0011 	mls	r0, r3, r1, r0
 800f7e4:	0403      	lsls	r3, r0, #16
 800f7e6:	bf48      	it	mi
 800f7e8:	1840      	addmi	r0, r0, r1
 800f7ea:	b280      	uxth	r0, r0
 800f7ec:	4770      	bx	lr
 800f7ee:	bf00      	nop

0800f7f0 <acc_translation_a121_calculate_minimum_sweep_period>:
 800f7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7f4:	f8b1 31ac 	ldrh.w	r3, [r1, #428]	@ 0x1ac
 800f7f8:	f8b1 11a4 	ldrh.w	r1, [r1, #420]	@ 0x1a4
 800f7fc:	ed2d 8b0a 	vpush	{d8-d12}
 800f800:	2b01      	cmp	r3, #1
 800f802:	b088      	sub	sp, #32
 800f804:	4680      	mov	r8, r0
 800f806:	4617      	mov	r7, r2
 800f808:	f000 80b9 	beq.w	800f97e <acc_translation_a121_calculate_minimum_sweep_period+0x18e>
 800f80c:	ee07 1a90 	vmov	s15, r1
 800f810:	eddf 9a5f 	vldr	s19, [pc, #380]	@ 800f990 <acc_translation_a121_calculate_minimum_sweep_period+0x1a0>
 800f814:	eef8 aa67 	vcvt.f32.u32	s21, s15
 800f818:	eeb7 9a08 	vmov.f32	s18, #120	@ 0x3fc00000  1.5
 800f81c:	eef2 ca02 	vmov.f32	s25, #34	@ 0x41100000  9.0
 800f820:	f7ff fba2 	bl	800ef68 <get_pll_freq>
 800f824:	f898 3050 	ldrb.w	r3, [r8, #80]	@ 0x50
 800f828:	2b02      	cmp	r3, #2
 800f82a:	eef0 8a40 	vmov.f32	s17, s0
 800f82e:	f200 8099 	bhi.w	800f964 <acc_translation_a121_calculate_minimum_sweep_period+0x174>
 800f832:	4958      	ldr	r1, [pc, #352]	@ (800f994 <acc_translation_a121_calculate_minimum_sweep_period+0x1a4>)
 800f834:	4a58      	ldr	r2, [pc, #352]	@ (800f998 <acc_translation_a121_calculate_minimum_sweep_period+0x1a8>)
 800f836:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800f83a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f83e:	edd1 ba00 	vldr	s23, [r1]
 800f842:	ed93 ca00 	vldr	s24, [r3]
 800f846:	f04f 0901 	mov.w	r9, #1
 800f84a:	f898 304e 	ldrb.w	r3, [r8, #78]	@ 0x4e
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d068      	beq.n	800f924 <acc_translation_a121_calculate_minimum_sweep_period+0x134>
 800f852:	2500      	movs	r5, #0
 800f854:	ed9f 8a51 	vldr	s16, [pc, #324]	@ 800f99c <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800f858:	4e51      	ldr	r6, [pc, #324]	@ (800f9a0 <acc_translation_a121_calculate_minimum_sweep_period+0x1b0>)
 800f85a:	ed9f ba52 	vldr	s22, [pc, #328]	@ 800f9a4 <acc_translation_a121_calculate_minimum_sweep_period+0x1b4>
 800f85e:	ed9f aa52 	vldr	s20, [pc, #328]	@ 800f9a8 <acc_translation_a121_calculate_minimum_sweep_period+0x1b8>
 800f862:	462c      	mov	r4, r5
 800f864:	e03d      	b.n	800f8e2 <acc_translation_a121_calculate_minimum_sweep_period+0xf2>
 800f866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f86a:	ee07 3a90 	vmov	s15, r3
 800f86e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f872:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 800f876:	4444      	add	r4, r8
 800f878:	f10a 0302 	add.w	r3, sl, #2
 800f87c:	8920      	ldrh	r0, [r4, #8]
 800f87e:	88a1      	ldrh	r1, [r4, #4]
 800f880:	f898 204e 	ldrb.w	r2, [r8, #78]	@ 0x4e
 800f884:	005b      	lsls	r3, r3, #1
 800f886:	b29b      	uxth	r3, r3
 800f888:	fb00 3303 	mla	r3, r0, r3, r3
 800f88c:	3302      	adds	r3, #2
 800f88e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 800f892:	005b      	lsls	r3, r3, #1
 800f894:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800f898:	b29b      	uxth	r3, r3
 800f89a:	ee87 6a0a 	vdiv.f32	s12, s14, s20
 800f89e:	f10a 0a18 	add.w	sl, sl, #24
 800f8a2:	fa1f fa8a 	uxth.w	sl, sl
 800f8a6:	3501      	adds	r5, #1
 800f8a8:	b2ec      	uxtb	r4, r5
 800f8aa:	42a2      	cmp	r2, r4
 800f8ac:	ee07 3a90 	vmov	s15, r3
 800f8b0:	ee07 aa10 	vmov	s14, sl
 800f8b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8b8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800f8bc:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800f8c0:	eec7 5a06 	vdiv.f32	s11, s14, s12
 800f8c4:	ee07 1a90 	vmov	s15, r1
 800f8c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f8d0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800f8d4:	ee77 7aa9 	vadd.f32	s15, s15, s19
 800f8d8:	ee77 7a89 	vadd.f32	s15, s15, s18
 800f8dc:	ee38 8a27 	vadd.f32	s16, s16, s15
 800f8e0:	d922      	bls.n	800f928 <acc_translation_a121_calculate_minimum_sweep_period+0x138>
 800f8e2:	eb08 1304 	add.w	r3, r8, r4, lsl #4
 800f8e6:	466a      	mov	r2, sp
 800f8e8:	2100      	movs	r1, #0
 800f8ea:	7bd8      	ldrb	r0, [r3, #15]
 800f8ec:	f7ff fb4e 	bl	800ef8c <acc_translation_a121_profile_to_pulse_params>
 800f8f0:	0124      	lsls	r4, r4, #4
 800f8f2:	4a2e      	ldr	r2, [pc, #184]	@ (800f9ac <acc_translation_a121_calculate_minimum_sweep_period+0x1bc>)
 800f8f4:	492e      	ldr	r1, [pc, #184]	@ (800f9b0 <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 800f8f6:	4682      	mov	sl, r0
 800f8f8:	b910      	cbnz	r0, 800f900 <acc_translation_a121_calculate_minimum_sweep_period+0x110>
 800f8fa:	6933      	ldr	r3, [r6, #16]
 800f8fc:	4798      	blx	r3
 800f8fe:	46d1      	mov	r9, sl
 800f900:	eb08 0304 	add.w	r3, r8, r4
 800f904:	4a2b      	ldr	r2, [pc, #172]	@ (800f9b4 <acc_translation_a121_calculate_minimum_sweep_period+0x1c4>)
 800f906:	7b9b      	ldrb	r3, [r3, #14]
 800f908:	f8bd a01e 	ldrh.w	sl, [sp, #30]
 800f90c:	2b05      	cmp	r3, #5
 800f90e:	d9aa      	bls.n	800f866 <acc_translation_a121_calculate_minimum_sweep_period+0x76>
 800f910:	6933      	ldr	r3, [r6, #16]
 800f912:	4a29      	ldr	r2, [pc, #164]	@ (800f9b8 <acc_translation_a121_calculate_minimum_sweep_period+0x1c8>)
 800f914:	4926      	ldr	r1, [pc, #152]	@ (800f9b0 <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 800f916:	2000      	movs	r0, #0
 800f918:	4798      	blx	r3
 800f91a:	f04f 0900 	mov.w	r9, #0
 800f91e:	eef0 7a4b 	vmov.f32	s15, s22
 800f922:	e7a6      	b.n	800f872 <acc_translation_a121_calculate_minimum_sweep_period+0x82>
 800f924:	ed9f 8a1d 	vldr	s16, [pc, #116]	@ 800f99c <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800f928:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800f9bc <acc_translation_a121_calculate_minimum_sweep_period+0x1cc>
 800f92c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800f9a8 <acc_translation_a121_calculate_minimum_sweep_period+0x1b8>
 800f930:	ee88 6aa7 	vdiv.f32	s12, s17, s15
 800f934:	4648      	mov	r0, r9
 800f936:	eef1 7a0c 	vmov.f32	s15, #28	@ 0x40e00000  7.0
 800f93a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800f93e:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800f942:	ee7b ba8c 	vadd.f32	s23, s23, s24
 800f946:	eeca 7a87 	vdiv.f32	s15, s21, s14
 800f94a:	ee77 caac 	vadd.f32	s25, s15, s25
 800f94e:	ee3c 8a88 	vadd.f32	s16, s25, s16
 800f952:	ee78 ba2b 	vadd.f32	s23, s16, s23
 800f956:	edc7 ba00 	vstr	s23, [r7]
 800f95a:	b008      	add	sp, #32
 800f95c:	ecbd 8b0a 	vpop	{d8-d12}
 800f960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f964:	4b0e      	ldr	r3, [pc, #56]	@ (800f9a0 <acc_translation_a121_calculate_minimum_sweep_period+0x1b0>)
 800f966:	ed9f ca0d 	vldr	s24, [pc, #52]	@ 800f99c <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800f96a:	4a15      	ldr	r2, [pc, #84]	@ (800f9c0 <acc_translation_a121_calculate_minimum_sweep_period+0x1d0>)
 800f96c:	691b      	ldr	r3, [r3, #16]
 800f96e:	4910      	ldr	r1, [pc, #64]	@ (800f9b0 <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 800f970:	2000      	movs	r0, #0
 800f972:	4798      	blx	r3
 800f974:	eef0 ba4c 	vmov.f32	s23, s24
 800f978:	f04f 0900 	mov.w	r9, #0
 800f97c:	e765      	b.n	800f84a <acc_translation_a121_calculate_minimum_sweep_period+0x5a>
 800f97e:	ed9f 9a07 	vldr	s18, [pc, #28]	@ 800f99c <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800f982:	eef0 9a49 	vmov.f32	s19, s18
 800f986:	eef0 ca49 	vmov.f32	s25, s18
 800f98a:	eef0 aa49 	vmov.f32	s21, s18
 800f98e:	e747      	b.n	800f820 <acc_translation_a121_calculate_minimum_sweep_period+0x30>
 800f990:	419d999a 	.word	0x419d999a
 800f994:	0801588c 	.word	0x0801588c
 800f998:	08015898 	.word	0x08015898
 800f99c:	00000000 	.word	0x00000000
 800f9a0:	200009ec 	.word	0x200009ec
 800f9a4:	43000000 	.word	0x43000000
 800f9a8:	49742400 	.word	0x49742400
 800f9ac:	080156ac 	.word	0x080156ac
 800f9b0:	08015568 	.word	0x08015568
 800f9b4:	0801586c 	.word	0x0801586c
 800f9b8:	08015604 	.word	0x08015604
 800f9bc:	43200000 	.word	0x43200000
 800f9c0:	08015720 	.word	0x08015720

0800f9c4 <acc_translation_a121_translate>:
 800f9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c8:	ed2d 8b06 	vpush	{d8-d10}
 800f9cc:	4605      	mov	r5, r0
 800f9ce:	b091      	sub	sp, #68	@ 0x44
 800f9d0:	f890 004e 	ldrb.w	r0, [r0, #78]	@ 0x4e
 800f9d4:	f895 404c 	ldrb.w	r4, [r5, #76]	@ 0x4c
 800f9d8:	9408      	str	r4, [sp, #32]
 800f9da:	2804      	cmp	r0, #4
 800f9dc:	f8b5 4048 	ldrh.w	r4, [r5, #72]	@ 0x48
 800f9e0:	9406      	str	r4, [sp, #24]
 800f9e2:	468b      	mov	fp, r1
 800f9e4:	4614      	mov	r4, r2
 800f9e6:	4698      	mov	r8, r3
 800f9e8:	f200 8128 	bhi.w	800fc3c <acc_translation_a121_translate+0x278>
 800f9ec:	edd5 7a10 	vldr	s15, [r5, #64]	@ 0x40
 800f9f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9f8:	f100 8169 	bmi.w	800fcce <acc_translation_a121_translate+0x30a>
 800f9fc:	f895 3056 	ldrb.w	r3, [r5, #86]	@ 0x56
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	f040 81a5 	bne.w	800fd50 <acc_translation_a121_translate+0x38c>
 800fa06:	f7fe f92b 	bl	800dc60 <acc_rss_integration_get_sensor_reference_frequency>
 800fa0a:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800fa0e:	ee07 0a10 	vmov	s14, r0
 800fa12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fa16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa1a:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 800fa1e:	f340 81d4 	ble.w	800fdca <acc_translation_a121_translate+0x406>
 800fa22:	eec8 8a27 	vdiv.f32	s17, s16, s15
 800fa26:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fa2a:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800fa2e:	f100 81e3 	bmi.w	800fdf8 <acc_translation_a121_translate+0x434>
 800fa32:	ee18 0a90 	vmov	r0, s17
 800fa36:	f7f1 f8c7 	bl	8000bc8 <__aeabi_f2ulz>
 800fa3a:	2901      	cmp	r1, #1
 800fa3c:	bf08      	it	eq
 800fa3e:	2800      	cmpeq	r0, #0
 800fa40:	f080 81da 	bcs.w	800fdf8 <acc_translation_a121_translate+0x434>
 800fa44:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f000 81a9 	beq.w	800fda0 <acc_translation_a121_translate+0x3dc>
 800fa4e:	4bc9      	ldr	r3, [pc, #804]	@ (800fd74 <acc_translation_a121_translate+0x3b0>)
 800fa50:	4ac9      	ldr	r2, [pc, #804]	@ (800fd78 <acc_translation_a121_translate+0x3b4>)
 800fa52:	691b      	ldr	r3, [r3, #16]
 800fa54:	49c9      	ldr	r1, [pc, #804]	@ (800fd7c <acc_translation_a121_translate+0x3b8>)
 800fa56:	2000      	movs	r0, #0
 800fa58:	4798      	blx	r3
 800fa5a:	9b06      	ldr	r3, [sp, #24]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	f000 810a 	beq.w	800fc76 <acc_translation_a121_translate+0x2b2>
 800fa62:	f895 304e 	ldrb.w	r3, [r5, #78]	@ 0x4e
 800fa66:	9304      	str	r3, [sp, #16]
 800fa68:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	f000 8108 	beq.w	800fc82 <acc_translation_a121_translate+0x2be>
 800fa72:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fa74:	2300      	movs	r3, #0
 800fa76:	7113      	strb	r3, [r2, #4]
 800fa78:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800fa7c:	f1bb 0f00 	cmp.w	fp, #0
 800fa80:	f000 82da 	beq.w	8010038 <acc_translation_a121_translate+0x674>
 800fa84:	4658      	mov	r0, fp
 800fa86:	4621      	mov	r1, r4
 800fa88:	f7ff faf6 	bl	800f078 <acc_translation_a121_set_calibration_params>
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	2301      	movs	r3, #1
 800fa90:	4617      	mov	r7, r2
 800fa92:	f8a8 2002 	strh.w	r2, [r8, #2]
 800fa96:	9202      	str	r2, [sp, #8]
 800fa98:	4610      	mov	r0, r2
 800fa9a:	f8a8 300a 	strh.w	r3, [r8, #10]
 800fa9e:	f04f 0c02 	mov.w	ip, #2
 800faa2:	f8b4 11ac 	ldrh.w	r1, [r4, #428]	@ 0x1ac
 800faa6:	2901      	cmp	r1, #1
 800faa8:	d104      	bne.n	800fab4 <acc_translation_a121_translate+0xf0>
 800faaa:	9902      	ldr	r1, [sp, #8]
 800faac:	9e06      	ldr	r6, [sp, #24]
 800faae:	fb06 f101 	mul.w	r1, r6, r1
 800fab2:	9102      	str	r1, [sp, #8]
 800fab4:	f8b5 1054 	ldrh.w	r1, [r5, #84]	@ 0x54
 800fab8:	f895 e052 	ldrb.w	lr, [r5, #82]	@ 0x52
 800fabc:	f895 9053 	ldrb.w	r9, [r5, #83]	@ 0x53
 800fac0:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800fac4:	f8a4 e19e 	strh.w	lr, [r4, #414]	@ 0x19e
 800fac8:	ea4f 0a51 	mov.w	sl, r1, lsr #1
 800facc:	3903      	subs	r1, #3
 800face:	9103      	str	r1, [sp, #12]
 800fad0:	9902      	ldr	r1, [sp, #8]
 800fad2:	f8a4 71a0 	strh.w	r7, [r4, #416]	@ 0x1a0
 800fad6:	f64f 7eff 	movw	lr, #65535	@ 0xffff
 800fada:	4571      	cmp	r1, lr
 800fadc:	bf28      	it	cs
 800fade:	4671      	movcs	r1, lr
 800fae0:	468e      	mov	lr, r1
 800fae2:	f1aa 0a03 	sub.w	sl, sl, #3
 800fae6:	9903      	ldr	r1, [sp, #12]
 800fae8:	f8a4 a1aa 	strh.w	sl, [r4, #426]	@ 0x1aa
 800faec:	f089 0901 	eor.w	r9, r9, #1
 800faf0:	f8a4 91a6 	strh.w	r9, [r4, #422]	@ 0x1a6
 800faf4:	f8a4 11a8 	strh.w	r1, [r4, #424]	@ 0x1a8
 800faf8:	f8a4 e1a4 	strh.w	lr, [r4, #420]	@ 0x1a4
 800fafc:	f8a8 200c 	strh.w	r2, [r8, #12]
 800fb00:	f8a8 3004 	strh.w	r3, [r8, #4]
 800fb04:	f8a8 c006 	strh.w	ip, [r8, #6]
 800fb08:	2e00      	cmp	r6, #0
 800fb0a:	f000 811c 	beq.w	800fd46 <acc_translation_a121_translate+0x382>
 800fb0e:	3341      	adds	r3, #65	@ 0x41
 800fb10:	2240      	movs	r2, #64	@ 0x40
 800fb12:	f8a8 3000 	strh.w	r3, [r8]
 800fb16:	f8a8 2008 	strh.w	r2, [r8, #8]
 800fb1a:	2601      	movs	r6, #1
 800fb1c:	f8a4 61c0 	strh.w	r6, [r4, #448]	@ 0x1c0
 800fb20:	f1bb 0f00 	cmp.w	fp, #0
 800fb24:	d003      	beq.n	800fb2e <acc_translation_a121_translate+0x16a>
 800fb26:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800fb2a:	f8a4 31c2 	strh.w	r3, [r4, #450]	@ 0x1c2
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	f040 80e5 	bne.w	800fcfe <acc_translation_a121_translate+0x33a>
 800fb34:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fb36:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	6013      	str	r3, [r2, #0]
 800fb3e:	9b08      	ldr	r3, [sp, #32]
 800fb40:	f8a4 31b2 	strh.w	r3, [r4, #434]	@ 0x1b2
 800fb44:	9b06      	ldr	r3, [sp, #24]
 800fb46:	2b01      	cmp	r3, #1
 800fb48:	f240 80f7 	bls.w	800fd3a <acc_translation_a121_translate+0x376>
 800fb4c:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 800fb50:	2201      	movs	r2, #1
 800fb52:	3b02      	subs	r3, #2
 800fb54:	f8a4 31ae 	strh.w	r3, [r4, #430]	@ 0x1ae
 800fb58:	f8a4 21b0 	strh.w	r2, [r4, #432]	@ 0x1b0
 800fb5c:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 800fd80 <acc_translation_a121_translate+0x3bc>
 800fb60:	ed9f 6a88 	vldr	s12, [pc, #544]	@ 800fd84 <acc_translation_a121_translate+0x3c0>
 800fb64:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800fb68:	ee28 7a07 	vmul.f32	s14, s16, s14
 800fb6c:	ee68 7a27 	vmul.f32	s15, s16, s15
 800fb70:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800fb74:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800fb78:	eec8 7a06 	vdiv.f32	s15, s16, s12
 800fb7c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800fb80:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fb84:	ee76 6a86 	vadd.f32	s13, s13, s12
 800fb88:	ee77 7a86 	vadd.f32	s15, s15, s12
 800fb8c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800fb90:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800fb94:	ee17 2a10 	vmov	r2, s14
 800fb98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb9c:	ee16 3a90 	vmov	r3, s13
 800fba0:	eef5 5a40 	vcmp.f32	s11, #0.0
 800fba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fba8:	f8a4 21b6 	strh.w	r2, [r4, #438]	@ 0x1b6
 800fbac:	ee17 2a90 	vmov	r2, s15
 800fbb0:	f8a4 31b8 	strh.w	r3, [r4, #440]	@ 0x1b8
 800fbb4:	bf14      	ite	ne
 800fbb6:	2301      	movne	r3, #1
 800fbb8:	2300      	moveq	r3, #0
 800fbba:	f8a4 21b4 	strh.w	r2, [r4, #436]	@ 0x1b4
 800fbbe:	8723      	strh	r3, [r4, #56]	@ 0x38
 800fbc0:	2800      	cmp	r0, #0
 800fbc2:	f000 808b 	beq.w	800fcdc <acc_translation_a121_translate+0x318>
 800fbc6:	eef5 5a40 	vcmp.f32	s11, #0.0
 800fbca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbce:	d00a      	beq.n	800fbe6 <acc_translation_a121_translate+0x222>
 800fbd0:	eec8 7a25 	vdiv.f32	s15, s16, s11
 800fbd4:	ee37 6a86 	vadd.f32	s12, s15, s12
 800fbd8:	eefc 7ac6 	vcvt.u32.f32	s15, s12
 800fbdc:	ee17 3a90 	vmov	r3, s15
 800fbe0:	0c1a      	lsrs	r2, r3, #16
 800fbe2:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 800fbe4:	8762      	strh	r2, [r4, #58]	@ 0x3a
 800fbe6:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800fbea:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800fbee:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 800fbf2:	8623      	strh	r3, [r4, #48]	@ 0x30
 800fbf4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fbf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbfc:	bf14      	ite	ne
 800fbfe:	2301      	movne	r3, #1
 800fc00:	2300      	moveq	r3, #0
 800fc02:	8662      	strh	r2, [r4, #50]	@ 0x32
 800fc04:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800fc06:	d006      	beq.n	800fc16 <acc_translation_a121_translate+0x252>
 800fc08:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800fc0c:	ee17 3a90 	vmov	r3, s15
 800fc10:	0c1a      	lsrs	r2, r3, #16
 800fc12:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 800fc14:	85a2      	strh	r2, [r4, #44]	@ 0x2c
 800fc16:	f895 3051 	ldrb.w	r3, [r5, #81]	@ 0x51
 800fc1a:	f8a4 31be 	strh.w	r3, [r4, #446]	@ 0x1be
 800fc1e:	2101      	movs	r1, #1
 800fc20:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800fc24:	f640 0301 	movw	r3, #2049	@ 0x801
 800fc28:	84a1      	strh	r1, [r4, #36]	@ 0x24
 800fc2a:	f8a4 21ba 	strh.w	r2, [r4, #442]	@ 0x1ba
 800fc2e:	f8a4 31bc 	strh.w	r3, [r4, #444]	@ 0x1bc
 800fc32:	b011      	add	sp, #68	@ 0x44
 800fc34:	ecbd 8b06 	vpop	{d8-d10}
 800fc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc3c:	4b4d      	ldr	r3, [pc, #308]	@ (800fd74 <acc_translation_a121_translate+0x3b0>)
 800fc3e:	4a52      	ldr	r2, [pc, #328]	@ (800fd88 <acc_translation_a121_translate+0x3c4>)
 800fc40:	691b      	ldr	r3, [r3, #16]
 800fc42:	494e      	ldr	r1, [pc, #312]	@ (800fd7c <acc_translation_a121_translate+0x3b8>)
 800fc44:	2000      	movs	r0, #0
 800fc46:	4798      	blx	r3
 800fc48:	f7fe f80a 	bl	800dc60 <acc_rss_integration_get_sensor_reference_frequency>
 800fc4c:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800fc50:	ee07 0a10 	vmov	s14, r0
 800fc54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc5c:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 800fc60:	dd32      	ble.n	800fcc8 <acc_translation_a121_translate+0x304>
 800fc62:	eec8 8a27 	vdiv.f32	s17, s16, s15
 800fc66:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fc6a:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800fc6e:	9b06      	ldr	r3, [sp, #24]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	f47f aef6 	bne.w	800fa62 <acc_translation_a121_translate+0x9e>
 800fc76:	9304      	str	r3, [sp, #16]
 800fc78:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	f47f aef8 	bne.w	800fa72 <acc_translation_a121_translate+0xae>
 800fc82:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 800fc86:	2a02      	cmp	r2, #2
 800fc88:	f040 80ef 	bne.w	800fe6a <acc_translation_a121_translate+0x4a6>
 800fc8c:	f895 204e 	ldrb.w	r2, [r5, #78]	@ 0x4e
 800fc90:	2a01      	cmp	r2, #1
 800fc92:	d069      	beq.n	800fd68 <acc_translation_a121_translate+0x3a4>
 800fc94:	2200      	movs	r2, #0
 800fc96:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800fc98:	7102      	strb	r2, [r0, #4]
 800fc9a:	f8a4 21ac 	strh.w	r2, [r4, #428]	@ 0x1ac
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	f43f aeec 	beq.w	800fa7c <acc_translation_a121_translate+0xb8>
 800fca4:	f895 304f 	ldrb.w	r3, [r5, #79]	@ 0x4f
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	f000 814f 	beq.w	800ff4c <acc_translation_a121_translate+0x588>
 800fcae:	2b02      	cmp	r3, #2
 800fcb0:	f000 80f3 	beq.w	800fe9a <acc_translation_a121_translate+0x4d6>
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	f000 80dd 	beq.w	800fe74 <acc_translation_a121_translate+0x4b0>
 800fcba:	4b2e      	ldr	r3, [pc, #184]	@ (800fd74 <acc_translation_a121_translate+0x3b0>)
 800fcbc:	4a33      	ldr	r2, [pc, #204]	@ (800fd8c <acc_translation_a121_translate+0x3c8>)
 800fcbe:	691b      	ldr	r3, [r3, #16]
 800fcc0:	492e      	ldr	r1, [pc, #184]	@ (800fd7c <acc_translation_a121_translate+0x3b8>)
 800fcc2:	2000      	movs	r0, #0
 800fcc4:	4798      	blx	r3
 800fcc6:	e6d9      	b.n	800fa7c <acc_translation_a121_translate+0xb8>
 800fcc8:	eddf 8a33 	vldr	s17, [pc, #204]	@ 800fd98 <acc_translation_a121_translate+0x3d4>
 800fccc:	e7cf      	b.n	800fc6e <acc_translation_a121_translate+0x2aa>
 800fcce:	4b29      	ldr	r3, [pc, #164]	@ (800fd74 <acc_translation_a121_translate+0x3b0>)
 800fcd0:	4a2f      	ldr	r2, [pc, #188]	@ (800fd90 <acc_translation_a121_translate+0x3cc>)
 800fcd2:	691b      	ldr	r3, [r3, #16]
 800fcd4:	4929      	ldr	r1, [pc, #164]	@ (800fd7c <acc_translation_a121_translate+0x3b8>)
 800fcd6:	2000      	movs	r0, #0
 800fcd8:	4798      	blx	r3
 800fcda:	e7b5      	b.n	800fc48 <acc_translation_a121_translate+0x284>
 800fcdc:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800fce0:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800fce4:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 800fce8:	8623      	strh	r3, [r4, #48]	@ 0x30
 800fcea:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fcee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf2:	bf14      	ite	ne
 800fcf4:	2301      	movne	r3, #1
 800fcf6:	2300      	moveq	r3, #0
 800fcf8:	8662      	strh	r2, [r4, #50]	@ 0x32
 800fcfa:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800fcfc:	e78b      	b.n	800fc16 <acc_translation_a121_translate+0x252>
 800fcfe:	f895 304d 	ldrb.w	r3, [r5, #77]	@ 0x4d
 800fd02:	2600      	movs	r6, #0
 800fd04:	a80b      	add	r0, sp, #44	@ 0x2c
 800fd06:	f504 71d1 	add.w	r1, r4, #418	@ 0x1a2
 800fd0a:	e9cd 630e 	strd	r6, r3, [sp, #56]	@ 0x38
 800fd0e:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 800fd12:	f88d 602c 	strb.w	r6, [sp, #44]	@ 0x2c
 800fd16:	f000 fad9 	bl	80102cc <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>
 800fd1a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	6013      	str	r3, [r2, #0]
 800fd20:	b110      	cbz	r0, 800fd28 <acc_translation_a121_translate+0x364>
 800fd22:	9b04      	ldr	r3, [sp, #16]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d16e      	bne.n	800fe06 <acc_translation_a121_translate+0x442>
 800fd28:	9b08      	ldr	r3, [sp, #32]
 800fd2a:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800fd2e:	f8a4 31b2 	strh.w	r3, [r4, #434]	@ 0x1b2
 800fd32:	9b06      	ldr	r3, [sp, #24]
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	f63f af09 	bhi.w	800fb4c <acc_translation_a121_translate+0x188>
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	f8a4 31ae 	strh.w	r3, [r4, #430]	@ 0x1ae
 800fd40:	f8a4 31b0 	strh.w	r3, [r4, #432]	@ 0x1b0
 800fd44:	e70a      	b.n	800fb5c <acc_translation_a121_translate+0x198>
 800fd46:	f8a8 6008 	strh.w	r6, [r8, #8]
 800fd4a:	f8a8 c000 	strh.w	ip, [r8]
 800fd4e:	e6e5      	b.n	800fb1c <acc_translation_a121_translate+0x158>
 800fd50:	f895 304b 	ldrb.w	r3, [r5, #75]	@ 0x4b
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	f43f ae56 	beq.w	800fa06 <acc_translation_a121_translate+0x42>
 800fd5a:	4b06      	ldr	r3, [pc, #24]	@ (800fd74 <acc_translation_a121_translate+0x3b0>)
 800fd5c:	4a0d      	ldr	r2, [pc, #52]	@ (800fd94 <acc_translation_a121_translate+0x3d0>)
 800fd5e:	691b      	ldr	r3, [r3, #16]
 800fd60:	4906      	ldr	r1, [pc, #24]	@ (800fd7c <acc_translation_a121_translate+0x3b8>)
 800fd62:	2000      	movs	r0, #0
 800fd64:	4798      	blx	r3
 800fd66:	e76f      	b.n	800fc48 <acc_translation_a121_translate+0x284>
 800fd68:	7be9      	ldrb	r1, [r5, #15]
 800fd6a:	3901      	subs	r1, #1
 800fd6c:	2901      	cmp	r1, #1
 800fd6e:	d892      	bhi.n	800fc96 <acc_translation_a121_translate+0x2d2>
 800fd70:	e790      	b.n	800fc94 <acc_translation_a121_translate+0x2d0>
 800fd72:	bf00      	nop
 800fd74:	200009ec 	.word	0x200009ec
 800fd78:	080157b0 	.word	0x080157b0
 800fd7c:	08015568 	.word	0x08015568
 800fd80:	43960000 	.word	0x43960000
 800fd84:	49742400 	.word	0x49742400
 800fd88:	08015740 	.word	0x08015740
 800fd8c:	0801582c 	.word	0x0801582c
 800fd90:	0801575c 	.word	0x0801575c
 800fd94:	08015770 	.word	0x08015770
 800fd98:	00000000 	.word	0x00000000
 800fd9c:	ed5f 8a02 	vldr	s17, [pc, #-8]	@ 800fd98 <acc_translation_a121_translate+0x3d4>
 800fda0:	f895 104f 	ldrb.w	r1, [r5, #79]	@ 0x4f
 800fda4:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 800fda8:	9806      	ldr	r0, [sp, #24]
 800fdaa:	2800      	cmp	r0, #0
 800fdac:	f000 8161 	beq.w	8010072 <acc_translation_a121_translate+0x6ae>
 800fdb0:	f895 004e 	ldrb.w	r0, [r5, #78]	@ 0x4e
 800fdb4:	9004      	str	r0, [sp, #16]
 800fdb6:	4291      	cmp	r1, r2
 800fdb8:	f240 814b 	bls.w	8010052 <acc_translation_a121_translate+0x68e>
 800fdbc:	4bb4      	ldr	r3, [pc, #720]	@ (8010090 <acc_translation_a121_translate+0x6cc>)
 800fdbe:	4ab5      	ldr	r2, [pc, #724]	@ (8010094 <acc_translation_a121_translate+0x6d0>)
 800fdc0:	691b      	ldr	r3, [r3, #16]
 800fdc2:	49b5      	ldr	r1, [pc, #724]	@ (8010098 <acc_translation_a121_translate+0x6d4>)
 800fdc4:	2000      	movs	r0, #0
 800fdc6:	4798      	blx	r3
 800fdc8:	e756      	b.n	800fc78 <acc_translation_a121_translate+0x2b4>
 800fdca:	d413      	bmi.n	800fdf4 <acc_translation_a121_translate+0x430>
 800fdcc:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d0e3      	beq.n	800fd9c <acc_translation_a121_translate+0x3d8>
 800fdd4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fdd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fddc:	d107      	bne.n	800fdee <acc_translation_a121_translate+0x42a>
 800fdde:	edd5 7a10 	vldr	s15, [r5, #64]	@ 0x40
 800fde2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdea:	f040 811b 	bne.w	8010024 <acc_translation_a121_translate+0x660>
 800fdee:	eddf 8aab 	vldr	s17, [pc, #684]	@ 801009c <acc_translation_a121_translate+0x6d8>
 800fdf2:	e62c      	b.n	800fa4e <acc_translation_a121_translate+0x8a>
 800fdf4:	eddf 8aa9 	vldr	s17, [pc, #676]	@ 801009c <acc_translation_a121_translate+0x6d8>
 800fdf8:	4ba5      	ldr	r3, [pc, #660]	@ (8010090 <acc_translation_a121_translate+0x6cc>)
 800fdfa:	4aa9      	ldr	r2, [pc, #676]	@ (80100a0 <acc_translation_a121_translate+0x6dc>)
 800fdfc:	691b      	ldr	r3, [r3, #16]
 800fdfe:	49a6      	ldr	r1, [pc, #664]	@ (8010098 <acc_translation_a121_translate+0x6d4>)
 800fe00:	2000      	movs	r0, #0
 800fe02:	4798      	blx	r3
 800fe04:	e733      	b.n	800fc6e <acc_translation_a121_translate+0x2aa>
 800fe06:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fe08:	4621      	mov	r1, r4
 800fe0a:	4628      	mov	r0, r5
 800fe0c:	f7ff fcf0 	bl	800f7f0 <acc_translation_a121_calculate_minimum_sweep_period>
 800fe10:	2800      	cmp	r0, #0
 800fe12:	d089      	beq.n	800fd28 <acc_translation_a121_translate+0x364>
 800fe14:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 800fe18:	eddf 7aa2 	vldr	s15, [pc, #648]	@ 80100a4 <acc_translation_a121_translate+0x6e0>
 800fe1c:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 80100a8 <acc_translation_a121_translate+0x6e4>
 800fe20:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800fe24:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800fe26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe2a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800fe2e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800fe32:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fe36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe3a:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 800fe3e:	eef4 5ac7 	vcmpe.f32	s11, s14
 800fe42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe46:	ed83 7a00 	vstr	s14, [r3]
 800fe4a:	f77f ae78 	ble.w	800fb3e <acc_translation_a121_translate+0x17a>
 800fe4e:	4b90      	ldr	r3, [pc, #576]	@ (8010090 <acc_translation_a121_translate+0x6cc>)
 800fe50:	4a96      	ldr	r2, [pc, #600]	@ (80100ac <acc_translation_a121_translate+0x6e8>)
 800fe52:	691f      	ldr	r7, [r3, #16]
 800fe54:	4990      	ldr	r1, [pc, #576]	@ (8010098 <acc_translation_a121_translate+0x6d4>)
 800fe56:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800fe5a:	4630      	mov	r0, r6
 800fe5c:	ee17 3a90 	vmov	r3, s15
 800fe60:	47b8      	blx	r7
 800fe62:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800fe66:	4630      	mov	r0, r6
 800fe68:	e669      	b.n	800fb3e <acc_translation_a121_translate+0x17a>
 800fe6a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fe6c:	7113      	strb	r3, [r2, #4]
 800fe6e:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800fe72:	e603      	b.n	800fa7c <acc_translation_a121_translate+0xb8>
 800fe74:	2301      	movs	r3, #1
 800fe76:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800fe78:	8523      	strh	r3, [r4, #40]	@ 0x28
 800fe7a:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 800fe7e:	2b01      	cmp	r3, #1
 800fe80:	d012      	beq.n	800fea8 <acc_translation_a121_translate+0x4e4>
 800fe82:	2b02      	cmp	r3, #2
 800fe84:	f000 80b7 	beq.w	800fff6 <acc_translation_a121_translate+0x632>
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d063      	beq.n	800ff54 <acc_translation_a121_translate+0x590>
 800fe8c:	4b80      	ldr	r3, [pc, #512]	@ (8010090 <acc_translation_a121_translate+0x6cc>)
 800fe8e:	4a88      	ldr	r2, [pc, #544]	@ (80100b0 <acc_translation_a121_translate+0x6ec>)
 800fe90:	691b      	ldr	r3, [r3, #16]
 800fe92:	4981      	ldr	r1, [pc, #516]	@ (8010098 <acc_translation_a121_translate+0x6d4>)
 800fe94:	2000      	movs	r0, #0
 800fe96:	4798      	blx	r3
 800fe98:	e5f0      	b.n	800fa7c <acc_translation_a121_translate+0xb8>
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800fe9e:	8523      	strh	r3, [r4, #40]	@ 0x28
 800fea0:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d1ec      	bne.n	800fe82 <acc_translation_a121_translate+0x4be>
 800fea8:	2200      	movs	r2, #0
 800feaa:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800feac:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800feae:	f1bb 0f00 	cmp.w	fp, #0
 800feb2:	f040 80e0 	bne.w	8010076 <acc_translation_a121_translate+0x6b2>
 800feb6:	2301      	movs	r3, #1
 800feb8:	f8a8 b002 	strh.w	fp, [r8, #2]
 800febc:	f8a8 b00c 	strh.w	fp, [r8, #12]
 800fec0:	f8a8 300a 	strh.w	r3, [r8, #10]
 800fec4:	2600      	movs	r6, #0
 800fec6:	f104 033e 	add.w	r3, r4, #62	@ 0x3e
 800feca:	ed9f aa7a 	vldr	s20, [pc, #488]	@ 80100b4 <acc_translation_a121_translate+0x6f0>
 800fece:	eddf aa7a 	vldr	s21, [pc, #488]	@ 80100b8 <acc_translation_a121_translate+0x6f4>
 800fed2:	eddf 9a72 	vldr	s19, [pc, #456]	@ 801009c <acc_translation_a121_translate+0x6d8>
 800fed6:	ed9f 9a79 	vldr	s18, [pc, #484]	@ 80100bc <acc_translation_a121_translate+0x6f8>
 800feda:	9607      	str	r6, [sp, #28]
 800fedc:	9602      	str	r6, [sp, #8]
 800fede:	f108 090e 	add.w	r9, r8, #14
 800fee2:	462f      	mov	r7, r5
 800fee4:	f104 0a46 	add.w	sl, r4, #70	@ 0x46
 800fee8:	9503      	str	r5, [sp, #12]
 800feea:	9409      	str	r4, [sp, #36]	@ 0x24
 800feec:	9305      	str	r3, [sp, #20]
 800feee:	e9dd 0403 	ldrd	r0, r4, [sp, #12]
 800fef2:	fa5f fc86 	uxtb.w	ip, r6
 800fef6:	4564      	cmp	r4, ip
 800fef8:	4653      	mov	r3, sl
 800fefa:	4639      	mov	r1, r7
 800fefc:	465a      	mov	r2, fp
 800fefe:	f04f 0c00 	mov.w	ip, #0
 800ff02:	d82b      	bhi.n	800ff5c <acc_translation_a121_translate+0x598>
 800ff04:	9b05      	ldr	r3, [sp, #20]
 800ff06:	f8a9 c000 	strh.w	ip, [r9]
 800ff0a:	f8a9 c008 	strh.w	ip, [r9, #8]
 800ff0e:	f823 c016 	strh.w	ip, [r3, r6, lsl #1]
 800ff12:	3601      	adds	r6, #1
 800ff14:	2e04      	cmp	r6, #4
 800ff16:	f109 0902 	add.w	r9, r9, #2
 800ff1a:	f107 0710 	add.w	r7, r7, #16
 800ff1e:	f10a 0a56 	add.w	sl, sl, #86	@ 0x56
 800ff22:	d1e4      	bne.n	800feee <acc_translation_a121_translate+0x52a>
 800ff24:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 800ff28:	9906      	ldr	r1, [sp, #24]
 800ff2a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800ff2e:	9d03      	ldr	r5, [sp, #12]
 800ff30:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800ff32:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 800ff36:	fb12 f201 	smulbb	r2, r2, r1
 800ff3a:	b292      	uxth	r2, r2
 800ff3c:	4413      	add	r3, r2
 800ff3e:	b29b      	uxth	r3, r3
 800ff40:	f103 0c01 	add.w	ip, r3, #1
 800ff44:	fa1f fc8c 	uxth.w	ip, ip
 800ff48:	2001      	movs	r0, #1
 800ff4a:	e5aa      	b.n	800faa2 <acc_translation_a121_translate+0xde>
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800ff50:	8522      	strh	r2, [r4, #40]	@ 0x28
 800ff52:	e792      	b.n	800fe7a <acc_translation_a121_translate+0x4b6>
 800ff54:	2301      	movs	r3, #1
 800ff56:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800ff58:	86e3      	strh	r3, [r4, #54]	@ 0x36
 800ff5a:	e7a8      	b.n	800feae <acc_translation_a121_translate+0x4ea>
 800ff5c:	9d05      	ldr	r5, [sp, #20]
 800ff5e:	f04f 0401 	mov.w	r4, #1
 800ff62:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800ff66:	ac0b      	add	r4, sp, #44	@ 0x2c
 800ff68:	9400      	str	r4, [sp, #0]
 800ff6a:	f7ff fb57 	bl	800f61c <acc_translation_a121_subsweep_translate>
 800ff6e:	2800      	cmp	r0, #0
 800ff70:	d045      	beq.n	800fffe <acc_translation_a121_translate+0x63a>
 800ff72:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800ff76:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800ff7a:	f8a9 3000 	strh.w	r3, [r9]
 800ff7e:	f8a9 2008 	strh.w	r2, [r9, #8]
 800ff82:	4413      	add	r3, r2
 800ff84:	7bfa      	ldrb	r2, [r7, #15]
 800ff86:	f8a8 300c 	strh.w	r3, [r8, #12]
 800ff8a:	2a01      	cmp	r2, #1
 800ff8c:	f8ba 3028 	ldrh.w	r3, [sl, #40]	@ 0x28
 800ff90:	d02e      	beq.n	800fff0 <acc_translation_a121_translate+0x62c>
 800ff92:	2a02      	cmp	r2, #2
 800ff94:	bf0c      	ite	eq
 800ff96:	eef0 5a49 	vmoveq.f32	s11, s18
 800ff9a:	eef0 5a69 	vmovne.f32	s11, s19
 800ff9e:	3301      	adds	r3, #1
 800ffa0:	b29b      	uxth	r3, r3
 800ffa2:	ee07 3a10 	vmov	s14, r3
 800ffa6:	88bb      	ldrh	r3, [r7, #4]
 800ffa8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800ffac:	ee06 3a10 	vmov	s12, r3
 800ffb0:	893b      	ldrh	r3, [r7, #8]
 800ffb2:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800ffb6:	ee07 3a90 	vmov	s15, r3
 800ffba:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ffbe:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800ffc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffc6:	ee67 7a06 	vmul.f32	s15, s14, s12
 800ffca:	9b02      	ldr	r3, [sp, #8]
 800ffcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ffd0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ffd4:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800ffd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ffdc:	ee17 2a90 	vmov	r2, s15
 800ffe0:	4413      	add	r3, r2
 800ffe2:	9302      	str	r3, [sp, #8]
 800ffe4:	9b07      	ldr	r3, [sp, #28]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d193      	bne.n	800ff12 <acc_translation_a121_translate+0x54e>
 800ffea:	7afb      	ldrb	r3, [r7, #11]
 800ffec:	9307      	str	r3, [sp, #28]
 800ffee:	e790      	b.n	800ff12 <acc_translation_a121_translate+0x54e>
 800fff0:	eef0 5a6a 	vmov.f32	s11, s21
 800fff4:	e7d3      	b.n	800ff9e <acc_translation_a121_translate+0x5da>
 800fff6:	2300      	movs	r3, #0
 800fff8:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800fffa:	86e3      	strh	r3, [r4, #54]	@ 0x36
 800fffc:	e757      	b.n	800feae <acc_translation_a121_translate+0x4ea>
 800fffe:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8010002:	9906      	ldr	r1, [sp, #24]
 8010004:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8010008:	9d03      	ldr	r5, [sp, #12]
 801000a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801000c:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 8010010:	fb12 f201 	smulbb	r2, r2, r1
 8010014:	b292      	uxth	r2, r2
 8010016:	4413      	add	r3, r2
 8010018:	b29b      	uxth	r3, r3
 801001a:	f103 0c01 	add.w	ip, r3, #1
 801001e:	fa1f fc8c 	uxth.w	ip, ip
 8010022:	e53e      	b.n	800faa2 <acc_translation_a121_translate+0xde>
 8010024:	f895 104f 	ldrb.w	r1, [r5, #79]	@ 0x4f
 8010028:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 801002c:	eddf 8a1b 	vldr	s17, [pc, #108]	@ 801009c <acc_translation_a121_translate+0x6d8>
 8010030:	4291      	cmp	r1, r2
 8010032:	f47f ad0c 	bne.w	800fa4e <acc_translation_a121_translate+0x8a>
 8010036:	e6b7      	b.n	800fda8 <acc_translation_a121_translate+0x3e4>
 8010038:	2301      	movs	r3, #1
 801003a:	f8a8 b002 	strh.w	fp, [r8, #2]
 801003e:	f8a8 300a 	strh.w	r3, [r8, #10]
 8010042:	465f      	mov	r7, fp
 8010044:	f04f 0c02 	mov.w	ip, #2
 8010048:	465a      	mov	r2, fp
 801004a:	f8cd b008 	str.w	fp, [sp, #8]
 801004e:	4658      	mov	r0, fp
 8010050:	e527      	b.n	800faa2 <acc_translation_a121_translate+0xde>
 8010052:	b933      	cbnz	r3, 8010062 <acc_translation_a121_translate+0x69e>
 8010054:	2a02      	cmp	r2, #2
 8010056:	d00a      	beq.n	801006e <acc_translation_a121_translate+0x6aa>
 8010058:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801005a:	7113      	strb	r3, [r2, #4]
 801005c:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 8010060:	e620      	b.n	800fca4 <acc_translation_a121_translate+0x2e0>
 8010062:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010064:	2300      	movs	r3, #0
 8010066:	7113      	strb	r3, [r2, #4]
 8010068:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 801006c:	e61a      	b.n	800fca4 <acc_translation_a121_translate+0x2e0>
 801006e:	2301      	movs	r3, #1
 8010070:	e60c      	b.n	800fc8c <acc_translation_a121_translate+0x2c8>
 8010072:	9004      	str	r0, [sp, #16]
 8010074:	e69f      	b.n	800fdb6 <acc_translation_a121_translate+0x3f2>
 8010076:	4621      	mov	r1, r4
 8010078:	4658      	mov	r0, fp
 801007a:	f7fe fffd 	bl	800f078 <acc_translation_a121_set_calibration_params>
 801007e:	2300      	movs	r3, #0
 8010080:	2201      	movs	r2, #1
 8010082:	f8a8 3002 	strh.w	r3, [r8, #2]
 8010086:	f8a8 300c 	strh.w	r3, [r8, #12]
 801008a:	f8a8 200a 	strh.w	r2, [r8, #10]
 801008e:	e719      	b.n	800fec4 <acc_translation_a121_translate+0x500>
 8010090:	200009ec 	.word	0x200009ec
 8010094:	080157dc 	.word	0x080157dc
 8010098:	08015568 	.word	0x08015568
 801009c:	00000000 	.word	0x00000000
 80100a0:	0801579c 	.word	0x0801579c
 80100a4:	3c23d70a 	.word	0x3c23d70a
 80100a8:	49742400 	.word	0x49742400
 80100ac:	0801584c 	.word	0x0801584c
 80100b0:	08015720 	.word	0x08015720
 80100b4:	3e124925 	.word	0x3e124925
 80100b8:	3e4ccccd 	.word	0x3e4ccccd
 80100bc:	3d75c28f 	.word	0x3d75c28f

080100c0 <acc_translation_pulseshaper_calc_settings>:
 80100c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100c4:	7804      	ldrb	r4, [r0, #0]
 80100c6:	2300      	movs	r3, #0
 80100c8:	8093      	strh	r3, [r2, #4]
 80100ca:	b374      	cbz	r4, 801012a <acc_translation_pulseshaper_calc_settings+0x6a>
 80100cc:	6846      	ldr	r6, [r0, #4]
 80100ce:	2401      	movs	r4, #1
 80100d0:	4637      	mov	r7, r6
 80100d2:	8214      	strh	r4, [r2, #16]
 80100d4:	b3a6      	cbz	r6, 8010140 <acc_translation_pulseshaper_calc_settings+0x80>
 80100d6:	e9d1 9a03 	ldrd	r9, sl, [r1, #12]
 80100da:	f8d1 8008 	ldr.w	r8, [r1, #8]
 80100de:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80100e2:	461c      	mov	r4, r3
 80100e4:	eb09 4513 	add.w	r5, r9, r3, lsr #16
 80100e8:	eba5 0508 	sub.w	r5, r5, r8
 80100ec:	4575      	cmp	r5, lr
 80100ee:	fa1f fc84 	uxth.w	ip, r4
 80100f2:	4453      	add	r3, sl
 80100f4:	f104 0401 	add.w	r4, r4, #1
 80100f8:	da02      	bge.n	8010100 <acc_translation_pulseshaper_calc_settings+0x40>
 80100fa:	2c0f      	cmp	r4, #15
 80100fc:	d1f2      	bne.n	80100e4 <acc_translation_pulseshaper_calc_settings+0x24>
 80100fe:	46a4      	mov	ip, r4
 8010100:	e9d1 8e07 	ldrd	r8, lr, [r1, #28]
 8010104:	2505      	movs	r5, #5
 8010106:	f8a2 c006 	strh.w	ip, [r2, #6]
 801010a:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 801010e:	eb08 4413 	add.w	r4, r8, r3, lsr #16
 8010112:	1ba4      	subs	r4, r4, r6
 8010114:	f105 0c01 	add.w	ip, r5, #1
 8010118:	4473      	add	r3, lr
 801011a:	d563      	bpl.n	80101e4 <acc_translation_pulseshaper_calc_settings+0x124>
 801011c:	fa1f f58c 	uxth.w	r5, ip
 8010120:	2d14      	cmp	r5, #20
 8010122:	d1f4      	bne.n	801010e <acc_translation_pulseshaper_calc_settings+0x4e>
 8010124:	2000      	movs	r0, #0
 8010126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801012a:	8214      	strh	r4, [r2, #16]
 801012c:	80d4      	strh	r4, [r2, #6]
 801012e:	8054      	strh	r4, [r2, #2]
 8010130:	8114      	strh	r4, [r2, #8]
 8010132:	81d4      	strh	r4, [r2, #14]
 8010134:	8154      	strh	r4, [r2, #10]
 8010136:	8194      	strh	r4, [r2, #12]
 8010138:	8254      	strh	r4, [r2, #18]
 801013a:	2001      	movs	r0, #1
 801013c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010140:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8010144:	80d6      	strh	r6, [r2, #6]
 8010146:	f5bc 7f16 	cmp.w	ip, #600	@ 0x258
 801014a:	8056      	strh	r6, [r2, #2]
 801014c:	d343      	bcc.n	80101d6 <acc_translation_pulseshaper_calc_settings+0x116>
 801014e:	f8d1 e014 	ldr.w	lr, [r1, #20]
 8010152:	ebac 050e 	sub.w	r5, ip, lr
 8010156:	f5b5 7fc8 	cmp.w	r5, #400	@ 0x190
 801015a:	f340 80b3 	ble.w	80102c4 <acc_translation_pulseshaper_calc_settings+0x204>
 801015e:	2400      	movs	r4, #0
 8010160:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010164:	4620      	mov	r0, r4
 8010166:	3002      	adds	r0, #2
 8010168:	fb03 f000 	mul.w	r0, r3, r0
 801016c:	42a8      	cmp	r0, r5
 801016e:	f104 0401 	add.w	r4, r4, #1
 8010172:	dbf7      	blt.n	8010164 <acc_translation_pulseshaper_calc_settings+0xa4>
 8010174:	2e00      	cmp	r6, #0
 8010176:	bf14      	ite	ne
 8010178:	2501      	movne	r5, #1
 801017a:	2500      	moveq	r5, #0
 801017c:	f04f 0001 	mov.w	r0, #1
 8010180:	8115      	strh	r5, [r2, #8]
 8010182:	81d0      	strh	r0, [r2, #14]
 8010184:	d14f      	bne.n	8010226 <acc_translation_pulseshaper_calc_settings+0x166>
 8010186:	8156      	strh	r6, [r2, #10]
 8010188:	b344      	cbz	r4, 80101dc <acc_translation_pulseshaper_calc_settings+0x11c>
 801018a:	fb03 c314 	mls	r3, r3, r4, ip
 801018e:	2000      	movs	r0, #0
 8010190:	e9d1 ce00 	ldrd	ip, lr, [r1]
 8010194:	4601      	mov	r1, r0
 8010196:	e001      	b.n	801019c <acc_translation_pulseshaper_calc_settings+0xdc>
 8010198:	2916      	cmp	r1, #22
 801019a:	d0c3      	beq.n	8010124 <acc_translation_pulseshaper_calc_settings+0x64>
 801019c:	eb0c 4510 	add.w	r5, ip, r0, lsr #16
 80101a0:	1aed      	subs	r5, r5, r3
 80101a2:	b28e      	uxth	r6, r1
 80101a4:	4470      	add	r0, lr
 80101a6:	f101 0101 	add.w	r1, r1, #1
 80101aa:	d4f5      	bmi.n	8010198 <acc_translation_pulseshaper_calc_settings+0xd8>
 80101ac:	b15e      	cbz	r6, 80101c6 <acc_translation_pulseshaper_calc_settings+0x106>
 80101ae:	b957      	cbnz	r7, 80101c6 <acc_translation_pulseshaper_calc_settings+0x106>
 80101b0:	1e71      	subs	r1, r6, #1
 80101b2:	b289      	uxth	r1, r1
 80101b4:	fb0e fe01 	mul.w	lr, lr, r1
 80101b8:	eb0c 4c1e 	add.w	ip, ip, lr, lsr #16
 80101bc:	eba3 030c 	sub.w	r3, r3, ip
 80101c0:	429d      	cmp	r5, r3
 80101c2:	bfc8      	it	gt
 80101c4:	460e      	movgt	r6, r1
 80101c6:	8196      	strh	r6, [r2, #12]
 80101c8:	2c00      	cmp	r4, #0
 80101ca:	d0b5      	beq.n	8010138 <acc_translation_pulseshaper_calc_settings+0x78>
 80101cc:	1de3      	adds	r3, r4, #7
 80101ce:	2401      	movs	r4, #1
 80101d0:	409c      	lsls	r4, r3
 80101d2:	b2a4      	uxth	r4, r4
 80101d4:	e7b0      	b.n	8010138 <acc_translation_pulseshaper_calc_settings+0x78>
 80101d6:	8116      	strh	r6, [r2, #8]
 80101d8:	81d6      	strh	r6, [r2, #14]
 80101da:	8156      	strh	r6, [r2, #10]
 80101dc:	2400      	movs	r4, #0
 80101de:	4663      	mov	r3, ip
 80101e0:	4627      	mov	r7, r4
 80101e2:	e7d4      	b.n	801018e <acc_translation_pulseshaper_calc_settings+0xce>
 80101e4:	2d05      	cmp	r5, #5
 80101e6:	d00a      	beq.n	80101fe <acc_translation_pulseshaper_calc_settings+0x13e>
 80101e8:	1e6b      	subs	r3, r5, #1
 80101ea:	b29b      	uxth	r3, r3
 80101ec:	fb0e fe03 	mul.w	lr, lr, r3
 80101f0:	eb08 4e1e 	add.w	lr, r8, lr, lsr #16
 80101f4:	eba6 0e0e 	sub.w	lr, r6, lr
 80101f8:	4574      	cmp	r4, lr
 80101fa:	bfc8      	it	gt
 80101fc:	461d      	movgt	r5, r3
 80101fe:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8010202:	8055      	strh	r5, [r2, #2]
 8010204:	f5bc 7f16 	cmp.w	ip, #600	@ 0x258
 8010208:	d349      	bcc.n	801029e <acc_translation_pulseshaper_calc_settings+0x1de>
 801020a:	f8d1 e014 	ldr.w	lr, [r1, #20]
 801020e:	ebac 050e 	sub.w	r5, ip, lr
 8010212:	f5b5 7fc8 	cmp.w	r5, #400	@ 0x190
 8010216:	dca2      	bgt.n	801015e <acc_translation_pulseshaper_calc_settings+0x9e>
 8010218:	1e30      	subs	r0, r6, #0
 801021a:	bf18      	it	ne
 801021c:	2001      	movne	r0, #1
 801021e:	2301      	movs	r3, #1
 8010220:	8110      	strh	r0, [r2, #8]
 8010222:	81d3      	strh	r3, [r2, #14]
 8010224:	2400      	movs	r4, #0
 8010226:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801022a:	fb03 c314 	mls	r3, r3, r4, ip
 801022e:	2500      	movs	r5, #0
 8010230:	f8d1 9018 	ldr.w	r9, [r1, #24]
 8010234:	4628      	mov	r0, r5
 8010236:	e002      	b.n	801023e <acc_translation_pulseshaper_calc_settings+0x17e>
 8010238:	2816      	cmp	r0, #22
 801023a:	f43f af73 	beq.w	8010124 <acc_translation_pulseshaper_calc_settings+0x64>
 801023e:	eb0e 4715 	add.w	r7, lr, r5, lsr #16
 8010242:	1aff      	subs	r7, r7, r3
 8010244:	fa1f f880 	uxth.w	r8, r0
 8010248:	444d      	add	r5, r9
 801024a:	f100 0001 	add.w	r0, r0, #1
 801024e:	d4f3      	bmi.n	8010238 <acc_translation_pulseshaper_calc_settings+0x178>
 8010250:	f1b8 0f00 	cmp.w	r8, #0
 8010254:	d12a      	bne.n	80102ac <acc_translation_pulseshaper_calc_settings+0x1ec>
 8010256:	f8a2 800a 	strh.w	r8, [r2, #10]
 801025a:	b1c4      	cbz	r4, 801028e <acc_translation_pulseshaper_calc_settings+0x1ce>
 801025c:	4637      	mov	r7, r6
 801025e:	2e00      	cmp	r6, #0
 8010260:	d095      	beq.n	801018e <acc_translation_pulseshaper_calc_settings+0xce>
 8010262:	e9d1 0503 	ldrd	r0, r5, [r1, #12]
 8010266:	88d6      	ldrh	r6, [r2, #6]
 8010268:	fb05 f506 	mul.w	r5, r5, r6
 801026c:	688e      	ldr	r6, [r1, #8]
 801026e:	eb00 4015 	add.w	r0, r0, r5, lsr #16
 8010272:	1b80      	subs	r0, r0, r6
 8010274:	f53f af56 	bmi.w	8010124 <acc_translation_pulseshaper_calc_settings+0x64>
 8010278:	e9d1 5607 	ldrd	r5, r6, [r1, #28]
 801027c:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8010280:	fb06 f60c 	mul.w	r6, r6, ip
 8010284:	eb05 4516 	add.w	r5, r5, r6, lsr #16
 8010288:	4428      	add	r0, r5
 801028a:	4403      	add	r3, r0
 801028c:	e77f      	b.n	801018e <acc_translation_pulseshaper_calc_settings+0xce>
 801028e:	4637      	mov	r7, r6
 8010290:	2e00      	cmp	r6, #0
 8010292:	d0a3      	beq.n	80101dc <acc_translation_pulseshaper_calc_settings+0x11c>
 8010294:	fb09 f308 	mul.w	r3, r9, r8
 8010298:	eb0e 4313 	add.w	r3, lr, r3, lsr #16
 801029c:	e7e1      	b.n	8010262 <acc_translation_pulseshaper_calc_settings+0x1a2>
 801029e:	2400      	movs	r4, #0
 80102a0:	f8d1 e014 	ldr.w	lr, [r1, #20]
 80102a4:	8114      	strh	r4, [r2, #8]
 80102a6:	81d4      	strh	r4, [r2, #14]
 80102a8:	4663      	mov	r3, ip
 80102aa:	e7c0      	b.n	801022e <acc_translation_pulseshaper_calc_settings+0x16e>
 80102ac:	f108 35ff 	add.w	r5, r8, #4294967295
 80102b0:	b2ad      	uxth	r5, r5
 80102b2:	fb09 f005 	mul.w	r0, r9, r5
 80102b6:	eb0e 4010 	add.w	r0, lr, r0, lsr #16
 80102ba:	1a18      	subs	r0, r3, r0
 80102bc:	4287      	cmp	r7, r0
 80102be:	bfc8      	it	gt
 80102c0:	46a8      	movgt	r8, r5
 80102c2:	e7c8      	b.n	8010256 <acc_translation_pulseshaper_calc_settings+0x196>
 80102c4:	8116      	strh	r6, [r2, #8]
 80102c6:	81d4      	strh	r4, [r2, #14]
 80102c8:	8156      	strh	r6, [r2, #10]
 80102ca:	e787      	b.n	80101dc <acc_translation_pulseshaper_calc_settings+0x11c>

080102cc <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>:
 80102cc:	7803      	ldrb	r3, [r0, #0]
 80102ce:	b13b      	cbz	r3, 80102e0 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x14>
 80102d0:	6842      	ldr	r2, [r0, #4]
 80102d2:	b12a      	cbz	r2, 80102e0 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x14>
 80102d4:	6902      	ldr	r2, [r0, #16]
 80102d6:	2a02      	cmp	r2, #2
 80102d8:	d90b      	bls.n	80102f2 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x26>
 80102da:	2300      	movs	r3, #0
 80102dc:	4618      	mov	r0, r3
 80102de:	4770      	bx	lr
 80102e0:	6903      	ldr	r3, [r0, #16]
 80102e2:	2b07      	cmp	r3, #7
 80102e4:	d8f9      	bhi.n	80102da <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0xe>
 80102e6:	4a05      	ldr	r2, [pc, #20]	@ (80102fc <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x30>)
 80102e8:	5cd3      	ldrb	r3, [r2, r3]
 80102ea:	800b      	strh	r3, [r1, #0]
 80102ec:	2301      	movs	r3, #1
 80102ee:	4618      	mov	r0, r3
 80102f0:	4770      	bx	lr
 80102f2:	4803      	ldr	r0, [pc, #12]	@ (8010300 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x34>)
 80102f4:	5c82      	ldrb	r2, [r0, r2]
 80102f6:	800a      	strh	r2, [r1, #0]
 80102f8:	4618      	mov	r0, r3
 80102fa:	4770      	bx	lr
 80102fc:	080158a4 	.word	0x080158a4
 8010300:	080158ac 	.word	0x080158ac

08010304 <acc_utils_bool_to_str>:
 8010304:	4a03      	ldr	r2, [pc, #12]	@ (8010314 <acc_utils_bool_to_str+0x10>)
 8010306:	4b04      	ldr	r3, [pc, #16]	@ (8010318 <acc_utils_bool_to_str+0x14>)
 8010308:	2800      	cmp	r0, #0
 801030a:	bf14      	ite	ne
 801030c:	4610      	movne	r0, r2
 801030e:	4618      	moveq	r0, r3
 8010310:	4770      	bx	lr
 8010312:	bf00      	nop
 8010314:	080158b0 	.word	0x080158b0
 8010318:	080158b8 	.word	0x080158b8

0801031c <acc_utils_idle_state_to_str>:
 801031c:	2802      	cmp	r0, #2
 801031e:	bf9a      	itte	ls
 8010320:	4b02      	ldrls	r3, [pc, #8]	@ (801032c <acc_utils_idle_state_to_str+0x10>)
 8010322:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010326:	4802      	ldrhi	r0, [pc, #8]	@ (8010330 <acc_utils_idle_state_to_str+0x14>)
 8010328:	4770      	bx	lr
 801032a:	bf00      	nop
 801032c:	08015950 	.word	0x08015950
 8010330:	080158c0 	.word	0x080158c0

08010334 <acc_utils_profile_to_str>:
 8010334:	3801      	subs	r0, #1
 8010336:	b2c0      	uxtb	r0, r0
 8010338:	2804      	cmp	r0, #4
 801033a:	bf9a      	itte	ls
 801033c:	4b02      	ldrls	r3, [pc, #8]	@ (8010348 <acc_utils_profile_to_str+0x14>)
 801033e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010342:	4802      	ldrhi	r0, [pc, #8]	@ (801034c <acc_utils_profile_to_str+0x18>)
 8010344:	4770      	bx	lr
 8010346:	bf00      	nop
 8010348:	0801595c 	.word	0x0801595c
 801034c:	080158c0 	.word	0x080158c0

08010350 <acc_utils_prf_to_str>:
 8010350:	2805      	cmp	r0, #5
 8010352:	bf9a      	itte	ls
 8010354:	4b02      	ldrls	r3, [pc, #8]	@ (8010360 <acc_utils_prf_to_str+0x10>)
 8010356:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801035a:	4802      	ldrhi	r0, [pc, #8]	@ (8010364 <acc_utils_prf_to_str+0x14>)
 801035c:	4770      	bx	lr
 801035e:	bf00      	nop
 8010360:	08015970 	.word	0x08015970
 8010364:	080158c0 	.word	0x080158c0

08010368 <acc_alg_atan2_q16>:
 8010368:	2800      	cmp	r0, #0
 801036a:	bfb8      	it	lt
 801036c:	4240      	neglt	r0, r0
 801036e:	b4f0      	push	{r4, r5, r6, r7}
 8010370:	bfba      	itte	lt
 8010372:	b200      	sxthlt	r0, r0
 8010374:	2401      	movlt	r4, #1
 8010376:	2400      	movge	r4, #0
 8010378:	2900      	cmp	r1, #0
 801037a:	db3f      	blt.n	80103fc <acc_alg_atan2_q16+0x94>
 801037c:	4288      	cmp	r0, r1
 801037e:	db38      	blt.n	80103f2 <acc_alg_atan2_q16+0x8a>
 8010380:	2200      	movs	r2, #0
 8010382:	4603      	mov	r3, r0
 8010384:	b368      	cbz	r0, 80103e2 <acc_alg_atan2_q16+0x7a>
 8010386:	4608      	mov	r0, r1
 8010388:	2600      	movs	r6, #0
 801038a:	f643 4528 	movw	r5, #15400	@ 0x3c28
 801038e:	0400      	lsls	r0, r0, #16
 8010390:	fbb0 f1f3 	udiv	r1, r0, r3
 8010394:	42a9      	cmp	r1, r5
 8010396:	d948      	bls.n	801042a <acc_alg_atan2_q16+0xc2>
 8010398:	f246 33d6 	movw	r3, #25558	@ 0x63d6
 801039c:	4299      	cmp	r1, r3
 801039e:	d936      	bls.n	801040e <acc_alg_atan2_q16+0xa6>
 80103a0:	f648 0372 	movw	r3, #34930	@ 0x8872
 80103a4:	4299      	cmp	r1, r3
 80103a6:	d942      	bls.n	801042e <acc_alg_atan2_q16+0xc6>
 80103a8:	f64a 4349 	movw	r3, #44105	@ 0xac49
 80103ac:	4299      	cmp	r1, r3
 80103ae:	d940      	bls.n	8010432 <acc_alg_atan2_q16+0xca>
 80103b0:	f24d 03a3 	movw	r3, #53411	@ 0xd0a3
 80103b4:	4299      	cmp	r1, r3
 80103b6:	d93e      	bls.n	8010436 <acc_alg_atan2_q16+0xce>
 80103b8:	f24f 734b 	movw	r3, #63307	@ 0xf74b
 80103bc:	4299      	cmp	r1, r3
 80103be:	bf98      	it	ls
 80103c0:	2705      	movls	r7, #5
 80103c2:	d925      	bls.n	8010410 <acc_alg_atan2_q16+0xa8>
 80103c4:	f24f 754c 	movw	r5, #63308	@ 0xf74c
 80103c8:	f248 2333 	movw	r3, #33331	@ 0x8233
 80103cc:	f24c 40a3 	movw	r0, #50339	@ 0xc4a3
 80103d0:	1b49      	subs	r1, r1, r5
 80103d2:	fb03 f101 	mul.w	r1, r3, r1
 80103d6:	eb00 4011 	add.w	r0, r0, r1, lsr #16
 80103da:	b116      	cbz	r6, 80103e2 <acc_alg_atan2_q16+0x7a>
 80103dc:	f5c0 30c9 	rsb	r0, r0, #102912	@ 0x19200
 80103e0:	301f      	adds	r0, #31
 80103e2:	b114      	cbz	r4, 80103ea <acc_alg_atan2_q16+0x82>
 80103e4:	f5c0 3049 	rsb	r0, r0, #205824	@ 0x32400
 80103e8:	303f      	adds	r0, #63	@ 0x3f
 80103ea:	b102      	cbz	r2, 80103ee <acc_alg_atan2_q16+0x86>
 80103ec:	4240      	negs	r0, r0
 80103ee:	bcf0      	pop	{r4, r5, r6, r7}
 80103f0:	4770      	bx	lr
 80103f2:	460b      	mov	r3, r1
 80103f4:	b9b1      	cbnz	r1, 8010424 <acc_alg_atan2_q16+0xbc>
 80103f6:	4811      	ldr	r0, [pc, #68]	@ (801043c <acc_alg_atan2_q16+0xd4>)
 80103f8:	460a      	mov	r2, r1
 80103fa:	e7f2      	b.n	80103e2 <acc_alg_atan2_q16+0x7a>
 80103fc:	4249      	negs	r1, r1
 80103fe:	b209      	sxth	r1, r1
 8010400:	4288      	cmp	r0, r1
 8010402:	f04f 0201 	mov.w	r2, #1
 8010406:	dabc      	bge.n	8010382 <acc_alg_atan2_q16+0x1a>
 8010408:	460b      	mov	r3, r1
 801040a:	4616      	mov	r6, r2
 801040c:	e7bd      	b.n	801038a <acc_alg_atan2_q16+0x22>
 801040e:	2701      	movs	r7, #1
 8010410:	480b      	ldr	r0, [pc, #44]	@ (8010440 <acc_alg_atan2_q16+0xd8>)
 8010412:	4b0c      	ldr	r3, [pc, #48]	@ (8010444 <acc_alg_atan2_q16+0xdc>)
 8010414:	f850 5037 	ldr.w	r5, [r0, r7, lsl #3]
 8010418:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 801041c:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8010420:	6840      	ldr	r0, [r0, #4]
 8010422:	e7d5      	b.n	80103d0 <acc_alg_atan2_q16+0x68>
 8010424:	2200      	movs	r2, #0
 8010426:	2601      	movs	r6, #1
 8010428:	e7af      	b.n	801038a <acc_alg_atan2_q16+0x22>
 801042a:	2700      	movs	r7, #0
 801042c:	e7f0      	b.n	8010410 <acc_alg_atan2_q16+0xa8>
 801042e:	2702      	movs	r7, #2
 8010430:	e7ee      	b.n	8010410 <acc_alg_atan2_q16+0xa8>
 8010432:	2703      	movs	r7, #3
 8010434:	e7ec      	b.n	8010410 <acc_alg_atan2_q16+0xa8>
 8010436:	2704      	movs	r7, #4
 8010438:	e7ea      	b.n	8010410 <acc_alg_atan2_q16+0xa8>
 801043a:	bf00      	nop
 801043c:	0001921f 	.word	0x0001921f
 8010440:	08015988 	.word	0x08015988
 8010444:	080159c0 	.word	0x080159c0

08010448 <acc_alg_basic_util_crc32>:
 8010448:	b1a9      	cbz	r1, 8010476 <acc_alg_basic_util_crc32+0x2e>
 801044a:	b430      	push	{r4, r5}
 801044c:	4a0b      	ldr	r2, [pc, #44]	@ (801047c <acc_alg_basic_util_crc32+0x34>)
 801044e:	1e44      	subs	r4, r0, #1
 8010450:	1865      	adds	r5, r4, r1
 8010452:	f04f 30ff 	mov.w	r0, #4294967295
 8010456:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 801045a:	2308      	movs	r3, #8
 801045c:	4048      	eors	r0, r1
 801045e:	07c1      	lsls	r1, r0, #31
 8010460:	bf4c      	ite	mi
 8010462:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
 8010466:	0840      	lsrpl	r0, r0, #1
 8010468:	3b01      	subs	r3, #1
 801046a:	d1f8      	bne.n	801045e <acc_alg_basic_util_crc32+0x16>
 801046c:	42ac      	cmp	r4, r5
 801046e:	d1f2      	bne.n	8010456 <acc_alg_basic_util_crc32+0xe>
 8010470:	43c0      	mvns	r0, r0
 8010472:	bc30      	pop	{r4, r5}
 8010474:	4770      	bx	lr
 8010476:	4608      	mov	r0, r1
 8010478:	4770      	bx	lr
 801047a:	bf00      	nop
 801047c:	edb88320 	.word	0xedb88320

08010480 <acc_alg_least_square_fit>:
 8010480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010484:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 8010488:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 801048c:	b08d      	sub	sp, #52	@ 0x34
 801048e:	2600      	movs	r6, #0
 8010490:	4683      	mov	fp, r0
 8010492:	4682      	mov	sl, r0
 8010494:	4680      	mov	r8, r0
 8010496:	4667      	mov	r7, ip
 8010498:	46b1      	mov	r9, r6
 801049a:	a803      	add	r0, sp, #12
 801049c:	ea4f 0589 	mov.w	r5, r9, lsl #2
 80104a0:	4686      	mov	lr, r0
 80104a2:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8010600 <acc_alg_least_square_fit+0x180>
 80104a6:	4643      	mov	r3, r8
 80104a8:	b16a      	cbz	r2, 80104c6 <acc_alg_least_square_fit+0x46>
 80104aa:	199c      	adds	r4, r3, r6
 80104ac:	442c      	add	r4, r5
 80104ae:	edd4 7a00 	vldr	s15, [r4]
 80104b2:	461c      	mov	r4, r3
 80104b4:	edd4 6a00 	vldr	s13, [r4]
 80104b8:	330c      	adds	r3, #12
 80104ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80104be:	42bb      	cmp	r3, r7
 80104c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80104c4:	d1f1      	bne.n	80104aa <acc_alg_least_square_fit+0x2a>
 80104c6:	3504      	adds	r5, #4
 80104c8:	2d0c      	cmp	r5, #12
 80104ca:	ecae 7a01 	vstmia	lr!, {s14}
 80104ce:	d1e8      	bne.n	80104a2 <acc_alg_least_square_fit+0x22>
 80104d0:	f109 0901 	add.w	r9, r9, #1
 80104d4:	f1b9 0f03 	cmp.w	r9, #3
 80104d8:	f100 0010 	add.w	r0, r0, #16
 80104dc:	f108 0804 	add.w	r8, r8, #4
 80104e0:	f1a6 0604 	sub.w	r6, r6, #4
 80104e4:	f107 0704 	add.w	r7, r7, #4
 80104e8:	d1d8      	bne.n	801049c <acc_alg_least_square_fit+0x1c>
 80104ea:	ed9d 6a04 	vldr	s12, [sp, #16]
 80104ee:	eddd 5a05 	vldr	s11, [sp, #20]
 80104f2:	eddd 6a08 	vldr	s13, [sp, #32]
 80104f6:	4668      	mov	r0, sp
 80104f8:	f10b 040c 	add.w	r4, fp, #12
 80104fc:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8010600 <acc_alg_least_square_fit+0x180>
 8010500:	4653      	mov	r3, sl
 8010502:	b13a      	cbz	r2, 8010514 <acc_alg_least_square_fit+0x94>
 8010504:	461d      	mov	r5, r3
 8010506:	ed95 7a00 	vldr	s14, [r5]
 801050a:	330c      	adds	r3, #12
 801050c:	4563      	cmp	r3, ip
 801050e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010512:	d1f7      	bne.n	8010504 <acc_alg_least_square_fit+0x84>
 8010514:	f10a 0a04 	add.w	sl, sl, #4
 8010518:	45a2      	cmp	sl, r4
 801051a:	ece0 7a01 	vstmia	r0!, {s15}
 801051e:	f10c 0c04 	add.w	ip, ip, #4
 8010522:	d1eb      	bne.n	80104fc <acc_alg_least_square_fit+0x7c>
 8010524:	eddd 7a03 	vldr	s15, [sp, #12]
 8010528:	eef5 7a40 	vcmp.f32	s15, #0.0
 801052c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010530:	d010      	beq.n	8010554 <acc_alg_least_square_fit+0xd4>
 8010532:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010536:	ee87 4a27 	vdiv.f32	s8, s14, s15
 801053a:	eddd 7a07 	vldr	s15, [sp, #28]
 801053e:	ee66 4a04 	vmul.f32	s9, s12, s8
 8010542:	ee26 5a24 	vmul.f32	s10, s12, s9
 8010546:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801054a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801054e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010552:	d106      	bne.n	8010562 <acc_alg_least_square_fit+0xe2>
 8010554:	2000      	movs	r0, #0
 8010556:	2300      	movs	r3, #0
 8010558:	f8cb 3000 	str.w	r3, [fp]
 801055c:	b00d      	add	sp, #52	@ 0x34
 801055e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010562:	eec7 2a27 	vdiv.f32	s5, s14, s15
 8010566:	ee65 3a84 	vmul.f32	s7, s11, s8
 801056a:	ee25 7aa4 	vmul.f32	s14, s11, s9
 801056e:	ee66 7a23 	vmul.f32	s15, s12, s7
 8010572:	ed9d 5a0b 	vldr	s10, [sp, #44]	@ 0x2c
 8010576:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801057a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801057e:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8010582:	ee65 6aa3 	vmul.f32	s13, s11, s7
 8010586:	ee75 6a66 	vsub.f32	s13, s10, s13
 801058a:	ee27 5a27 	vmul.f32	s10, s14, s15
 801058e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8010592:	eef5 6a40 	vcmp.f32	s13, #0.0
 8010596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801059a:	d0db      	beq.n	8010554 <acc_alg_least_square_fit+0xd4>
 801059c:	ed9d 5a00 	vldr	s10, [sp]
 80105a0:	ed9d 3a01 	vldr	s6, [sp, #4]
 80105a4:	ed9d 2a02 	vldr	s4, [sp, #8]
 80105a8:	ee64 4a85 	vmul.f32	s9, s9, s10
 80105ac:	ee63 3a85 	vmul.f32	s7, s7, s10
 80105b0:	ee73 4a64 	vsub.f32	s9, s6, s9
 80105b4:	2001      	movs	r0, #1
 80105b6:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80105ba:	2300      	movs	r3, #0
 80105bc:	ee72 7a67 	vsub.f32	s15, s4, s15
 80105c0:	ee77 3ae3 	vsub.f32	s7, s15, s7
 80105c4:	eec3 7aa6 	vdiv.f32	s15, s7, s13
 80105c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80105cc:	edc1 7a02 	vstr	s15, [r1, #8]
 80105d0:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80105d4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80105d8:	ee67 7a22 	vmul.f32	s15, s14, s5
 80105dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80105e0:	edc1 7a01 	vstr	s15, [r1, #4]
 80105e4:	ee35 6a46 	vsub.f32	s12, s10, s12
 80105e8:	ee76 5a65 	vsub.f32	s11, s12, s11
 80105ec:	ee25 4a84 	vmul.f32	s8, s11, s8
 80105f0:	ed81 4a00 	vstr	s8, [r1]
 80105f4:	f8cb 3000 	str.w	r3, [fp]
 80105f8:	b00d      	add	sp, #52	@ 0x34
 80105fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105fe:	bf00      	nop
 8010600:	00000000 	.word	0x00000000

08010604 <acc_confprogram_modify_bin_sensor>:
 8010604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010608:	b085      	sub	sp, #20
 801060a:	2601      	movs	r6, #1
 801060c:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8010610:	fa06 f503 	lsl.w	r5, r6, r3
 8010614:	4545      	cmp	r5, r8
 8010616:	461c      	mov	r4, r3
 8010618:	460b      	mov	r3, r1
 801061a:	d80d      	bhi.n	8010638 <acc_confprogram_modify_bin_sensor+0x34>
 801061c:	4a14      	ldr	r2, [pc, #80]	@ (8010670 <acc_confprogram_modify_bin_sensor+0x6c>)
 801061e:	f8cd 8000 	str.w	r8, [sp]
 8010622:	3d01      	subs	r5, #1
 8010624:	9501      	str	r5, [sp, #4]
 8010626:	6914      	ldr	r4, [r2, #16]
 8010628:	4912      	ldr	r1, [pc, #72]	@ (8010674 <acc_confprogram_modify_bin_sensor+0x70>)
 801062a:	4a13      	ldr	r2, [pc, #76]	@ (8010678 <acc_confprogram_modify_bin_sensor+0x74>)
 801062c:	2000      	movs	r0, #0
 801062e:	47a0      	blx	r4
 8010630:	2000      	movs	r0, #0
 8010632:	b005      	add	sp, #20
 8010634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010638:	4691      	mov	r9, r2
 801063a:	4607      	mov	r7, r0
 801063c:	9103      	str	r1, [sp, #12]
 801063e:	f1c4 0420 	rsb	r4, r4, #32
 8010642:	f000 f9ed 	bl	8010a20 <acc_sensor_conf_read_instr>
 8010646:	f04f 31ff 	mov.w	r1, #4294967295
 801064a:	fa21 f404 	lsr.w	r4, r1, r4
 801064e:	9b03      	ldr	r3, [sp, #12]
 8010650:	fa04 f409 	lsl.w	r4, r4, r9
 8010654:	ea20 0404 	bic.w	r4, r0, r4
 8010658:	fa08 f209 	lsl.w	r2, r8, r9
 801065c:	4619      	mov	r1, r3
 801065e:	4638      	mov	r0, r7
 8010660:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010662:	4322      	orrs	r2, r4
 8010664:	4798      	blx	r3
 8010666:	4630      	mov	r0, r6
 8010668:	b005      	add	sp, #20
 801066a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801066e:	bf00      	nop
 8010670:	200009ec 	.word	0x200009ec
 8010674:	08015a14 	.word	0x08015a14
 8010678:	080159dc 	.word	0x080159dc

0801067c <acc_confprogram_modify_bin>:
 801067c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010680:	b085      	sub	sp, #20
 8010682:	2401      	movs	r4, #1
 8010684:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8010688:	fa04 f703 	lsl.w	r7, r4, r3
 801068c:	4547      	cmp	r7, r8
 801068e:	461e      	mov	r6, r3
 8010690:	460b      	mov	r3, r1
 8010692:	d80d      	bhi.n	80106b0 <acc_confprogram_modify_bin+0x34>
 8010694:	4a17      	ldr	r2, [pc, #92]	@ (80106f4 <acc_confprogram_modify_bin+0x78>)
 8010696:	f8cd 8000 	str.w	r8, [sp]
 801069a:	3f01      	subs	r7, #1
 801069c:	9701      	str	r7, [sp, #4]
 801069e:	6914      	ldr	r4, [r2, #16]
 80106a0:	4915      	ldr	r1, [pc, #84]	@ (80106f8 <acc_confprogram_modify_bin+0x7c>)
 80106a2:	4a16      	ldr	r2, [pc, #88]	@ (80106fc <acc_confprogram_modify_bin+0x80>)
 80106a4:	2000      	movs	r0, #0
 80106a6:	47a0      	blx	r4
 80106a8:	2000      	movs	r0, #0
 80106aa:	b005      	add	sp, #20
 80106ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106b0:	eb00 0541 	add.w	r5, r0, r1, lsl #1
 80106b4:	4691      	mov	r9, r2
 80106b6:	4628      	mov	r0, r5
 80106b8:	4622      	mov	r2, r4
 80106ba:	a902      	add	r1, sp, #8
 80106bc:	f000 faf8 	bl	8010cb0 <acc_utils_transfer_buffer_to_uint32>
 80106c0:	f1c6 0620 	rsb	r6, r6, #32
 80106c4:	f04f 32ff 	mov.w	r2, #4294967295
 80106c8:	fa22 f606 	lsr.w	r6, r2, r6
 80106cc:	9a02      	ldr	r2, [sp, #8]
 80106ce:	fa06 f609 	lsl.w	r6, r6, r9
 80106d2:	fa08 f809 	lsl.w	r8, r8, r9
 80106d6:	ea22 0206 	bic.w	r2, r2, r6
 80106da:	ea42 0608 	orr.w	r6, r2, r8
 80106de:	a803      	add	r0, sp, #12
 80106e0:	4629      	mov	r1, r5
 80106e2:	4622      	mov	r2, r4
 80106e4:	9603      	str	r6, [sp, #12]
 80106e6:	f000 fad5 	bl	8010c94 <acc_utils_uint32_to_transfer_buffer>
 80106ea:	4620      	mov	r0, r4
 80106ec:	b005      	add	sp, #20
 80106ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106f2:	bf00      	nop
 80106f4:	200009ec 	.word	0x200009ec
 80106f8:	08015a14 	.word	0x08015a14
 80106fc:	08015a20 	.word	0x08015a20

08010700 <acc_confprogram_modify_runif>:
 8010700:	b570      	push	{r4, r5, r6, lr}
 8010702:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 8010706:	b082      	sub	sp, #8
 8010708:	2201      	movs	r2, #1
 801070a:	460e      	mov	r6, r1
 801070c:	4620      	mov	r0, r4
 801070e:	4669      	mov	r1, sp
 8010710:	461d      	mov	r5, r3
 8010712:	f000 facd 	bl	8010cb0 <acc_utils_transfer_buffer_to_uint32>
 8010716:	9a00      	ldr	r2, [sp, #0]
 8010718:	f022 020f 	bic.w	r2, r2, #15
 801071c:	b105      	cbz	r5, 8010720 <acc_confprogram_modify_runif+0x20>
 801071e:	4332      	orrs	r2, r6
 8010720:	9201      	str	r2, [sp, #4]
 8010722:	4621      	mov	r1, r4
 8010724:	2201      	movs	r2, #1
 8010726:	a801      	add	r0, sp, #4
 8010728:	f000 fab4 	bl	8010c94 <acc_utils_uint32_to_transfer_buffer>
 801072c:	b002      	add	sp, #8
 801072e:	bd70      	pop	{r4, r5, r6, pc}

08010730 <acc_confprogram_patch_offset>:
 8010730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010734:	b083      	sub	sp, #12
 8010736:	f8bd 7028 	ldrh.w	r7, [sp, #40]	@ 0x28
 801073a:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 801073e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010742:	887b      	ldrh	r3, [r7, #2]
 8010744:	b303      	cbz	r3, 8010788 <acc_confprogram_patch_offset+0x58>
 8010746:	460d      	mov	r5, r1
 8010748:	6879      	ldr	r1, [r7, #4]
 801074a:	4680      	mov	r8, r0
 801074c:	18ae      	adds	r6, r5, r2
 801074e:	2400      	movs	r4, #0
 8010750:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8010754:	0042      	lsls	r2, r0, #1
 8010756:	b292      	uxth	r2, r2
 8010758:	42aa      	cmp	r2, r5
 801075a:	d312      	bcc.n	8010782 <acc_confprogram_patch_offset+0x52>
 801075c:	42b2      	cmp	r2, r6
 801075e:	da10      	bge.n	8010782 <acc_confprogram_patch_offset+0x52>
 8010760:	f3c0 7301 	ubfx	r3, r0, #28, #2
 8010764:	2b01      	cmp	r3, #1
 8010766:	d036      	beq.n	80107d6 <acc_confprogram_patch_offset+0xa6>
 8010768:	2b02      	cmp	r3, #2
 801076a:	d024      	beq.n	80107b6 <acc_confprogram_patch_offset+0x86>
 801076c:	b183      	cbz	r3, 8010790 <acc_confprogram_patch_offset+0x60>
 801076e:	4b1e      	ldr	r3, [pc, #120]	@ (80107e8 <acc_confprogram_patch_offset+0xb8>)
 8010770:	4a1e      	ldr	r2, [pc, #120]	@ (80107ec <acc_confprogram_patch_offset+0xbc>)
 8010772:	691b      	ldr	r3, [r3, #16]
 8010774:	491e      	ldr	r1, [pc, #120]	@ (80107f0 <acc_confprogram_patch_offset+0xc0>)
 8010776:	2000      	movs	r0, #0
 8010778:	4798      	blx	r3
 801077a:	2000      	movs	r0, #0
 801077c:	b003      	add	sp, #12
 801077e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010782:	3401      	adds	r4, #1
 8010784:	42a3      	cmp	r3, r4
 8010786:	d8e3      	bhi.n	8010750 <acc_confprogram_patch_offset+0x20>
 8010788:	2001      	movs	r0, #1
 801078a:	b003      	add	sp, #12
 801078c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010790:	1b52      	subs	r2, r2, r5
 8010792:	f3c0 5344 	ubfx	r3, r0, #21, #5
 8010796:	b291      	uxth	r1, r2
 8010798:	f8cd 9000 	str.w	r9, [sp]
 801079c:	f3c0 4204 	ubfx	r2, r0, #16, #5
 80107a0:	4640      	mov	r0, r8
 80107a2:	f7ff ff6b 	bl	801067c <acc_confprogram_modify_bin>
 80107a6:	887b      	ldrh	r3, [r7, #2]
 80107a8:	3401      	adds	r4, #1
 80107aa:	42a3      	cmp	r3, r4
 80107ac:	d9e6      	bls.n	801077c <acc_confprogram_patch_offset+0x4c>
 80107ae:	2800      	cmp	r0, #0
 80107b0:	d0e4      	beq.n	801077c <acc_confprogram_patch_offset+0x4c>
 80107b2:	6879      	ldr	r1, [r7, #4]
 80107b4:	e7cc      	b.n	8010750 <acc_confprogram_patch_offset+0x20>
 80107b6:	1b52      	subs	r2, r2, r5
 80107b8:	fab9 f389 	clz	r3, r9
 80107bc:	b292      	uxth	r2, r2
 80107be:	f3c0 4103 	ubfx	r1, r0, #16, #4
 80107c2:	095b      	lsrs	r3, r3, #5
 80107c4:	4640      	mov	r0, r8
 80107c6:	f7ff ff9b 	bl	8010700 <acc_confprogram_modify_runif>
 80107ca:	887b      	ldrh	r3, [r7, #2]
 80107cc:	3401      	adds	r4, #1
 80107ce:	42a3      	cmp	r3, r4
 80107d0:	d8ef      	bhi.n	80107b2 <acc_confprogram_patch_offset+0x82>
 80107d2:	2001      	movs	r0, #1
 80107d4:	e7d9      	b.n	801078a <acc_confprogram_patch_offset+0x5a>
 80107d6:	1b52      	subs	r2, r2, r5
 80107d8:	f1b9 0300 	subs.w	r3, r9, #0
 80107dc:	b292      	uxth	r2, r2
 80107de:	f3c0 4103 	ubfx	r1, r0, #16, #4
 80107e2:	bf18      	it	ne
 80107e4:	2301      	movne	r3, #1
 80107e6:	e7ed      	b.n	80107c4 <acc_confprogram_patch_offset+0x94>
 80107e8:	200009ec 	.word	0x200009ec
 80107ec:	08015a58 	.word	0x08015a58
 80107f0:	08015a14 	.word	0x08015a14

080107f4 <acc_confprogram_live_patch>:
 80107f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f8:	b083      	sub	sp, #12
 80107fa:	e9dd 9a0d 	ldrd	r9, sl, [sp, #52]	@ 0x34
 80107fe:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 8010802:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010806:	8873      	ldrh	r3, [r6, #2]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d050      	beq.n	80108ae <acc_confprogram_live_patch+0xba>
 801080c:	4607      	mov	r7, r0
 801080e:	468b      	mov	fp, r1
 8010810:	4690      	mov	r8, r2
 8010812:	2501      	movs	r5, #1
 8010814:	6873      	ldr	r3, [r6, #4]
 8010816:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801081a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801081e:	f3c0 7401 	ubfx	r4, r0, #28, #2
 8010822:	2c01      	cmp	r4, #1
 8010824:	d00c      	beq.n	8010840 <acc_confprogram_live_patch+0x4c>
 8010826:	2c02      	cmp	r4, #2
 8010828:	d032      	beq.n	8010890 <acc_confprogram_live_patch+0x9c>
 801082a:	b1ec      	cbz	r4, 8010868 <acc_confprogram_live_patch+0x74>
 801082c:	4b22      	ldr	r3, [pc, #136]	@ (80108b8 <acc_confprogram_live_patch+0xc4>)
 801082e:	4a23      	ldr	r2, [pc, #140]	@ (80108bc <acc_confprogram_live_patch+0xc8>)
 8010830:	691b      	ldr	r3, [r3, #16]
 8010832:	4923      	ldr	r1, [pc, #140]	@ (80108c0 <acc_confprogram_live_patch+0xcc>)
 8010834:	2000      	movs	r0, #0
 8010836:	4798      	blx	r3
 8010838:	2000      	movs	r0, #0
 801083a:	b003      	add	sp, #12
 801083c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010840:	eb08 0100 	add.w	r1, r8, r0
 8010844:	b289      	uxth	r1, r1
 8010846:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 801084a:	f022 020f 	bic.w	r2, r2, #15
 801084e:	f1b9 0f00 	cmp.w	r9, #0
 8010852:	d002      	beq.n	801085a <acc_confprogram_live_patch+0x66>
 8010854:	f3c0 4003 	ubfx	r0, r0, #16, #4
 8010858:	4302      	orrs	r2, r0
 801085a:	4638      	mov	r0, r7
 801085c:	47d0      	blx	sl
 801085e:	8873      	ldrh	r3, [r6, #2]
 8010860:	42ab      	cmp	r3, r5
 8010862:	d924      	bls.n	80108ae <acc_confprogram_live_patch+0xba>
 8010864:	3501      	adds	r5, #1
 8010866:	e7d5      	b.n	8010814 <acc_confprogram_live_patch+0x20>
 8010868:	eb08 0100 	add.w	r1, r8, r0
 801086c:	f3c0 5344 	ubfx	r3, r0, #21, #5
 8010870:	f3c0 4204 	ubfx	r2, r0, #16, #5
 8010874:	e9cd 9a00 	strd	r9, sl, [sp]
 8010878:	b289      	uxth	r1, r1
 801087a:	4638      	mov	r0, r7
 801087c:	f7ff fec2 	bl	8010604 <acc_confprogram_modify_bin_sensor>
 8010880:	8873      	ldrh	r3, [r6, #2]
 8010882:	42ab      	cmp	r3, r5
 8010884:	d9d9      	bls.n	801083a <acc_confprogram_live_patch+0x46>
 8010886:	2800      	cmp	r0, #0
 8010888:	d1ec      	bne.n	8010864 <acc_confprogram_live_patch+0x70>
 801088a:	b003      	add	sp, #12
 801088c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010890:	eb08 0100 	add.w	r1, r8, r0
 8010894:	b289      	uxth	r1, r1
 8010896:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 801089a:	f022 020f 	bic.w	r2, r2, #15
 801089e:	f1b9 0f00 	cmp.w	r9, #0
 80108a2:	d0d7      	beq.n	8010854 <acc_confprogram_live_patch+0x60>
 80108a4:	4638      	mov	r0, r7
 80108a6:	47d0      	blx	sl
 80108a8:	8873      	ldrh	r3, [r6, #2]
 80108aa:	42ab      	cmp	r3, r5
 80108ac:	d8da      	bhi.n	8010864 <acc_confprogram_live_patch+0x70>
 80108ae:	2001      	movs	r0, #1
 80108b0:	b003      	add	sp, #12
 80108b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108b6:	bf00      	nop
 80108b8:	200009ec 	.word	0x200009ec
 80108bc:	08015a7c 	.word	0x08015a7c
 80108c0:	08015a14 	.word	0x08015a14

080108c4 <acc_confprogram_copy>:
 80108c4:	b152      	cbz	r2, 80108dc <acc_confprogram_copy+0x18>
 80108c6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80108ca:	3804      	subs	r0, #4
 80108cc:	f850 3f04 	ldr.w	r3, [r0, #4]!
 80108d0:	804b      	strh	r3, [r1, #2]
 80108d2:	0c1b      	lsrs	r3, r3, #16
 80108d4:	800b      	strh	r3, [r1, #0]
 80108d6:	3104      	adds	r1, #4
 80108d8:	4291      	cmp	r1, r2
 80108da:	d1f7      	bne.n	80108cc <acc_confprogram_copy+0x8>
 80108dc:	4770      	bx	lr
 80108de:	bf00      	nop

080108e0 <acc_confprogram_get_parameter_patch_range>:
 80108e0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80108e4:	b470      	push	{r4, r5, r6}
 80108e6:	884e      	ldrh	r6, [r1, #2]
 80108e8:	b1c6      	cbz	r6, 801091c <acc_confprogram_get_parameter_patch_range+0x3c>
 80108ea:	6848      	ldr	r0, [r1, #4]
 80108ec:	2500      	movs	r5, #0
 80108ee:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80108f2:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 80108f6:	f850 1b04 	ldr.w	r1, [r0], #4
 80108fa:	b289      	uxth	r1, r1
 80108fc:	428c      	cmp	r4, r1
 80108fe:	bf28      	it	cs
 8010900:	460c      	movcs	r4, r1
 8010902:	428d      	cmp	r5, r1
 8010904:	bf38      	it	cc
 8010906:	460d      	movcc	r5, r1
 8010908:	4286      	cmp	r6, r0
 801090a:	d1f4      	bne.n	80108f6 <acc_confprogram_get_parameter_patch_range+0x16>
 801090c:	0064      	lsls	r4, r4, #1
 801090e:	006d      	lsls	r5, r5, #1
 8010910:	b2a4      	uxth	r4, r4
 8010912:	b2ad      	uxth	r5, r5
 8010914:	8014      	strh	r4, [r2, #0]
 8010916:	801d      	strh	r5, [r3, #0]
 8010918:	bc70      	pop	{r4, r5, r6}
 801091a:	4770      	bx	lr
 801091c:	4635      	mov	r5, r6
 801091e:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 8010922:	8014      	strh	r4, [r2, #0]
 8010924:	801d      	strh	r5, [r3, #0]
 8010926:	bc70      	pop	{r4, r5, r6}
 8010928:	4770      	bx	lr
 801092a:	bf00      	nop

0801092c <acc_element_sizeof>:
 801092c:	3801      	subs	r0, #1
 801092e:	b2c0      	uxtb	r0, r0
 8010930:	2807      	cmp	r0, #7
 8010932:	bf9a      	itte	ls
 8010934:	4b02      	ldrls	r3, [pc, #8]	@ (8010940 <acc_element_sizeof+0x14>)
 8010936:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801093a:	2000      	movhi	r0, #0
 801093c:	4770      	bx	lr
 801093e:	bf00      	nop
 8010940:	08015aa4 	.word	0x08015aa4

08010944 <acc_element_connect>:
 8010944:	6001      	str	r1, [r0, #0]
 8010946:	4770      	bx	lr

08010948 <acc_probes_execute_struct>:
 8010948:	b530      	push	{r4, r5, lr}
 801094a:	4c0a      	ldr	r4, [pc, #40]	@ (8010974 <acc_probes_execute_struct+0x2c>)
 801094c:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8010950:	b085      	sub	sp, #20
 8010952:	6865      	ldr	r5, [r4, #4]
 8010954:	f88d 0004 	strb.w	r0, [sp, #4]
 8010958:	2007      	movs	r0, #7
 801095a:	e9cd 1002 	strd	r1, r0, [sp, #8]
 801095e:	b135      	cbz	r5, 801096e <acc_probes_execute_struct+0x26>
 8010960:	4611      	mov	r1, r2
 8010962:	a801      	add	r0, sp, #4
 8010964:	461a      	mov	r2, r3
 8010966:	68e3      	ldr	r3, [r4, #12]
 8010968:	47a8      	blx	r5
 801096a:	b005      	add	sp, #20
 801096c:	bd30      	pop	{r4, r5, pc}
 801096e:	2001      	movs	r0, #1
 8010970:	b005      	add	sp, #20
 8010972:	bd30      	pop	{r4, r5, pc}
 8010974:	2000005c 	.word	0x2000005c

08010978 <acc_sensor_reg_read>:
 8010978:	b530      	push	{r4, r5, lr}
 801097a:	b083      	sub	sp, #12
 801097c:	f441 5140 	orr.w	r1, r1, #12288	@ 0x3000
 8010980:	4614      	mov	r4, r2
 8010982:	2500      	movs	r5, #0
 8010984:	f8ad 1000 	strh.w	r1, [sp]
 8010988:	2301      	movs	r3, #1
 801098a:	2203      	movs	r2, #3
 801098c:	4669      	mov	r1, sp
 801098e:	f8ad 5002 	strh.w	r5, [sp, #2]
 8010992:	f8ad 5004 	strh.w	r5, [sp, #4]
 8010996:	f7fd f96f 	bl	800dc78 <acc_rss_integration_sensor_device_transfer>
 801099a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801099e:	8023      	strh	r3, [r4, #0]
 80109a0:	b003      	add	sp, #12
 80109a2:	bd30      	pop	{r4, r5, pc}

080109a4 <acc_sensor_reg_write>:
 80109a4:	b530      	push	{r4, r5, lr}
 80109a6:	b083      	sub	sp, #12
 80109a8:	f441 5480 	orr.w	r4, r1, #4096	@ 0x1000
 80109ac:	4615      	mov	r5, r2
 80109ae:	2300      	movs	r3, #0
 80109b0:	2202      	movs	r2, #2
 80109b2:	a901      	add	r1, sp, #4
 80109b4:	f8ad 4004 	strh.w	r4, [sp, #4]
 80109b8:	f8ad 5006 	strh.w	r5, [sp, #6]
 80109bc:	f7fd f95c 	bl	800dc78 <acc_rss_integration_sensor_device_transfer>
 80109c0:	b003      	add	sp, #12
 80109c2:	bd30      	pop	{r4, r5, pc}

080109c4 <acc_sensor_reg_field_write>:
 80109c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109c8:	b082      	sub	sp, #8
 80109ca:	461d      	mov	r5, r3
 80109cc:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80109d0:	f8bd 4028 	ldrh.w	r4, [sp, #40]	@ 0x28
 80109d4:	f8ad 3000 	strh.w	r3, [sp]
 80109d8:	2700      	movs	r7, #0
 80109da:	468a      	mov	sl, r1
 80109dc:	4691      	mov	r9, r2
 80109de:	4669      	mov	r1, sp
 80109e0:	2301      	movs	r3, #1
 80109e2:	2203      	movs	r2, #3
 80109e4:	4680      	mov	r8, r0
 80109e6:	f8ad 7002 	strh.w	r7, [sp, #2]
 80109ea:	f8ad 7004 	strh.w	r7, [sp, #4]
 80109ee:	f7fd f943 	bl	800dc78 <acc_rss_integration_sensor_device_transfer>
 80109f2:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 80109f6:	fa04 f10a 	lsl.w	r1, r4, sl
 80109fa:	4071      	eors	r1, r6
 80109fc:	ea01 0409 	and.w	r4, r1, r9
 8010a00:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
 8010a04:	4640      	mov	r0, r8
 8010a06:	463b      	mov	r3, r7
 8010a08:	4669      	mov	r1, sp
 8010a0a:	4074      	eors	r4, r6
 8010a0c:	2202      	movs	r2, #2
 8010a0e:	f8ad 5000 	strh.w	r5, [sp]
 8010a12:	f8ad 4002 	strh.w	r4, [sp, #2]
 8010a16:	f7fd f92f 	bl	800dc78 <acc_rss_integration_sensor_device_transfer>
 8010a1a:	b002      	add	sp, #8
 8010a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010a20 <acc_sensor_conf_read_instr>:
 8010a20:	b530      	push	{r4, r5, lr}
 8010a22:	b085      	sub	sp, #20
 8010a24:	2401      	movs	r4, #1
 8010a26:	f441 4120 	orr.w	r1, r1, #40960	@ 0xa000
 8010a2a:	4623      	mov	r3, r4
 8010a2c:	2500      	movs	r5, #0
 8010a2e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8010a32:	2205      	movs	r2, #5
 8010a34:	a901      	add	r1, sp, #4
 8010a36:	f8ad 4006 	strh.w	r4, [sp, #6]
 8010a3a:	f8ad 5008 	strh.w	r5, [sp, #8]
 8010a3e:	f8cd 500a 	str.w	r5, [sp, #10]
 8010a42:	f7fd f919 	bl	800dc78 <acc_rss_integration_sensor_device_transfer>
 8010a46:	f10d 000a 	add.w	r0, sp, #10
 8010a4a:	4622      	mov	r2, r4
 8010a4c:	4669      	mov	r1, sp
 8010a4e:	f000 f92f 	bl	8010cb0 <acc_utils_transfer_buffer_to_uint32>
 8010a52:	9800      	ldr	r0, [sp, #0]
 8010a54:	b005      	add	sp, #20
 8010a56:	bd30      	pop	{r4, r5, pc}

08010a58 <acc_cpd_pll_divisors_calculate>:
 8010a58:	edd0 7a00 	vldr	s15, [r0]
 8010a5c:	ed9f 6a61 	vldr	s12, [pc, #388]	@ 8010be4 <acc_cpd_pll_divisors_calculate+0x18c>
 8010a60:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8010be8 <acc_cpd_pll_divisors_calculate+0x190>
 8010a64:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8010a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a6a:	4606      	mov	r6, r0
 8010a6c:	b083      	sub	sp, #12
 8010a6e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8010a72:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010a76:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010a7a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8010a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a82:	ee17 3a10 	vmov	r3, s14
 8010a86:	b29c      	uxth	r4, r3
 8010a88:	dc06      	bgt.n	8010a98 <acc_cpd_pll_divisors_calculate+0x40>
 8010a8a:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8010bec <acc_cpd_pll_divisors_calculate+0x194>
 8010a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a96:	d571      	bpl.n	8010b7c <acc_cpd_pll_divisors_calculate+0x124>
 8010a98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aa0:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8010bf0 <acc_cpd_pll_divisors_calculate+0x198>
 8010aa4:	bf4c      	ite	mi
 8010aa6:	4b53      	ldrmi	r3, [pc, #332]	@ (8010bf4 <acc_cpd_pll_divisors_calculate+0x19c>)
 8010aa8:	4b53      	ldrpl	r3, [pc, #332]	@ (8010bf8 <acc_cpd_pll_divisors_calculate+0x1a0>)
 8010aaa:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 8010bf0 <acc_cpd_pll_divisors_calculate+0x198>
 8010aae:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8010bfc <acc_cpd_pll_divisors_calculate+0x1a4>
 8010ab2:	4d53      	ldr	r5, [pc, #332]	@ (8010c00 <acc_cpd_pll_divisors_calculate+0x1a8>)
 8010ab4:	4953      	ldr	r1, [pc, #332]	@ (8010c04 <acc_cpd_pll_divisors_calculate+0x1ac>)
 8010ab6:	692f      	ldr	r7, [r5, #16]
 8010ab8:	bf48      	it	mi
 8010aba:	eef1 7a67 	vnegmi.f32	s15, s15
 8010abe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010ac2:	2000      	movs	r0, #0
 8010ac4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8010ac8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ad0:	ee17 2a10 	vmov	r2, s14
 8010ad4:	bf4c      	ite	mi
 8010ad6:	eeb1 7a67 	vnegmi.f32	s14, s15
 8010ada:	eeb0 7a67 	vmovpl.f32	s14, s15
 8010ade:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010ae2:	9200      	str	r2, [sp, #0]
 8010ae4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8010ae8:	4a47      	ldr	r2, [pc, #284]	@ (8010c08 <acc_cpd_pll_divisors_calculate+0x1b0>)
 8010aea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8010aee:	3c10      	subs	r4, #16
 8010af0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010af4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010afc:	edcd 7a01 	vstr	s15, [sp, #4]
 8010b00:	47b8      	blx	r7
 8010b02:	2cef      	cmp	r4, #239	@ 0xef
 8010b04:	d937      	bls.n	8010b76 <acc_cpd_pll_divisors_calculate+0x11e>
 8010b06:	edd6 7a00 	vldr	s15, [r6]
 8010b0a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8010bf0 <acc_cpd_pll_divisors_calculate+0x198>
 8010b0e:	ed9f 6a38 	vldr	s12, [pc, #224]	@ 8010bf0 <acc_cpd_pll_divisors_calculate+0x198>
 8010b12:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8010bfc <acc_cpd_pll_divisors_calculate+0x1a4>
 8010b16:	692c      	ldr	r4, [r5, #16]
 8010b18:	493a      	ldr	r1, [pc, #232]	@ (8010c04 <acc_cpd_pll_divisors_calculate+0x1ac>)
 8010b1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b22:	bf48      	it	mi
 8010b24:	eef1 7a67 	vnegmi.f32	s15, s15
 8010b28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010b2c:	bf4c      	ite	mi
 8010b2e:	4b31      	ldrmi	r3, [pc, #196]	@ (8010bf4 <acc_cpd_pll_divisors_calculate+0x19c>)
 8010b30:	4b31      	ldrpl	r3, [pc, #196]	@ (8010bf8 <acc_cpd_pll_divisors_calculate+0x1a0>)
 8010b32:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8010b36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b3e:	ee17 2a10 	vmov	r2, s14
 8010b42:	bf4c      	ite	mi
 8010b44:	eeb1 7a67 	vnegmi.f32	s14, s15
 8010b48:	eeb0 7a67 	vmovpl.f32	s14, s15
 8010b4c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010b50:	9200      	str	r2, [sp, #0]
 8010b52:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8010b56:	4a2c      	ldr	r2, [pc, #176]	@ (8010c08 <acc_cpd_pll_divisors_calculate+0x1b0>)
 8010b58:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8010b5c:	2000      	movs	r0, #0
 8010b5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010b62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010b6a:	edcd 7a01 	vstr	s15, [sp, #4]
 8010b6e:	47a0      	blx	r4
 8010b70:	2000      	movs	r0, #0
 8010b72:	b003      	add	sp, #12
 8010b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b76:	2000      	movs	r0, #0
 8010b78:	b003      	add	sp, #12
 8010b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b7c:	f1a4 0310 	sub.w	r3, r4, #16
 8010b80:	b29b      	uxth	r3, r3
 8010b82:	2bef      	cmp	r3, #239	@ 0xef
 8010b84:	d901      	bls.n	8010b8a <acc_cpd_pll_divisors_calculate+0x132>
 8010b86:	4d1e      	ldr	r5, [pc, #120]	@ (8010c00 <acc_cpd_pll_divisors_calculate+0x1a8>)
 8010b88:	e7bf      	b.n	8010b0a <acc_cpd_pll_divisors_calculate+0xb2>
 8010b8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010b8e:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8010c0c <acc_cpd_pll_divisors_calculate+0x1b4>
 8010b92:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8010c10 <acc_cpd_pll_divisors_calculate+0x1b8>
 8010b96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010b9a:	2c3f      	cmp	r4, #63	@ 0x3f
 8010b9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ba4:	ee17 2a90 	vmov	r2, s15
 8010ba8:	810a      	strh	r2, [r1, #8]
 8010baa:	d912      	bls.n	8010bd2 <acc_cpd_pll_divisors_calculate+0x17a>
 8010bac:	2cbf      	cmp	r4, #191	@ 0xbf
 8010bae:	f04f 0301 	mov.w	r3, #1
 8010bb2:	bf98      	it	ls
 8010bb4:	f1a4 0240 	subls.w	r2, r4, #64	@ 0x40
 8010bb8:	804b      	strh	r3, [r1, #2]
 8010bba:	bf8c      	ite	hi
 8010bbc:	08e2      	lsrhi	r2, r4, #3
 8010bbe:	f3c2 02cf 	ubfxls	r2, r2, #3, #16
 8010bc2:	f004 0307 	and.w	r3, r4, #7
 8010bc6:	808a      	strh	r2, [r1, #4]
 8010bc8:	80cb      	strh	r3, [r1, #6]
 8010bca:	2001      	movs	r0, #1
 8010bcc:	800c      	strh	r4, [r1, #0]
 8010bce:	b003      	add	sp, #12
 8010bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	2c2f      	cmp	r4, #47	@ 0x2f
 8010bd6:	bf88      	it	hi
 8010bd8:	4623      	movhi	r3, r4
 8010bda:	808b      	strh	r3, [r1, #4]
 8010bdc:	804a      	strh	r2, [r1, #2]
 8010bde:	80ca      	strh	r2, [r1, #6]
 8010be0:	e7f3      	b.n	8010bca <acc_cpd_pll_divisors_calculate+0x172>
 8010be2:	bf00      	nop
 8010be4:	4f1502f9 	.word	0x4f1502f9
 8010be8:	4c989680 	.word	0x4c989680
 8010bec:	4b989680 	.word	0x4b989680
 8010bf0:	350637bd 	.word	0x350637bd
 8010bf4:	08015500 	.word	0x08015500
 8010bf8:	080150f8 	.word	0x080150f8
 8010bfc:	49742400 	.word	0x49742400
 8010c00:	200009ec 	.word	0x200009ec
 8010c04:	08015af0 	.word	0x08015af0
 8010c08:	08015ac4 	.word	0x08015ac4
 8010c0c:	b55b38e8 	.word	0xb55b38e8
 8010c10:	427c0000 	.word	0x427c0000

08010c14 <acc_cpd_pll_divisors_ref_divisor>:
 8010c14:	eddf 7a02 	vldr	s15, [pc, #8]	@ 8010c20 <acc_cpd_pll_divisors_ref_divisor+0xc>
 8010c18:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8010c1c:	f002 bd0c 	b.w	8013638 <roundf>
 8010c20:	4f1502f9 	.word	0x4f1502f9

08010c24 <acc_dll_calculate_area_settings>:
 8010c24:	0080      	lsls	r0, r0, #2
 8010c26:	b280      	uxth	r0, r0
 8010c28:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 8010c2c:	b29b      	uxth	r3, r3
 8010c2e:	428b      	cmp	r3, r1
 8010c30:	8010      	strh	r0, [r2, #0]
 8010c32:	8053      	strh	r3, [r2, #2]
 8010c34:	d20c      	bcs.n	8010c50 <acc_dll_calculate_area_settings+0x2c>
 8010c36:	2301      	movs	r3, #1
 8010c38:	2100      	movs	r1, #0
 8010c3a:	2003      	movs	r0, #3
 8010c3c:	8093      	strh	r3, [r2, #4]
 8010c3e:	8153      	strh	r3, [r2, #10]
 8010c40:	8193      	strh	r3, [r2, #12]
 8010c42:	8213      	strh	r3, [r2, #16]
 8010c44:	80d1      	strh	r1, [r2, #6]
 8010c46:	8251      	strh	r1, [r2, #18]
 8010c48:	8291      	strh	r1, [r2, #20]
 8010c4a:	8110      	strh	r0, [r2, #8]
 8010c4c:	81d0      	strh	r0, [r2, #14]
 8010c4e:	4770      	bx	lr
 8010c50:	b430      	push	{r4, r5}
 8010c52:	fbb3 f4f1 	udiv	r4, r3, r1
 8010c56:	2500      	movs	r5, #0
 8010c58:	fb01 3114 	mls	r1, r1, r4, r3
 8010c5c:	2401      	movs	r4, #1
 8010c5e:	2303      	movs	r3, #3
 8010c60:	8094      	strh	r4, [r2, #4]
 8010c62:	80d4      	strh	r4, [r2, #6]
 8010c64:	8154      	strh	r4, [r2, #10]
 8010c66:	8214      	strh	r4, [r2, #16]
 8010c68:	8254      	strh	r4, [r2, #18]
 8010c6a:	8195      	strh	r5, [r2, #12]
 8010c6c:	81d5      	strh	r5, [r2, #14]
 8010c6e:	8295      	strh	r5, [r2, #20]
 8010c70:	8050      	strh	r0, [r2, #2]
 8010c72:	bc30      	pop	{r4, r5}
 8010c74:	8011      	strh	r1, [r2, #0]
 8010c76:	8113      	strh	r3, [r2, #8]
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop

08010c7c <acc_utils_swap16_array>:
 8010c7c:	b141      	cbz	r1, 8010c90 <acc_utils_swap16_array+0x14>
 8010c7e:	3802      	subs	r0, #2
 8010c80:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8010c84:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010c88:	ba5b      	rev16	r3, r3
 8010c8a:	4288      	cmp	r0, r1
 8010c8c:	8003      	strh	r3, [r0, #0]
 8010c8e:	d1f9      	bne.n	8010c84 <acc_utils_swap16_array+0x8>
 8010c90:	4770      	bx	lr
 8010c92:	bf00      	nop

08010c94 <acc_utils_uint32_to_transfer_buffer>:
 8010c94:	b152      	cbz	r2, 8010cac <acc_utils_uint32_to_transfer_buffer+0x18>
 8010c96:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010c9a:	3804      	subs	r0, #4
 8010c9c:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8010ca0:	804b      	strh	r3, [r1, #2]
 8010ca2:	0c1b      	lsrs	r3, r3, #16
 8010ca4:	800b      	strh	r3, [r1, #0]
 8010ca6:	3104      	adds	r1, #4
 8010ca8:	4291      	cmp	r1, r2
 8010caa:	d1f7      	bne.n	8010c9c <acc_utils_uint32_to_transfer_buffer+0x8>
 8010cac:	4770      	bx	lr
 8010cae:	bf00      	nop

08010cb0 <acc_utils_transfer_buffer_to_uint32>:
 8010cb0:	b17a      	cbz	r2, 8010cd2 <acc_utils_transfer_buffer_to_uint32+0x22>
 8010cb2:	b410      	push	{r4}
 8010cb4:	3904      	subs	r1, #4
 8010cb6:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8010cba:	8802      	ldrh	r2, [r0, #0]
 8010cbc:	8843      	ldrh	r3, [r0, #2]
 8010cbe:	3004      	adds	r0, #4
 8010cc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010cc4:	4284      	cmp	r4, r0
 8010cc6:	f841 3f04 	str.w	r3, [r1, #4]!
 8010cca:	d1f6      	bne.n	8010cba <acc_utils_transfer_buffer_to_uint32+0xa>
 8010ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cd0:	4770      	bx	lr
 8010cd2:	4770      	bx	lr

08010cd4 <acc_alg_temp>:
 8010cd4:	f240 13e5 	movw	r3, #485	@ 0x1e5
 8010cd8:	fb03 f000 	mul.w	r0, r3, r0
 8010cdc:	0c00      	lsrs	r0, r0, #16
 8010cde:	f5a0 7089 	sub.w	r0, r0, #274	@ 0x112
 8010ce2:	4770      	bx	lr

08010ce4 <acc_diagnostic_log_set_scope>:
 8010ce4:	4b02      	ldr	r3, [pc, #8]	@ (8010cf0 <acc_diagnostic_log_set_scope+0xc>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	b10b      	cbz	r3, 8010cee <acc_diagnostic_log_set_scope+0xa>
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	4718      	bx	r3
 8010cee:	4770      	bx	lr
 8010cf0:	2000089c 	.word	0x2000089c

08010cf4 <acc_diagnostic_log_array>:
 8010cf4:	4b02      	ldr	r3, [pc, #8]	@ (8010d00 <acc_diagnostic_log_array+0xc>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	b10b      	cbz	r3, 8010cfe <acc_diagnostic_log_array+0xa>
 8010cfa:	68db      	ldr	r3, [r3, #12]
 8010cfc:	4718      	bx	r3
 8010cfe:	4770      	bx	lr
 8010d00:	2000089c 	.word	0x2000089c

08010d04 <acc_diagnostic_log_scalar>:
 8010d04:	4b02      	ldr	r3, [pc, #8]	@ (8010d10 <acc_diagnostic_log_scalar+0xc>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	b10b      	cbz	r3, 8010d0e <acc_diagnostic_log_scalar+0xa>
 8010d0a:	695b      	ldr	r3, [r3, #20]
 8010d0c:	4718      	bx	r3
 8010d0e:	4770      	bx	lr
 8010d10:	2000089c 	.word	0x2000089c

08010d14 <acc_diagnostic_log_data_u16>:
 8010d14:	4b02      	ldr	r3, [pc, #8]	@ (8010d20 <acc_diagnostic_log_data_u16+0xc>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	b10b      	cbz	r3, 8010d1e <acc_diagnostic_log_data_u16+0xa>
 8010d1a:	6a1b      	ldr	r3, [r3, #32]
 8010d1c:	4718      	bx	r3
 8010d1e:	4770      	bx	lr
 8010d20:	2000089c 	.word	0x2000089c

08010d24 <acc_diagnostic_log_data_i16>:
 8010d24:	4b02      	ldr	r3, [pc, #8]	@ (8010d30 <acc_diagnostic_log_data_i16+0xc>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	b10b      	cbz	r3, 8010d2e <acc_diagnostic_log_data_i16+0xa>
 8010d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d2c:	4718      	bx	r3
 8010d2e:	4770      	bx	lr
 8010d30:	2000089c 	.word	0x2000089c

08010d34 <acc_image_a121_r1a_cal_session_get>:
 8010d34:	4800      	ldr	r0, [pc, #0]	@ (8010d38 <acc_image_a121_r1a_cal_session_get+0x4>)
 8010d36:	4770      	bx	lr
 8010d38:	08015b04 	.word	0x08015b04

08010d3c <acc_image_a121_r1a_cal_session_param_table_get>:
 8010d3c:	4800      	ldr	r0, [pc, #0]	@ (8010d40 <acc_image_a121_r1a_cal_session_param_table_get+0x4>)
 8010d3e:	4770      	bx	lr
 8010d40:	08017198 	.word	0x08017198

08010d44 <acc_alg_comp_iq_imb>:
 8010d44:	b430      	push	{r4, r5}
 8010d46:	8814      	ldrh	r4, [r2, #0]
 8010d48:	9a02      	ldr	r2, [sp, #8]
 8010d4a:	f004 051f 	and.w	r5, r4, #31
 8010d4e:	3530      	adds	r5, #48	@ 0x30
 8010d50:	fb00 f005 	mul.w	r0, r0, r5
 8010d54:	0aa5      	lsrs	r5, r4, #10
 8010d56:	3d20      	subs	r5, #32
 8010d58:	f3c4 1444 	ubfx	r4, r4, #5, #5
 8010d5c:	fb01 f505 	mul.w	r5, r1, r5
 8010d60:	2800      	cmp	r0, #0
 8010d62:	f104 0430 	add.w	r4, r4, #48	@ 0x30
 8010d66:	fb01 f104 	mul.w	r1, r1, r4
 8010d6a:	bfb8      	it	lt
 8010d6c:	303f      	addlt	r0, #63	@ 0x3f
 8010d6e:	2d00      	cmp	r5, #0
 8010d70:	bfb8      	it	lt
 8010d72:	351f      	addlt	r5, #31
 8010d74:	2900      	cmp	r1, #0
 8010d76:	ea4f 10a0 	mov.w	r0, r0, asr #6
 8010d7a:	bfb8      	it	lt
 8010d7c:	313f      	addlt	r1, #63	@ 0x3f
 8010d7e:	eb00 1065 	add.w	r0, r0, r5, asr #5
 8010d82:	1189      	asrs	r1, r1, #6
 8010d84:	8018      	strh	r0, [r3, #0]
 8010d86:	bc30      	pop	{r4, r5}
 8010d88:	8011      	strh	r1, [r2, #0]
 8010d8a:	4770      	bx	lr

08010d8c <acc_alg_iq_imb_comp_to_fix_point>:
 8010d8c:	eef6 7a08 	vmov.f32	s15, #104	@ 0x3f400000  0.750
 8010d90:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8010e6c <acc_alg_iq_imb_comp_to_fix_point+0xe0>
 8010d94:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8010e70 <acc_alg_iq_imb_comp_to_fix_point+0xe4>
 8010d98:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010d9c:	ee31 1a67 	vsub.f32	s2, s2, s15
 8010da0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010da4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010da8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8010dac:	ee70 0a86 	vadd.f32	s1, s1, s12
 8010db0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010db4:	ee21 1a07 	vmul.f32	s2, s2, s14
 8010db8:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 8010dbc:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8010dc0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc8:	ee31 1a27 	vadd.f32	s2, s2, s15
 8010dcc:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8010dd0:	dc22      	bgt.n	8010e18 <acc_alg_iq_imb_comp_to_fix_point+0x8c>
 8010dd2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dda:	bf48      	it	mi
 8010ddc:	2300      	movmi	r3, #0
 8010dde:	d537      	bpl.n	8010e50 <acc_alg_iq_imb_comp_to_fix_point+0xc4>
 8010de0:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8010e74 <acc_alg_iq_imb_comp_to_fix_point+0xe8>
 8010de4:	eef4 0ae7 	vcmpe.f32	s1, s15
 8010de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dec:	dd1d      	ble.n	8010e2a <acc_alg_iq_imb_comp_to_fix_point+0x9e>
 8010dee:	ea6f 5383 	mvn.w	r3, r3, lsl #22
 8010df2:	ea6f 5393 	mvn.w	r3, r3, lsr #22
 8010df6:	eef3 7a0f 	vmov.f32	s15, #63	@ 0x41f80000  31.0
 8010dfa:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8010dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e02:	dc20      	bgt.n	8010e46 <acc_alg_iq_imb_comp_to_fix_point+0xba>
 8010e04:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8010e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e0c:	bf48      	it	mi
 8010e0e:	2200      	movmi	r2, #0
 8010e10:	d524      	bpl.n	8010e5c <acc_alg_iq_imb_comp_to_fix_point+0xd0>
 8010e12:	4313      	orrs	r3, r2
 8010e14:	8003      	strh	r3, [r0, #0]
 8010e16:	4770      	bx	lr
 8010e18:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8010e74 <acc_alg_iq_imb_comp_to_fix_point+0xe8>
 8010e1c:	eef4 0ae7 	vcmpe.f32	s1, s15
 8010e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e24:	f04f 031f 	mov.w	r3, #31
 8010e28:	dce1      	bgt.n	8010dee <acc_alg_iq_imb_comp_to_fix_point+0x62>
 8010e2a:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8010e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e32:	d4e0      	bmi.n	8010df6 <acc_alg_iq_imb_comp_to_fix_point+0x6a>
 8010e34:	eefc 0ae0 	vcvt.u32.f32	s1, s1
 8010e38:	ee10 2a90 	vmov	r2, s1
 8010e3c:	b292      	uxth	r2, r2
 8010e3e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8010e42:	b21b      	sxth	r3, r3
 8010e44:	e7d7      	b.n	8010df6 <acc_alg_iq_imb_comp_to_fix_point+0x6a>
 8010e46:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8010e4a:	4313      	orrs	r3, r2
 8010e4c:	8003      	strh	r3, [r0, #0]
 8010e4e:	4770      	bx	lr
 8010e50:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8010e54:	ee10 3a10 	vmov	r3, s0
 8010e58:	b21b      	sxth	r3, r3
 8010e5a:	e7c1      	b.n	8010de0 <acc_alg_iq_imb_comp_to_fix_point+0x54>
 8010e5c:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 8010e60:	ee17 2a90 	vmov	r2, s15
 8010e64:	f342 020a 	sbfx	r2, r2, #0, #11
 8010e68:	0152      	lsls	r2, r2, #5
 8010e6a:	e7d2      	b.n	8010e12 <acc_alg_iq_imb_comp_to_fix_point+0x86>
 8010e6c:	42800000 	.word	0x42800000
 8010e70:	42000000 	.word	0x42000000
 8010e74:	427c0000 	.word	0x427c0000

08010e78 <element_frame_reset>:
 8010e78:	6800      	ldr	r0, [r0, #0]
 8010e7a:	68c3      	ldr	r3, [r0, #12]
 8010e7c:	4718      	bx	r3
 8010e7e:	bf00      	nop

08010e80 <element_frame_callback>:
 8010e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e82:	6995      	ldr	r5, [r2, #24]
 8010e84:	782b      	ldrb	r3, [r5, #0]
 8010e86:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 8010e8a:	4614      	mov	r4, r2
 8010e8c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8010e90:	460f      	mov	r7, r1
 8010e92:	f8b3 6044 	ldrh.w	r6, [r3, #68]	@ 0x44
 8010e96:	6963      	ldr	r3, [r4, #20]
 8010e98:	4601      	mov	r1, r0
 8010e9a:	0072      	lsls	r2, r6, #1
 8010e9c:	eb03 004e 	add.w	r0, r3, lr, lsl #1
 8010ea0:	f001 f808 	bl	8011eb4 <memmove>
 8010ea4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8010ea6:	8869      	ldrh	r1, [r5, #2]
 8010ea8:	7813      	ldrb	r3, [r2, #0]
 8010eaa:	440e      	add	r6, r1
 8010eac:	806e      	strh	r6, [r5, #2]
 8010eae:	b903      	cbnz	r3, 8010eb2 <element_frame_callback+0x32>
 8010eb0:	793b      	ldrb	r3, [r7, #4]
 8010eb2:	7013      	strb	r3, [r2, #0]
 8010eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010eb6:	bf00      	nop

08010eb8 <element_frame_event>:
 8010eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ebc:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8010ebe:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8010ec2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8010ec6:	2400      	movs	r4, #0
 8010ec8:	f8a8 4002 	strh.w	r4, [r8, #2]
 8010ecc:	4605      	mov	r5, r0
 8010ece:	701c      	strb	r4, [r3, #0]
 8010ed0:	f100 074c 	add.w	r7, r0, #76	@ 0x4c
 8010ed4:	f857 6b04 	ldr.w	r6, [r7], #4
 8010ed8:	4649      	mov	r1, r9
 8010eda:	4630      	mov	r0, r6
 8010edc:	b136      	cbz	r6, 8010eec <element_frame_event+0x34>
 8010ede:	f000 fb11 	bl	8011504 <acc_pipeline_subsweep_prepare_memory>
 8010ee2:	f888 4000 	strb.w	r4, [r8]
 8010ee6:	4630      	mov	r0, r6
 8010ee8:	f000 fb24 	bl	8011534 <acc_pipeline_subsweep_produce>
 8010eec:	3401      	adds	r4, #1
 8010eee:	b2e4      	uxtb	r4, r4
 8010ef0:	2c04      	cmp	r4, #4
 8010ef2:	d1ef      	bne.n	8010ed4 <element_frame_event+0x1c>
 8010ef4:	6828      	ldr	r0, [r5, #0]
 8010ef6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010efa:	6843      	ldr	r3, [r0, #4]
 8010efc:	4718      	bx	r3
 8010efe:	bf00      	nop

08010f00 <element_frame_validate>:
 8010f00:	b570      	push	{r4, r5, r6, lr}
 8010f02:	4604      	mov	r4, r0
 8010f04:	6980      	ldr	r0, [r0, #24]
 8010f06:	b178      	cbz	r0, 8010f28 <element_frame_validate+0x28>
 8010f08:	69e3      	ldr	r3, [r4, #28]
 8010f0a:	b143      	cbz	r3, 8010f1e <element_frame_validate+0x1e>
 8010f0c:	f7fc ff2e 	bl	800dd6c <acc_rss_integration_log_level>
 8010f10:	b128      	cbz	r0, 8010f1e <element_frame_validate+0x1e>
 8010f12:	4b0e      	ldr	r3, [pc, #56]	@ (8010f4c <element_frame_validate+0x4c>)
 8010f14:	4a0e      	ldr	r2, [pc, #56]	@ (8010f50 <element_frame_validate+0x50>)
 8010f16:	691b      	ldr	r3, [r3, #16]
 8010f18:	490e      	ldr	r1, [pc, #56]	@ (8010f54 <element_frame_validate+0x54>)
 8010f1a:	2001      	movs	r0, #1
 8010f1c:	4798      	blx	r3
 8010f1e:	6820      	ldr	r0, [r4, #0]
 8010f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f24:	6883      	ldr	r3, [r0, #8]
 8010f26:	4718      	bx	r3
 8010f28:	4d08      	ldr	r5, [pc, #32]	@ (8010f4c <element_frame_validate+0x4c>)
 8010f2a:	4a0b      	ldr	r2, [pc, #44]	@ (8010f58 <element_frame_validate+0x58>)
 8010f2c:	692b      	ldr	r3, [r5, #16]
 8010f2e:	4909      	ldr	r1, [pc, #36]	@ (8010f54 <element_frame_validate+0x54>)
 8010f30:	4798      	blx	r3
 8010f32:	69e3      	ldr	r3, [r4, #28]
 8010f34:	b13b      	cbz	r3, 8010f46 <element_frame_validate+0x46>
 8010f36:	f7fc ff19 	bl	800dd6c <acc_rss_integration_log_level>
 8010f3a:	b120      	cbz	r0, 8010f46 <element_frame_validate+0x46>
 8010f3c:	692b      	ldr	r3, [r5, #16]
 8010f3e:	4a04      	ldr	r2, [pc, #16]	@ (8010f50 <element_frame_validate+0x50>)
 8010f40:	4904      	ldr	r1, [pc, #16]	@ (8010f54 <element_frame_validate+0x54>)
 8010f42:	2001      	movs	r0, #1
 8010f44:	4798      	blx	r3
 8010f46:	2000      	movs	r0, #0
 8010f48:	bd70      	pop	{r4, r5, r6, pc}
 8010f4a:	bf00      	nop
 8010f4c:	200009ec 	.word	0x200009ec
 8010f50:	080174a8 	.word	0x080174a8
 8010f54:	08017498 	.word	0x08017498
 8010f58:	0801747c 	.word	0x0801747c

08010f5c <acc_element_frame_init>:
 8010f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f60:	460d      	mov	r5, r1
 8010f62:	4b33      	ldr	r3, [pc, #204]	@ (8011030 <acc_element_frame_init+0xd4>)
 8010f64:	4a33      	ldr	r2, [pc, #204]	@ (8011034 <acc_element_frame_init+0xd8>)
 8010f66:	4934      	ldr	r1, [pc, #208]	@ (8011038 <acc_element_frame_init+0xdc>)
 8010f68:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 8010f6c:	896e      	ldrh	r6, [r5, #10]
 8010f6e:	6043      	str	r3, [r0, #4]
 8010f70:	2300      	movs	r3, #0
 8010f72:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8010f76:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
 8010f7a:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
 8010f7e:	f8a0 c038 	strh.w	ip, [r0, #56]	@ 0x38
 8010f82:	8746      	strh	r6, [r0, #58]	@ 0x3a
 8010f84:	79aa      	ldrb	r2, [r5, #6]
 8010f86:	b087      	sub	sp, #28
 8010f88:	2a00      	cmp	r2, #0
 8010f8a:	d04c      	beq.n	8011026 <acc_element_frame_init+0xca>
 8010f8c:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8011048 <acc_element_frame_init+0xec>
 8010f90:	4607      	mov	r7, r0
 8010f92:	4699      	mov	r9, r3
 8010f94:	461c      	mov	r4, r3
 8010f96:	e007      	b.n	8010fa8 <acc_element_frame_init+0x4c>
 8010f98:	79ab      	ldrb	r3, [r5, #6]
 8010f9a:	fa5f f489 	uxtb.w	r4, r9
 8010f9e:	42a3      	cmp	r3, r4
 8010fa0:	d941      	bls.n	8011026 <acc_element_frame_init+0xca>
 8010fa2:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 8010fa6:	896e      	ldrh	r6, [r5, #10]
 8010fa8:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8010fac:	69e8      	ldr	r0, [r5, #28]
 8010fae:	f8ad 6012 	strh.w	r6, [sp, #18]
 8010fb2:	eb05 0144 	add.w	r1, r5, r4, lsl #1
 8010fb6:	eb07 0244 	add.w	r2, r7, r4, lsl #1
 8010fba:	898b      	ldrh	r3, [r1, #12]
 8010fbc:	8a89      	ldrh	r1, [r1, #20]
 8010fbe:	f8a2 1044 	strh.w	r1, [r2, #68]	@ 0x44
 8010fc2:	8793      	strh	r3, [r2, #60]	@ 0x3c
 8010fc4:	4473      	add	r3, lr
 8010fc6:	eb00 1204 	add.w	r2, r0, r4, lsl #4
 8010fca:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010fce:	4668      	mov	r0, sp
 8010fd0:	682b      	ldr	r3, [r5, #0]
 8010fd2:	9302      	str	r3, [sp, #8]
 8010fd4:	f8cd 8000 	str.w	r8, [sp]
 8010fd8:	9701      	str	r7, [sp, #4]
 8010fda:	f8ad c010 	strh.w	ip, [sp, #16]
 8010fde:	f8ad 100e 	strh.w	r1, [sp, #14]
 8010fe2:	9205      	str	r2, [sp, #20]
 8010fe4:	f000 fa1a 	bl	801141c <acc_pipeline_subsweep_assemble>
 8010fe8:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8010fec:	f109 0901 	add.w	r9, r9, #1
 8010ff0:	4606      	mov	r6, r0
 8010ff2:	64d8      	str	r0, [r3, #76]	@ 0x4c
 8010ff4:	2800      	cmp	r0, #0
 8010ff6:	d1cf      	bne.n	8010f98 <acc_element_frame_init+0x3c>
 8010ff8:	4b10      	ldr	r3, [pc, #64]	@ (801103c <acc_element_frame_init+0xe0>)
 8010ffa:	4a11      	ldr	r2, [pc, #68]	@ (8011040 <acc_element_frame_init+0xe4>)
 8010ffc:	691b      	ldr	r3, [r3, #16]
 8010ffe:	4911      	ldr	r1, [pc, #68]	@ (8011044 <acc_element_frame_init+0xe8>)
 8011000:	4798      	blx	r3
 8011002:	b164      	cbz	r4, 801101e <acc_element_frame_init+0xc2>
 8011004:	3c01      	subs	r4, #1
 8011006:	b2e4      	uxtb	r4, r4
 8011008:	3413      	adds	r4, #19
 801100a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801100e:	3748      	adds	r7, #72	@ 0x48
 8011010:	6820      	ldr	r0, [r4, #0]
 8011012:	f000 fa6b 	bl	80114ec <acc_pipeline_subsweep_disassemble>
 8011016:	f844 6904 	str.w	r6, [r4], #-4
 801101a:	42a7      	cmp	r7, r4
 801101c:	d1f8      	bne.n	8011010 <acc_element_frame_init+0xb4>
 801101e:	2000      	movs	r0, #0
 8011020:	b007      	add	sp, #28
 8011022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011026:	2001      	movs	r0, #1
 8011028:	b007      	add	sp, #28
 801102a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801102e:	bf00      	nop
 8011030:	08010eb9 	.word	0x08010eb9
 8011034:	08010e79 	.word	0x08010e79
 8011038:	08010f01 	.word	0x08010f01
 801103c:	200009ec 	.word	0x200009ec
 8011040:	080174b8 	.word	0x080174b8
 8011044:	08017498 	.word	0x08017498
 8011048:	08010e81 	.word	0x08010e81

0801104c <acc_element_frame_release>:
 801104c:	b178      	cbz	r0, 801106e <acc_element_frame_release+0x22>
 801104e:	b570      	push	{r4, r5, r6, lr}
 8011050:	f100 044c 	add.w	r4, r0, #76	@ 0x4c
 8011054:	f100 055c 	add.w	r5, r0, #92	@ 0x5c
 8011058:	2600      	movs	r6, #0
 801105a:	f854 0b04 	ldr.w	r0, [r4], #4
 801105e:	b118      	cbz	r0, 8011068 <acc_element_frame_release+0x1c>
 8011060:	f000 fa44 	bl	80114ec <acc_pipeline_subsweep_disassemble>
 8011064:	f844 6c04 	str.w	r6, [r4, #-4]
 8011068:	42ac      	cmp	r4, r5
 801106a:	d1f6      	bne.n	801105a <acc_element_frame_release+0xe>
 801106c:	bd70      	pop	{r4, r5, r6, pc}
 801106e:	4770      	bx	lr

08011070 <element_frame_aux_reset>:
 8011070:	6800      	ldr	r0, [r0, #0]
 8011072:	68c3      	ldr	r3, [r0, #12]
 8011074:	4718      	bx	r3
 8011076:	bf00      	nop

08011078 <element_frame_aux_validate>:
 8011078:	6800      	ldr	r0, [r0, #0]
 801107a:	6883      	ldr	r3, [r0, #8]
 801107c:	4718      	bx	r3
 801107e:	bf00      	nop

08011080 <element_frame_aux_event>:
 8011080:	b570      	push	{r4, r5, r6, lr}
 8011082:	6902      	ldr	r2, [r0, #16]
 8011084:	f8b0 1042 	ldrh.w	r1, [r0, #66]	@ 0x42
 8011088:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 801108c:	4604      	mov	r4, r0
 801108e:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 8011092:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8011094:	2b03      	cmp	r3, #3
 8011096:	bf08      	it	eq
 8011098:	f480 4000 	eoreq.w	r0, r0, #32768	@ 0x8000
 801109c:	f7ff fe1a 	bl	8010cd4 <acc_alg_temp>
 80110a0:	8028      	strh	r0, [r5, #0]
 80110a2:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 80110a4:	6923      	ldr	r3, [r4, #16]
 80110a6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80110aa:	b14a      	cbz	r2, 80110c0 <element_frame_aux_event+0x40>
 80110ac:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 80110b0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80110b4:	2a01      	cmp	r2, #1
 80110b6:	d903      	bls.n	80110c0 <element_frame_aux_event+0x40>
 80110b8:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80110ba:	2101      	movs	r1, #1
 80110bc:	7011      	strb	r1, [r2, #0]
 80110be:	e002      	b.n	80110c6 <element_frame_aux_event+0x46>
 80110c0:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80110c2:	2100      	movs	r1, #0
 80110c4:	7011      	strb	r1, [r2, #0]
 80110c6:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 80110c8:	8fe0      	ldrh	r0, [r4, #62]	@ 0x3e
 80110ca:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80110ce:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80110d2:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80110d4:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80110d6:	882d      	ldrh	r5, [r5, #0]
 80110d8:	f1a2 0301 	sub.w	r3, r2, #1
 80110dc:	fab3 f383 	clz	r3, r3
 80110e0:	095b      	lsrs	r3, r3, #5
 80110e2:	700b      	strb	r3, [r1, #0]
 80110e4:	f7ff fdf6 	bl	8010cd4 <acc_alg_temp>
 80110e8:	1a2d      	subs	r5, r5, r0
 80110ea:	b22d      	sxth	r5, r5
 80110ec:	2d00      	cmp	r5, #0
 80110ee:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 80110f2:	6820      	ldr	r0, [r4, #0]
 80110f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80110f6:	bfb8      	it	lt
 80110f8:	426d      	neglt	r5, r5
 80110fa:	b22d      	sxth	r5, r5
 80110fc:	42ab      	cmp	r3, r5
 80110fe:	bfac      	ite	ge
 8011100:	2500      	movge	r5, #0
 8011102:	2501      	movlt	r5, #1
 8011104:	7015      	strb	r5, [r2, #0]
 8011106:	6843      	ldr	r3, [r0, #4]
 8011108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801110c:	4718      	bx	r3
 801110e:	bf00      	nop

08011110 <acc_element_frame_aux_init>:
 8011110:	b430      	push	{r4, r5}
 8011112:	880b      	ldrh	r3, [r1, #0]
 8011114:	4d0c      	ldr	r5, [pc, #48]	@ (8011148 <acc_element_frame_aux_init+0x38>)
 8011116:	4c0d      	ldr	r4, [pc, #52]	@ (801114c <acc_element_frame_aux_init+0x3c>)
 8011118:	4a0d      	ldr	r2, [pc, #52]	@ (8011150 <acc_element_frame_aux_init+0x40>)
 801111a:	6045      	str	r5, [r0, #4]
 801111c:	884d      	ldrh	r5, [r1, #2]
 801111e:	6084      	str	r4, [r0, #8]
 8011120:	888c      	ldrh	r4, [r1, #4]
 8011122:	60c2      	str	r2, [r0, #12]
 8011124:	88ca      	ldrh	r2, [r1, #6]
 8011126:	8743      	strh	r3, [r0, #58]	@ 0x3a
 8011128:	890b      	ldrh	r3, [r1, #8]
 801112a:	f8a0 3042 	strh.w	r3, [r0, #66]	@ 0x42
 801112e:	8785      	strh	r5, [r0, #60]	@ 0x3c
 8011130:	87c4      	strh	r4, [r0, #62]	@ 0x3e
 8011132:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8011136:	7b0b      	ldrb	r3, [r1, #12]
 8011138:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801113c:	894b      	ldrh	r3, [r1, #10]
 801113e:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
 8011142:	bc30      	pop	{r4, r5}
 8011144:	2001      	movs	r0, #1
 8011146:	4770      	bx	lr
 8011148:	08011081 	.word	0x08011081
 801114c:	08011079 	.word	0x08011079
 8011150:	08011071 	.word	0x08011071

08011154 <acc_element_frame_aux_release>:
 8011154:	4770      	bx	lr
 8011156:	bf00      	nop

08011158 <sink_a121_callback_consume>:
 8011158:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	@ 0x3c
 801115c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 801115e:	6900      	ldr	r0, [r0, #16]
 8011160:	4718      	bx	r3
 8011162:	bf00      	nop

08011164 <sink_a121_callback_reset>:
 8011164:	4770      	bx	lr
 8011166:	bf00      	nop

08011168 <sink_a121_callback_validate>:
 8011168:	6983      	ldr	r3, [r0, #24]
 801116a:	b510      	push	{r4, lr}
 801116c:	4604      	mov	r4, r0
 801116e:	b1bb      	cbz	r3, 80111a0 <sink_a121_callback_validate+0x38>
 8011170:	f7fc fdfc 	bl	800dd6c <acc_rss_integration_log_level>
 8011174:	b948      	cbnz	r0, 801118a <sink_a121_callback_validate+0x22>
 8011176:	6963      	ldr	r3, [r4, #20]
 8011178:	b183      	cbz	r3, 801119c <sink_a121_callback_validate+0x34>
 801117a:	4b0b      	ldr	r3, [pc, #44]	@ (80111a8 <sink_a121_callback_validate+0x40>)
 801117c:	4a0b      	ldr	r2, [pc, #44]	@ (80111ac <sink_a121_callback_validate+0x44>)
 801117e:	691b      	ldr	r3, [r3, #16]
 8011180:	490b      	ldr	r1, [pc, #44]	@ (80111b0 <sink_a121_callback_validate+0x48>)
 8011182:	2000      	movs	r0, #0
 8011184:	4798      	blx	r3
 8011186:	2000      	movs	r0, #0
 8011188:	bd10      	pop	{r4, pc}
 801118a:	4b07      	ldr	r3, [pc, #28]	@ (80111a8 <sink_a121_callback_validate+0x40>)
 801118c:	4a09      	ldr	r2, [pc, #36]	@ (80111b4 <sink_a121_callback_validate+0x4c>)
 801118e:	691b      	ldr	r3, [r3, #16]
 8011190:	4907      	ldr	r1, [pc, #28]	@ (80111b0 <sink_a121_callback_validate+0x48>)
 8011192:	2001      	movs	r0, #1
 8011194:	4798      	blx	r3
 8011196:	6963      	ldr	r3, [r4, #20]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d1ee      	bne.n	801117a <sink_a121_callback_validate+0x12>
 801119c:	2001      	movs	r0, #1
 801119e:	bd10      	pop	{r4, pc}
 80111a0:	69c3      	ldr	r3, [r0, #28]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d1e4      	bne.n	8011170 <sink_a121_callback_validate+0x8>
 80111a6:	e7e6      	b.n	8011176 <sink_a121_callback_validate+0xe>
 80111a8:	200009ec 	.word	0x200009ec
 80111ac:	08017514 	.word	0x08017514
 80111b0:	080174f8 	.word	0x080174f8
 80111b4:	080174dc 	.word	0x080174dc

080111b8 <acc_element_sink_a121_callback_init>:
 80111b8:	b410      	push	{r4}
 80111ba:	4a05      	ldr	r2, [pc, #20]	@ (80111d0 <acc_element_sink_a121_callback_init+0x18>)
 80111bc:	4c05      	ldr	r4, [pc, #20]	@ (80111d4 <acc_element_sink_a121_callback_init+0x1c>)
 80111be:	4b06      	ldr	r3, [pc, #24]	@ (80111d8 <acc_element_sink_a121_callback_init+0x20>)
 80111c0:	6401      	str	r1, [r0, #64]	@ 0x40
 80111c2:	e9c0 4201 	strd	r4, r2, [r0, #4]
 80111c6:	60c3      	str	r3, [r0, #12]
 80111c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111cc:	4770      	bx	lr
 80111ce:	bf00      	nop
 80111d0:	08011169 	.word	0x08011169
 80111d4:	08011159 	.word	0x08011159
 80111d8:	08011165 	.word	0x08011165

080111dc <patch_program_parameters>:
 80111dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111e0:	f5c2 661d 	rsb	r6, r2, #2512	@ 0x9d0
 80111e4:	469a      	mov	sl, r3
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	360e      	adds	r6, #14
 80111ea:	42b3      	cmp	r3, r6
 80111ec:	b083      	sub	sp, #12
 80111ee:	bf94      	ite	ls
 80111f0:	b29e      	uxthls	r6, r3
 80111f2:	b2b6      	uxthhi	r6, r6
 80111f4:	4690      	mov	r8, r2
 80111f6:	4605      	mov	r5, r0
 80111f8:	4689      	mov	r9, r1
 80111fa:	f000 f9a7 	bl	801154c <acc_image_a121_r1a_meas_session_get>
 80111fe:	ea4f 0358 	mov.w	r3, r8, lsr #1
 8011202:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8011206:	0872      	lsrs	r2, r6, #1
 8011208:	4649      	mov	r1, r9
 801120a:	f7ff fb5b 	bl	80108c4 <acc_confprogram_copy>
 801120e:	f000 f9a5 	bl	801155c <acc_cpd_a121_meas_session_parameters_patch_table_get>
 8011212:	4607      	mov	r7, r0
 8011214:	3d02      	subs	r5, #2
 8011216:	1e44      	subs	r4, r0, #1
 8011218:	37e1      	adds	r7, #225	@ 0xe1
 801121a:	f814 bf01 	ldrb.w	fp, [r4, #1]!
 801121e:	f000 f999 	bl	8011554 <acc_image_a121_r1a_meas_session_param_table_get>
 8011222:	f835 2f02 	ldrh.w	r2, [r5, #2]!
 8011226:	4603      	mov	r3, r0
 8011228:	e9cd b200 	strd	fp, r2, [sp]
 801122c:	4641      	mov	r1, r8
 801122e:	4632      	mov	r2, r6
 8011230:	4648      	mov	r0, r9
 8011232:	f7ff fa7d 	bl	8010730 <acc_confprogram_patch_offset>
 8011236:	42bc      	cmp	r4, r7
 8011238:	d001      	beq.n	801123e <patch_program_parameters+0x62>
 801123a:	2800      	cmp	r0, #0
 801123c:	d1ed      	bne.n	801121a <patch_program_parameters+0x3e>
 801123e:	f8ca 6000 	str.w	r6, [sl]
 8011242:	b003      	add	sp, #12
 8011244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011248 <get_parameter_patch_range.constprop.0>:
 8011248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801124c:	b085      	sub	sp, #20
 801124e:	4606      	mov	r6, r0
 8011250:	460d      	mov	r5, r1
 8011252:	4693      	mov	fp, r2
 8011254:	469a      	mov	sl, r3
 8011256:	f000 f981 	bl	801155c <acc_cpd_a121_meas_session_parameters_patch_table_get>
 801125a:	3e02      	subs	r6, #2
 801125c:	4604      	mov	r4, r0
 801125e:	3d02      	subs	r5, #2
 8011260:	f100 09e2 	add.w	r9, r0, #226	@ 0xe2
 8011264:	2700      	movs	r7, #0
 8011266:	f640 18de 	movw	r8, #2526	@ 0x9de
 801126a:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 801126e:	f835 3f02 	ldrh.w	r3, [r5, #2]!
 8011272:	429a      	cmp	r2, r3
 8011274:	d013      	beq.n	801129e <get_parameter_patch_range.constprop.0+0x56>
 8011276:	7821      	ldrb	r1, [r4, #0]
 8011278:	9101      	str	r1, [sp, #4]
 801127a:	f000 f96b 	bl	8011554 <acc_image_a121_r1a_meas_session_param_table_get>
 801127e:	f10d 030e 	add.w	r3, sp, #14
 8011282:	aa03      	add	r2, sp, #12
 8011284:	9901      	ldr	r1, [sp, #4]
 8011286:	f7ff fb2b 	bl	80108e0 <acc_confprogram_get_parameter_patch_range>
 801128a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801128e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8011292:	4590      	cmp	r8, r2
 8011294:	bf28      	it	cs
 8011296:	4690      	movcs	r8, r2
 8011298:	429f      	cmp	r7, r3
 801129a:	bf38      	it	cc
 801129c:	461f      	movcc	r7, r3
 801129e:	3401      	adds	r4, #1
 80112a0:	454c      	cmp	r4, r9
 80112a2:	d1e2      	bne.n	801126a <get_parameter_patch_range.constprop.0+0x22>
 80112a4:	f8ab 8000 	strh.w	r8, [fp]
 80112a8:	f8aa 7000 	strh.w	r7, [sl]
 80112ac:	b005      	add	sp, #20
 80112ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112b2:	bf00      	nop

080112b4 <acc_cpd_a121_meas_session_load_program>:
 80112b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112b8:	4688      	mov	r8, r1
 80112ba:	b084      	sub	sp, #16
 80112bc:	4607      	mov	r7, r0
 80112be:	4611      	mov	r1, r2
 80112c0:	4640      	mov	r0, r8
 80112c2:	4699      	mov	r9, r3
 80112c4:	2400      	movs	r4, #0
 80112c6:	ab02      	add	r3, sp, #8
 80112c8:	aa01      	add	r2, sp, #4
 80112ca:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80112ce:	f7fd f9e9 	bl	800e6a4 <acc_sensor_a121_prepare_load_confmem>
 80112d2:	4638      	mov	r0, r7
 80112d4:	f7fd fa90 	bl	800e7f8 <acc_sensor_protocol_a121_prepare_load>
 80112d8:	b1d8      	cbz	r0, 8011312 <acc_cpd_a121_meas_session_load_program+0x5e>
 80112da:	9d02      	ldr	r5, [sp, #8]
 80112dc:	f640 1add 	movw	sl, #2525	@ 0x9dd
 80112e0:	e000      	b.n	80112e4 <acc_cpd_a121_meas_session_load_program+0x30>
 80112e2:	b1b6      	cbz	r6, 8011312 <acc_cpd_a121_meas_session_load_program+0x5e>
 80112e4:	4622      	mov	r2, r4
 80112e6:	9901      	ldr	r1, [sp, #4]
 80112e8:	9503      	str	r5, [sp, #12]
 80112ea:	ab03      	add	r3, sp, #12
 80112ec:	4648      	mov	r0, r9
 80112ee:	f7ff ff75 	bl	80111dc <patch_program_parameters>
 80112f2:	0861      	lsrs	r1, r4, #1
 80112f4:	4606      	mov	r6, r0
 80112f6:	9b03      	ldr	r3, [sp, #12]
 80112f8:	4638      	mov	r0, r7
 80112fa:	4642      	mov	r2, r8
 80112fc:	f7fd f9ea 	bl	800e6d4 <acc_sensor_a121_load_confmem>
 8011300:	9d02      	ldr	r5, [sp, #8]
 8011302:	442c      	add	r4, r5
 8011304:	b2a4      	uxth	r4, r4
 8011306:	4554      	cmp	r4, sl
 8011308:	4630      	mov	r0, r6
 801130a:	d9ea      	bls.n	80112e2 <acc_cpd_a121_meas_session_load_program+0x2e>
 801130c:	b004      	add	sp, #16
 801130e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011312:	2000      	movs	r0, #0
 8011314:	b004      	add	sp, #16
 8011316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801131a:	bf00      	nop

0801131c <acc_cpd_a121_meas_session_run_program>:
 801131c:	2115      	movs	r1, #21
 801131e:	f7fd bac1 	b.w	800e8a4 <acc_sensor_protocol_a121_run_program>
 8011322:	bf00      	nop

08011324 <acc_cpd_a121_meas_session_is_patch_needed>:
 8011324:	b500      	push	{lr}
 8011326:	b083      	sub	sp, #12
 8011328:	f10d 0306 	add.w	r3, sp, #6
 801132c:	aa01      	add	r2, sp, #4
 801132e:	f7ff ff8b 	bl	8011248 <get_parameter_patch_range.constprop.0>
 8011332:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8011336:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801133a:	4298      	cmp	r0, r3
 801133c:	bf34      	ite	cc
 801133e:	2000      	movcc	r0, #0
 8011340:	2001      	movcs	r0, #1
 8011342:	b003      	add	sp, #12
 8011344:	f85d fb04 	ldr.w	pc, [sp], #4

08011348 <acc_cpd_a121_meas_session_update_program>:
 8011348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801134c:	b085      	sub	sp, #20
 801134e:	468a      	mov	sl, r1
 8011350:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 8011354:	4693      	mov	fp, r2
 8011356:	461c      	mov	r4, r3
 8011358:	4607      	mov	r7, r0
 801135a:	f7fd fa8f 	bl	800e87c <acc_sensor_protocol_a121_is_ready_to_update>
 801135e:	b198      	cbz	r0, 8011388 <acc_cpd_a121_meas_session_update_program+0x40>
 8011360:	4620      	mov	r0, r4
 8011362:	ab03      	add	r3, sp, #12
 8011364:	aa02      	add	r2, sp, #8
 8011366:	4649      	mov	r1, r9
 8011368:	f7ff ff6e 	bl	8011248 <get_parameter_patch_range.constprop.0>
 801136c:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8011370:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 8011374:	4544      	cmp	r4, r8
 8011376:	d91c      	bls.n	80113b2 <acc_cpd_a121_meas_session_update_program+0x6a>
 8011378:	2501      	movs	r5, #1
 801137a:	4638      	mov	r0, r7
 801137c:	f7fd fc60 	bl	800ec40 <acc_sensor_protocol_a121_reconfigure>
 8011380:	4628      	mov	r0, r5
 8011382:	b005      	add	sp, #20
 8011384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011388:	4638      	mov	r0, r7
 801138a:	f7fd fc43 	bl	800ec14 <acc_sensor_protocol_a121_is_hibernate>
 801138e:	4605      	mov	r5, r0
 8011390:	2800      	cmp	r0, #0
 8011392:	d1e5      	bne.n	8011360 <acc_cpd_a121_meas_session_update_program+0x18>
 8011394:	f7fc fcea 	bl	800dd6c <acc_rss_integration_log_level>
 8011398:	2800      	cmp	r0, #0
 801139a:	d0f1      	beq.n	8011380 <acc_cpd_a121_meas_session_update_program+0x38>
 801139c:	4b18      	ldr	r3, [pc, #96]	@ (8011400 <acc_cpd_a121_meas_session_update_program+0xb8>)
 801139e:	4a19      	ldr	r2, [pc, #100]	@ (8011404 <acc_cpd_a121_meas_session_update_program+0xbc>)
 80113a0:	691c      	ldr	r4, [r3, #16]
 80113a2:	4919      	ldr	r1, [pc, #100]	@ (8011408 <acc_cpd_a121_meas_session_update_program+0xc0>)
 80113a4:	463b      	mov	r3, r7
 80113a6:	2001      	movs	r0, #1
 80113a8:	47a0      	blx	r4
 80113aa:	4628      	mov	r0, r5
 80113ac:	b005      	add	sp, #20
 80113ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113b2:	ab02      	add	r3, sp, #8
 80113b4:	f108 0602 	add.w	r6, r8, #2
 80113b8:	4659      	mov	r1, fp
 80113ba:	aa01      	add	r2, sp, #4
 80113bc:	4650      	mov	r0, sl
 80113be:	f7fd f971 	bl	800e6a4 <acc_sensor_a121_prepare_load_confmem>
 80113c2:	1b36      	subs	r6, r6, r4
 80113c4:	9b02      	ldr	r3, [sp, #8]
 80113c6:	b2b6      	uxth	r6, r6
 80113c8:	429e      	cmp	r6, r3
 80113ca:	bf28      	it	cs
 80113cc:	461e      	movcs	r6, r3
 80113ce:	9602      	str	r6, [sp, #8]
 80113d0:	e004      	b.n	80113dc <acc_cpd_a121_meas_session_update_program+0x94>
 80113d2:	9e02      	ldr	r6, [sp, #8]
 80113d4:	4434      	add	r4, r6
 80113d6:	b2a4      	uxth	r4, r4
 80113d8:	4544      	cmp	r4, r8
 80113da:	d8ce      	bhi.n	801137a <acc_cpd_a121_meas_session_update_program+0x32>
 80113dc:	9901      	ldr	r1, [sp, #4]
 80113de:	9603      	str	r6, [sp, #12]
 80113e0:	ab03      	add	r3, sp, #12
 80113e2:	4622      	mov	r2, r4
 80113e4:	4648      	mov	r0, r9
 80113e6:	f7ff fef9 	bl	80111dc <patch_program_parameters>
 80113ea:	4605      	mov	r5, r0
 80113ec:	2800      	cmp	r0, #0
 80113ee:	d0f0      	beq.n	80113d2 <acc_cpd_a121_meas_session_update_program+0x8a>
 80113f0:	9b03      	ldr	r3, [sp, #12]
 80113f2:	4652      	mov	r2, sl
 80113f4:	0861      	lsrs	r1, r4, #1
 80113f6:	4638      	mov	r0, r7
 80113f8:	f7fd f96c 	bl	800e6d4 <acc_sensor_a121_load_confmem>
 80113fc:	e7e9      	b.n	80113d2 <acc_cpd_a121_meas_session_update_program+0x8a>
 80113fe:	bf00      	nop
 8011400:	200009ec 	.word	0x200009ec
 8011404:	0801753c 	.word	0x0801753c
 8011408:	08017560 	.word	0x08017560

0801140c <acc_cpd_a121_meas_session_transfer_data>:
 801140c:	b410      	push	{r4}
 801140e:	460c      	mov	r4, r1
 8011410:	4611      	mov	r1, r2
 8011412:	4622      	mov	r2, r4
 8011414:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011418:	f7fd b986 	b.w	800e728 <acc_sensor_a121_buffer_processed_read>

0801141c <acc_pipeline_subsweep_assemble>:
 801141c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801141e:	4a30      	ldr	r2, [pc, #192]	@ (80114e0 <acc_pipeline_subsweep_assemble+0xc4>)
 8011420:	b085      	sub	sp, #20
 8011422:	4605      	mov	r5, r0
 8011424:	2333      	movs	r3, #51	@ 0x33
 8011426:	21e8      	movs	r1, #232	@ 0xe8
 8011428:	2001      	movs	r0, #1
 801142a:	f7fc fc6f 	bl	800dd0c <acc_rss_integration_mem_calloc_debug>
 801142e:	4604      	mov	r4, r0
 8011430:	2800      	cmp	r0, #0
 8011432:	d042      	beq.n	80114ba <acc_pipeline_subsweep_assemble+0x9e>
 8011434:	89ab      	ldrh	r3, [r5, #12]
 8011436:	68a9      	ldr	r1, [r5, #8]
 8011438:	8a2e      	ldrh	r6, [r5, #16]
 801143a:	8a6a      	ldrh	r2, [r5, #18]
 801143c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011440:	f100 073c 	add.w	r7, r0, #60	@ 0x3c
 8011444:	696b      	ldr	r3, [r5, #20]
 8011446:	9100      	str	r1, [sp, #0]
 8011448:	f8ad 6006 	strh.w	r6, [sp, #6]
 801144c:	4669      	mov	r1, sp
 801144e:	f104 0694 	add.w	r6, r4, #148	@ 0x94
 8011452:	4638      	mov	r0, r7
 8011454:	f8ad 2008 	strh.w	r2, [sp, #8]
 8011458:	9303      	str	r3, [sp, #12]
 801145a:	f000 f975 	bl	8011748 <acc_element_phase_enhancement_init>
 801145e:	6829      	ldr	r1, [r5, #0]
 8011460:	4630      	mov	r0, r6
 8011462:	f7ff fea9 	bl	80111b8 <acc_element_sink_a121_callback_init>
 8011466:	89eb      	ldrh	r3, [r5, #14]
 8011468:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 801146c:	6868      	ldr	r0, [r5, #4]
 801146e:	f8c4 00d0 	str.w	r0, [r4, #208]	@ 0xd0
 8011472:	005b      	lsls	r3, r3, #1
 8011474:	2200      	movs	r2, #0
 8011476:	f104 05e0 	add.w	r5, r4, #224	@ 0xe0
 801147a:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 801147e:	f104 03e4 	add.w	r3, r4, #228	@ 0xe4
 8011482:	f8a4 c092 	strh.w	ip, [r4, #146]	@ 0x92
 8011486:	f8a4 c0d8 	strh.w	ip, [r4, #216]	@ 0xd8
 801148a:	8722      	strh	r2, [r4, #56]	@ 0x38
 801148c:	f8a4 2090 	strh.w	r2, [r4, #144]	@ 0x90
 8011490:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8011494:	4639      	mov	r1, r7
 8011496:	6265      	str	r5, [r4, #36]	@ 0x24
 8011498:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 801149c:	4620      	mov	r0, r4
 801149e:	f7ff fa51 	bl	8010944 <acc_element_connect>
 80114a2:	4631      	mov	r1, r6
 80114a4:	4638      	mov	r0, r7
 80114a6:	f7ff fa4d 	bl	8010944 <acc_element_connect>
 80114aa:	6820      	ldr	r0, [r4, #0]
 80114ac:	6883      	ldr	r3, [r0, #8]
 80114ae:	4798      	blx	r3
 80114b0:	4605      	mov	r5, r0
 80114b2:	b128      	cbz	r0, 80114c0 <acc_pipeline_subsweep_assemble+0xa4>
 80114b4:	6820      	ldr	r0, [r4, #0]
 80114b6:	68c3      	ldr	r3, [r0, #12]
 80114b8:	4798      	blx	r3
 80114ba:	4620      	mov	r0, r4
 80114bc:	b005      	add	sp, #20
 80114be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114c0:	4b08      	ldr	r3, [pc, #32]	@ (80114e4 <acc_pipeline_subsweep_assemble+0xc8>)
 80114c2:	4a09      	ldr	r2, [pc, #36]	@ (80114e8 <acc_pipeline_subsweep_assemble+0xcc>)
 80114c4:	691b      	ldr	r3, [r3, #16]
 80114c6:	4906      	ldr	r1, [pc, #24]	@ (80114e0 <acc_pipeline_subsweep_assemble+0xc4>)
 80114c8:	4798      	blx	r3
 80114ca:	4638      	mov	r0, r7
 80114cc:	f000 f96e 	bl	80117ac <acc_element_phase_enhancement_release>
 80114d0:	4620      	mov	r0, r4
 80114d2:	f7fc fc37 	bl	800dd44 <acc_rss_integration_mem_free>
 80114d6:	462c      	mov	r4, r5
 80114d8:	4620      	mov	r0, r4
 80114da:	b005      	add	sp, #20
 80114dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114de:	bf00      	nop
 80114e0:	08017578 	.word	0x08017578
 80114e4:	200009ec 	.word	0x200009ec
 80114e8:	08014f24 	.word	0x08014f24

080114ec <acc_pipeline_subsweep_disassemble>:
 80114ec:	b148      	cbz	r0, 8011502 <acc_pipeline_subsweep_disassemble+0x16>
 80114ee:	b510      	push	{r4, lr}
 80114f0:	4604      	mov	r4, r0
 80114f2:	303c      	adds	r0, #60	@ 0x3c
 80114f4:	f000 f95a 	bl	80117ac <acc_element_phase_enhancement_release>
 80114f8:	4620      	mov	r0, r4
 80114fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114fe:	f7fc bc21 	b.w	800dd44 <acc_rss_integration_mem_free>
 8011502:	4770      	bx	lr

08011504 <acc_pipeline_subsweep_prepare_memory>:
 8011504:	b430      	push	{r4, r5}
 8011506:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 801150a:	f8b0 50d8 	ldrh.w	r5, [r0, #216]	@ 0xd8
 801150e:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8011510:	f8b0 3092 	ldrh.w	r3, [r0, #146]	@ 0x92
 8011514:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 8011518:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801151c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8011520:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 8011524:	6144      	str	r4, [r0, #20]
 8011526:	e9c0 2313 	strd	r2, r3, [r0, #76]	@ 0x4c
 801152a:	bc30      	pop	{r4, r5}
 801152c:	f8c0 10a4 	str.w	r1, [r0, #164]	@ 0xa4
 8011530:	4770      	bx	lr
 8011532:	bf00      	nop

08011534 <acc_pipeline_subsweep_produce>:
 8011534:	6803      	ldr	r3, [r0, #0]
 8011536:	f8d0 20dc 	ldr.w	r2, [r0, #220]	@ 0xdc
 801153a:	f8c0 20e0 	str.w	r2, [r0, #224]	@ 0xe0
 801153e:	2100      	movs	r1, #0
 8011540:	f880 10e4 	strb.w	r1, [r0, #228]	@ 0xe4
 8011544:	685a      	ldr	r2, [r3, #4]
 8011546:	4618      	mov	r0, r3
 8011548:	4710      	bx	r2
 801154a:	bf00      	nop

0801154c <acc_image_a121_r1a_meas_session_get>:
 801154c:	4800      	ldr	r0, [pc, #0]	@ (8011550 <acc_image_a121_r1a_meas_session_get+0x4>)
 801154e:	4770      	bx	lr
 8011550:	0801758c 	.word	0x0801758c

08011554 <acc_image_a121_r1a_meas_session_param_table_get>:
 8011554:	4800      	ldr	r0, [pc, #0]	@ (8011558 <acc_image_a121_r1a_meas_session_param_table_get+0x4>)
 8011556:	4770      	bx	lr
 8011558:	08018948 	.word	0x08018948

0801155c <acc_cpd_a121_meas_session_parameters_patch_table_get>:
 801155c:	4800      	ldr	r0, [pc, #0]	@ (8011560 <acc_cpd_a121_meas_session_parameters_patch_table_get+0x4>)
 801155e:	4770      	bx	lr
 8011560:	080196f0 	.word	0x080196f0

08011564 <element_phase_enhancement_reset>:
 8011564:	6800      	ldr	r0, [r0, #0]
 8011566:	68c3      	ldr	r3, [r0, #12]
 8011568:	4718      	bx	r3
 801156a:	bf00      	nop

0801156c <element_phase_enhancement_validate>:
 801156c:	6800      	ldr	r0, [r0, #0]
 801156e:	6883      	ldr	r3, [r0, #8]
 8011570:	4718      	bx	r3
 8011572:	bf00      	nop

08011574 <element_phase_enhancement_event>:
 8011574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011578:	ed2d 8b04 	vpush	{d8-d9}
 801157c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8011580:	b089      	sub	sp, #36	@ 0x24
 8011582:	4683      	mov	fp, r0
 8011584:	9303      	str	r3, [sp, #12]
 8011586:	2b00      	cmp	r3, #0
 8011588:	f000 80d1 	beq.w	801172e <element_phase_enhancement_event+0x1ba>
 801158c:	8fc2      	ldrh	r2, [r0, #62]	@ 0x3e
 801158e:	6904      	ldr	r4, [r0, #16]
 8011590:	8f81      	ldrh	r1, [r0, #60]	@ 0x3c
 8011592:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 8011596:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8011598:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 801159c:	9006      	str	r0, [sp, #24]
 801159e:	0052      	lsls	r2, r2, #1
 80115a0:	9201      	str	r2, [sp, #4]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	f000 80c3 	beq.w	801172e <element_phase_enhancement_event+0x1ba>
 80115a8:	2300      	movs	r3, #0
 80115aa:	010a      	lsls	r2, r1, #4
 80115ac:	eddf 8a64 	vldr	s17, [pc, #400]	@ 8011740 <element_phase_enhancement_event+0x1cc>
 80115b0:	9302      	str	r3, [sp, #8]
 80115b2:	9207      	str	r2, [sp, #28]
 80115b4:	469a      	mov	sl, r3
 80115b6:	e9db 3211 	ldrd	r3, r2, [fp, #68]	@ 0x44
 80115ba:	f8bb 604e 	ldrh.w	r6, [fp, #78]	@ 0x4e
 80115be:	4413      	add	r3, r2
 80115c0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80115c4:	fb02 3606 	mla	r6, r2, r6, r3
 80115c8:	2118      	movs	r1, #24
 80115ca:	4630      	mov	r0, r6
 80115cc:	f7fe f906 	bl	800f7dc <acc_translation_a121_point_in_coarse>
 80115d0:	2118      	movs	r1, #24
 80115d2:	4605      	mov	r5, r0
 80115d4:	4630      	mov	r0, r6
 80115d6:	f7fe f8f3 	bl	800f7c0 <acc_translation_a121_point_to_coarse>
 80115da:	9b07      	ldr	r3, [sp, #28]
 80115dc:	0400      	lsls	r0, r0, #16
 80115de:	fb80 0103 	smull	r0, r1, r0, r3
 80115e2:	2800      	cmp	r0, #0
 80115e4:	f171 0300 	sbcs.w	r3, r1, #0
 80115e8:	da04      	bge.n	80115f4 <element_phase_enhancement_event+0x80>
 80115ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80115ee:	18c0      	adds	r0, r0, r3
 80115f0:	f141 0100 	adc.w	r1, r1, #0
 80115f4:	9b06      	ldr	r3, [sp, #24]
 80115f6:	441d      	add	r5, r3
 80115f8:	0c03      	lsrs	r3, r0, #16
 80115fa:	f934 2015 	ldrsh.w	r2, [r4, r5, lsl #1]
 80115fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8011602:	eba3 1302 	sub.w	r3, r3, r2, lsl #4
 8011606:	ee07 3a90 	vmov	s15, r3
 801160a:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 801160e:	ee29 9a28 	vmul.f32	s18, s18, s17
 8011612:	eeb0 0a49 	vmov.f32	s0, s18
 8011616:	f001 ff39 	bl	801348c <cosf>
 801161a:	eeb0 8a40 	vmov.f32	s16, s0
 801161e:	eeb0 0a49 	vmov.f32	s0, s18
 8011622:	f001 ff7f 	bl	8013524 <sinf>
 8011626:	f8bb 9040 	ldrh.w	r9, [fp, #64]	@ 0x40
 801162a:	f1b9 0f00 	cmp.w	r9, #0
 801162e:	d073      	beq.n	8011718 <element_phase_enhancement_event+0x1a4>
 8011630:	f8db 3050 	ldr.w	r3, [fp, #80]	@ 0x50
 8011634:	f8bb 2042 	ldrh.w	r2, [fp, #66]	@ 0x42
 8011638:	f8cd b014 	str.w	fp, [sp, #20]
 801163c:	2000      	movs	r0, #0
 801163e:	f893 8000 	ldrb.w	r8, [r3]
 8011642:	f8df c100 	ldr.w	ip, [pc, #256]	@ 8011744 <element_phase_enhancement_event+0x1d0>
 8011646:	9304      	str	r3, [sp, #16]
 8011648:	4605      	mov	r5, r0
 801164a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801164e:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 8011652:	4693      	mov	fp, r2
 8011654:	e009      	b.n	801166a <element_phase_enhancement_event+0xf6>
 8011656:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801165a:	52e2      	strh	r2, [r4, r3]
 801165c:	3501      	adds	r5, #1
 801165e:	fa1f fe85 	uxth.w	lr, r5
 8011662:	45f1      	cmp	r9, lr
 8011664:	4458      	add	r0, fp
 8011666:	8071      	strh	r1, [r6, #2]
 8011668:	d952      	bls.n	8011710 <element_phase_enhancement_event+0x19c>
 801166a:	9a01      	ldr	r2, [sp, #4]
 801166c:	eb0a 0350 	add.w	r3, sl, r0, lsr #1
 8011670:	b29b      	uxth	r3, r3
 8011672:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011676:	18e6      	adds	r6, r4, r3
 8011678:	5ee2      	ldrsh	r2, [r4, r3]
 801167a:	ee07 2a90 	vmov	s15, r2
 801167e:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 8011682:	ee06 2a90 	vmov	s13, r2
 8011686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801168a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801168e:	ee27 7a88 	vmul.f32	s14, s15, s16
 8011692:	ee66 5a80 	vmul.f32	s11, s13, s0
 8011696:	ee67 7a80 	vmul.f32	s15, s15, s0
 801169a:	ee66 6a88 	vmul.f32	s13, s13, s16
 801169e:	ee37 7a65 	vsub.f32	s14, s14, s11
 80116a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80116a6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80116aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80116b2:	bf4c      	ite	mi
 80116b4:	ee37 7a46 	vsubmi.f32	s14, s14, s12
 80116b8:	ee37 7a06 	vaddpl.f32	s14, s14, s12
 80116bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116c0:	bf4c      	ite	mi
 80116c2:	ee77 7ac6 	vsubmi.f32	s15, s15, s12
 80116c6:	ee77 7a86 	vaddpl.f32	s15, s15, s12
 80116ca:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80116ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80116d2:	ee17 ea10 	vmov	lr, s14
 80116d6:	ee17 1a90 	vmov	r1, s15
 80116da:	ee17 2a10 	vmov	r2, s14
 80116de:	45e6      	cmp	lr, ip
 80116e0:	bfb8      	it	lt
 80116e2:	4662      	movlt	r2, ip
 80116e4:	4561      	cmp	r1, ip
 80116e6:	bfb8      	it	lt
 80116e8:	4661      	movlt	r1, ip
 80116ea:	42ba      	cmp	r2, r7
 80116ec:	bfa8      	it	ge
 80116ee:	463a      	movge	r2, r7
 80116f0:	42b9      	cmp	r1, r7
 80116f2:	bfa8      	it	ge
 80116f4:	4639      	movge	r1, r7
 80116f6:	f1b8 0f00 	cmp.w	r8, #0
 80116fa:	d1ae      	bne.n	801165a <element_phase_enhancement_event+0xe6>
 80116fc:	4596      	cmp	lr, r2
 80116fe:	d1aa      	bne.n	8011656 <element_phase_enhancement_event+0xe2>
 8011700:	ee17 ea90 	vmov	lr, s15
 8011704:	ebbe 0801 	subs.w	r8, lr, r1
 8011708:	bf18      	it	ne
 801170a:	f04f 0801 	movne.w	r8, #1
 801170e:	e7a4      	b.n	801165a <element_phase_enhancement_event+0xe6>
 8011710:	e9dd 3b04 	ldrd	r3, fp, [sp, #16]
 8011714:	f883 8000 	strb.w	r8, [r3]
 8011718:	9b02      	ldr	r3, [sp, #8]
 801171a:	3301      	adds	r3, #1
 801171c:	461a      	mov	r2, r3
 801171e:	9302      	str	r3, [sp, #8]
 8011720:	f8bb 304c 	ldrh.w	r3, [fp, #76]	@ 0x4c
 8011724:	fa1f fa82 	uxth.w	sl, r2
 8011728:	4553      	cmp	r3, sl
 801172a:	f63f af44 	bhi.w	80115b6 <element_phase_enhancement_event+0x42>
 801172e:	f8db 0000 	ldr.w	r0, [fp]
 8011732:	6843      	ldr	r3, [r0, #4]
 8011734:	b009      	add	sp, #36	@ 0x24
 8011736:	ecbd 8b04 	vpop	{d8-d9}
 801173a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801173e:	4718      	bx	r3
 8011740:	37800000 	.word	0x37800000
 8011744:	ffff8000 	.word	0xffff8000

08011748 <acc_element_phase_enhancement_init>:
 8011748:	b570      	push	{r4, r5, r6, lr}
 801174a:	4604      	mov	r4, r0
 801174c:	460d      	mov	r5, r1
 801174e:	4814      	ldr	r0, [pc, #80]	@ (80117a0 <acc_element_phase_enhancement_init+0x58>)
 8011750:	4914      	ldr	r1, [pc, #80]	@ (80117a4 <acc_element_phase_enhancement_init+0x5c>)
 8011752:	68eb      	ldr	r3, [r5, #12]
 8011754:	4a14      	ldr	r2, [pc, #80]	@ (80117a8 <acc_element_phase_enhancement_init+0x60>)
 8011756:	60e2      	str	r2, [r4, #12]
 8011758:	e9c4 0101 	strd	r0, r1, [r4, #4]
 801175c:	b082      	sub	sp, #8
 801175e:	a901      	add	r1, sp, #4
 8011760:	7bd8      	ldrb	r0, [r3, #15]
 8011762:	f7fd fc69 	bl	800f038 <acc_translation_a121_profile_to_start_point_offset>
 8011766:	68eb      	ldr	r3, [r5, #12]
 8011768:	882a      	ldrh	r2, [r5, #0]
 801176a:	8869      	ldrh	r1, [r5, #2]
 801176c:	8762      	strh	r2, [r4, #58]	@ 0x3a
 801176e:	88aa      	ldrh	r2, [r5, #4]
 8011770:	88ee      	ldrh	r6, [r5, #6]
 8011772:	87a1      	strh	r1, [r4, #60]	@ 0x3c
 8011774:	8929      	ldrh	r1, [r5, #8]
 8011776:	87e2      	strh	r2, [r4, #62]	@ 0x3e
 8011778:	7b1a      	ldrb	r2, [r3, #12]
 801177a:	681d      	ldr	r5, [r3, #0]
 801177c:	f8a4 1042 	strh.w	r1, [r4, #66]	@ 0x42
 8011780:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
 8011784:	9901      	ldr	r1, [sp, #4]
 8011786:	88da      	ldrh	r2, [r3, #6]
 8011788:	889b      	ldrh	r3, [r3, #4]
 801178a:	f8a4 6040 	strh.w	r6, [r4, #64]	@ 0x40
 801178e:	e9c4 5111 	strd	r5, r1, [r4, #68]	@ 0x44
 8011792:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
 8011796:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
 801179a:	b002      	add	sp, #8
 801179c:	bd70      	pop	{r4, r5, r6, pc}
 801179e:	bf00      	nop
 80117a0:	08011575 	.word	0x08011575
 80117a4:	0801156d 	.word	0x0801156d
 80117a8:	08011565 	.word	0x08011565

080117ac <acc_element_phase_enhancement_release>:
 80117ac:	4770      	bx	lr
 80117ae:	bf00      	nop

080117b0 <malloc>:
 80117b0:	4b02      	ldr	r3, [pc, #8]	@ (80117bc <malloc+0xc>)
 80117b2:	4601      	mov	r1, r0
 80117b4:	6818      	ldr	r0, [r3, #0]
 80117b6:	f000 b82d 	b.w	8011814 <_malloc_r>
 80117ba:	bf00      	nop
 80117bc:	200001e8 	.word	0x200001e8

080117c0 <free>:
 80117c0:	4b02      	ldr	r3, [pc, #8]	@ (80117cc <free+0xc>)
 80117c2:	4601      	mov	r1, r0
 80117c4:	6818      	ldr	r0, [r3, #0]
 80117c6:	f000 bc3d 	b.w	8012044 <_free_r>
 80117ca:	bf00      	nop
 80117cc:	200001e8 	.word	0x200001e8

080117d0 <sbrk_aligned>:
 80117d0:	b570      	push	{r4, r5, r6, lr}
 80117d2:	4e0f      	ldr	r6, [pc, #60]	@ (8011810 <sbrk_aligned+0x40>)
 80117d4:	460c      	mov	r4, r1
 80117d6:	6831      	ldr	r1, [r6, #0]
 80117d8:	4605      	mov	r5, r0
 80117da:	b911      	cbnz	r1, 80117e2 <sbrk_aligned+0x12>
 80117dc:	f000 fbd4 	bl	8011f88 <_sbrk_r>
 80117e0:	6030      	str	r0, [r6, #0]
 80117e2:	4621      	mov	r1, r4
 80117e4:	4628      	mov	r0, r5
 80117e6:	f000 fbcf 	bl	8011f88 <_sbrk_r>
 80117ea:	1c43      	adds	r3, r0, #1
 80117ec:	d103      	bne.n	80117f6 <sbrk_aligned+0x26>
 80117ee:	f04f 34ff 	mov.w	r4, #4294967295
 80117f2:	4620      	mov	r0, r4
 80117f4:	bd70      	pop	{r4, r5, r6, pc}
 80117f6:	1cc4      	adds	r4, r0, #3
 80117f8:	f024 0403 	bic.w	r4, r4, #3
 80117fc:	42a0      	cmp	r0, r4
 80117fe:	d0f8      	beq.n	80117f2 <sbrk_aligned+0x22>
 8011800:	1a21      	subs	r1, r4, r0
 8011802:	4628      	mov	r0, r5
 8011804:	f000 fbc0 	bl	8011f88 <_sbrk_r>
 8011808:	3001      	adds	r0, #1
 801180a:	d1f2      	bne.n	80117f2 <sbrk_aligned+0x22>
 801180c:	e7ef      	b.n	80117ee <sbrk_aligned+0x1e>
 801180e:	bf00      	nop
 8011810:	200008a0 	.word	0x200008a0

08011814 <_malloc_r>:
 8011814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011818:	1ccd      	adds	r5, r1, #3
 801181a:	f025 0503 	bic.w	r5, r5, #3
 801181e:	3508      	adds	r5, #8
 8011820:	2d0c      	cmp	r5, #12
 8011822:	bf38      	it	cc
 8011824:	250c      	movcc	r5, #12
 8011826:	2d00      	cmp	r5, #0
 8011828:	4606      	mov	r6, r0
 801182a:	db01      	blt.n	8011830 <_malloc_r+0x1c>
 801182c:	42a9      	cmp	r1, r5
 801182e:	d904      	bls.n	801183a <_malloc_r+0x26>
 8011830:	230c      	movs	r3, #12
 8011832:	6033      	str	r3, [r6, #0]
 8011834:	2000      	movs	r0, #0
 8011836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801183a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011910 <_malloc_r+0xfc>
 801183e:	f000 f869 	bl	8011914 <__malloc_lock>
 8011842:	f8d8 3000 	ldr.w	r3, [r8]
 8011846:	461c      	mov	r4, r3
 8011848:	bb44      	cbnz	r4, 801189c <_malloc_r+0x88>
 801184a:	4629      	mov	r1, r5
 801184c:	4630      	mov	r0, r6
 801184e:	f7ff ffbf 	bl	80117d0 <sbrk_aligned>
 8011852:	1c43      	adds	r3, r0, #1
 8011854:	4604      	mov	r4, r0
 8011856:	d158      	bne.n	801190a <_malloc_r+0xf6>
 8011858:	f8d8 4000 	ldr.w	r4, [r8]
 801185c:	4627      	mov	r7, r4
 801185e:	2f00      	cmp	r7, #0
 8011860:	d143      	bne.n	80118ea <_malloc_r+0xd6>
 8011862:	2c00      	cmp	r4, #0
 8011864:	d04b      	beq.n	80118fe <_malloc_r+0xea>
 8011866:	6823      	ldr	r3, [r4, #0]
 8011868:	4639      	mov	r1, r7
 801186a:	4630      	mov	r0, r6
 801186c:	eb04 0903 	add.w	r9, r4, r3
 8011870:	f000 fb8a 	bl	8011f88 <_sbrk_r>
 8011874:	4581      	cmp	r9, r0
 8011876:	d142      	bne.n	80118fe <_malloc_r+0xea>
 8011878:	6821      	ldr	r1, [r4, #0]
 801187a:	1a6d      	subs	r5, r5, r1
 801187c:	4629      	mov	r1, r5
 801187e:	4630      	mov	r0, r6
 8011880:	f7ff ffa6 	bl	80117d0 <sbrk_aligned>
 8011884:	3001      	adds	r0, #1
 8011886:	d03a      	beq.n	80118fe <_malloc_r+0xea>
 8011888:	6823      	ldr	r3, [r4, #0]
 801188a:	442b      	add	r3, r5
 801188c:	6023      	str	r3, [r4, #0]
 801188e:	f8d8 3000 	ldr.w	r3, [r8]
 8011892:	685a      	ldr	r2, [r3, #4]
 8011894:	bb62      	cbnz	r2, 80118f0 <_malloc_r+0xdc>
 8011896:	f8c8 7000 	str.w	r7, [r8]
 801189a:	e00f      	b.n	80118bc <_malloc_r+0xa8>
 801189c:	6822      	ldr	r2, [r4, #0]
 801189e:	1b52      	subs	r2, r2, r5
 80118a0:	d420      	bmi.n	80118e4 <_malloc_r+0xd0>
 80118a2:	2a0b      	cmp	r2, #11
 80118a4:	d917      	bls.n	80118d6 <_malloc_r+0xc2>
 80118a6:	1961      	adds	r1, r4, r5
 80118a8:	42a3      	cmp	r3, r4
 80118aa:	6025      	str	r5, [r4, #0]
 80118ac:	bf18      	it	ne
 80118ae:	6059      	strne	r1, [r3, #4]
 80118b0:	6863      	ldr	r3, [r4, #4]
 80118b2:	bf08      	it	eq
 80118b4:	f8c8 1000 	streq.w	r1, [r8]
 80118b8:	5162      	str	r2, [r4, r5]
 80118ba:	604b      	str	r3, [r1, #4]
 80118bc:	4630      	mov	r0, r6
 80118be:	f000 f82f 	bl	8011920 <__malloc_unlock>
 80118c2:	f104 000b 	add.w	r0, r4, #11
 80118c6:	1d23      	adds	r3, r4, #4
 80118c8:	f020 0007 	bic.w	r0, r0, #7
 80118cc:	1ac2      	subs	r2, r0, r3
 80118ce:	bf1c      	itt	ne
 80118d0:	1a1b      	subne	r3, r3, r0
 80118d2:	50a3      	strne	r3, [r4, r2]
 80118d4:	e7af      	b.n	8011836 <_malloc_r+0x22>
 80118d6:	6862      	ldr	r2, [r4, #4]
 80118d8:	42a3      	cmp	r3, r4
 80118da:	bf0c      	ite	eq
 80118dc:	f8c8 2000 	streq.w	r2, [r8]
 80118e0:	605a      	strne	r2, [r3, #4]
 80118e2:	e7eb      	b.n	80118bc <_malloc_r+0xa8>
 80118e4:	4623      	mov	r3, r4
 80118e6:	6864      	ldr	r4, [r4, #4]
 80118e8:	e7ae      	b.n	8011848 <_malloc_r+0x34>
 80118ea:	463c      	mov	r4, r7
 80118ec:	687f      	ldr	r7, [r7, #4]
 80118ee:	e7b6      	b.n	801185e <_malloc_r+0x4a>
 80118f0:	461a      	mov	r2, r3
 80118f2:	685b      	ldr	r3, [r3, #4]
 80118f4:	42a3      	cmp	r3, r4
 80118f6:	d1fb      	bne.n	80118f0 <_malloc_r+0xdc>
 80118f8:	2300      	movs	r3, #0
 80118fa:	6053      	str	r3, [r2, #4]
 80118fc:	e7de      	b.n	80118bc <_malloc_r+0xa8>
 80118fe:	230c      	movs	r3, #12
 8011900:	6033      	str	r3, [r6, #0]
 8011902:	4630      	mov	r0, r6
 8011904:	f000 f80c 	bl	8011920 <__malloc_unlock>
 8011908:	e794      	b.n	8011834 <_malloc_r+0x20>
 801190a:	6005      	str	r5, [r0, #0]
 801190c:	e7d6      	b.n	80118bc <_malloc_r+0xa8>
 801190e:	bf00      	nop
 8011910:	200008a4 	.word	0x200008a4

08011914 <__malloc_lock>:
 8011914:	4801      	ldr	r0, [pc, #4]	@ (801191c <__malloc_lock+0x8>)
 8011916:	f000 bb84 	b.w	8012022 <__retarget_lock_acquire_recursive>
 801191a:	bf00      	nop
 801191c:	200009e8 	.word	0x200009e8

08011920 <__malloc_unlock>:
 8011920:	4801      	ldr	r0, [pc, #4]	@ (8011928 <__malloc_unlock+0x8>)
 8011922:	f000 bb7f 	b.w	8012024 <__retarget_lock_release_recursive>
 8011926:	bf00      	nop
 8011928:	200009e8 	.word	0x200009e8

0801192c <realloc>:
 801192c:	4b02      	ldr	r3, [pc, #8]	@ (8011938 <realloc+0xc>)
 801192e:	460a      	mov	r2, r1
 8011930:	4601      	mov	r1, r0
 8011932:	6818      	ldr	r0, [r3, #0]
 8011934:	f000 b802 	b.w	801193c <_realloc_r>
 8011938:	200001e8 	.word	0x200001e8

0801193c <_realloc_r>:
 801193c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011940:	4680      	mov	r8, r0
 8011942:	4615      	mov	r5, r2
 8011944:	460c      	mov	r4, r1
 8011946:	b921      	cbnz	r1, 8011952 <_realloc_r+0x16>
 8011948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801194c:	4611      	mov	r1, r2
 801194e:	f7ff bf61 	b.w	8011814 <_malloc_r>
 8011952:	b92a      	cbnz	r2, 8011960 <_realloc_r+0x24>
 8011954:	f000 fb76 	bl	8012044 <_free_r>
 8011958:	2400      	movs	r4, #0
 801195a:	4620      	mov	r0, r4
 801195c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011960:	f000 fbba 	bl	80120d8 <_malloc_usable_size_r>
 8011964:	4285      	cmp	r5, r0
 8011966:	4606      	mov	r6, r0
 8011968:	d802      	bhi.n	8011970 <_realloc_r+0x34>
 801196a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801196e:	d8f4      	bhi.n	801195a <_realloc_r+0x1e>
 8011970:	4629      	mov	r1, r5
 8011972:	4640      	mov	r0, r8
 8011974:	f7ff ff4e 	bl	8011814 <_malloc_r>
 8011978:	4607      	mov	r7, r0
 801197a:	2800      	cmp	r0, #0
 801197c:	d0ec      	beq.n	8011958 <_realloc_r+0x1c>
 801197e:	42b5      	cmp	r5, r6
 8011980:	462a      	mov	r2, r5
 8011982:	4621      	mov	r1, r4
 8011984:	bf28      	it	cs
 8011986:	4632      	movcs	r2, r6
 8011988:	f000 fb4d 	bl	8012026 <memcpy>
 801198c:	4621      	mov	r1, r4
 801198e:	4640      	mov	r0, r8
 8011990:	f000 fb58 	bl	8012044 <_free_r>
 8011994:	463c      	mov	r4, r7
 8011996:	e7e0      	b.n	801195a <_realloc_r+0x1e>

08011998 <std>:
 8011998:	2300      	movs	r3, #0
 801199a:	b510      	push	{r4, lr}
 801199c:	4604      	mov	r4, r0
 801199e:	e9c0 3300 	strd	r3, r3, [r0]
 80119a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80119a6:	6083      	str	r3, [r0, #8]
 80119a8:	8181      	strh	r1, [r0, #12]
 80119aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80119ac:	81c2      	strh	r2, [r0, #14]
 80119ae:	6183      	str	r3, [r0, #24]
 80119b0:	4619      	mov	r1, r3
 80119b2:	2208      	movs	r2, #8
 80119b4:	305c      	adds	r0, #92	@ 0x5c
 80119b6:	f000 fa97 	bl	8011ee8 <memset>
 80119ba:	4b0d      	ldr	r3, [pc, #52]	@ (80119f0 <std+0x58>)
 80119bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80119be:	4b0d      	ldr	r3, [pc, #52]	@ (80119f4 <std+0x5c>)
 80119c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80119c2:	4b0d      	ldr	r3, [pc, #52]	@ (80119f8 <std+0x60>)
 80119c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80119c6:	4b0d      	ldr	r3, [pc, #52]	@ (80119fc <std+0x64>)
 80119c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80119ca:	4b0d      	ldr	r3, [pc, #52]	@ (8011a00 <std+0x68>)
 80119cc:	6224      	str	r4, [r4, #32]
 80119ce:	429c      	cmp	r4, r3
 80119d0:	d006      	beq.n	80119e0 <std+0x48>
 80119d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80119d6:	4294      	cmp	r4, r2
 80119d8:	d002      	beq.n	80119e0 <std+0x48>
 80119da:	33d0      	adds	r3, #208	@ 0xd0
 80119dc:	429c      	cmp	r4, r3
 80119de:	d105      	bne.n	80119ec <std+0x54>
 80119e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80119e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119e8:	f000 bb1a 	b.w	8012020 <__retarget_lock_init_recursive>
 80119ec:	bd10      	pop	{r4, pc}
 80119ee:	bf00      	nop
 80119f0:	08011c91 	.word	0x08011c91
 80119f4:	08011cb7 	.word	0x08011cb7
 80119f8:	08011cef 	.word	0x08011cef
 80119fc:	08011d13 	.word	0x08011d13
 8011a00:	200008a8 	.word	0x200008a8

08011a04 <stdio_exit_handler>:
 8011a04:	4a02      	ldr	r2, [pc, #8]	@ (8011a10 <stdio_exit_handler+0xc>)
 8011a06:	4903      	ldr	r1, [pc, #12]	@ (8011a14 <stdio_exit_handler+0x10>)
 8011a08:	4803      	ldr	r0, [pc, #12]	@ (8011a18 <stdio_exit_handler+0x14>)
 8011a0a:	f000 b869 	b.w	8011ae0 <_fwalk_sglue>
 8011a0e:	bf00      	nop
 8011a10:	200001dc 	.word	0x200001dc
 8011a14:	08013075 	.word	0x08013075
 8011a18:	200001ec 	.word	0x200001ec

08011a1c <cleanup_stdio>:
 8011a1c:	6841      	ldr	r1, [r0, #4]
 8011a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8011a50 <cleanup_stdio+0x34>)
 8011a20:	4299      	cmp	r1, r3
 8011a22:	b510      	push	{r4, lr}
 8011a24:	4604      	mov	r4, r0
 8011a26:	d001      	beq.n	8011a2c <cleanup_stdio+0x10>
 8011a28:	f001 fb24 	bl	8013074 <_fflush_r>
 8011a2c:	68a1      	ldr	r1, [r4, #8]
 8011a2e:	4b09      	ldr	r3, [pc, #36]	@ (8011a54 <cleanup_stdio+0x38>)
 8011a30:	4299      	cmp	r1, r3
 8011a32:	d002      	beq.n	8011a3a <cleanup_stdio+0x1e>
 8011a34:	4620      	mov	r0, r4
 8011a36:	f001 fb1d 	bl	8013074 <_fflush_r>
 8011a3a:	68e1      	ldr	r1, [r4, #12]
 8011a3c:	4b06      	ldr	r3, [pc, #24]	@ (8011a58 <cleanup_stdio+0x3c>)
 8011a3e:	4299      	cmp	r1, r3
 8011a40:	d004      	beq.n	8011a4c <cleanup_stdio+0x30>
 8011a42:	4620      	mov	r0, r4
 8011a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a48:	f001 bb14 	b.w	8013074 <_fflush_r>
 8011a4c:	bd10      	pop	{r4, pc}
 8011a4e:	bf00      	nop
 8011a50:	200008a8 	.word	0x200008a8
 8011a54:	20000910 	.word	0x20000910
 8011a58:	20000978 	.word	0x20000978

08011a5c <global_stdio_init.part.0>:
 8011a5c:	b510      	push	{r4, lr}
 8011a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8011a8c <global_stdio_init.part.0+0x30>)
 8011a60:	4c0b      	ldr	r4, [pc, #44]	@ (8011a90 <global_stdio_init.part.0+0x34>)
 8011a62:	4a0c      	ldr	r2, [pc, #48]	@ (8011a94 <global_stdio_init.part.0+0x38>)
 8011a64:	601a      	str	r2, [r3, #0]
 8011a66:	4620      	mov	r0, r4
 8011a68:	2200      	movs	r2, #0
 8011a6a:	2104      	movs	r1, #4
 8011a6c:	f7ff ff94 	bl	8011998 <std>
 8011a70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011a74:	2201      	movs	r2, #1
 8011a76:	2109      	movs	r1, #9
 8011a78:	f7ff ff8e 	bl	8011998 <std>
 8011a7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011a80:	2202      	movs	r2, #2
 8011a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a86:	2112      	movs	r1, #18
 8011a88:	f7ff bf86 	b.w	8011998 <std>
 8011a8c:	200009e0 	.word	0x200009e0
 8011a90:	200008a8 	.word	0x200008a8
 8011a94:	08011a05 	.word	0x08011a05

08011a98 <__sfp_lock_acquire>:
 8011a98:	4801      	ldr	r0, [pc, #4]	@ (8011aa0 <__sfp_lock_acquire+0x8>)
 8011a9a:	f000 bac2 	b.w	8012022 <__retarget_lock_acquire_recursive>
 8011a9e:	bf00      	nop
 8011aa0:	200009e9 	.word	0x200009e9

08011aa4 <__sfp_lock_release>:
 8011aa4:	4801      	ldr	r0, [pc, #4]	@ (8011aac <__sfp_lock_release+0x8>)
 8011aa6:	f000 babd 	b.w	8012024 <__retarget_lock_release_recursive>
 8011aaa:	bf00      	nop
 8011aac:	200009e9 	.word	0x200009e9

08011ab0 <__sinit>:
 8011ab0:	b510      	push	{r4, lr}
 8011ab2:	4604      	mov	r4, r0
 8011ab4:	f7ff fff0 	bl	8011a98 <__sfp_lock_acquire>
 8011ab8:	6a23      	ldr	r3, [r4, #32]
 8011aba:	b11b      	cbz	r3, 8011ac4 <__sinit+0x14>
 8011abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ac0:	f7ff bff0 	b.w	8011aa4 <__sfp_lock_release>
 8011ac4:	4b04      	ldr	r3, [pc, #16]	@ (8011ad8 <__sinit+0x28>)
 8011ac6:	6223      	str	r3, [r4, #32]
 8011ac8:	4b04      	ldr	r3, [pc, #16]	@ (8011adc <__sinit+0x2c>)
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d1f5      	bne.n	8011abc <__sinit+0xc>
 8011ad0:	f7ff ffc4 	bl	8011a5c <global_stdio_init.part.0>
 8011ad4:	e7f2      	b.n	8011abc <__sinit+0xc>
 8011ad6:	bf00      	nop
 8011ad8:	08011a1d 	.word	0x08011a1d
 8011adc:	200009e0 	.word	0x200009e0

08011ae0 <_fwalk_sglue>:
 8011ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ae4:	4607      	mov	r7, r0
 8011ae6:	4688      	mov	r8, r1
 8011ae8:	4614      	mov	r4, r2
 8011aea:	2600      	movs	r6, #0
 8011aec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011af0:	f1b9 0901 	subs.w	r9, r9, #1
 8011af4:	d505      	bpl.n	8011b02 <_fwalk_sglue+0x22>
 8011af6:	6824      	ldr	r4, [r4, #0]
 8011af8:	2c00      	cmp	r4, #0
 8011afa:	d1f7      	bne.n	8011aec <_fwalk_sglue+0xc>
 8011afc:	4630      	mov	r0, r6
 8011afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b02:	89ab      	ldrh	r3, [r5, #12]
 8011b04:	2b01      	cmp	r3, #1
 8011b06:	d907      	bls.n	8011b18 <_fwalk_sglue+0x38>
 8011b08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b0c:	3301      	adds	r3, #1
 8011b0e:	d003      	beq.n	8011b18 <_fwalk_sglue+0x38>
 8011b10:	4629      	mov	r1, r5
 8011b12:	4638      	mov	r0, r7
 8011b14:	47c0      	blx	r8
 8011b16:	4306      	orrs	r6, r0
 8011b18:	3568      	adds	r5, #104	@ 0x68
 8011b1a:	e7e9      	b.n	8011af0 <_fwalk_sglue+0x10>

08011b1c <iprintf>:
 8011b1c:	b40f      	push	{r0, r1, r2, r3}
 8011b1e:	b507      	push	{r0, r1, r2, lr}
 8011b20:	4906      	ldr	r1, [pc, #24]	@ (8011b3c <iprintf+0x20>)
 8011b22:	ab04      	add	r3, sp, #16
 8011b24:	6808      	ldr	r0, [r1, #0]
 8011b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b2a:	6881      	ldr	r1, [r0, #8]
 8011b2c:	9301      	str	r3, [sp, #4]
 8011b2e:	f000 fe29 	bl	8012784 <_vfiprintf_r>
 8011b32:	b003      	add	sp, #12
 8011b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b38:	b004      	add	sp, #16
 8011b3a:	4770      	bx	lr
 8011b3c:	200001e8 	.word	0x200001e8

08011b40 <_puts_r>:
 8011b40:	6a03      	ldr	r3, [r0, #32]
 8011b42:	b570      	push	{r4, r5, r6, lr}
 8011b44:	6884      	ldr	r4, [r0, #8]
 8011b46:	4605      	mov	r5, r0
 8011b48:	460e      	mov	r6, r1
 8011b4a:	b90b      	cbnz	r3, 8011b50 <_puts_r+0x10>
 8011b4c:	f7ff ffb0 	bl	8011ab0 <__sinit>
 8011b50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b52:	07db      	lsls	r3, r3, #31
 8011b54:	d405      	bmi.n	8011b62 <_puts_r+0x22>
 8011b56:	89a3      	ldrh	r3, [r4, #12]
 8011b58:	0598      	lsls	r0, r3, #22
 8011b5a:	d402      	bmi.n	8011b62 <_puts_r+0x22>
 8011b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b5e:	f000 fa60 	bl	8012022 <__retarget_lock_acquire_recursive>
 8011b62:	89a3      	ldrh	r3, [r4, #12]
 8011b64:	0719      	lsls	r1, r3, #28
 8011b66:	d502      	bpl.n	8011b6e <_puts_r+0x2e>
 8011b68:	6923      	ldr	r3, [r4, #16]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d135      	bne.n	8011bda <_puts_r+0x9a>
 8011b6e:	4621      	mov	r1, r4
 8011b70:	4628      	mov	r0, r5
 8011b72:	f000 f949 	bl	8011e08 <__swsetup_r>
 8011b76:	b380      	cbz	r0, 8011bda <_puts_r+0x9a>
 8011b78:	f04f 35ff 	mov.w	r5, #4294967295
 8011b7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b7e:	07da      	lsls	r2, r3, #31
 8011b80:	d405      	bmi.n	8011b8e <_puts_r+0x4e>
 8011b82:	89a3      	ldrh	r3, [r4, #12]
 8011b84:	059b      	lsls	r3, r3, #22
 8011b86:	d402      	bmi.n	8011b8e <_puts_r+0x4e>
 8011b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b8a:	f000 fa4b 	bl	8012024 <__retarget_lock_release_recursive>
 8011b8e:	4628      	mov	r0, r5
 8011b90:	bd70      	pop	{r4, r5, r6, pc}
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	da04      	bge.n	8011ba0 <_puts_r+0x60>
 8011b96:	69a2      	ldr	r2, [r4, #24]
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	dc17      	bgt.n	8011bcc <_puts_r+0x8c>
 8011b9c:	290a      	cmp	r1, #10
 8011b9e:	d015      	beq.n	8011bcc <_puts_r+0x8c>
 8011ba0:	6823      	ldr	r3, [r4, #0]
 8011ba2:	1c5a      	adds	r2, r3, #1
 8011ba4:	6022      	str	r2, [r4, #0]
 8011ba6:	7019      	strb	r1, [r3, #0]
 8011ba8:	68a3      	ldr	r3, [r4, #8]
 8011baa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011bae:	3b01      	subs	r3, #1
 8011bb0:	60a3      	str	r3, [r4, #8]
 8011bb2:	2900      	cmp	r1, #0
 8011bb4:	d1ed      	bne.n	8011b92 <_puts_r+0x52>
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	da11      	bge.n	8011bde <_puts_r+0x9e>
 8011bba:	4622      	mov	r2, r4
 8011bbc:	210a      	movs	r1, #10
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	f000 f8e4 	bl	8011d8c <__swbuf_r>
 8011bc4:	3001      	adds	r0, #1
 8011bc6:	d0d7      	beq.n	8011b78 <_puts_r+0x38>
 8011bc8:	250a      	movs	r5, #10
 8011bca:	e7d7      	b.n	8011b7c <_puts_r+0x3c>
 8011bcc:	4622      	mov	r2, r4
 8011bce:	4628      	mov	r0, r5
 8011bd0:	f000 f8dc 	bl	8011d8c <__swbuf_r>
 8011bd4:	3001      	adds	r0, #1
 8011bd6:	d1e7      	bne.n	8011ba8 <_puts_r+0x68>
 8011bd8:	e7ce      	b.n	8011b78 <_puts_r+0x38>
 8011bda:	3e01      	subs	r6, #1
 8011bdc:	e7e4      	b.n	8011ba8 <_puts_r+0x68>
 8011bde:	6823      	ldr	r3, [r4, #0]
 8011be0:	1c5a      	adds	r2, r3, #1
 8011be2:	6022      	str	r2, [r4, #0]
 8011be4:	220a      	movs	r2, #10
 8011be6:	701a      	strb	r2, [r3, #0]
 8011be8:	e7ee      	b.n	8011bc8 <_puts_r+0x88>
	...

08011bec <puts>:
 8011bec:	4b02      	ldr	r3, [pc, #8]	@ (8011bf8 <puts+0xc>)
 8011bee:	4601      	mov	r1, r0
 8011bf0:	6818      	ldr	r0, [r3, #0]
 8011bf2:	f7ff bfa5 	b.w	8011b40 <_puts_r>
 8011bf6:	bf00      	nop
 8011bf8:	200001e8 	.word	0x200001e8

08011bfc <siprintf>:
 8011bfc:	b40e      	push	{r1, r2, r3}
 8011bfe:	b500      	push	{lr}
 8011c00:	b09c      	sub	sp, #112	@ 0x70
 8011c02:	ab1d      	add	r3, sp, #116	@ 0x74
 8011c04:	9002      	str	r0, [sp, #8]
 8011c06:	9006      	str	r0, [sp, #24]
 8011c08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011c0c:	4809      	ldr	r0, [pc, #36]	@ (8011c34 <siprintf+0x38>)
 8011c0e:	9107      	str	r1, [sp, #28]
 8011c10:	9104      	str	r1, [sp, #16]
 8011c12:	4909      	ldr	r1, [pc, #36]	@ (8011c38 <siprintf+0x3c>)
 8011c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c18:	9105      	str	r1, [sp, #20]
 8011c1a:	6800      	ldr	r0, [r0, #0]
 8011c1c:	9301      	str	r3, [sp, #4]
 8011c1e:	a902      	add	r1, sp, #8
 8011c20:	f000 fabe 	bl	80121a0 <_svfiprintf_r>
 8011c24:	9b02      	ldr	r3, [sp, #8]
 8011c26:	2200      	movs	r2, #0
 8011c28:	701a      	strb	r2, [r3, #0]
 8011c2a:	b01c      	add	sp, #112	@ 0x70
 8011c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c30:	b003      	add	sp, #12
 8011c32:	4770      	bx	lr
 8011c34:	200001e8 	.word	0x200001e8
 8011c38:	ffff0208 	.word	0xffff0208

08011c3c <siscanf>:
 8011c3c:	b40e      	push	{r1, r2, r3}
 8011c3e:	b530      	push	{r4, r5, lr}
 8011c40:	b09c      	sub	sp, #112	@ 0x70
 8011c42:	ac1f      	add	r4, sp, #124	@ 0x7c
 8011c44:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011c48:	f854 5b04 	ldr.w	r5, [r4], #4
 8011c4c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011c50:	9002      	str	r0, [sp, #8]
 8011c52:	9006      	str	r0, [sp, #24]
 8011c54:	f7ee fa94 	bl	8000180 <strlen>
 8011c58:	4b0b      	ldr	r3, [pc, #44]	@ (8011c88 <siscanf+0x4c>)
 8011c5a:	9003      	str	r0, [sp, #12]
 8011c5c:	9007      	str	r0, [sp, #28]
 8011c5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c60:	480a      	ldr	r0, [pc, #40]	@ (8011c8c <siscanf+0x50>)
 8011c62:	9401      	str	r4, [sp, #4]
 8011c64:	2300      	movs	r3, #0
 8011c66:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011c68:	9314      	str	r3, [sp, #80]	@ 0x50
 8011c6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011c6e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011c72:	462a      	mov	r2, r5
 8011c74:	4623      	mov	r3, r4
 8011c76:	a902      	add	r1, sp, #8
 8011c78:	6800      	ldr	r0, [r0, #0]
 8011c7a:	f000 fbe5 	bl	8012448 <__ssvfiscanf_r>
 8011c7e:	b01c      	add	sp, #112	@ 0x70
 8011c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c84:	b003      	add	sp, #12
 8011c86:	4770      	bx	lr
 8011c88:	08011cb3 	.word	0x08011cb3
 8011c8c:	200001e8 	.word	0x200001e8

08011c90 <__sread>:
 8011c90:	b510      	push	{r4, lr}
 8011c92:	460c      	mov	r4, r1
 8011c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c98:	f000 f964 	bl	8011f64 <_read_r>
 8011c9c:	2800      	cmp	r0, #0
 8011c9e:	bfab      	itete	ge
 8011ca0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8011ca4:	181b      	addge	r3, r3, r0
 8011ca6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011caa:	bfac      	ite	ge
 8011cac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011cae:	81a3      	strhlt	r3, [r4, #12]
 8011cb0:	bd10      	pop	{r4, pc}

08011cb2 <__seofread>:
 8011cb2:	2000      	movs	r0, #0
 8011cb4:	4770      	bx	lr

08011cb6 <__swrite>:
 8011cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cba:	461f      	mov	r7, r3
 8011cbc:	898b      	ldrh	r3, [r1, #12]
 8011cbe:	05db      	lsls	r3, r3, #23
 8011cc0:	4605      	mov	r5, r0
 8011cc2:	460c      	mov	r4, r1
 8011cc4:	4616      	mov	r6, r2
 8011cc6:	d505      	bpl.n	8011cd4 <__swrite+0x1e>
 8011cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ccc:	2302      	movs	r3, #2
 8011cce:	2200      	movs	r2, #0
 8011cd0:	f000 f936 	bl	8011f40 <_lseek_r>
 8011cd4:	89a3      	ldrh	r3, [r4, #12]
 8011cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011cda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011cde:	81a3      	strh	r3, [r4, #12]
 8011ce0:	4632      	mov	r2, r6
 8011ce2:	463b      	mov	r3, r7
 8011ce4:	4628      	mov	r0, r5
 8011ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011cea:	f000 b95d 	b.w	8011fa8 <_write_r>

08011cee <__sseek>:
 8011cee:	b510      	push	{r4, lr}
 8011cf0:	460c      	mov	r4, r1
 8011cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cf6:	f000 f923 	bl	8011f40 <_lseek_r>
 8011cfa:	1c43      	adds	r3, r0, #1
 8011cfc:	89a3      	ldrh	r3, [r4, #12]
 8011cfe:	bf15      	itete	ne
 8011d00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011d02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011d06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011d0a:	81a3      	strheq	r3, [r4, #12]
 8011d0c:	bf18      	it	ne
 8011d0e:	81a3      	strhne	r3, [r4, #12]
 8011d10:	bd10      	pop	{r4, pc}

08011d12 <__sclose>:
 8011d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d16:	f000 b903 	b.w	8011f20 <_close_r>

08011d1a <_vsniprintf_r>:
 8011d1a:	b530      	push	{r4, r5, lr}
 8011d1c:	4614      	mov	r4, r2
 8011d1e:	2c00      	cmp	r4, #0
 8011d20:	b09b      	sub	sp, #108	@ 0x6c
 8011d22:	4605      	mov	r5, r0
 8011d24:	461a      	mov	r2, r3
 8011d26:	da05      	bge.n	8011d34 <_vsniprintf_r+0x1a>
 8011d28:	238b      	movs	r3, #139	@ 0x8b
 8011d2a:	6003      	str	r3, [r0, #0]
 8011d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8011d30:	b01b      	add	sp, #108	@ 0x6c
 8011d32:	bd30      	pop	{r4, r5, pc}
 8011d34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011d38:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011d3c:	bf14      	ite	ne
 8011d3e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011d42:	4623      	moveq	r3, r4
 8011d44:	9302      	str	r3, [sp, #8]
 8011d46:	9305      	str	r3, [sp, #20]
 8011d48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011d4c:	9100      	str	r1, [sp, #0]
 8011d4e:	9104      	str	r1, [sp, #16]
 8011d50:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011d54:	4669      	mov	r1, sp
 8011d56:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8011d58:	f000 fa22 	bl	80121a0 <_svfiprintf_r>
 8011d5c:	1c43      	adds	r3, r0, #1
 8011d5e:	bfbc      	itt	lt
 8011d60:	238b      	movlt	r3, #139	@ 0x8b
 8011d62:	602b      	strlt	r3, [r5, #0]
 8011d64:	2c00      	cmp	r4, #0
 8011d66:	d0e3      	beq.n	8011d30 <_vsniprintf_r+0x16>
 8011d68:	9b00      	ldr	r3, [sp, #0]
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	701a      	strb	r2, [r3, #0]
 8011d6e:	e7df      	b.n	8011d30 <_vsniprintf_r+0x16>

08011d70 <vsniprintf>:
 8011d70:	b507      	push	{r0, r1, r2, lr}
 8011d72:	9300      	str	r3, [sp, #0]
 8011d74:	4613      	mov	r3, r2
 8011d76:	460a      	mov	r2, r1
 8011d78:	4601      	mov	r1, r0
 8011d7a:	4803      	ldr	r0, [pc, #12]	@ (8011d88 <vsniprintf+0x18>)
 8011d7c:	6800      	ldr	r0, [r0, #0]
 8011d7e:	f7ff ffcc 	bl	8011d1a <_vsniprintf_r>
 8011d82:	b003      	add	sp, #12
 8011d84:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d88:	200001e8 	.word	0x200001e8

08011d8c <__swbuf_r>:
 8011d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d8e:	460e      	mov	r6, r1
 8011d90:	4614      	mov	r4, r2
 8011d92:	4605      	mov	r5, r0
 8011d94:	b118      	cbz	r0, 8011d9e <__swbuf_r+0x12>
 8011d96:	6a03      	ldr	r3, [r0, #32]
 8011d98:	b90b      	cbnz	r3, 8011d9e <__swbuf_r+0x12>
 8011d9a:	f7ff fe89 	bl	8011ab0 <__sinit>
 8011d9e:	69a3      	ldr	r3, [r4, #24]
 8011da0:	60a3      	str	r3, [r4, #8]
 8011da2:	89a3      	ldrh	r3, [r4, #12]
 8011da4:	071a      	lsls	r2, r3, #28
 8011da6:	d501      	bpl.n	8011dac <__swbuf_r+0x20>
 8011da8:	6923      	ldr	r3, [r4, #16]
 8011daa:	b943      	cbnz	r3, 8011dbe <__swbuf_r+0x32>
 8011dac:	4621      	mov	r1, r4
 8011dae:	4628      	mov	r0, r5
 8011db0:	f000 f82a 	bl	8011e08 <__swsetup_r>
 8011db4:	b118      	cbz	r0, 8011dbe <__swbuf_r+0x32>
 8011db6:	f04f 37ff 	mov.w	r7, #4294967295
 8011dba:	4638      	mov	r0, r7
 8011dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dbe:	6823      	ldr	r3, [r4, #0]
 8011dc0:	6922      	ldr	r2, [r4, #16]
 8011dc2:	1a98      	subs	r0, r3, r2
 8011dc4:	6963      	ldr	r3, [r4, #20]
 8011dc6:	b2f6      	uxtb	r6, r6
 8011dc8:	4283      	cmp	r3, r0
 8011dca:	4637      	mov	r7, r6
 8011dcc:	dc05      	bgt.n	8011dda <__swbuf_r+0x4e>
 8011dce:	4621      	mov	r1, r4
 8011dd0:	4628      	mov	r0, r5
 8011dd2:	f001 f94f 	bl	8013074 <_fflush_r>
 8011dd6:	2800      	cmp	r0, #0
 8011dd8:	d1ed      	bne.n	8011db6 <__swbuf_r+0x2a>
 8011dda:	68a3      	ldr	r3, [r4, #8]
 8011ddc:	3b01      	subs	r3, #1
 8011dde:	60a3      	str	r3, [r4, #8]
 8011de0:	6823      	ldr	r3, [r4, #0]
 8011de2:	1c5a      	adds	r2, r3, #1
 8011de4:	6022      	str	r2, [r4, #0]
 8011de6:	701e      	strb	r6, [r3, #0]
 8011de8:	6962      	ldr	r2, [r4, #20]
 8011dea:	1c43      	adds	r3, r0, #1
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d004      	beq.n	8011dfa <__swbuf_r+0x6e>
 8011df0:	89a3      	ldrh	r3, [r4, #12]
 8011df2:	07db      	lsls	r3, r3, #31
 8011df4:	d5e1      	bpl.n	8011dba <__swbuf_r+0x2e>
 8011df6:	2e0a      	cmp	r6, #10
 8011df8:	d1df      	bne.n	8011dba <__swbuf_r+0x2e>
 8011dfa:	4621      	mov	r1, r4
 8011dfc:	4628      	mov	r0, r5
 8011dfe:	f001 f939 	bl	8013074 <_fflush_r>
 8011e02:	2800      	cmp	r0, #0
 8011e04:	d0d9      	beq.n	8011dba <__swbuf_r+0x2e>
 8011e06:	e7d6      	b.n	8011db6 <__swbuf_r+0x2a>

08011e08 <__swsetup_r>:
 8011e08:	b538      	push	{r3, r4, r5, lr}
 8011e0a:	4b29      	ldr	r3, [pc, #164]	@ (8011eb0 <__swsetup_r+0xa8>)
 8011e0c:	4605      	mov	r5, r0
 8011e0e:	6818      	ldr	r0, [r3, #0]
 8011e10:	460c      	mov	r4, r1
 8011e12:	b118      	cbz	r0, 8011e1c <__swsetup_r+0x14>
 8011e14:	6a03      	ldr	r3, [r0, #32]
 8011e16:	b90b      	cbnz	r3, 8011e1c <__swsetup_r+0x14>
 8011e18:	f7ff fe4a 	bl	8011ab0 <__sinit>
 8011e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e20:	0719      	lsls	r1, r3, #28
 8011e22:	d422      	bmi.n	8011e6a <__swsetup_r+0x62>
 8011e24:	06da      	lsls	r2, r3, #27
 8011e26:	d407      	bmi.n	8011e38 <__swsetup_r+0x30>
 8011e28:	2209      	movs	r2, #9
 8011e2a:	602a      	str	r2, [r5, #0]
 8011e2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e30:	81a3      	strh	r3, [r4, #12]
 8011e32:	f04f 30ff 	mov.w	r0, #4294967295
 8011e36:	e033      	b.n	8011ea0 <__swsetup_r+0x98>
 8011e38:	0758      	lsls	r0, r3, #29
 8011e3a:	d512      	bpl.n	8011e62 <__swsetup_r+0x5a>
 8011e3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e3e:	b141      	cbz	r1, 8011e52 <__swsetup_r+0x4a>
 8011e40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e44:	4299      	cmp	r1, r3
 8011e46:	d002      	beq.n	8011e4e <__swsetup_r+0x46>
 8011e48:	4628      	mov	r0, r5
 8011e4a:	f000 f8fb 	bl	8012044 <_free_r>
 8011e4e:	2300      	movs	r3, #0
 8011e50:	6363      	str	r3, [r4, #52]	@ 0x34
 8011e52:	89a3      	ldrh	r3, [r4, #12]
 8011e54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011e58:	81a3      	strh	r3, [r4, #12]
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	6063      	str	r3, [r4, #4]
 8011e5e:	6923      	ldr	r3, [r4, #16]
 8011e60:	6023      	str	r3, [r4, #0]
 8011e62:	89a3      	ldrh	r3, [r4, #12]
 8011e64:	f043 0308 	orr.w	r3, r3, #8
 8011e68:	81a3      	strh	r3, [r4, #12]
 8011e6a:	6923      	ldr	r3, [r4, #16]
 8011e6c:	b94b      	cbnz	r3, 8011e82 <__swsetup_r+0x7a>
 8011e6e:	89a3      	ldrh	r3, [r4, #12]
 8011e70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011e74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011e78:	d003      	beq.n	8011e82 <__swsetup_r+0x7a>
 8011e7a:	4621      	mov	r1, r4
 8011e7c:	4628      	mov	r0, r5
 8011e7e:	f001 f947 	bl	8013110 <__smakebuf_r>
 8011e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e86:	f013 0201 	ands.w	r2, r3, #1
 8011e8a:	d00a      	beq.n	8011ea2 <__swsetup_r+0x9a>
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	60a2      	str	r2, [r4, #8]
 8011e90:	6962      	ldr	r2, [r4, #20]
 8011e92:	4252      	negs	r2, r2
 8011e94:	61a2      	str	r2, [r4, #24]
 8011e96:	6922      	ldr	r2, [r4, #16]
 8011e98:	b942      	cbnz	r2, 8011eac <__swsetup_r+0xa4>
 8011e9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011e9e:	d1c5      	bne.n	8011e2c <__swsetup_r+0x24>
 8011ea0:	bd38      	pop	{r3, r4, r5, pc}
 8011ea2:	0799      	lsls	r1, r3, #30
 8011ea4:	bf58      	it	pl
 8011ea6:	6962      	ldrpl	r2, [r4, #20]
 8011ea8:	60a2      	str	r2, [r4, #8]
 8011eaa:	e7f4      	b.n	8011e96 <__swsetup_r+0x8e>
 8011eac:	2000      	movs	r0, #0
 8011eae:	e7f7      	b.n	8011ea0 <__swsetup_r+0x98>
 8011eb0:	200001e8 	.word	0x200001e8

08011eb4 <memmove>:
 8011eb4:	4288      	cmp	r0, r1
 8011eb6:	b510      	push	{r4, lr}
 8011eb8:	eb01 0402 	add.w	r4, r1, r2
 8011ebc:	d902      	bls.n	8011ec4 <memmove+0x10>
 8011ebe:	4284      	cmp	r4, r0
 8011ec0:	4623      	mov	r3, r4
 8011ec2:	d807      	bhi.n	8011ed4 <memmove+0x20>
 8011ec4:	1e43      	subs	r3, r0, #1
 8011ec6:	42a1      	cmp	r1, r4
 8011ec8:	d008      	beq.n	8011edc <memmove+0x28>
 8011eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ece:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011ed2:	e7f8      	b.n	8011ec6 <memmove+0x12>
 8011ed4:	4402      	add	r2, r0
 8011ed6:	4601      	mov	r1, r0
 8011ed8:	428a      	cmp	r2, r1
 8011eda:	d100      	bne.n	8011ede <memmove+0x2a>
 8011edc:	bd10      	pop	{r4, pc}
 8011ede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011ee6:	e7f7      	b.n	8011ed8 <memmove+0x24>

08011ee8 <memset>:
 8011ee8:	4402      	add	r2, r0
 8011eea:	4603      	mov	r3, r0
 8011eec:	4293      	cmp	r3, r2
 8011eee:	d100      	bne.n	8011ef2 <memset+0xa>
 8011ef0:	4770      	bx	lr
 8011ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8011ef6:	e7f9      	b.n	8011eec <memset+0x4>

08011ef8 <strncpy>:
 8011ef8:	b510      	push	{r4, lr}
 8011efa:	3901      	subs	r1, #1
 8011efc:	4603      	mov	r3, r0
 8011efe:	b132      	cbz	r2, 8011f0e <strncpy+0x16>
 8011f00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011f04:	f803 4b01 	strb.w	r4, [r3], #1
 8011f08:	3a01      	subs	r2, #1
 8011f0a:	2c00      	cmp	r4, #0
 8011f0c:	d1f7      	bne.n	8011efe <strncpy+0x6>
 8011f0e:	441a      	add	r2, r3
 8011f10:	2100      	movs	r1, #0
 8011f12:	4293      	cmp	r3, r2
 8011f14:	d100      	bne.n	8011f18 <strncpy+0x20>
 8011f16:	bd10      	pop	{r4, pc}
 8011f18:	f803 1b01 	strb.w	r1, [r3], #1
 8011f1c:	e7f9      	b.n	8011f12 <strncpy+0x1a>
	...

08011f20 <_close_r>:
 8011f20:	b538      	push	{r3, r4, r5, lr}
 8011f22:	4d06      	ldr	r5, [pc, #24]	@ (8011f3c <_close_r+0x1c>)
 8011f24:	2300      	movs	r3, #0
 8011f26:	4604      	mov	r4, r0
 8011f28:	4608      	mov	r0, r1
 8011f2a:	602b      	str	r3, [r5, #0]
 8011f2c:	f7f2 f960 	bl	80041f0 <_close>
 8011f30:	1c43      	adds	r3, r0, #1
 8011f32:	d102      	bne.n	8011f3a <_close_r+0x1a>
 8011f34:	682b      	ldr	r3, [r5, #0]
 8011f36:	b103      	cbz	r3, 8011f3a <_close_r+0x1a>
 8011f38:	6023      	str	r3, [r4, #0]
 8011f3a:	bd38      	pop	{r3, r4, r5, pc}
 8011f3c:	200009e4 	.word	0x200009e4

08011f40 <_lseek_r>:
 8011f40:	b538      	push	{r3, r4, r5, lr}
 8011f42:	4d07      	ldr	r5, [pc, #28]	@ (8011f60 <_lseek_r+0x20>)
 8011f44:	4604      	mov	r4, r0
 8011f46:	4608      	mov	r0, r1
 8011f48:	4611      	mov	r1, r2
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	602a      	str	r2, [r5, #0]
 8011f4e:	461a      	mov	r2, r3
 8011f50:	f7f2 f975 	bl	800423e <_lseek>
 8011f54:	1c43      	adds	r3, r0, #1
 8011f56:	d102      	bne.n	8011f5e <_lseek_r+0x1e>
 8011f58:	682b      	ldr	r3, [r5, #0]
 8011f5a:	b103      	cbz	r3, 8011f5e <_lseek_r+0x1e>
 8011f5c:	6023      	str	r3, [r4, #0]
 8011f5e:	bd38      	pop	{r3, r4, r5, pc}
 8011f60:	200009e4 	.word	0x200009e4

08011f64 <_read_r>:
 8011f64:	b538      	push	{r3, r4, r5, lr}
 8011f66:	4d07      	ldr	r5, [pc, #28]	@ (8011f84 <_read_r+0x20>)
 8011f68:	4604      	mov	r4, r0
 8011f6a:	4608      	mov	r0, r1
 8011f6c:	4611      	mov	r1, r2
 8011f6e:	2200      	movs	r2, #0
 8011f70:	602a      	str	r2, [r5, #0]
 8011f72:	461a      	mov	r2, r3
 8011f74:	f7f2 f91f 	bl	80041b6 <_read>
 8011f78:	1c43      	adds	r3, r0, #1
 8011f7a:	d102      	bne.n	8011f82 <_read_r+0x1e>
 8011f7c:	682b      	ldr	r3, [r5, #0]
 8011f7e:	b103      	cbz	r3, 8011f82 <_read_r+0x1e>
 8011f80:	6023      	str	r3, [r4, #0]
 8011f82:	bd38      	pop	{r3, r4, r5, pc}
 8011f84:	200009e4 	.word	0x200009e4

08011f88 <_sbrk_r>:
 8011f88:	b538      	push	{r3, r4, r5, lr}
 8011f8a:	4d06      	ldr	r5, [pc, #24]	@ (8011fa4 <_sbrk_r+0x1c>)
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	4604      	mov	r4, r0
 8011f90:	4608      	mov	r0, r1
 8011f92:	602b      	str	r3, [r5, #0]
 8011f94:	f7f2 f960 	bl	8004258 <_sbrk>
 8011f98:	1c43      	adds	r3, r0, #1
 8011f9a:	d102      	bne.n	8011fa2 <_sbrk_r+0x1a>
 8011f9c:	682b      	ldr	r3, [r5, #0]
 8011f9e:	b103      	cbz	r3, 8011fa2 <_sbrk_r+0x1a>
 8011fa0:	6023      	str	r3, [r4, #0]
 8011fa2:	bd38      	pop	{r3, r4, r5, pc}
 8011fa4:	200009e4 	.word	0x200009e4

08011fa8 <_write_r>:
 8011fa8:	b538      	push	{r3, r4, r5, lr}
 8011faa:	4d07      	ldr	r5, [pc, #28]	@ (8011fc8 <_write_r+0x20>)
 8011fac:	4604      	mov	r4, r0
 8011fae:	4608      	mov	r0, r1
 8011fb0:	4611      	mov	r1, r2
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	602a      	str	r2, [r5, #0]
 8011fb6:	461a      	mov	r2, r3
 8011fb8:	f7f1 fd50 	bl	8003a5c <_write>
 8011fbc:	1c43      	adds	r3, r0, #1
 8011fbe:	d102      	bne.n	8011fc6 <_write_r+0x1e>
 8011fc0:	682b      	ldr	r3, [r5, #0]
 8011fc2:	b103      	cbz	r3, 8011fc6 <_write_r+0x1e>
 8011fc4:	6023      	str	r3, [r4, #0]
 8011fc6:	bd38      	pop	{r3, r4, r5, pc}
 8011fc8:	200009e4 	.word	0x200009e4

08011fcc <__errno>:
 8011fcc:	4b01      	ldr	r3, [pc, #4]	@ (8011fd4 <__errno+0x8>)
 8011fce:	6818      	ldr	r0, [r3, #0]
 8011fd0:	4770      	bx	lr
 8011fd2:	bf00      	nop
 8011fd4:	200001e8 	.word	0x200001e8

08011fd8 <__libc_init_array>:
 8011fd8:	b570      	push	{r4, r5, r6, lr}
 8011fda:	4d0d      	ldr	r5, [pc, #52]	@ (8012010 <__libc_init_array+0x38>)
 8011fdc:	4c0d      	ldr	r4, [pc, #52]	@ (8012014 <__libc_init_array+0x3c>)
 8011fde:	1b64      	subs	r4, r4, r5
 8011fe0:	10a4      	asrs	r4, r4, #2
 8011fe2:	2600      	movs	r6, #0
 8011fe4:	42a6      	cmp	r6, r4
 8011fe6:	d109      	bne.n	8011ffc <__libc_init_array+0x24>
 8011fe8:	4d0b      	ldr	r5, [pc, #44]	@ (8012018 <__libc_init_array+0x40>)
 8011fea:	4c0c      	ldr	r4, [pc, #48]	@ (801201c <__libc_init_array+0x44>)
 8011fec:	f001 fff0 	bl	8013fd0 <_init>
 8011ff0:	1b64      	subs	r4, r4, r5
 8011ff2:	10a4      	asrs	r4, r4, #2
 8011ff4:	2600      	movs	r6, #0
 8011ff6:	42a6      	cmp	r6, r4
 8011ff8:	d105      	bne.n	8012006 <__libc_init_array+0x2e>
 8011ffa:	bd70      	pop	{r4, r5, r6, pc}
 8011ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8012000:	4798      	blx	r3
 8012002:	3601      	adds	r6, #1
 8012004:	e7ee      	b.n	8011fe4 <__libc_init_array+0xc>
 8012006:	f855 3b04 	ldr.w	r3, [r5], #4
 801200a:	4798      	blx	r3
 801200c:	3601      	adds	r6, #1
 801200e:	e7f2      	b.n	8011ff6 <__libc_init_array+0x1e>
 8012010:	08019cfc 	.word	0x08019cfc
 8012014:	08019cfc 	.word	0x08019cfc
 8012018:	08019cfc 	.word	0x08019cfc
 801201c:	08019d00 	.word	0x08019d00

08012020 <__retarget_lock_init_recursive>:
 8012020:	4770      	bx	lr

08012022 <__retarget_lock_acquire_recursive>:
 8012022:	4770      	bx	lr

08012024 <__retarget_lock_release_recursive>:
 8012024:	4770      	bx	lr

08012026 <memcpy>:
 8012026:	440a      	add	r2, r1
 8012028:	4291      	cmp	r1, r2
 801202a:	f100 33ff 	add.w	r3, r0, #4294967295
 801202e:	d100      	bne.n	8012032 <memcpy+0xc>
 8012030:	4770      	bx	lr
 8012032:	b510      	push	{r4, lr}
 8012034:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012038:	f803 4f01 	strb.w	r4, [r3, #1]!
 801203c:	4291      	cmp	r1, r2
 801203e:	d1f9      	bne.n	8012034 <memcpy+0xe>
 8012040:	bd10      	pop	{r4, pc}
	...

08012044 <_free_r>:
 8012044:	b538      	push	{r3, r4, r5, lr}
 8012046:	4605      	mov	r5, r0
 8012048:	2900      	cmp	r1, #0
 801204a:	d041      	beq.n	80120d0 <_free_r+0x8c>
 801204c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012050:	1f0c      	subs	r4, r1, #4
 8012052:	2b00      	cmp	r3, #0
 8012054:	bfb8      	it	lt
 8012056:	18e4      	addlt	r4, r4, r3
 8012058:	f7ff fc5c 	bl	8011914 <__malloc_lock>
 801205c:	4a1d      	ldr	r2, [pc, #116]	@ (80120d4 <_free_r+0x90>)
 801205e:	6813      	ldr	r3, [r2, #0]
 8012060:	b933      	cbnz	r3, 8012070 <_free_r+0x2c>
 8012062:	6063      	str	r3, [r4, #4]
 8012064:	6014      	str	r4, [r2, #0]
 8012066:	4628      	mov	r0, r5
 8012068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801206c:	f7ff bc58 	b.w	8011920 <__malloc_unlock>
 8012070:	42a3      	cmp	r3, r4
 8012072:	d908      	bls.n	8012086 <_free_r+0x42>
 8012074:	6820      	ldr	r0, [r4, #0]
 8012076:	1821      	adds	r1, r4, r0
 8012078:	428b      	cmp	r3, r1
 801207a:	bf01      	itttt	eq
 801207c:	6819      	ldreq	r1, [r3, #0]
 801207e:	685b      	ldreq	r3, [r3, #4]
 8012080:	1809      	addeq	r1, r1, r0
 8012082:	6021      	streq	r1, [r4, #0]
 8012084:	e7ed      	b.n	8012062 <_free_r+0x1e>
 8012086:	461a      	mov	r2, r3
 8012088:	685b      	ldr	r3, [r3, #4]
 801208a:	b10b      	cbz	r3, 8012090 <_free_r+0x4c>
 801208c:	42a3      	cmp	r3, r4
 801208e:	d9fa      	bls.n	8012086 <_free_r+0x42>
 8012090:	6811      	ldr	r1, [r2, #0]
 8012092:	1850      	adds	r0, r2, r1
 8012094:	42a0      	cmp	r0, r4
 8012096:	d10b      	bne.n	80120b0 <_free_r+0x6c>
 8012098:	6820      	ldr	r0, [r4, #0]
 801209a:	4401      	add	r1, r0
 801209c:	1850      	adds	r0, r2, r1
 801209e:	4283      	cmp	r3, r0
 80120a0:	6011      	str	r1, [r2, #0]
 80120a2:	d1e0      	bne.n	8012066 <_free_r+0x22>
 80120a4:	6818      	ldr	r0, [r3, #0]
 80120a6:	685b      	ldr	r3, [r3, #4]
 80120a8:	6053      	str	r3, [r2, #4]
 80120aa:	4408      	add	r0, r1
 80120ac:	6010      	str	r0, [r2, #0]
 80120ae:	e7da      	b.n	8012066 <_free_r+0x22>
 80120b0:	d902      	bls.n	80120b8 <_free_r+0x74>
 80120b2:	230c      	movs	r3, #12
 80120b4:	602b      	str	r3, [r5, #0]
 80120b6:	e7d6      	b.n	8012066 <_free_r+0x22>
 80120b8:	6820      	ldr	r0, [r4, #0]
 80120ba:	1821      	adds	r1, r4, r0
 80120bc:	428b      	cmp	r3, r1
 80120be:	bf04      	itt	eq
 80120c0:	6819      	ldreq	r1, [r3, #0]
 80120c2:	685b      	ldreq	r3, [r3, #4]
 80120c4:	6063      	str	r3, [r4, #4]
 80120c6:	bf04      	itt	eq
 80120c8:	1809      	addeq	r1, r1, r0
 80120ca:	6021      	streq	r1, [r4, #0]
 80120cc:	6054      	str	r4, [r2, #4]
 80120ce:	e7ca      	b.n	8012066 <_free_r+0x22>
 80120d0:	bd38      	pop	{r3, r4, r5, pc}
 80120d2:	bf00      	nop
 80120d4:	200008a4 	.word	0x200008a4

080120d8 <_malloc_usable_size_r>:
 80120d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120dc:	1f18      	subs	r0, r3, #4
 80120de:	2b00      	cmp	r3, #0
 80120e0:	bfbc      	itt	lt
 80120e2:	580b      	ldrlt	r3, [r1, r0]
 80120e4:	18c0      	addlt	r0, r0, r3
 80120e6:	4770      	bx	lr

080120e8 <__ssputs_r>:
 80120e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120ec:	688e      	ldr	r6, [r1, #8]
 80120ee:	461f      	mov	r7, r3
 80120f0:	42be      	cmp	r6, r7
 80120f2:	680b      	ldr	r3, [r1, #0]
 80120f4:	4682      	mov	sl, r0
 80120f6:	460c      	mov	r4, r1
 80120f8:	4690      	mov	r8, r2
 80120fa:	d82d      	bhi.n	8012158 <__ssputs_r+0x70>
 80120fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012100:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012104:	d026      	beq.n	8012154 <__ssputs_r+0x6c>
 8012106:	6965      	ldr	r5, [r4, #20]
 8012108:	6909      	ldr	r1, [r1, #16]
 801210a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801210e:	eba3 0901 	sub.w	r9, r3, r1
 8012112:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012116:	1c7b      	adds	r3, r7, #1
 8012118:	444b      	add	r3, r9
 801211a:	106d      	asrs	r5, r5, #1
 801211c:	429d      	cmp	r5, r3
 801211e:	bf38      	it	cc
 8012120:	461d      	movcc	r5, r3
 8012122:	0553      	lsls	r3, r2, #21
 8012124:	d527      	bpl.n	8012176 <__ssputs_r+0x8e>
 8012126:	4629      	mov	r1, r5
 8012128:	f7ff fb74 	bl	8011814 <_malloc_r>
 801212c:	4606      	mov	r6, r0
 801212e:	b360      	cbz	r0, 801218a <__ssputs_r+0xa2>
 8012130:	6921      	ldr	r1, [r4, #16]
 8012132:	464a      	mov	r2, r9
 8012134:	f7ff ff77 	bl	8012026 <memcpy>
 8012138:	89a3      	ldrh	r3, [r4, #12]
 801213a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801213e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012142:	81a3      	strh	r3, [r4, #12]
 8012144:	6126      	str	r6, [r4, #16]
 8012146:	6165      	str	r5, [r4, #20]
 8012148:	444e      	add	r6, r9
 801214a:	eba5 0509 	sub.w	r5, r5, r9
 801214e:	6026      	str	r6, [r4, #0]
 8012150:	60a5      	str	r5, [r4, #8]
 8012152:	463e      	mov	r6, r7
 8012154:	42be      	cmp	r6, r7
 8012156:	d900      	bls.n	801215a <__ssputs_r+0x72>
 8012158:	463e      	mov	r6, r7
 801215a:	6820      	ldr	r0, [r4, #0]
 801215c:	4632      	mov	r2, r6
 801215e:	4641      	mov	r1, r8
 8012160:	f7ff fea8 	bl	8011eb4 <memmove>
 8012164:	68a3      	ldr	r3, [r4, #8]
 8012166:	1b9b      	subs	r3, r3, r6
 8012168:	60a3      	str	r3, [r4, #8]
 801216a:	6823      	ldr	r3, [r4, #0]
 801216c:	4433      	add	r3, r6
 801216e:	6023      	str	r3, [r4, #0]
 8012170:	2000      	movs	r0, #0
 8012172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012176:	462a      	mov	r2, r5
 8012178:	f7ff fbe0 	bl	801193c <_realloc_r>
 801217c:	4606      	mov	r6, r0
 801217e:	2800      	cmp	r0, #0
 8012180:	d1e0      	bne.n	8012144 <__ssputs_r+0x5c>
 8012182:	6921      	ldr	r1, [r4, #16]
 8012184:	4650      	mov	r0, sl
 8012186:	f7ff ff5d 	bl	8012044 <_free_r>
 801218a:	230c      	movs	r3, #12
 801218c:	f8ca 3000 	str.w	r3, [sl]
 8012190:	89a3      	ldrh	r3, [r4, #12]
 8012192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012196:	81a3      	strh	r3, [r4, #12]
 8012198:	f04f 30ff 	mov.w	r0, #4294967295
 801219c:	e7e9      	b.n	8012172 <__ssputs_r+0x8a>
	...

080121a0 <_svfiprintf_r>:
 80121a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121a4:	4698      	mov	r8, r3
 80121a6:	898b      	ldrh	r3, [r1, #12]
 80121a8:	061b      	lsls	r3, r3, #24
 80121aa:	b09d      	sub	sp, #116	@ 0x74
 80121ac:	4607      	mov	r7, r0
 80121ae:	460d      	mov	r5, r1
 80121b0:	4614      	mov	r4, r2
 80121b2:	d510      	bpl.n	80121d6 <_svfiprintf_r+0x36>
 80121b4:	690b      	ldr	r3, [r1, #16]
 80121b6:	b973      	cbnz	r3, 80121d6 <_svfiprintf_r+0x36>
 80121b8:	2140      	movs	r1, #64	@ 0x40
 80121ba:	f7ff fb2b 	bl	8011814 <_malloc_r>
 80121be:	6028      	str	r0, [r5, #0]
 80121c0:	6128      	str	r0, [r5, #16]
 80121c2:	b930      	cbnz	r0, 80121d2 <_svfiprintf_r+0x32>
 80121c4:	230c      	movs	r3, #12
 80121c6:	603b      	str	r3, [r7, #0]
 80121c8:	f04f 30ff 	mov.w	r0, #4294967295
 80121cc:	b01d      	add	sp, #116	@ 0x74
 80121ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121d2:	2340      	movs	r3, #64	@ 0x40
 80121d4:	616b      	str	r3, [r5, #20]
 80121d6:	2300      	movs	r3, #0
 80121d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80121da:	2320      	movs	r3, #32
 80121dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80121e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80121e4:	2330      	movs	r3, #48	@ 0x30
 80121e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012384 <_svfiprintf_r+0x1e4>
 80121ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80121ee:	f04f 0901 	mov.w	r9, #1
 80121f2:	4623      	mov	r3, r4
 80121f4:	469a      	mov	sl, r3
 80121f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121fa:	b10a      	cbz	r2, 8012200 <_svfiprintf_r+0x60>
 80121fc:	2a25      	cmp	r2, #37	@ 0x25
 80121fe:	d1f9      	bne.n	80121f4 <_svfiprintf_r+0x54>
 8012200:	ebba 0b04 	subs.w	fp, sl, r4
 8012204:	d00b      	beq.n	801221e <_svfiprintf_r+0x7e>
 8012206:	465b      	mov	r3, fp
 8012208:	4622      	mov	r2, r4
 801220a:	4629      	mov	r1, r5
 801220c:	4638      	mov	r0, r7
 801220e:	f7ff ff6b 	bl	80120e8 <__ssputs_r>
 8012212:	3001      	adds	r0, #1
 8012214:	f000 80a7 	beq.w	8012366 <_svfiprintf_r+0x1c6>
 8012218:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801221a:	445a      	add	r2, fp
 801221c:	9209      	str	r2, [sp, #36]	@ 0x24
 801221e:	f89a 3000 	ldrb.w	r3, [sl]
 8012222:	2b00      	cmp	r3, #0
 8012224:	f000 809f 	beq.w	8012366 <_svfiprintf_r+0x1c6>
 8012228:	2300      	movs	r3, #0
 801222a:	f04f 32ff 	mov.w	r2, #4294967295
 801222e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012232:	f10a 0a01 	add.w	sl, sl, #1
 8012236:	9304      	str	r3, [sp, #16]
 8012238:	9307      	str	r3, [sp, #28]
 801223a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801223e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012240:	4654      	mov	r4, sl
 8012242:	2205      	movs	r2, #5
 8012244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012248:	484e      	ldr	r0, [pc, #312]	@ (8012384 <_svfiprintf_r+0x1e4>)
 801224a:	f7ed ffa1 	bl	8000190 <memchr>
 801224e:	9a04      	ldr	r2, [sp, #16]
 8012250:	b9d8      	cbnz	r0, 801228a <_svfiprintf_r+0xea>
 8012252:	06d0      	lsls	r0, r2, #27
 8012254:	bf44      	itt	mi
 8012256:	2320      	movmi	r3, #32
 8012258:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801225c:	0711      	lsls	r1, r2, #28
 801225e:	bf44      	itt	mi
 8012260:	232b      	movmi	r3, #43	@ 0x2b
 8012262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012266:	f89a 3000 	ldrb.w	r3, [sl]
 801226a:	2b2a      	cmp	r3, #42	@ 0x2a
 801226c:	d015      	beq.n	801229a <_svfiprintf_r+0xfa>
 801226e:	9a07      	ldr	r2, [sp, #28]
 8012270:	4654      	mov	r4, sl
 8012272:	2000      	movs	r0, #0
 8012274:	f04f 0c0a 	mov.w	ip, #10
 8012278:	4621      	mov	r1, r4
 801227a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801227e:	3b30      	subs	r3, #48	@ 0x30
 8012280:	2b09      	cmp	r3, #9
 8012282:	d94b      	bls.n	801231c <_svfiprintf_r+0x17c>
 8012284:	b1b0      	cbz	r0, 80122b4 <_svfiprintf_r+0x114>
 8012286:	9207      	str	r2, [sp, #28]
 8012288:	e014      	b.n	80122b4 <_svfiprintf_r+0x114>
 801228a:	eba0 0308 	sub.w	r3, r0, r8
 801228e:	fa09 f303 	lsl.w	r3, r9, r3
 8012292:	4313      	orrs	r3, r2
 8012294:	9304      	str	r3, [sp, #16]
 8012296:	46a2      	mov	sl, r4
 8012298:	e7d2      	b.n	8012240 <_svfiprintf_r+0xa0>
 801229a:	9b03      	ldr	r3, [sp, #12]
 801229c:	1d19      	adds	r1, r3, #4
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	9103      	str	r1, [sp, #12]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	bfbb      	ittet	lt
 80122a6:	425b      	neglt	r3, r3
 80122a8:	f042 0202 	orrlt.w	r2, r2, #2
 80122ac:	9307      	strge	r3, [sp, #28]
 80122ae:	9307      	strlt	r3, [sp, #28]
 80122b0:	bfb8      	it	lt
 80122b2:	9204      	strlt	r2, [sp, #16]
 80122b4:	7823      	ldrb	r3, [r4, #0]
 80122b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80122b8:	d10a      	bne.n	80122d0 <_svfiprintf_r+0x130>
 80122ba:	7863      	ldrb	r3, [r4, #1]
 80122bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80122be:	d132      	bne.n	8012326 <_svfiprintf_r+0x186>
 80122c0:	9b03      	ldr	r3, [sp, #12]
 80122c2:	1d1a      	adds	r2, r3, #4
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	9203      	str	r2, [sp, #12]
 80122c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80122cc:	3402      	adds	r4, #2
 80122ce:	9305      	str	r3, [sp, #20]
 80122d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012394 <_svfiprintf_r+0x1f4>
 80122d4:	7821      	ldrb	r1, [r4, #0]
 80122d6:	2203      	movs	r2, #3
 80122d8:	4650      	mov	r0, sl
 80122da:	f7ed ff59 	bl	8000190 <memchr>
 80122de:	b138      	cbz	r0, 80122f0 <_svfiprintf_r+0x150>
 80122e0:	9b04      	ldr	r3, [sp, #16]
 80122e2:	eba0 000a 	sub.w	r0, r0, sl
 80122e6:	2240      	movs	r2, #64	@ 0x40
 80122e8:	4082      	lsls	r2, r0
 80122ea:	4313      	orrs	r3, r2
 80122ec:	3401      	adds	r4, #1
 80122ee:	9304      	str	r3, [sp, #16]
 80122f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122f4:	4824      	ldr	r0, [pc, #144]	@ (8012388 <_svfiprintf_r+0x1e8>)
 80122f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80122fa:	2206      	movs	r2, #6
 80122fc:	f7ed ff48 	bl	8000190 <memchr>
 8012300:	2800      	cmp	r0, #0
 8012302:	d036      	beq.n	8012372 <_svfiprintf_r+0x1d2>
 8012304:	4b21      	ldr	r3, [pc, #132]	@ (801238c <_svfiprintf_r+0x1ec>)
 8012306:	bb1b      	cbnz	r3, 8012350 <_svfiprintf_r+0x1b0>
 8012308:	9b03      	ldr	r3, [sp, #12]
 801230a:	3307      	adds	r3, #7
 801230c:	f023 0307 	bic.w	r3, r3, #7
 8012310:	3308      	adds	r3, #8
 8012312:	9303      	str	r3, [sp, #12]
 8012314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012316:	4433      	add	r3, r6
 8012318:	9309      	str	r3, [sp, #36]	@ 0x24
 801231a:	e76a      	b.n	80121f2 <_svfiprintf_r+0x52>
 801231c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012320:	460c      	mov	r4, r1
 8012322:	2001      	movs	r0, #1
 8012324:	e7a8      	b.n	8012278 <_svfiprintf_r+0xd8>
 8012326:	2300      	movs	r3, #0
 8012328:	3401      	adds	r4, #1
 801232a:	9305      	str	r3, [sp, #20]
 801232c:	4619      	mov	r1, r3
 801232e:	f04f 0c0a 	mov.w	ip, #10
 8012332:	4620      	mov	r0, r4
 8012334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012338:	3a30      	subs	r2, #48	@ 0x30
 801233a:	2a09      	cmp	r2, #9
 801233c:	d903      	bls.n	8012346 <_svfiprintf_r+0x1a6>
 801233e:	2b00      	cmp	r3, #0
 8012340:	d0c6      	beq.n	80122d0 <_svfiprintf_r+0x130>
 8012342:	9105      	str	r1, [sp, #20]
 8012344:	e7c4      	b.n	80122d0 <_svfiprintf_r+0x130>
 8012346:	fb0c 2101 	mla	r1, ip, r1, r2
 801234a:	4604      	mov	r4, r0
 801234c:	2301      	movs	r3, #1
 801234e:	e7f0      	b.n	8012332 <_svfiprintf_r+0x192>
 8012350:	ab03      	add	r3, sp, #12
 8012352:	9300      	str	r3, [sp, #0]
 8012354:	462a      	mov	r2, r5
 8012356:	4b0e      	ldr	r3, [pc, #56]	@ (8012390 <_svfiprintf_r+0x1f0>)
 8012358:	a904      	add	r1, sp, #16
 801235a:	4638      	mov	r0, r7
 801235c:	f3af 8000 	nop.w
 8012360:	1c42      	adds	r2, r0, #1
 8012362:	4606      	mov	r6, r0
 8012364:	d1d6      	bne.n	8012314 <_svfiprintf_r+0x174>
 8012366:	89ab      	ldrh	r3, [r5, #12]
 8012368:	065b      	lsls	r3, r3, #25
 801236a:	f53f af2d 	bmi.w	80121c8 <_svfiprintf_r+0x28>
 801236e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012370:	e72c      	b.n	80121cc <_svfiprintf_r+0x2c>
 8012372:	ab03      	add	r3, sp, #12
 8012374:	9300      	str	r3, [sp, #0]
 8012376:	462a      	mov	r2, r5
 8012378:	4b05      	ldr	r3, [pc, #20]	@ (8012390 <_svfiprintf_r+0x1f0>)
 801237a:	a904      	add	r1, sp, #16
 801237c:	4638      	mov	r0, r7
 801237e:	f000 fb87 	bl	8012a90 <_printf_i>
 8012382:	e7ed      	b.n	8012360 <_svfiprintf_r+0x1c0>
 8012384:	080198d3 	.word	0x080198d3
 8012388:	080198dd 	.word	0x080198dd
 801238c:	00000000 	.word	0x00000000
 8012390:	080120e9 	.word	0x080120e9
 8012394:	080198d9 	.word	0x080198d9

08012398 <_sungetc_r>:
 8012398:	b538      	push	{r3, r4, r5, lr}
 801239a:	1c4b      	adds	r3, r1, #1
 801239c:	4614      	mov	r4, r2
 801239e:	d103      	bne.n	80123a8 <_sungetc_r+0x10>
 80123a0:	f04f 35ff 	mov.w	r5, #4294967295
 80123a4:	4628      	mov	r0, r5
 80123a6:	bd38      	pop	{r3, r4, r5, pc}
 80123a8:	8993      	ldrh	r3, [r2, #12]
 80123aa:	f023 0320 	bic.w	r3, r3, #32
 80123ae:	8193      	strh	r3, [r2, #12]
 80123b0:	6853      	ldr	r3, [r2, #4]
 80123b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80123b4:	b2cd      	uxtb	r5, r1
 80123b6:	b18a      	cbz	r2, 80123dc <_sungetc_r+0x44>
 80123b8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80123ba:	429a      	cmp	r2, r3
 80123bc:	dd08      	ble.n	80123d0 <_sungetc_r+0x38>
 80123be:	6823      	ldr	r3, [r4, #0]
 80123c0:	1e5a      	subs	r2, r3, #1
 80123c2:	6022      	str	r2, [r4, #0]
 80123c4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80123c8:	6863      	ldr	r3, [r4, #4]
 80123ca:	3301      	adds	r3, #1
 80123cc:	6063      	str	r3, [r4, #4]
 80123ce:	e7e9      	b.n	80123a4 <_sungetc_r+0xc>
 80123d0:	4621      	mov	r1, r4
 80123d2:	f000 ff12 	bl	80131fa <__submore>
 80123d6:	2800      	cmp	r0, #0
 80123d8:	d0f1      	beq.n	80123be <_sungetc_r+0x26>
 80123da:	e7e1      	b.n	80123a0 <_sungetc_r+0x8>
 80123dc:	6921      	ldr	r1, [r4, #16]
 80123de:	6822      	ldr	r2, [r4, #0]
 80123e0:	b141      	cbz	r1, 80123f4 <_sungetc_r+0x5c>
 80123e2:	4291      	cmp	r1, r2
 80123e4:	d206      	bcs.n	80123f4 <_sungetc_r+0x5c>
 80123e6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80123ea:	42a9      	cmp	r1, r5
 80123ec:	d102      	bne.n	80123f4 <_sungetc_r+0x5c>
 80123ee:	3a01      	subs	r2, #1
 80123f0:	6022      	str	r2, [r4, #0]
 80123f2:	e7ea      	b.n	80123ca <_sungetc_r+0x32>
 80123f4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80123f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80123fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80123fe:	2303      	movs	r3, #3
 8012400:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012402:	4623      	mov	r3, r4
 8012404:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012408:	6023      	str	r3, [r4, #0]
 801240a:	2301      	movs	r3, #1
 801240c:	e7de      	b.n	80123cc <_sungetc_r+0x34>

0801240e <__ssrefill_r>:
 801240e:	b510      	push	{r4, lr}
 8012410:	460c      	mov	r4, r1
 8012412:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012414:	b169      	cbz	r1, 8012432 <__ssrefill_r+0x24>
 8012416:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801241a:	4299      	cmp	r1, r3
 801241c:	d001      	beq.n	8012422 <__ssrefill_r+0x14>
 801241e:	f7ff fe11 	bl	8012044 <_free_r>
 8012422:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012424:	6063      	str	r3, [r4, #4]
 8012426:	2000      	movs	r0, #0
 8012428:	6360      	str	r0, [r4, #52]	@ 0x34
 801242a:	b113      	cbz	r3, 8012432 <__ssrefill_r+0x24>
 801242c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801242e:	6023      	str	r3, [r4, #0]
 8012430:	bd10      	pop	{r4, pc}
 8012432:	6923      	ldr	r3, [r4, #16]
 8012434:	6023      	str	r3, [r4, #0]
 8012436:	2300      	movs	r3, #0
 8012438:	6063      	str	r3, [r4, #4]
 801243a:	89a3      	ldrh	r3, [r4, #12]
 801243c:	f043 0320 	orr.w	r3, r3, #32
 8012440:	81a3      	strh	r3, [r4, #12]
 8012442:	f04f 30ff 	mov.w	r0, #4294967295
 8012446:	e7f3      	b.n	8012430 <__ssrefill_r+0x22>

08012448 <__ssvfiscanf_r>:
 8012448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801244c:	460c      	mov	r4, r1
 801244e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012452:	2100      	movs	r1, #0
 8012454:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8012458:	49a5      	ldr	r1, [pc, #660]	@ (80126f0 <__ssvfiscanf_r+0x2a8>)
 801245a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801245c:	f10d 0804 	add.w	r8, sp, #4
 8012460:	49a4      	ldr	r1, [pc, #656]	@ (80126f4 <__ssvfiscanf_r+0x2ac>)
 8012462:	4fa5      	ldr	r7, [pc, #660]	@ (80126f8 <__ssvfiscanf_r+0x2b0>)
 8012464:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8012468:	4606      	mov	r6, r0
 801246a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801246c:	9300      	str	r3, [sp, #0]
 801246e:	7813      	ldrb	r3, [r2, #0]
 8012470:	2b00      	cmp	r3, #0
 8012472:	f000 8158 	beq.w	8012726 <__ssvfiscanf_r+0x2de>
 8012476:	5cf9      	ldrb	r1, [r7, r3]
 8012478:	f011 0108 	ands.w	r1, r1, #8
 801247c:	f102 0501 	add.w	r5, r2, #1
 8012480:	d019      	beq.n	80124b6 <__ssvfiscanf_r+0x6e>
 8012482:	6863      	ldr	r3, [r4, #4]
 8012484:	2b00      	cmp	r3, #0
 8012486:	dd0f      	ble.n	80124a8 <__ssvfiscanf_r+0x60>
 8012488:	6823      	ldr	r3, [r4, #0]
 801248a:	781a      	ldrb	r2, [r3, #0]
 801248c:	5cba      	ldrb	r2, [r7, r2]
 801248e:	0712      	lsls	r2, r2, #28
 8012490:	d401      	bmi.n	8012496 <__ssvfiscanf_r+0x4e>
 8012492:	462a      	mov	r2, r5
 8012494:	e7eb      	b.n	801246e <__ssvfiscanf_r+0x26>
 8012496:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012498:	3201      	adds	r2, #1
 801249a:	9245      	str	r2, [sp, #276]	@ 0x114
 801249c:	6862      	ldr	r2, [r4, #4]
 801249e:	3301      	adds	r3, #1
 80124a0:	3a01      	subs	r2, #1
 80124a2:	6062      	str	r2, [r4, #4]
 80124a4:	6023      	str	r3, [r4, #0]
 80124a6:	e7ec      	b.n	8012482 <__ssvfiscanf_r+0x3a>
 80124a8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80124aa:	4621      	mov	r1, r4
 80124ac:	4630      	mov	r0, r6
 80124ae:	4798      	blx	r3
 80124b0:	2800      	cmp	r0, #0
 80124b2:	d0e9      	beq.n	8012488 <__ssvfiscanf_r+0x40>
 80124b4:	e7ed      	b.n	8012492 <__ssvfiscanf_r+0x4a>
 80124b6:	2b25      	cmp	r3, #37	@ 0x25
 80124b8:	d012      	beq.n	80124e0 <__ssvfiscanf_r+0x98>
 80124ba:	4699      	mov	r9, r3
 80124bc:	6863      	ldr	r3, [r4, #4]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	f340 8093 	ble.w	80125ea <__ssvfiscanf_r+0x1a2>
 80124c4:	6822      	ldr	r2, [r4, #0]
 80124c6:	7813      	ldrb	r3, [r2, #0]
 80124c8:	454b      	cmp	r3, r9
 80124ca:	f040 812c 	bne.w	8012726 <__ssvfiscanf_r+0x2de>
 80124ce:	6863      	ldr	r3, [r4, #4]
 80124d0:	3b01      	subs	r3, #1
 80124d2:	6063      	str	r3, [r4, #4]
 80124d4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80124d6:	3201      	adds	r2, #1
 80124d8:	3301      	adds	r3, #1
 80124da:	6022      	str	r2, [r4, #0]
 80124dc:	9345      	str	r3, [sp, #276]	@ 0x114
 80124de:	e7d8      	b.n	8012492 <__ssvfiscanf_r+0x4a>
 80124e0:	9141      	str	r1, [sp, #260]	@ 0x104
 80124e2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80124e4:	7853      	ldrb	r3, [r2, #1]
 80124e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80124e8:	bf02      	ittt	eq
 80124ea:	2310      	moveq	r3, #16
 80124ec:	1c95      	addeq	r5, r2, #2
 80124ee:	9341      	streq	r3, [sp, #260]	@ 0x104
 80124f0:	220a      	movs	r2, #10
 80124f2:	46a9      	mov	r9, r5
 80124f4:	f819 1b01 	ldrb.w	r1, [r9], #1
 80124f8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80124fc:	2b09      	cmp	r3, #9
 80124fe:	d91e      	bls.n	801253e <__ssvfiscanf_r+0xf6>
 8012500:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80126fc <__ssvfiscanf_r+0x2b4>
 8012504:	2203      	movs	r2, #3
 8012506:	4650      	mov	r0, sl
 8012508:	f7ed fe42 	bl	8000190 <memchr>
 801250c:	b138      	cbz	r0, 801251e <__ssvfiscanf_r+0xd6>
 801250e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012510:	eba0 000a 	sub.w	r0, r0, sl
 8012514:	2301      	movs	r3, #1
 8012516:	4083      	lsls	r3, r0
 8012518:	4313      	orrs	r3, r2
 801251a:	9341      	str	r3, [sp, #260]	@ 0x104
 801251c:	464d      	mov	r5, r9
 801251e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012522:	2b78      	cmp	r3, #120	@ 0x78
 8012524:	d806      	bhi.n	8012534 <__ssvfiscanf_r+0xec>
 8012526:	2b57      	cmp	r3, #87	@ 0x57
 8012528:	d810      	bhi.n	801254c <__ssvfiscanf_r+0x104>
 801252a:	2b25      	cmp	r3, #37	@ 0x25
 801252c:	d0c5      	beq.n	80124ba <__ssvfiscanf_r+0x72>
 801252e:	d857      	bhi.n	80125e0 <__ssvfiscanf_r+0x198>
 8012530:	2b00      	cmp	r3, #0
 8012532:	d065      	beq.n	8012600 <__ssvfiscanf_r+0x1b8>
 8012534:	2303      	movs	r3, #3
 8012536:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012538:	230a      	movs	r3, #10
 801253a:	9342      	str	r3, [sp, #264]	@ 0x108
 801253c:	e078      	b.n	8012630 <__ssvfiscanf_r+0x1e8>
 801253e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012540:	fb02 1103 	mla	r1, r2, r3, r1
 8012544:	3930      	subs	r1, #48	@ 0x30
 8012546:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012548:	464d      	mov	r5, r9
 801254a:	e7d2      	b.n	80124f2 <__ssvfiscanf_r+0xaa>
 801254c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012550:	2a20      	cmp	r2, #32
 8012552:	d8ef      	bhi.n	8012534 <__ssvfiscanf_r+0xec>
 8012554:	a101      	add	r1, pc, #4	@ (adr r1, 801255c <__ssvfiscanf_r+0x114>)
 8012556:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801255a:	bf00      	nop
 801255c:	0801260f 	.word	0x0801260f
 8012560:	08012535 	.word	0x08012535
 8012564:	08012535 	.word	0x08012535
 8012568:	08012669 	.word	0x08012669
 801256c:	08012535 	.word	0x08012535
 8012570:	08012535 	.word	0x08012535
 8012574:	08012535 	.word	0x08012535
 8012578:	08012535 	.word	0x08012535
 801257c:	08012535 	.word	0x08012535
 8012580:	08012535 	.word	0x08012535
 8012584:	08012535 	.word	0x08012535
 8012588:	0801267f 	.word	0x0801267f
 801258c:	08012665 	.word	0x08012665
 8012590:	080125e7 	.word	0x080125e7
 8012594:	080125e7 	.word	0x080125e7
 8012598:	080125e7 	.word	0x080125e7
 801259c:	08012535 	.word	0x08012535
 80125a0:	08012621 	.word	0x08012621
 80125a4:	08012535 	.word	0x08012535
 80125a8:	08012535 	.word	0x08012535
 80125ac:	08012535 	.word	0x08012535
 80125b0:	08012535 	.word	0x08012535
 80125b4:	0801268f 	.word	0x0801268f
 80125b8:	08012629 	.word	0x08012629
 80125bc:	08012607 	.word	0x08012607
 80125c0:	08012535 	.word	0x08012535
 80125c4:	08012535 	.word	0x08012535
 80125c8:	0801268b 	.word	0x0801268b
 80125cc:	08012535 	.word	0x08012535
 80125d0:	08012665 	.word	0x08012665
 80125d4:	08012535 	.word	0x08012535
 80125d8:	08012535 	.word	0x08012535
 80125dc:	0801260f 	.word	0x0801260f
 80125e0:	3b45      	subs	r3, #69	@ 0x45
 80125e2:	2b02      	cmp	r3, #2
 80125e4:	d8a6      	bhi.n	8012534 <__ssvfiscanf_r+0xec>
 80125e6:	2305      	movs	r3, #5
 80125e8:	e021      	b.n	801262e <__ssvfiscanf_r+0x1e6>
 80125ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80125ec:	4621      	mov	r1, r4
 80125ee:	4630      	mov	r0, r6
 80125f0:	4798      	blx	r3
 80125f2:	2800      	cmp	r0, #0
 80125f4:	f43f af66 	beq.w	80124c4 <__ssvfiscanf_r+0x7c>
 80125f8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80125fa:	2800      	cmp	r0, #0
 80125fc:	f040 808b 	bne.w	8012716 <__ssvfiscanf_r+0x2ce>
 8012600:	f04f 30ff 	mov.w	r0, #4294967295
 8012604:	e08b      	b.n	801271e <__ssvfiscanf_r+0x2d6>
 8012606:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012608:	f042 0220 	orr.w	r2, r2, #32
 801260c:	9241      	str	r2, [sp, #260]	@ 0x104
 801260e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012610:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012614:	9241      	str	r2, [sp, #260]	@ 0x104
 8012616:	2210      	movs	r2, #16
 8012618:	2b6e      	cmp	r3, #110	@ 0x6e
 801261a:	9242      	str	r2, [sp, #264]	@ 0x108
 801261c:	d902      	bls.n	8012624 <__ssvfiscanf_r+0x1dc>
 801261e:	e005      	b.n	801262c <__ssvfiscanf_r+0x1e4>
 8012620:	2300      	movs	r3, #0
 8012622:	9342      	str	r3, [sp, #264]	@ 0x108
 8012624:	2303      	movs	r3, #3
 8012626:	e002      	b.n	801262e <__ssvfiscanf_r+0x1e6>
 8012628:	2308      	movs	r3, #8
 801262a:	9342      	str	r3, [sp, #264]	@ 0x108
 801262c:	2304      	movs	r3, #4
 801262e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012630:	6863      	ldr	r3, [r4, #4]
 8012632:	2b00      	cmp	r3, #0
 8012634:	dd39      	ble.n	80126aa <__ssvfiscanf_r+0x262>
 8012636:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012638:	0659      	lsls	r1, r3, #25
 801263a:	d404      	bmi.n	8012646 <__ssvfiscanf_r+0x1fe>
 801263c:	6823      	ldr	r3, [r4, #0]
 801263e:	781a      	ldrb	r2, [r3, #0]
 8012640:	5cba      	ldrb	r2, [r7, r2]
 8012642:	0712      	lsls	r2, r2, #28
 8012644:	d438      	bmi.n	80126b8 <__ssvfiscanf_r+0x270>
 8012646:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012648:	2b02      	cmp	r3, #2
 801264a:	dc47      	bgt.n	80126dc <__ssvfiscanf_r+0x294>
 801264c:	466b      	mov	r3, sp
 801264e:	4622      	mov	r2, r4
 8012650:	a941      	add	r1, sp, #260	@ 0x104
 8012652:	4630      	mov	r0, r6
 8012654:	f000 fb3c 	bl	8012cd0 <_scanf_chars>
 8012658:	2801      	cmp	r0, #1
 801265a:	d064      	beq.n	8012726 <__ssvfiscanf_r+0x2de>
 801265c:	2802      	cmp	r0, #2
 801265e:	f47f af18 	bne.w	8012492 <__ssvfiscanf_r+0x4a>
 8012662:	e7c9      	b.n	80125f8 <__ssvfiscanf_r+0x1b0>
 8012664:	220a      	movs	r2, #10
 8012666:	e7d7      	b.n	8012618 <__ssvfiscanf_r+0x1d0>
 8012668:	4629      	mov	r1, r5
 801266a:	4640      	mov	r0, r8
 801266c:	f000 fd8c 	bl	8013188 <__sccl>
 8012670:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012676:	9341      	str	r3, [sp, #260]	@ 0x104
 8012678:	4605      	mov	r5, r0
 801267a:	2301      	movs	r3, #1
 801267c:	e7d7      	b.n	801262e <__ssvfiscanf_r+0x1e6>
 801267e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012684:	9341      	str	r3, [sp, #260]	@ 0x104
 8012686:	2300      	movs	r3, #0
 8012688:	e7d1      	b.n	801262e <__ssvfiscanf_r+0x1e6>
 801268a:	2302      	movs	r3, #2
 801268c:	e7cf      	b.n	801262e <__ssvfiscanf_r+0x1e6>
 801268e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8012690:	06c3      	lsls	r3, r0, #27
 8012692:	f53f aefe 	bmi.w	8012492 <__ssvfiscanf_r+0x4a>
 8012696:	9b00      	ldr	r3, [sp, #0]
 8012698:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801269a:	1d19      	adds	r1, r3, #4
 801269c:	9100      	str	r1, [sp, #0]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	07c0      	lsls	r0, r0, #31
 80126a2:	bf4c      	ite	mi
 80126a4:	801a      	strhmi	r2, [r3, #0]
 80126a6:	601a      	strpl	r2, [r3, #0]
 80126a8:	e6f3      	b.n	8012492 <__ssvfiscanf_r+0x4a>
 80126aa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80126ac:	4621      	mov	r1, r4
 80126ae:	4630      	mov	r0, r6
 80126b0:	4798      	blx	r3
 80126b2:	2800      	cmp	r0, #0
 80126b4:	d0bf      	beq.n	8012636 <__ssvfiscanf_r+0x1ee>
 80126b6:	e79f      	b.n	80125f8 <__ssvfiscanf_r+0x1b0>
 80126b8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80126ba:	3201      	adds	r2, #1
 80126bc:	9245      	str	r2, [sp, #276]	@ 0x114
 80126be:	6862      	ldr	r2, [r4, #4]
 80126c0:	3a01      	subs	r2, #1
 80126c2:	2a00      	cmp	r2, #0
 80126c4:	6062      	str	r2, [r4, #4]
 80126c6:	dd02      	ble.n	80126ce <__ssvfiscanf_r+0x286>
 80126c8:	3301      	adds	r3, #1
 80126ca:	6023      	str	r3, [r4, #0]
 80126cc:	e7b6      	b.n	801263c <__ssvfiscanf_r+0x1f4>
 80126ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80126d0:	4621      	mov	r1, r4
 80126d2:	4630      	mov	r0, r6
 80126d4:	4798      	blx	r3
 80126d6:	2800      	cmp	r0, #0
 80126d8:	d0b0      	beq.n	801263c <__ssvfiscanf_r+0x1f4>
 80126da:	e78d      	b.n	80125f8 <__ssvfiscanf_r+0x1b0>
 80126dc:	2b04      	cmp	r3, #4
 80126de:	dc0f      	bgt.n	8012700 <__ssvfiscanf_r+0x2b8>
 80126e0:	466b      	mov	r3, sp
 80126e2:	4622      	mov	r2, r4
 80126e4:	a941      	add	r1, sp, #260	@ 0x104
 80126e6:	4630      	mov	r0, r6
 80126e8:	f000 fb4c 	bl	8012d84 <_scanf_i>
 80126ec:	e7b4      	b.n	8012658 <__ssvfiscanf_r+0x210>
 80126ee:	bf00      	nop
 80126f0:	08012399 	.word	0x08012399
 80126f4:	0801240f 	.word	0x0801240f
 80126f8:	080197d3 	.word	0x080197d3
 80126fc:	080198d9 	.word	0x080198d9
 8012700:	4b0a      	ldr	r3, [pc, #40]	@ (801272c <__ssvfiscanf_r+0x2e4>)
 8012702:	2b00      	cmp	r3, #0
 8012704:	f43f aec5 	beq.w	8012492 <__ssvfiscanf_r+0x4a>
 8012708:	466b      	mov	r3, sp
 801270a:	4622      	mov	r2, r4
 801270c:	a941      	add	r1, sp, #260	@ 0x104
 801270e:	4630      	mov	r0, r6
 8012710:	f3af 8000 	nop.w
 8012714:	e7a0      	b.n	8012658 <__ssvfiscanf_r+0x210>
 8012716:	89a3      	ldrh	r3, [r4, #12]
 8012718:	065b      	lsls	r3, r3, #25
 801271a:	f53f af71 	bmi.w	8012600 <__ssvfiscanf_r+0x1b8>
 801271e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8012722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012726:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012728:	e7f9      	b.n	801271e <__ssvfiscanf_r+0x2d6>
 801272a:	bf00      	nop
 801272c:	00000000 	.word	0x00000000

08012730 <__sfputc_r>:
 8012730:	6893      	ldr	r3, [r2, #8]
 8012732:	3b01      	subs	r3, #1
 8012734:	2b00      	cmp	r3, #0
 8012736:	b410      	push	{r4}
 8012738:	6093      	str	r3, [r2, #8]
 801273a:	da08      	bge.n	801274e <__sfputc_r+0x1e>
 801273c:	6994      	ldr	r4, [r2, #24]
 801273e:	42a3      	cmp	r3, r4
 8012740:	db01      	blt.n	8012746 <__sfputc_r+0x16>
 8012742:	290a      	cmp	r1, #10
 8012744:	d103      	bne.n	801274e <__sfputc_r+0x1e>
 8012746:	f85d 4b04 	ldr.w	r4, [sp], #4
 801274a:	f7ff bb1f 	b.w	8011d8c <__swbuf_r>
 801274e:	6813      	ldr	r3, [r2, #0]
 8012750:	1c58      	adds	r0, r3, #1
 8012752:	6010      	str	r0, [r2, #0]
 8012754:	7019      	strb	r1, [r3, #0]
 8012756:	4608      	mov	r0, r1
 8012758:	f85d 4b04 	ldr.w	r4, [sp], #4
 801275c:	4770      	bx	lr

0801275e <__sfputs_r>:
 801275e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012760:	4606      	mov	r6, r0
 8012762:	460f      	mov	r7, r1
 8012764:	4614      	mov	r4, r2
 8012766:	18d5      	adds	r5, r2, r3
 8012768:	42ac      	cmp	r4, r5
 801276a:	d101      	bne.n	8012770 <__sfputs_r+0x12>
 801276c:	2000      	movs	r0, #0
 801276e:	e007      	b.n	8012780 <__sfputs_r+0x22>
 8012770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012774:	463a      	mov	r2, r7
 8012776:	4630      	mov	r0, r6
 8012778:	f7ff ffda 	bl	8012730 <__sfputc_r>
 801277c:	1c43      	adds	r3, r0, #1
 801277e:	d1f3      	bne.n	8012768 <__sfputs_r+0xa>
 8012780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012784 <_vfiprintf_r>:
 8012784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012788:	460d      	mov	r5, r1
 801278a:	b09d      	sub	sp, #116	@ 0x74
 801278c:	4614      	mov	r4, r2
 801278e:	4698      	mov	r8, r3
 8012790:	4606      	mov	r6, r0
 8012792:	b118      	cbz	r0, 801279c <_vfiprintf_r+0x18>
 8012794:	6a03      	ldr	r3, [r0, #32]
 8012796:	b90b      	cbnz	r3, 801279c <_vfiprintf_r+0x18>
 8012798:	f7ff f98a 	bl	8011ab0 <__sinit>
 801279c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801279e:	07d9      	lsls	r1, r3, #31
 80127a0:	d405      	bmi.n	80127ae <_vfiprintf_r+0x2a>
 80127a2:	89ab      	ldrh	r3, [r5, #12]
 80127a4:	059a      	lsls	r2, r3, #22
 80127a6:	d402      	bmi.n	80127ae <_vfiprintf_r+0x2a>
 80127a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80127aa:	f7ff fc3a 	bl	8012022 <__retarget_lock_acquire_recursive>
 80127ae:	89ab      	ldrh	r3, [r5, #12]
 80127b0:	071b      	lsls	r3, r3, #28
 80127b2:	d501      	bpl.n	80127b8 <_vfiprintf_r+0x34>
 80127b4:	692b      	ldr	r3, [r5, #16]
 80127b6:	b99b      	cbnz	r3, 80127e0 <_vfiprintf_r+0x5c>
 80127b8:	4629      	mov	r1, r5
 80127ba:	4630      	mov	r0, r6
 80127bc:	f7ff fb24 	bl	8011e08 <__swsetup_r>
 80127c0:	b170      	cbz	r0, 80127e0 <_vfiprintf_r+0x5c>
 80127c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80127c4:	07dc      	lsls	r4, r3, #31
 80127c6:	d504      	bpl.n	80127d2 <_vfiprintf_r+0x4e>
 80127c8:	f04f 30ff 	mov.w	r0, #4294967295
 80127cc:	b01d      	add	sp, #116	@ 0x74
 80127ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127d2:	89ab      	ldrh	r3, [r5, #12]
 80127d4:	0598      	lsls	r0, r3, #22
 80127d6:	d4f7      	bmi.n	80127c8 <_vfiprintf_r+0x44>
 80127d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80127da:	f7ff fc23 	bl	8012024 <__retarget_lock_release_recursive>
 80127de:	e7f3      	b.n	80127c8 <_vfiprintf_r+0x44>
 80127e0:	2300      	movs	r3, #0
 80127e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80127e4:	2320      	movs	r3, #32
 80127e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80127ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80127ee:	2330      	movs	r3, #48	@ 0x30
 80127f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80129a0 <_vfiprintf_r+0x21c>
 80127f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80127f8:	f04f 0901 	mov.w	r9, #1
 80127fc:	4623      	mov	r3, r4
 80127fe:	469a      	mov	sl, r3
 8012800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012804:	b10a      	cbz	r2, 801280a <_vfiprintf_r+0x86>
 8012806:	2a25      	cmp	r2, #37	@ 0x25
 8012808:	d1f9      	bne.n	80127fe <_vfiprintf_r+0x7a>
 801280a:	ebba 0b04 	subs.w	fp, sl, r4
 801280e:	d00b      	beq.n	8012828 <_vfiprintf_r+0xa4>
 8012810:	465b      	mov	r3, fp
 8012812:	4622      	mov	r2, r4
 8012814:	4629      	mov	r1, r5
 8012816:	4630      	mov	r0, r6
 8012818:	f7ff ffa1 	bl	801275e <__sfputs_r>
 801281c:	3001      	adds	r0, #1
 801281e:	f000 80a7 	beq.w	8012970 <_vfiprintf_r+0x1ec>
 8012822:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012824:	445a      	add	r2, fp
 8012826:	9209      	str	r2, [sp, #36]	@ 0x24
 8012828:	f89a 3000 	ldrb.w	r3, [sl]
 801282c:	2b00      	cmp	r3, #0
 801282e:	f000 809f 	beq.w	8012970 <_vfiprintf_r+0x1ec>
 8012832:	2300      	movs	r3, #0
 8012834:	f04f 32ff 	mov.w	r2, #4294967295
 8012838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801283c:	f10a 0a01 	add.w	sl, sl, #1
 8012840:	9304      	str	r3, [sp, #16]
 8012842:	9307      	str	r3, [sp, #28]
 8012844:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012848:	931a      	str	r3, [sp, #104]	@ 0x68
 801284a:	4654      	mov	r4, sl
 801284c:	2205      	movs	r2, #5
 801284e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012852:	4853      	ldr	r0, [pc, #332]	@ (80129a0 <_vfiprintf_r+0x21c>)
 8012854:	f7ed fc9c 	bl	8000190 <memchr>
 8012858:	9a04      	ldr	r2, [sp, #16]
 801285a:	b9d8      	cbnz	r0, 8012894 <_vfiprintf_r+0x110>
 801285c:	06d1      	lsls	r1, r2, #27
 801285e:	bf44      	itt	mi
 8012860:	2320      	movmi	r3, #32
 8012862:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012866:	0713      	lsls	r3, r2, #28
 8012868:	bf44      	itt	mi
 801286a:	232b      	movmi	r3, #43	@ 0x2b
 801286c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012870:	f89a 3000 	ldrb.w	r3, [sl]
 8012874:	2b2a      	cmp	r3, #42	@ 0x2a
 8012876:	d015      	beq.n	80128a4 <_vfiprintf_r+0x120>
 8012878:	9a07      	ldr	r2, [sp, #28]
 801287a:	4654      	mov	r4, sl
 801287c:	2000      	movs	r0, #0
 801287e:	f04f 0c0a 	mov.w	ip, #10
 8012882:	4621      	mov	r1, r4
 8012884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012888:	3b30      	subs	r3, #48	@ 0x30
 801288a:	2b09      	cmp	r3, #9
 801288c:	d94b      	bls.n	8012926 <_vfiprintf_r+0x1a2>
 801288e:	b1b0      	cbz	r0, 80128be <_vfiprintf_r+0x13a>
 8012890:	9207      	str	r2, [sp, #28]
 8012892:	e014      	b.n	80128be <_vfiprintf_r+0x13a>
 8012894:	eba0 0308 	sub.w	r3, r0, r8
 8012898:	fa09 f303 	lsl.w	r3, r9, r3
 801289c:	4313      	orrs	r3, r2
 801289e:	9304      	str	r3, [sp, #16]
 80128a0:	46a2      	mov	sl, r4
 80128a2:	e7d2      	b.n	801284a <_vfiprintf_r+0xc6>
 80128a4:	9b03      	ldr	r3, [sp, #12]
 80128a6:	1d19      	adds	r1, r3, #4
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	9103      	str	r1, [sp, #12]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	bfbb      	ittet	lt
 80128b0:	425b      	neglt	r3, r3
 80128b2:	f042 0202 	orrlt.w	r2, r2, #2
 80128b6:	9307      	strge	r3, [sp, #28]
 80128b8:	9307      	strlt	r3, [sp, #28]
 80128ba:	bfb8      	it	lt
 80128bc:	9204      	strlt	r2, [sp, #16]
 80128be:	7823      	ldrb	r3, [r4, #0]
 80128c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80128c2:	d10a      	bne.n	80128da <_vfiprintf_r+0x156>
 80128c4:	7863      	ldrb	r3, [r4, #1]
 80128c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80128c8:	d132      	bne.n	8012930 <_vfiprintf_r+0x1ac>
 80128ca:	9b03      	ldr	r3, [sp, #12]
 80128cc:	1d1a      	adds	r2, r3, #4
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	9203      	str	r2, [sp, #12]
 80128d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80128d6:	3402      	adds	r4, #2
 80128d8:	9305      	str	r3, [sp, #20]
 80128da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80129b0 <_vfiprintf_r+0x22c>
 80128de:	7821      	ldrb	r1, [r4, #0]
 80128e0:	2203      	movs	r2, #3
 80128e2:	4650      	mov	r0, sl
 80128e4:	f7ed fc54 	bl	8000190 <memchr>
 80128e8:	b138      	cbz	r0, 80128fa <_vfiprintf_r+0x176>
 80128ea:	9b04      	ldr	r3, [sp, #16]
 80128ec:	eba0 000a 	sub.w	r0, r0, sl
 80128f0:	2240      	movs	r2, #64	@ 0x40
 80128f2:	4082      	lsls	r2, r0
 80128f4:	4313      	orrs	r3, r2
 80128f6:	3401      	adds	r4, #1
 80128f8:	9304      	str	r3, [sp, #16]
 80128fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128fe:	4829      	ldr	r0, [pc, #164]	@ (80129a4 <_vfiprintf_r+0x220>)
 8012900:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012904:	2206      	movs	r2, #6
 8012906:	f7ed fc43 	bl	8000190 <memchr>
 801290a:	2800      	cmp	r0, #0
 801290c:	d03f      	beq.n	801298e <_vfiprintf_r+0x20a>
 801290e:	4b26      	ldr	r3, [pc, #152]	@ (80129a8 <_vfiprintf_r+0x224>)
 8012910:	bb1b      	cbnz	r3, 801295a <_vfiprintf_r+0x1d6>
 8012912:	9b03      	ldr	r3, [sp, #12]
 8012914:	3307      	adds	r3, #7
 8012916:	f023 0307 	bic.w	r3, r3, #7
 801291a:	3308      	adds	r3, #8
 801291c:	9303      	str	r3, [sp, #12]
 801291e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012920:	443b      	add	r3, r7
 8012922:	9309      	str	r3, [sp, #36]	@ 0x24
 8012924:	e76a      	b.n	80127fc <_vfiprintf_r+0x78>
 8012926:	fb0c 3202 	mla	r2, ip, r2, r3
 801292a:	460c      	mov	r4, r1
 801292c:	2001      	movs	r0, #1
 801292e:	e7a8      	b.n	8012882 <_vfiprintf_r+0xfe>
 8012930:	2300      	movs	r3, #0
 8012932:	3401      	adds	r4, #1
 8012934:	9305      	str	r3, [sp, #20]
 8012936:	4619      	mov	r1, r3
 8012938:	f04f 0c0a 	mov.w	ip, #10
 801293c:	4620      	mov	r0, r4
 801293e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012942:	3a30      	subs	r2, #48	@ 0x30
 8012944:	2a09      	cmp	r2, #9
 8012946:	d903      	bls.n	8012950 <_vfiprintf_r+0x1cc>
 8012948:	2b00      	cmp	r3, #0
 801294a:	d0c6      	beq.n	80128da <_vfiprintf_r+0x156>
 801294c:	9105      	str	r1, [sp, #20]
 801294e:	e7c4      	b.n	80128da <_vfiprintf_r+0x156>
 8012950:	fb0c 2101 	mla	r1, ip, r1, r2
 8012954:	4604      	mov	r4, r0
 8012956:	2301      	movs	r3, #1
 8012958:	e7f0      	b.n	801293c <_vfiprintf_r+0x1b8>
 801295a:	ab03      	add	r3, sp, #12
 801295c:	9300      	str	r3, [sp, #0]
 801295e:	462a      	mov	r2, r5
 8012960:	4b12      	ldr	r3, [pc, #72]	@ (80129ac <_vfiprintf_r+0x228>)
 8012962:	a904      	add	r1, sp, #16
 8012964:	4630      	mov	r0, r6
 8012966:	f3af 8000 	nop.w
 801296a:	4607      	mov	r7, r0
 801296c:	1c78      	adds	r0, r7, #1
 801296e:	d1d6      	bne.n	801291e <_vfiprintf_r+0x19a>
 8012970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012972:	07d9      	lsls	r1, r3, #31
 8012974:	d405      	bmi.n	8012982 <_vfiprintf_r+0x1fe>
 8012976:	89ab      	ldrh	r3, [r5, #12]
 8012978:	059a      	lsls	r2, r3, #22
 801297a:	d402      	bmi.n	8012982 <_vfiprintf_r+0x1fe>
 801297c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801297e:	f7ff fb51 	bl	8012024 <__retarget_lock_release_recursive>
 8012982:	89ab      	ldrh	r3, [r5, #12]
 8012984:	065b      	lsls	r3, r3, #25
 8012986:	f53f af1f 	bmi.w	80127c8 <_vfiprintf_r+0x44>
 801298a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801298c:	e71e      	b.n	80127cc <_vfiprintf_r+0x48>
 801298e:	ab03      	add	r3, sp, #12
 8012990:	9300      	str	r3, [sp, #0]
 8012992:	462a      	mov	r2, r5
 8012994:	4b05      	ldr	r3, [pc, #20]	@ (80129ac <_vfiprintf_r+0x228>)
 8012996:	a904      	add	r1, sp, #16
 8012998:	4630      	mov	r0, r6
 801299a:	f000 f879 	bl	8012a90 <_printf_i>
 801299e:	e7e4      	b.n	801296a <_vfiprintf_r+0x1e6>
 80129a0:	080198d3 	.word	0x080198d3
 80129a4:	080198dd 	.word	0x080198dd
 80129a8:	00000000 	.word	0x00000000
 80129ac:	0801275f 	.word	0x0801275f
 80129b0:	080198d9 	.word	0x080198d9

080129b4 <_printf_common>:
 80129b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129b8:	4616      	mov	r6, r2
 80129ba:	4698      	mov	r8, r3
 80129bc:	688a      	ldr	r2, [r1, #8]
 80129be:	690b      	ldr	r3, [r1, #16]
 80129c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80129c4:	4293      	cmp	r3, r2
 80129c6:	bfb8      	it	lt
 80129c8:	4613      	movlt	r3, r2
 80129ca:	6033      	str	r3, [r6, #0]
 80129cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80129d0:	4607      	mov	r7, r0
 80129d2:	460c      	mov	r4, r1
 80129d4:	b10a      	cbz	r2, 80129da <_printf_common+0x26>
 80129d6:	3301      	adds	r3, #1
 80129d8:	6033      	str	r3, [r6, #0]
 80129da:	6823      	ldr	r3, [r4, #0]
 80129dc:	0699      	lsls	r1, r3, #26
 80129de:	bf42      	ittt	mi
 80129e0:	6833      	ldrmi	r3, [r6, #0]
 80129e2:	3302      	addmi	r3, #2
 80129e4:	6033      	strmi	r3, [r6, #0]
 80129e6:	6825      	ldr	r5, [r4, #0]
 80129e8:	f015 0506 	ands.w	r5, r5, #6
 80129ec:	d106      	bne.n	80129fc <_printf_common+0x48>
 80129ee:	f104 0a19 	add.w	sl, r4, #25
 80129f2:	68e3      	ldr	r3, [r4, #12]
 80129f4:	6832      	ldr	r2, [r6, #0]
 80129f6:	1a9b      	subs	r3, r3, r2
 80129f8:	42ab      	cmp	r3, r5
 80129fa:	dc26      	bgt.n	8012a4a <_printf_common+0x96>
 80129fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012a00:	6822      	ldr	r2, [r4, #0]
 8012a02:	3b00      	subs	r3, #0
 8012a04:	bf18      	it	ne
 8012a06:	2301      	movne	r3, #1
 8012a08:	0692      	lsls	r2, r2, #26
 8012a0a:	d42b      	bmi.n	8012a64 <_printf_common+0xb0>
 8012a0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012a10:	4641      	mov	r1, r8
 8012a12:	4638      	mov	r0, r7
 8012a14:	47c8      	blx	r9
 8012a16:	3001      	adds	r0, #1
 8012a18:	d01e      	beq.n	8012a58 <_printf_common+0xa4>
 8012a1a:	6823      	ldr	r3, [r4, #0]
 8012a1c:	6922      	ldr	r2, [r4, #16]
 8012a1e:	f003 0306 	and.w	r3, r3, #6
 8012a22:	2b04      	cmp	r3, #4
 8012a24:	bf02      	ittt	eq
 8012a26:	68e5      	ldreq	r5, [r4, #12]
 8012a28:	6833      	ldreq	r3, [r6, #0]
 8012a2a:	1aed      	subeq	r5, r5, r3
 8012a2c:	68a3      	ldr	r3, [r4, #8]
 8012a2e:	bf0c      	ite	eq
 8012a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012a34:	2500      	movne	r5, #0
 8012a36:	4293      	cmp	r3, r2
 8012a38:	bfc4      	itt	gt
 8012a3a:	1a9b      	subgt	r3, r3, r2
 8012a3c:	18ed      	addgt	r5, r5, r3
 8012a3e:	2600      	movs	r6, #0
 8012a40:	341a      	adds	r4, #26
 8012a42:	42b5      	cmp	r5, r6
 8012a44:	d11a      	bne.n	8012a7c <_printf_common+0xc8>
 8012a46:	2000      	movs	r0, #0
 8012a48:	e008      	b.n	8012a5c <_printf_common+0xa8>
 8012a4a:	2301      	movs	r3, #1
 8012a4c:	4652      	mov	r2, sl
 8012a4e:	4641      	mov	r1, r8
 8012a50:	4638      	mov	r0, r7
 8012a52:	47c8      	blx	r9
 8012a54:	3001      	adds	r0, #1
 8012a56:	d103      	bne.n	8012a60 <_printf_common+0xac>
 8012a58:	f04f 30ff 	mov.w	r0, #4294967295
 8012a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a60:	3501      	adds	r5, #1
 8012a62:	e7c6      	b.n	80129f2 <_printf_common+0x3e>
 8012a64:	18e1      	adds	r1, r4, r3
 8012a66:	1c5a      	adds	r2, r3, #1
 8012a68:	2030      	movs	r0, #48	@ 0x30
 8012a6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012a6e:	4422      	add	r2, r4
 8012a70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012a74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012a78:	3302      	adds	r3, #2
 8012a7a:	e7c7      	b.n	8012a0c <_printf_common+0x58>
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	4622      	mov	r2, r4
 8012a80:	4641      	mov	r1, r8
 8012a82:	4638      	mov	r0, r7
 8012a84:	47c8      	blx	r9
 8012a86:	3001      	adds	r0, #1
 8012a88:	d0e6      	beq.n	8012a58 <_printf_common+0xa4>
 8012a8a:	3601      	adds	r6, #1
 8012a8c:	e7d9      	b.n	8012a42 <_printf_common+0x8e>
	...

08012a90 <_printf_i>:
 8012a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a94:	7e0f      	ldrb	r7, [r1, #24]
 8012a96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012a98:	2f78      	cmp	r7, #120	@ 0x78
 8012a9a:	4691      	mov	r9, r2
 8012a9c:	4680      	mov	r8, r0
 8012a9e:	460c      	mov	r4, r1
 8012aa0:	469a      	mov	sl, r3
 8012aa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012aa6:	d807      	bhi.n	8012ab8 <_printf_i+0x28>
 8012aa8:	2f62      	cmp	r7, #98	@ 0x62
 8012aaa:	d80a      	bhi.n	8012ac2 <_printf_i+0x32>
 8012aac:	2f00      	cmp	r7, #0
 8012aae:	f000 80d2 	beq.w	8012c56 <_printf_i+0x1c6>
 8012ab2:	2f58      	cmp	r7, #88	@ 0x58
 8012ab4:	f000 80b9 	beq.w	8012c2a <_printf_i+0x19a>
 8012ab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012abc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012ac0:	e03a      	b.n	8012b38 <_printf_i+0xa8>
 8012ac2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012ac6:	2b15      	cmp	r3, #21
 8012ac8:	d8f6      	bhi.n	8012ab8 <_printf_i+0x28>
 8012aca:	a101      	add	r1, pc, #4	@ (adr r1, 8012ad0 <_printf_i+0x40>)
 8012acc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ad0:	08012b29 	.word	0x08012b29
 8012ad4:	08012b3d 	.word	0x08012b3d
 8012ad8:	08012ab9 	.word	0x08012ab9
 8012adc:	08012ab9 	.word	0x08012ab9
 8012ae0:	08012ab9 	.word	0x08012ab9
 8012ae4:	08012ab9 	.word	0x08012ab9
 8012ae8:	08012b3d 	.word	0x08012b3d
 8012aec:	08012ab9 	.word	0x08012ab9
 8012af0:	08012ab9 	.word	0x08012ab9
 8012af4:	08012ab9 	.word	0x08012ab9
 8012af8:	08012ab9 	.word	0x08012ab9
 8012afc:	08012c3d 	.word	0x08012c3d
 8012b00:	08012b67 	.word	0x08012b67
 8012b04:	08012bf7 	.word	0x08012bf7
 8012b08:	08012ab9 	.word	0x08012ab9
 8012b0c:	08012ab9 	.word	0x08012ab9
 8012b10:	08012c5f 	.word	0x08012c5f
 8012b14:	08012ab9 	.word	0x08012ab9
 8012b18:	08012b67 	.word	0x08012b67
 8012b1c:	08012ab9 	.word	0x08012ab9
 8012b20:	08012ab9 	.word	0x08012ab9
 8012b24:	08012bff 	.word	0x08012bff
 8012b28:	6833      	ldr	r3, [r6, #0]
 8012b2a:	1d1a      	adds	r2, r3, #4
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	6032      	str	r2, [r6, #0]
 8012b30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012b34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012b38:	2301      	movs	r3, #1
 8012b3a:	e09d      	b.n	8012c78 <_printf_i+0x1e8>
 8012b3c:	6833      	ldr	r3, [r6, #0]
 8012b3e:	6820      	ldr	r0, [r4, #0]
 8012b40:	1d19      	adds	r1, r3, #4
 8012b42:	6031      	str	r1, [r6, #0]
 8012b44:	0606      	lsls	r6, r0, #24
 8012b46:	d501      	bpl.n	8012b4c <_printf_i+0xbc>
 8012b48:	681d      	ldr	r5, [r3, #0]
 8012b4a:	e003      	b.n	8012b54 <_printf_i+0xc4>
 8012b4c:	0645      	lsls	r5, r0, #25
 8012b4e:	d5fb      	bpl.n	8012b48 <_printf_i+0xb8>
 8012b50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012b54:	2d00      	cmp	r5, #0
 8012b56:	da03      	bge.n	8012b60 <_printf_i+0xd0>
 8012b58:	232d      	movs	r3, #45	@ 0x2d
 8012b5a:	426d      	negs	r5, r5
 8012b5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012b60:	4859      	ldr	r0, [pc, #356]	@ (8012cc8 <_printf_i+0x238>)
 8012b62:	230a      	movs	r3, #10
 8012b64:	e011      	b.n	8012b8a <_printf_i+0xfa>
 8012b66:	6821      	ldr	r1, [r4, #0]
 8012b68:	6833      	ldr	r3, [r6, #0]
 8012b6a:	0608      	lsls	r0, r1, #24
 8012b6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012b70:	d402      	bmi.n	8012b78 <_printf_i+0xe8>
 8012b72:	0649      	lsls	r1, r1, #25
 8012b74:	bf48      	it	mi
 8012b76:	b2ad      	uxthmi	r5, r5
 8012b78:	2f6f      	cmp	r7, #111	@ 0x6f
 8012b7a:	4853      	ldr	r0, [pc, #332]	@ (8012cc8 <_printf_i+0x238>)
 8012b7c:	6033      	str	r3, [r6, #0]
 8012b7e:	bf14      	ite	ne
 8012b80:	230a      	movne	r3, #10
 8012b82:	2308      	moveq	r3, #8
 8012b84:	2100      	movs	r1, #0
 8012b86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012b8a:	6866      	ldr	r6, [r4, #4]
 8012b8c:	60a6      	str	r6, [r4, #8]
 8012b8e:	2e00      	cmp	r6, #0
 8012b90:	bfa2      	ittt	ge
 8012b92:	6821      	ldrge	r1, [r4, #0]
 8012b94:	f021 0104 	bicge.w	r1, r1, #4
 8012b98:	6021      	strge	r1, [r4, #0]
 8012b9a:	b90d      	cbnz	r5, 8012ba0 <_printf_i+0x110>
 8012b9c:	2e00      	cmp	r6, #0
 8012b9e:	d04b      	beq.n	8012c38 <_printf_i+0x1a8>
 8012ba0:	4616      	mov	r6, r2
 8012ba2:	fbb5 f1f3 	udiv	r1, r5, r3
 8012ba6:	fb03 5711 	mls	r7, r3, r1, r5
 8012baa:	5dc7      	ldrb	r7, [r0, r7]
 8012bac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012bb0:	462f      	mov	r7, r5
 8012bb2:	42bb      	cmp	r3, r7
 8012bb4:	460d      	mov	r5, r1
 8012bb6:	d9f4      	bls.n	8012ba2 <_printf_i+0x112>
 8012bb8:	2b08      	cmp	r3, #8
 8012bba:	d10b      	bne.n	8012bd4 <_printf_i+0x144>
 8012bbc:	6823      	ldr	r3, [r4, #0]
 8012bbe:	07df      	lsls	r7, r3, #31
 8012bc0:	d508      	bpl.n	8012bd4 <_printf_i+0x144>
 8012bc2:	6923      	ldr	r3, [r4, #16]
 8012bc4:	6861      	ldr	r1, [r4, #4]
 8012bc6:	4299      	cmp	r1, r3
 8012bc8:	bfde      	ittt	le
 8012bca:	2330      	movle	r3, #48	@ 0x30
 8012bcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012bd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012bd4:	1b92      	subs	r2, r2, r6
 8012bd6:	6122      	str	r2, [r4, #16]
 8012bd8:	f8cd a000 	str.w	sl, [sp]
 8012bdc:	464b      	mov	r3, r9
 8012bde:	aa03      	add	r2, sp, #12
 8012be0:	4621      	mov	r1, r4
 8012be2:	4640      	mov	r0, r8
 8012be4:	f7ff fee6 	bl	80129b4 <_printf_common>
 8012be8:	3001      	adds	r0, #1
 8012bea:	d14a      	bne.n	8012c82 <_printf_i+0x1f2>
 8012bec:	f04f 30ff 	mov.w	r0, #4294967295
 8012bf0:	b004      	add	sp, #16
 8012bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bf6:	6823      	ldr	r3, [r4, #0]
 8012bf8:	f043 0320 	orr.w	r3, r3, #32
 8012bfc:	6023      	str	r3, [r4, #0]
 8012bfe:	4833      	ldr	r0, [pc, #204]	@ (8012ccc <_printf_i+0x23c>)
 8012c00:	2778      	movs	r7, #120	@ 0x78
 8012c02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012c06:	6823      	ldr	r3, [r4, #0]
 8012c08:	6831      	ldr	r1, [r6, #0]
 8012c0a:	061f      	lsls	r7, r3, #24
 8012c0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8012c10:	d402      	bmi.n	8012c18 <_printf_i+0x188>
 8012c12:	065f      	lsls	r7, r3, #25
 8012c14:	bf48      	it	mi
 8012c16:	b2ad      	uxthmi	r5, r5
 8012c18:	6031      	str	r1, [r6, #0]
 8012c1a:	07d9      	lsls	r1, r3, #31
 8012c1c:	bf44      	itt	mi
 8012c1e:	f043 0320 	orrmi.w	r3, r3, #32
 8012c22:	6023      	strmi	r3, [r4, #0]
 8012c24:	b11d      	cbz	r5, 8012c2e <_printf_i+0x19e>
 8012c26:	2310      	movs	r3, #16
 8012c28:	e7ac      	b.n	8012b84 <_printf_i+0xf4>
 8012c2a:	4827      	ldr	r0, [pc, #156]	@ (8012cc8 <_printf_i+0x238>)
 8012c2c:	e7e9      	b.n	8012c02 <_printf_i+0x172>
 8012c2e:	6823      	ldr	r3, [r4, #0]
 8012c30:	f023 0320 	bic.w	r3, r3, #32
 8012c34:	6023      	str	r3, [r4, #0]
 8012c36:	e7f6      	b.n	8012c26 <_printf_i+0x196>
 8012c38:	4616      	mov	r6, r2
 8012c3a:	e7bd      	b.n	8012bb8 <_printf_i+0x128>
 8012c3c:	6833      	ldr	r3, [r6, #0]
 8012c3e:	6825      	ldr	r5, [r4, #0]
 8012c40:	6961      	ldr	r1, [r4, #20]
 8012c42:	1d18      	adds	r0, r3, #4
 8012c44:	6030      	str	r0, [r6, #0]
 8012c46:	062e      	lsls	r6, r5, #24
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	d501      	bpl.n	8012c50 <_printf_i+0x1c0>
 8012c4c:	6019      	str	r1, [r3, #0]
 8012c4e:	e002      	b.n	8012c56 <_printf_i+0x1c6>
 8012c50:	0668      	lsls	r0, r5, #25
 8012c52:	d5fb      	bpl.n	8012c4c <_printf_i+0x1bc>
 8012c54:	8019      	strh	r1, [r3, #0]
 8012c56:	2300      	movs	r3, #0
 8012c58:	6123      	str	r3, [r4, #16]
 8012c5a:	4616      	mov	r6, r2
 8012c5c:	e7bc      	b.n	8012bd8 <_printf_i+0x148>
 8012c5e:	6833      	ldr	r3, [r6, #0]
 8012c60:	1d1a      	adds	r2, r3, #4
 8012c62:	6032      	str	r2, [r6, #0]
 8012c64:	681e      	ldr	r6, [r3, #0]
 8012c66:	6862      	ldr	r2, [r4, #4]
 8012c68:	2100      	movs	r1, #0
 8012c6a:	4630      	mov	r0, r6
 8012c6c:	f7ed fa90 	bl	8000190 <memchr>
 8012c70:	b108      	cbz	r0, 8012c76 <_printf_i+0x1e6>
 8012c72:	1b80      	subs	r0, r0, r6
 8012c74:	6060      	str	r0, [r4, #4]
 8012c76:	6863      	ldr	r3, [r4, #4]
 8012c78:	6123      	str	r3, [r4, #16]
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012c80:	e7aa      	b.n	8012bd8 <_printf_i+0x148>
 8012c82:	6923      	ldr	r3, [r4, #16]
 8012c84:	4632      	mov	r2, r6
 8012c86:	4649      	mov	r1, r9
 8012c88:	4640      	mov	r0, r8
 8012c8a:	47d0      	blx	sl
 8012c8c:	3001      	adds	r0, #1
 8012c8e:	d0ad      	beq.n	8012bec <_printf_i+0x15c>
 8012c90:	6823      	ldr	r3, [r4, #0]
 8012c92:	079b      	lsls	r3, r3, #30
 8012c94:	d413      	bmi.n	8012cbe <_printf_i+0x22e>
 8012c96:	68e0      	ldr	r0, [r4, #12]
 8012c98:	9b03      	ldr	r3, [sp, #12]
 8012c9a:	4298      	cmp	r0, r3
 8012c9c:	bfb8      	it	lt
 8012c9e:	4618      	movlt	r0, r3
 8012ca0:	e7a6      	b.n	8012bf0 <_printf_i+0x160>
 8012ca2:	2301      	movs	r3, #1
 8012ca4:	4632      	mov	r2, r6
 8012ca6:	4649      	mov	r1, r9
 8012ca8:	4640      	mov	r0, r8
 8012caa:	47d0      	blx	sl
 8012cac:	3001      	adds	r0, #1
 8012cae:	d09d      	beq.n	8012bec <_printf_i+0x15c>
 8012cb0:	3501      	adds	r5, #1
 8012cb2:	68e3      	ldr	r3, [r4, #12]
 8012cb4:	9903      	ldr	r1, [sp, #12]
 8012cb6:	1a5b      	subs	r3, r3, r1
 8012cb8:	42ab      	cmp	r3, r5
 8012cba:	dcf2      	bgt.n	8012ca2 <_printf_i+0x212>
 8012cbc:	e7eb      	b.n	8012c96 <_printf_i+0x206>
 8012cbe:	2500      	movs	r5, #0
 8012cc0:	f104 0619 	add.w	r6, r4, #25
 8012cc4:	e7f5      	b.n	8012cb2 <_printf_i+0x222>
 8012cc6:	bf00      	nop
 8012cc8:	080198e4 	.word	0x080198e4
 8012ccc:	080198f5 	.word	0x080198f5

08012cd0 <_scanf_chars>:
 8012cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012cd4:	4615      	mov	r5, r2
 8012cd6:	688a      	ldr	r2, [r1, #8]
 8012cd8:	4680      	mov	r8, r0
 8012cda:	460c      	mov	r4, r1
 8012cdc:	b932      	cbnz	r2, 8012cec <_scanf_chars+0x1c>
 8012cde:	698a      	ldr	r2, [r1, #24]
 8012ce0:	2a00      	cmp	r2, #0
 8012ce2:	bf14      	ite	ne
 8012ce4:	f04f 32ff 	movne.w	r2, #4294967295
 8012ce8:	2201      	moveq	r2, #1
 8012cea:	608a      	str	r2, [r1, #8]
 8012cec:	6822      	ldr	r2, [r4, #0]
 8012cee:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012d80 <_scanf_chars+0xb0>
 8012cf2:	06d1      	lsls	r1, r2, #27
 8012cf4:	bf5f      	itttt	pl
 8012cf6:	681a      	ldrpl	r2, [r3, #0]
 8012cf8:	1d11      	addpl	r1, r2, #4
 8012cfa:	6019      	strpl	r1, [r3, #0]
 8012cfc:	6816      	ldrpl	r6, [r2, #0]
 8012cfe:	2700      	movs	r7, #0
 8012d00:	69a0      	ldr	r0, [r4, #24]
 8012d02:	b188      	cbz	r0, 8012d28 <_scanf_chars+0x58>
 8012d04:	2801      	cmp	r0, #1
 8012d06:	d107      	bne.n	8012d18 <_scanf_chars+0x48>
 8012d08:	682b      	ldr	r3, [r5, #0]
 8012d0a:	781a      	ldrb	r2, [r3, #0]
 8012d0c:	6963      	ldr	r3, [r4, #20]
 8012d0e:	5c9b      	ldrb	r3, [r3, r2]
 8012d10:	b953      	cbnz	r3, 8012d28 <_scanf_chars+0x58>
 8012d12:	2f00      	cmp	r7, #0
 8012d14:	d031      	beq.n	8012d7a <_scanf_chars+0xaa>
 8012d16:	e022      	b.n	8012d5e <_scanf_chars+0x8e>
 8012d18:	2802      	cmp	r0, #2
 8012d1a:	d120      	bne.n	8012d5e <_scanf_chars+0x8e>
 8012d1c:	682b      	ldr	r3, [r5, #0]
 8012d1e:	781b      	ldrb	r3, [r3, #0]
 8012d20:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012d24:	071b      	lsls	r3, r3, #28
 8012d26:	d41a      	bmi.n	8012d5e <_scanf_chars+0x8e>
 8012d28:	6823      	ldr	r3, [r4, #0]
 8012d2a:	06da      	lsls	r2, r3, #27
 8012d2c:	bf5e      	ittt	pl
 8012d2e:	682b      	ldrpl	r3, [r5, #0]
 8012d30:	781b      	ldrbpl	r3, [r3, #0]
 8012d32:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012d36:	682a      	ldr	r2, [r5, #0]
 8012d38:	686b      	ldr	r3, [r5, #4]
 8012d3a:	3201      	adds	r2, #1
 8012d3c:	602a      	str	r2, [r5, #0]
 8012d3e:	68a2      	ldr	r2, [r4, #8]
 8012d40:	3b01      	subs	r3, #1
 8012d42:	3a01      	subs	r2, #1
 8012d44:	606b      	str	r3, [r5, #4]
 8012d46:	3701      	adds	r7, #1
 8012d48:	60a2      	str	r2, [r4, #8]
 8012d4a:	b142      	cbz	r2, 8012d5e <_scanf_chars+0x8e>
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	dcd7      	bgt.n	8012d00 <_scanf_chars+0x30>
 8012d50:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012d54:	4629      	mov	r1, r5
 8012d56:	4640      	mov	r0, r8
 8012d58:	4798      	blx	r3
 8012d5a:	2800      	cmp	r0, #0
 8012d5c:	d0d0      	beq.n	8012d00 <_scanf_chars+0x30>
 8012d5e:	6823      	ldr	r3, [r4, #0]
 8012d60:	f013 0310 	ands.w	r3, r3, #16
 8012d64:	d105      	bne.n	8012d72 <_scanf_chars+0xa2>
 8012d66:	68e2      	ldr	r2, [r4, #12]
 8012d68:	3201      	adds	r2, #1
 8012d6a:	60e2      	str	r2, [r4, #12]
 8012d6c:	69a2      	ldr	r2, [r4, #24]
 8012d6e:	b102      	cbz	r2, 8012d72 <_scanf_chars+0xa2>
 8012d70:	7033      	strb	r3, [r6, #0]
 8012d72:	6923      	ldr	r3, [r4, #16]
 8012d74:	443b      	add	r3, r7
 8012d76:	6123      	str	r3, [r4, #16]
 8012d78:	2000      	movs	r0, #0
 8012d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d7e:	bf00      	nop
 8012d80:	080197d3 	.word	0x080197d3

08012d84 <_scanf_i>:
 8012d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d88:	4698      	mov	r8, r3
 8012d8a:	4b74      	ldr	r3, [pc, #464]	@ (8012f5c <_scanf_i+0x1d8>)
 8012d8c:	460c      	mov	r4, r1
 8012d8e:	4682      	mov	sl, r0
 8012d90:	4616      	mov	r6, r2
 8012d92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012d96:	b087      	sub	sp, #28
 8012d98:	ab03      	add	r3, sp, #12
 8012d9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012d9e:	4b70      	ldr	r3, [pc, #448]	@ (8012f60 <_scanf_i+0x1dc>)
 8012da0:	69a1      	ldr	r1, [r4, #24]
 8012da2:	4a70      	ldr	r2, [pc, #448]	@ (8012f64 <_scanf_i+0x1e0>)
 8012da4:	2903      	cmp	r1, #3
 8012da6:	bf08      	it	eq
 8012da8:	461a      	moveq	r2, r3
 8012daa:	68a3      	ldr	r3, [r4, #8]
 8012dac:	9201      	str	r2, [sp, #4]
 8012dae:	1e5a      	subs	r2, r3, #1
 8012db0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012db4:	bf88      	it	hi
 8012db6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012dba:	4627      	mov	r7, r4
 8012dbc:	bf82      	ittt	hi
 8012dbe:	eb03 0905 	addhi.w	r9, r3, r5
 8012dc2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012dc6:	60a3      	strhi	r3, [r4, #8]
 8012dc8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012dcc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012dd0:	bf98      	it	ls
 8012dd2:	f04f 0900 	movls.w	r9, #0
 8012dd6:	6023      	str	r3, [r4, #0]
 8012dd8:	463d      	mov	r5, r7
 8012dda:	f04f 0b00 	mov.w	fp, #0
 8012dde:	6831      	ldr	r1, [r6, #0]
 8012de0:	ab03      	add	r3, sp, #12
 8012de2:	7809      	ldrb	r1, [r1, #0]
 8012de4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012de8:	2202      	movs	r2, #2
 8012dea:	f7ed f9d1 	bl	8000190 <memchr>
 8012dee:	b328      	cbz	r0, 8012e3c <_scanf_i+0xb8>
 8012df0:	f1bb 0f01 	cmp.w	fp, #1
 8012df4:	d159      	bne.n	8012eaa <_scanf_i+0x126>
 8012df6:	6862      	ldr	r2, [r4, #4]
 8012df8:	b92a      	cbnz	r2, 8012e06 <_scanf_i+0x82>
 8012dfa:	6822      	ldr	r2, [r4, #0]
 8012dfc:	2108      	movs	r1, #8
 8012dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012e02:	6061      	str	r1, [r4, #4]
 8012e04:	6022      	str	r2, [r4, #0]
 8012e06:	6822      	ldr	r2, [r4, #0]
 8012e08:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012e0c:	6022      	str	r2, [r4, #0]
 8012e0e:	68a2      	ldr	r2, [r4, #8]
 8012e10:	1e51      	subs	r1, r2, #1
 8012e12:	60a1      	str	r1, [r4, #8]
 8012e14:	b192      	cbz	r2, 8012e3c <_scanf_i+0xb8>
 8012e16:	6832      	ldr	r2, [r6, #0]
 8012e18:	1c51      	adds	r1, r2, #1
 8012e1a:	6031      	str	r1, [r6, #0]
 8012e1c:	7812      	ldrb	r2, [r2, #0]
 8012e1e:	f805 2b01 	strb.w	r2, [r5], #1
 8012e22:	6872      	ldr	r2, [r6, #4]
 8012e24:	3a01      	subs	r2, #1
 8012e26:	2a00      	cmp	r2, #0
 8012e28:	6072      	str	r2, [r6, #4]
 8012e2a:	dc07      	bgt.n	8012e3c <_scanf_i+0xb8>
 8012e2c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012e30:	4631      	mov	r1, r6
 8012e32:	4650      	mov	r0, sl
 8012e34:	4790      	blx	r2
 8012e36:	2800      	cmp	r0, #0
 8012e38:	f040 8085 	bne.w	8012f46 <_scanf_i+0x1c2>
 8012e3c:	f10b 0b01 	add.w	fp, fp, #1
 8012e40:	f1bb 0f03 	cmp.w	fp, #3
 8012e44:	d1cb      	bne.n	8012dde <_scanf_i+0x5a>
 8012e46:	6863      	ldr	r3, [r4, #4]
 8012e48:	b90b      	cbnz	r3, 8012e4e <_scanf_i+0xca>
 8012e4a:	230a      	movs	r3, #10
 8012e4c:	6063      	str	r3, [r4, #4]
 8012e4e:	6863      	ldr	r3, [r4, #4]
 8012e50:	4945      	ldr	r1, [pc, #276]	@ (8012f68 <_scanf_i+0x1e4>)
 8012e52:	6960      	ldr	r0, [r4, #20]
 8012e54:	1ac9      	subs	r1, r1, r3
 8012e56:	f000 f997 	bl	8013188 <__sccl>
 8012e5a:	f04f 0b00 	mov.w	fp, #0
 8012e5e:	68a3      	ldr	r3, [r4, #8]
 8012e60:	6822      	ldr	r2, [r4, #0]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d03d      	beq.n	8012ee2 <_scanf_i+0x15e>
 8012e66:	6831      	ldr	r1, [r6, #0]
 8012e68:	6960      	ldr	r0, [r4, #20]
 8012e6a:	f891 c000 	ldrb.w	ip, [r1]
 8012e6e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012e72:	2800      	cmp	r0, #0
 8012e74:	d035      	beq.n	8012ee2 <_scanf_i+0x15e>
 8012e76:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8012e7a:	d124      	bne.n	8012ec6 <_scanf_i+0x142>
 8012e7c:	0510      	lsls	r0, r2, #20
 8012e7e:	d522      	bpl.n	8012ec6 <_scanf_i+0x142>
 8012e80:	f10b 0b01 	add.w	fp, fp, #1
 8012e84:	f1b9 0f00 	cmp.w	r9, #0
 8012e88:	d003      	beq.n	8012e92 <_scanf_i+0x10e>
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	f109 39ff 	add.w	r9, r9, #4294967295
 8012e90:	60a3      	str	r3, [r4, #8]
 8012e92:	6873      	ldr	r3, [r6, #4]
 8012e94:	3b01      	subs	r3, #1
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	6073      	str	r3, [r6, #4]
 8012e9a:	dd1b      	ble.n	8012ed4 <_scanf_i+0x150>
 8012e9c:	6833      	ldr	r3, [r6, #0]
 8012e9e:	3301      	adds	r3, #1
 8012ea0:	6033      	str	r3, [r6, #0]
 8012ea2:	68a3      	ldr	r3, [r4, #8]
 8012ea4:	3b01      	subs	r3, #1
 8012ea6:	60a3      	str	r3, [r4, #8]
 8012ea8:	e7d9      	b.n	8012e5e <_scanf_i+0xda>
 8012eaa:	f1bb 0f02 	cmp.w	fp, #2
 8012eae:	d1ae      	bne.n	8012e0e <_scanf_i+0x8a>
 8012eb0:	6822      	ldr	r2, [r4, #0]
 8012eb2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8012eb6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8012eba:	d1bf      	bne.n	8012e3c <_scanf_i+0xb8>
 8012ebc:	2110      	movs	r1, #16
 8012ebe:	6061      	str	r1, [r4, #4]
 8012ec0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012ec4:	e7a2      	b.n	8012e0c <_scanf_i+0x88>
 8012ec6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8012eca:	6022      	str	r2, [r4, #0]
 8012ecc:	780b      	ldrb	r3, [r1, #0]
 8012ece:	f805 3b01 	strb.w	r3, [r5], #1
 8012ed2:	e7de      	b.n	8012e92 <_scanf_i+0x10e>
 8012ed4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012ed8:	4631      	mov	r1, r6
 8012eda:	4650      	mov	r0, sl
 8012edc:	4798      	blx	r3
 8012ede:	2800      	cmp	r0, #0
 8012ee0:	d0df      	beq.n	8012ea2 <_scanf_i+0x11e>
 8012ee2:	6823      	ldr	r3, [r4, #0]
 8012ee4:	05d9      	lsls	r1, r3, #23
 8012ee6:	d50d      	bpl.n	8012f04 <_scanf_i+0x180>
 8012ee8:	42bd      	cmp	r5, r7
 8012eea:	d909      	bls.n	8012f00 <_scanf_i+0x17c>
 8012eec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012ef0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012ef4:	4632      	mov	r2, r6
 8012ef6:	4650      	mov	r0, sl
 8012ef8:	4798      	blx	r3
 8012efa:	f105 39ff 	add.w	r9, r5, #4294967295
 8012efe:	464d      	mov	r5, r9
 8012f00:	42bd      	cmp	r5, r7
 8012f02:	d028      	beq.n	8012f56 <_scanf_i+0x1d2>
 8012f04:	6822      	ldr	r2, [r4, #0]
 8012f06:	f012 0210 	ands.w	r2, r2, #16
 8012f0a:	d113      	bne.n	8012f34 <_scanf_i+0x1b0>
 8012f0c:	702a      	strb	r2, [r5, #0]
 8012f0e:	6863      	ldr	r3, [r4, #4]
 8012f10:	9e01      	ldr	r6, [sp, #4]
 8012f12:	4639      	mov	r1, r7
 8012f14:	4650      	mov	r0, sl
 8012f16:	47b0      	blx	r6
 8012f18:	f8d8 3000 	ldr.w	r3, [r8]
 8012f1c:	6821      	ldr	r1, [r4, #0]
 8012f1e:	1d1a      	adds	r2, r3, #4
 8012f20:	f8c8 2000 	str.w	r2, [r8]
 8012f24:	f011 0f20 	tst.w	r1, #32
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	d00f      	beq.n	8012f4c <_scanf_i+0x1c8>
 8012f2c:	6018      	str	r0, [r3, #0]
 8012f2e:	68e3      	ldr	r3, [r4, #12]
 8012f30:	3301      	adds	r3, #1
 8012f32:	60e3      	str	r3, [r4, #12]
 8012f34:	6923      	ldr	r3, [r4, #16]
 8012f36:	1bed      	subs	r5, r5, r7
 8012f38:	445d      	add	r5, fp
 8012f3a:	442b      	add	r3, r5
 8012f3c:	6123      	str	r3, [r4, #16]
 8012f3e:	2000      	movs	r0, #0
 8012f40:	b007      	add	sp, #28
 8012f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f46:	f04f 0b00 	mov.w	fp, #0
 8012f4a:	e7ca      	b.n	8012ee2 <_scanf_i+0x15e>
 8012f4c:	07ca      	lsls	r2, r1, #31
 8012f4e:	bf4c      	ite	mi
 8012f50:	8018      	strhmi	r0, [r3, #0]
 8012f52:	6018      	strpl	r0, [r3, #0]
 8012f54:	e7eb      	b.n	8012f2e <_scanf_i+0x1aa>
 8012f56:	2001      	movs	r0, #1
 8012f58:	e7f2      	b.n	8012f40 <_scanf_i+0x1bc>
 8012f5a:	bf00      	nop
 8012f5c:	0801438c 	.word	0x0801438c
 8012f60:	080133a9 	.word	0x080133a9
 8012f64:	08013489 	.word	0x08013489
 8012f68:	08019916 	.word	0x08019916

08012f6c <__sflush_r>:
 8012f6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f74:	0716      	lsls	r6, r2, #28
 8012f76:	4605      	mov	r5, r0
 8012f78:	460c      	mov	r4, r1
 8012f7a:	d454      	bmi.n	8013026 <__sflush_r+0xba>
 8012f7c:	684b      	ldr	r3, [r1, #4]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	dc02      	bgt.n	8012f88 <__sflush_r+0x1c>
 8012f82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	dd48      	ble.n	801301a <__sflush_r+0xae>
 8012f88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012f8a:	2e00      	cmp	r6, #0
 8012f8c:	d045      	beq.n	801301a <__sflush_r+0xae>
 8012f8e:	2300      	movs	r3, #0
 8012f90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012f94:	682f      	ldr	r7, [r5, #0]
 8012f96:	6a21      	ldr	r1, [r4, #32]
 8012f98:	602b      	str	r3, [r5, #0]
 8012f9a:	d030      	beq.n	8012ffe <__sflush_r+0x92>
 8012f9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012f9e:	89a3      	ldrh	r3, [r4, #12]
 8012fa0:	0759      	lsls	r1, r3, #29
 8012fa2:	d505      	bpl.n	8012fb0 <__sflush_r+0x44>
 8012fa4:	6863      	ldr	r3, [r4, #4]
 8012fa6:	1ad2      	subs	r2, r2, r3
 8012fa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012faa:	b10b      	cbz	r3, 8012fb0 <__sflush_r+0x44>
 8012fac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012fae:	1ad2      	subs	r2, r2, r3
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012fb4:	6a21      	ldr	r1, [r4, #32]
 8012fb6:	4628      	mov	r0, r5
 8012fb8:	47b0      	blx	r6
 8012fba:	1c43      	adds	r3, r0, #1
 8012fbc:	89a3      	ldrh	r3, [r4, #12]
 8012fbe:	d106      	bne.n	8012fce <__sflush_r+0x62>
 8012fc0:	6829      	ldr	r1, [r5, #0]
 8012fc2:	291d      	cmp	r1, #29
 8012fc4:	d82b      	bhi.n	801301e <__sflush_r+0xb2>
 8012fc6:	4a2a      	ldr	r2, [pc, #168]	@ (8013070 <__sflush_r+0x104>)
 8012fc8:	410a      	asrs	r2, r1
 8012fca:	07d6      	lsls	r6, r2, #31
 8012fcc:	d427      	bmi.n	801301e <__sflush_r+0xb2>
 8012fce:	2200      	movs	r2, #0
 8012fd0:	6062      	str	r2, [r4, #4]
 8012fd2:	04d9      	lsls	r1, r3, #19
 8012fd4:	6922      	ldr	r2, [r4, #16]
 8012fd6:	6022      	str	r2, [r4, #0]
 8012fd8:	d504      	bpl.n	8012fe4 <__sflush_r+0x78>
 8012fda:	1c42      	adds	r2, r0, #1
 8012fdc:	d101      	bne.n	8012fe2 <__sflush_r+0x76>
 8012fde:	682b      	ldr	r3, [r5, #0]
 8012fe0:	b903      	cbnz	r3, 8012fe4 <__sflush_r+0x78>
 8012fe2:	6560      	str	r0, [r4, #84]	@ 0x54
 8012fe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012fe6:	602f      	str	r7, [r5, #0]
 8012fe8:	b1b9      	cbz	r1, 801301a <__sflush_r+0xae>
 8012fea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012fee:	4299      	cmp	r1, r3
 8012ff0:	d002      	beq.n	8012ff8 <__sflush_r+0x8c>
 8012ff2:	4628      	mov	r0, r5
 8012ff4:	f7ff f826 	bl	8012044 <_free_r>
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	6363      	str	r3, [r4, #52]	@ 0x34
 8012ffc:	e00d      	b.n	801301a <__sflush_r+0xae>
 8012ffe:	2301      	movs	r3, #1
 8013000:	4628      	mov	r0, r5
 8013002:	47b0      	blx	r6
 8013004:	4602      	mov	r2, r0
 8013006:	1c50      	adds	r0, r2, #1
 8013008:	d1c9      	bne.n	8012f9e <__sflush_r+0x32>
 801300a:	682b      	ldr	r3, [r5, #0]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d0c6      	beq.n	8012f9e <__sflush_r+0x32>
 8013010:	2b1d      	cmp	r3, #29
 8013012:	d001      	beq.n	8013018 <__sflush_r+0xac>
 8013014:	2b16      	cmp	r3, #22
 8013016:	d11e      	bne.n	8013056 <__sflush_r+0xea>
 8013018:	602f      	str	r7, [r5, #0]
 801301a:	2000      	movs	r0, #0
 801301c:	e022      	b.n	8013064 <__sflush_r+0xf8>
 801301e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013022:	b21b      	sxth	r3, r3
 8013024:	e01b      	b.n	801305e <__sflush_r+0xf2>
 8013026:	690f      	ldr	r7, [r1, #16]
 8013028:	2f00      	cmp	r7, #0
 801302a:	d0f6      	beq.n	801301a <__sflush_r+0xae>
 801302c:	0793      	lsls	r3, r2, #30
 801302e:	680e      	ldr	r6, [r1, #0]
 8013030:	bf08      	it	eq
 8013032:	694b      	ldreq	r3, [r1, #20]
 8013034:	600f      	str	r7, [r1, #0]
 8013036:	bf18      	it	ne
 8013038:	2300      	movne	r3, #0
 801303a:	eba6 0807 	sub.w	r8, r6, r7
 801303e:	608b      	str	r3, [r1, #8]
 8013040:	f1b8 0f00 	cmp.w	r8, #0
 8013044:	dde9      	ble.n	801301a <__sflush_r+0xae>
 8013046:	6a21      	ldr	r1, [r4, #32]
 8013048:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801304a:	4643      	mov	r3, r8
 801304c:	463a      	mov	r2, r7
 801304e:	4628      	mov	r0, r5
 8013050:	47b0      	blx	r6
 8013052:	2800      	cmp	r0, #0
 8013054:	dc08      	bgt.n	8013068 <__sflush_r+0xfc>
 8013056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801305a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801305e:	81a3      	strh	r3, [r4, #12]
 8013060:	f04f 30ff 	mov.w	r0, #4294967295
 8013064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013068:	4407      	add	r7, r0
 801306a:	eba8 0800 	sub.w	r8, r8, r0
 801306e:	e7e7      	b.n	8013040 <__sflush_r+0xd4>
 8013070:	dfbffffe 	.word	0xdfbffffe

08013074 <_fflush_r>:
 8013074:	b538      	push	{r3, r4, r5, lr}
 8013076:	690b      	ldr	r3, [r1, #16]
 8013078:	4605      	mov	r5, r0
 801307a:	460c      	mov	r4, r1
 801307c:	b913      	cbnz	r3, 8013084 <_fflush_r+0x10>
 801307e:	2500      	movs	r5, #0
 8013080:	4628      	mov	r0, r5
 8013082:	bd38      	pop	{r3, r4, r5, pc}
 8013084:	b118      	cbz	r0, 801308e <_fflush_r+0x1a>
 8013086:	6a03      	ldr	r3, [r0, #32]
 8013088:	b90b      	cbnz	r3, 801308e <_fflush_r+0x1a>
 801308a:	f7fe fd11 	bl	8011ab0 <__sinit>
 801308e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d0f3      	beq.n	801307e <_fflush_r+0xa>
 8013096:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013098:	07d0      	lsls	r0, r2, #31
 801309a:	d404      	bmi.n	80130a6 <_fflush_r+0x32>
 801309c:	0599      	lsls	r1, r3, #22
 801309e:	d402      	bmi.n	80130a6 <_fflush_r+0x32>
 80130a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80130a2:	f7fe ffbe 	bl	8012022 <__retarget_lock_acquire_recursive>
 80130a6:	4628      	mov	r0, r5
 80130a8:	4621      	mov	r1, r4
 80130aa:	f7ff ff5f 	bl	8012f6c <__sflush_r>
 80130ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80130b0:	07da      	lsls	r2, r3, #31
 80130b2:	4605      	mov	r5, r0
 80130b4:	d4e4      	bmi.n	8013080 <_fflush_r+0xc>
 80130b6:	89a3      	ldrh	r3, [r4, #12]
 80130b8:	059b      	lsls	r3, r3, #22
 80130ba:	d4e1      	bmi.n	8013080 <_fflush_r+0xc>
 80130bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80130be:	f7fe ffb1 	bl	8012024 <__retarget_lock_release_recursive>
 80130c2:	e7dd      	b.n	8013080 <_fflush_r+0xc>

080130c4 <__swhatbuf_r>:
 80130c4:	b570      	push	{r4, r5, r6, lr}
 80130c6:	460c      	mov	r4, r1
 80130c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130cc:	2900      	cmp	r1, #0
 80130ce:	b096      	sub	sp, #88	@ 0x58
 80130d0:	4615      	mov	r5, r2
 80130d2:	461e      	mov	r6, r3
 80130d4:	da0d      	bge.n	80130f2 <__swhatbuf_r+0x2e>
 80130d6:	89a3      	ldrh	r3, [r4, #12]
 80130d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80130dc:	f04f 0100 	mov.w	r1, #0
 80130e0:	bf14      	ite	ne
 80130e2:	2340      	movne	r3, #64	@ 0x40
 80130e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80130e8:	2000      	movs	r0, #0
 80130ea:	6031      	str	r1, [r6, #0]
 80130ec:	602b      	str	r3, [r5, #0]
 80130ee:	b016      	add	sp, #88	@ 0x58
 80130f0:	bd70      	pop	{r4, r5, r6, pc}
 80130f2:	466a      	mov	r2, sp
 80130f4:	f000 f8bc 	bl	8013270 <_fstat_r>
 80130f8:	2800      	cmp	r0, #0
 80130fa:	dbec      	blt.n	80130d6 <__swhatbuf_r+0x12>
 80130fc:	9901      	ldr	r1, [sp, #4]
 80130fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013102:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013106:	4259      	negs	r1, r3
 8013108:	4159      	adcs	r1, r3
 801310a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801310e:	e7eb      	b.n	80130e8 <__swhatbuf_r+0x24>

08013110 <__smakebuf_r>:
 8013110:	898b      	ldrh	r3, [r1, #12]
 8013112:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013114:	079d      	lsls	r5, r3, #30
 8013116:	4606      	mov	r6, r0
 8013118:	460c      	mov	r4, r1
 801311a:	d507      	bpl.n	801312c <__smakebuf_r+0x1c>
 801311c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013120:	6023      	str	r3, [r4, #0]
 8013122:	6123      	str	r3, [r4, #16]
 8013124:	2301      	movs	r3, #1
 8013126:	6163      	str	r3, [r4, #20]
 8013128:	b003      	add	sp, #12
 801312a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801312c:	ab01      	add	r3, sp, #4
 801312e:	466a      	mov	r2, sp
 8013130:	f7ff ffc8 	bl	80130c4 <__swhatbuf_r>
 8013134:	9f00      	ldr	r7, [sp, #0]
 8013136:	4605      	mov	r5, r0
 8013138:	4639      	mov	r1, r7
 801313a:	4630      	mov	r0, r6
 801313c:	f7fe fb6a 	bl	8011814 <_malloc_r>
 8013140:	b948      	cbnz	r0, 8013156 <__smakebuf_r+0x46>
 8013142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013146:	059a      	lsls	r2, r3, #22
 8013148:	d4ee      	bmi.n	8013128 <__smakebuf_r+0x18>
 801314a:	f023 0303 	bic.w	r3, r3, #3
 801314e:	f043 0302 	orr.w	r3, r3, #2
 8013152:	81a3      	strh	r3, [r4, #12]
 8013154:	e7e2      	b.n	801311c <__smakebuf_r+0xc>
 8013156:	89a3      	ldrh	r3, [r4, #12]
 8013158:	6020      	str	r0, [r4, #0]
 801315a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801315e:	81a3      	strh	r3, [r4, #12]
 8013160:	9b01      	ldr	r3, [sp, #4]
 8013162:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013166:	b15b      	cbz	r3, 8013180 <__smakebuf_r+0x70>
 8013168:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801316c:	4630      	mov	r0, r6
 801316e:	f000 f891 	bl	8013294 <_isatty_r>
 8013172:	b128      	cbz	r0, 8013180 <__smakebuf_r+0x70>
 8013174:	89a3      	ldrh	r3, [r4, #12]
 8013176:	f023 0303 	bic.w	r3, r3, #3
 801317a:	f043 0301 	orr.w	r3, r3, #1
 801317e:	81a3      	strh	r3, [r4, #12]
 8013180:	89a3      	ldrh	r3, [r4, #12]
 8013182:	431d      	orrs	r5, r3
 8013184:	81a5      	strh	r5, [r4, #12]
 8013186:	e7cf      	b.n	8013128 <__smakebuf_r+0x18>

08013188 <__sccl>:
 8013188:	b570      	push	{r4, r5, r6, lr}
 801318a:	780b      	ldrb	r3, [r1, #0]
 801318c:	4604      	mov	r4, r0
 801318e:	2b5e      	cmp	r3, #94	@ 0x5e
 8013190:	bf0b      	itete	eq
 8013192:	784b      	ldrbeq	r3, [r1, #1]
 8013194:	1c4a      	addne	r2, r1, #1
 8013196:	1c8a      	addeq	r2, r1, #2
 8013198:	2100      	movne	r1, #0
 801319a:	bf08      	it	eq
 801319c:	2101      	moveq	r1, #1
 801319e:	3801      	subs	r0, #1
 80131a0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80131a4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80131a8:	42a8      	cmp	r0, r5
 80131aa:	d1fb      	bne.n	80131a4 <__sccl+0x1c>
 80131ac:	b90b      	cbnz	r3, 80131b2 <__sccl+0x2a>
 80131ae:	1e50      	subs	r0, r2, #1
 80131b0:	bd70      	pop	{r4, r5, r6, pc}
 80131b2:	f081 0101 	eor.w	r1, r1, #1
 80131b6:	54e1      	strb	r1, [r4, r3]
 80131b8:	4610      	mov	r0, r2
 80131ba:	4602      	mov	r2, r0
 80131bc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80131c0:	2d2d      	cmp	r5, #45	@ 0x2d
 80131c2:	d005      	beq.n	80131d0 <__sccl+0x48>
 80131c4:	2d5d      	cmp	r5, #93	@ 0x5d
 80131c6:	d016      	beq.n	80131f6 <__sccl+0x6e>
 80131c8:	2d00      	cmp	r5, #0
 80131ca:	d0f1      	beq.n	80131b0 <__sccl+0x28>
 80131cc:	462b      	mov	r3, r5
 80131ce:	e7f2      	b.n	80131b6 <__sccl+0x2e>
 80131d0:	7846      	ldrb	r6, [r0, #1]
 80131d2:	2e5d      	cmp	r6, #93	@ 0x5d
 80131d4:	d0fa      	beq.n	80131cc <__sccl+0x44>
 80131d6:	42b3      	cmp	r3, r6
 80131d8:	dcf8      	bgt.n	80131cc <__sccl+0x44>
 80131da:	3002      	adds	r0, #2
 80131dc:	461a      	mov	r2, r3
 80131de:	3201      	adds	r2, #1
 80131e0:	4296      	cmp	r6, r2
 80131e2:	54a1      	strb	r1, [r4, r2]
 80131e4:	dcfb      	bgt.n	80131de <__sccl+0x56>
 80131e6:	1af2      	subs	r2, r6, r3
 80131e8:	3a01      	subs	r2, #1
 80131ea:	1c5d      	adds	r5, r3, #1
 80131ec:	42b3      	cmp	r3, r6
 80131ee:	bfa8      	it	ge
 80131f0:	2200      	movge	r2, #0
 80131f2:	18ab      	adds	r3, r5, r2
 80131f4:	e7e1      	b.n	80131ba <__sccl+0x32>
 80131f6:	4610      	mov	r0, r2
 80131f8:	e7da      	b.n	80131b0 <__sccl+0x28>

080131fa <__submore>:
 80131fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131fe:	460c      	mov	r4, r1
 8013200:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013202:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013206:	4299      	cmp	r1, r3
 8013208:	d11d      	bne.n	8013246 <__submore+0x4c>
 801320a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801320e:	f7fe fb01 	bl	8011814 <_malloc_r>
 8013212:	b918      	cbnz	r0, 801321c <__submore+0x22>
 8013214:	f04f 30ff 	mov.w	r0, #4294967295
 8013218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801321c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013220:	63a3      	str	r3, [r4, #56]	@ 0x38
 8013222:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8013226:	6360      	str	r0, [r4, #52]	@ 0x34
 8013228:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801322c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8013230:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8013234:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013238:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801323c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8013240:	6020      	str	r0, [r4, #0]
 8013242:	2000      	movs	r0, #0
 8013244:	e7e8      	b.n	8013218 <__submore+0x1e>
 8013246:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8013248:	0077      	lsls	r7, r6, #1
 801324a:	463a      	mov	r2, r7
 801324c:	f7fe fb76 	bl	801193c <_realloc_r>
 8013250:	4605      	mov	r5, r0
 8013252:	2800      	cmp	r0, #0
 8013254:	d0de      	beq.n	8013214 <__submore+0x1a>
 8013256:	eb00 0806 	add.w	r8, r0, r6
 801325a:	4601      	mov	r1, r0
 801325c:	4632      	mov	r2, r6
 801325e:	4640      	mov	r0, r8
 8013260:	f7fe fee1 	bl	8012026 <memcpy>
 8013264:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8013268:	f8c4 8000 	str.w	r8, [r4]
 801326c:	e7e9      	b.n	8013242 <__submore+0x48>
	...

08013270 <_fstat_r>:
 8013270:	b538      	push	{r3, r4, r5, lr}
 8013272:	4d07      	ldr	r5, [pc, #28]	@ (8013290 <_fstat_r+0x20>)
 8013274:	2300      	movs	r3, #0
 8013276:	4604      	mov	r4, r0
 8013278:	4608      	mov	r0, r1
 801327a:	4611      	mov	r1, r2
 801327c:	602b      	str	r3, [r5, #0]
 801327e:	f7f0 ffc3 	bl	8004208 <_fstat>
 8013282:	1c43      	adds	r3, r0, #1
 8013284:	d102      	bne.n	801328c <_fstat_r+0x1c>
 8013286:	682b      	ldr	r3, [r5, #0]
 8013288:	b103      	cbz	r3, 801328c <_fstat_r+0x1c>
 801328a:	6023      	str	r3, [r4, #0]
 801328c:	bd38      	pop	{r3, r4, r5, pc}
 801328e:	bf00      	nop
 8013290:	200009e4 	.word	0x200009e4

08013294 <_isatty_r>:
 8013294:	b538      	push	{r3, r4, r5, lr}
 8013296:	4d06      	ldr	r5, [pc, #24]	@ (80132b0 <_isatty_r+0x1c>)
 8013298:	2300      	movs	r3, #0
 801329a:	4604      	mov	r4, r0
 801329c:	4608      	mov	r0, r1
 801329e:	602b      	str	r3, [r5, #0]
 80132a0:	f7f0 ffc2 	bl	8004228 <_isatty>
 80132a4:	1c43      	adds	r3, r0, #1
 80132a6:	d102      	bne.n	80132ae <_isatty_r+0x1a>
 80132a8:	682b      	ldr	r3, [r5, #0]
 80132aa:	b103      	cbz	r3, 80132ae <_isatty_r+0x1a>
 80132ac:	6023      	str	r3, [r4, #0]
 80132ae:	bd38      	pop	{r3, r4, r5, pc}
 80132b0:	200009e4 	.word	0x200009e4

080132b4 <_strtol_l.constprop.0>:
 80132b4:	2b24      	cmp	r3, #36	@ 0x24
 80132b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132ba:	4686      	mov	lr, r0
 80132bc:	4690      	mov	r8, r2
 80132be:	d801      	bhi.n	80132c4 <_strtol_l.constprop.0+0x10>
 80132c0:	2b01      	cmp	r3, #1
 80132c2:	d106      	bne.n	80132d2 <_strtol_l.constprop.0+0x1e>
 80132c4:	f7fe fe82 	bl	8011fcc <__errno>
 80132c8:	2316      	movs	r3, #22
 80132ca:	6003      	str	r3, [r0, #0]
 80132cc:	2000      	movs	r0, #0
 80132ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132d2:	4834      	ldr	r0, [pc, #208]	@ (80133a4 <_strtol_l.constprop.0+0xf0>)
 80132d4:	460d      	mov	r5, r1
 80132d6:	462a      	mov	r2, r5
 80132d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80132dc:	5d06      	ldrb	r6, [r0, r4]
 80132de:	f016 0608 	ands.w	r6, r6, #8
 80132e2:	d1f8      	bne.n	80132d6 <_strtol_l.constprop.0+0x22>
 80132e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80132e6:	d12d      	bne.n	8013344 <_strtol_l.constprop.0+0x90>
 80132e8:	782c      	ldrb	r4, [r5, #0]
 80132ea:	2601      	movs	r6, #1
 80132ec:	1c95      	adds	r5, r2, #2
 80132ee:	f033 0210 	bics.w	r2, r3, #16
 80132f2:	d109      	bne.n	8013308 <_strtol_l.constprop.0+0x54>
 80132f4:	2c30      	cmp	r4, #48	@ 0x30
 80132f6:	d12a      	bne.n	801334e <_strtol_l.constprop.0+0x9a>
 80132f8:	782a      	ldrb	r2, [r5, #0]
 80132fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80132fe:	2a58      	cmp	r2, #88	@ 0x58
 8013300:	d125      	bne.n	801334e <_strtol_l.constprop.0+0x9a>
 8013302:	786c      	ldrb	r4, [r5, #1]
 8013304:	2310      	movs	r3, #16
 8013306:	3502      	adds	r5, #2
 8013308:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801330c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013310:	2200      	movs	r2, #0
 8013312:	fbbc f9f3 	udiv	r9, ip, r3
 8013316:	4610      	mov	r0, r2
 8013318:	fb03 ca19 	mls	sl, r3, r9, ip
 801331c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013320:	2f09      	cmp	r7, #9
 8013322:	d81b      	bhi.n	801335c <_strtol_l.constprop.0+0xa8>
 8013324:	463c      	mov	r4, r7
 8013326:	42a3      	cmp	r3, r4
 8013328:	dd27      	ble.n	801337a <_strtol_l.constprop.0+0xc6>
 801332a:	1c57      	adds	r7, r2, #1
 801332c:	d007      	beq.n	801333e <_strtol_l.constprop.0+0x8a>
 801332e:	4581      	cmp	r9, r0
 8013330:	d320      	bcc.n	8013374 <_strtol_l.constprop.0+0xc0>
 8013332:	d101      	bne.n	8013338 <_strtol_l.constprop.0+0x84>
 8013334:	45a2      	cmp	sl, r4
 8013336:	db1d      	blt.n	8013374 <_strtol_l.constprop.0+0xc0>
 8013338:	fb00 4003 	mla	r0, r0, r3, r4
 801333c:	2201      	movs	r2, #1
 801333e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013342:	e7eb      	b.n	801331c <_strtol_l.constprop.0+0x68>
 8013344:	2c2b      	cmp	r4, #43	@ 0x2b
 8013346:	bf04      	itt	eq
 8013348:	782c      	ldrbeq	r4, [r5, #0]
 801334a:	1c95      	addeq	r5, r2, #2
 801334c:	e7cf      	b.n	80132ee <_strtol_l.constprop.0+0x3a>
 801334e:	2b00      	cmp	r3, #0
 8013350:	d1da      	bne.n	8013308 <_strtol_l.constprop.0+0x54>
 8013352:	2c30      	cmp	r4, #48	@ 0x30
 8013354:	bf0c      	ite	eq
 8013356:	2308      	moveq	r3, #8
 8013358:	230a      	movne	r3, #10
 801335a:	e7d5      	b.n	8013308 <_strtol_l.constprop.0+0x54>
 801335c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013360:	2f19      	cmp	r7, #25
 8013362:	d801      	bhi.n	8013368 <_strtol_l.constprop.0+0xb4>
 8013364:	3c37      	subs	r4, #55	@ 0x37
 8013366:	e7de      	b.n	8013326 <_strtol_l.constprop.0+0x72>
 8013368:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801336c:	2f19      	cmp	r7, #25
 801336e:	d804      	bhi.n	801337a <_strtol_l.constprop.0+0xc6>
 8013370:	3c57      	subs	r4, #87	@ 0x57
 8013372:	e7d8      	b.n	8013326 <_strtol_l.constprop.0+0x72>
 8013374:	f04f 32ff 	mov.w	r2, #4294967295
 8013378:	e7e1      	b.n	801333e <_strtol_l.constprop.0+0x8a>
 801337a:	1c53      	adds	r3, r2, #1
 801337c:	d108      	bne.n	8013390 <_strtol_l.constprop.0+0xdc>
 801337e:	2322      	movs	r3, #34	@ 0x22
 8013380:	f8ce 3000 	str.w	r3, [lr]
 8013384:	4660      	mov	r0, ip
 8013386:	f1b8 0f00 	cmp.w	r8, #0
 801338a:	d0a0      	beq.n	80132ce <_strtol_l.constprop.0+0x1a>
 801338c:	1e69      	subs	r1, r5, #1
 801338e:	e006      	b.n	801339e <_strtol_l.constprop.0+0xea>
 8013390:	b106      	cbz	r6, 8013394 <_strtol_l.constprop.0+0xe0>
 8013392:	4240      	negs	r0, r0
 8013394:	f1b8 0f00 	cmp.w	r8, #0
 8013398:	d099      	beq.n	80132ce <_strtol_l.constprop.0+0x1a>
 801339a:	2a00      	cmp	r2, #0
 801339c:	d1f6      	bne.n	801338c <_strtol_l.constprop.0+0xd8>
 801339e:	f8c8 1000 	str.w	r1, [r8]
 80133a2:	e794      	b.n	80132ce <_strtol_l.constprop.0+0x1a>
 80133a4:	080197d3 	.word	0x080197d3

080133a8 <_strtol_r>:
 80133a8:	f7ff bf84 	b.w	80132b4 <_strtol_l.constprop.0>

080133ac <_strtoul_l.constprop.0>:
 80133ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133b0:	4e34      	ldr	r6, [pc, #208]	@ (8013484 <_strtoul_l.constprop.0+0xd8>)
 80133b2:	4686      	mov	lr, r0
 80133b4:	460d      	mov	r5, r1
 80133b6:	4628      	mov	r0, r5
 80133b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80133bc:	5d37      	ldrb	r7, [r6, r4]
 80133be:	f017 0708 	ands.w	r7, r7, #8
 80133c2:	d1f8      	bne.n	80133b6 <_strtoul_l.constprop.0+0xa>
 80133c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80133c6:	d12f      	bne.n	8013428 <_strtoul_l.constprop.0+0x7c>
 80133c8:	782c      	ldrb	r4, [r5, #0]
 80133ca:	2701      	movs	r7, #1
 80133cc:	1c85      	adds	r5, r0, #2
 80133ce:	f033 0010 	bics.w	r0, r3, #16
 80133d2:	d109      	bne.n	80133e8 <_strtoul_l.constprop.0+0x3c>
 80133d4:	2c30      	cmp	r4, #48	@ 0x30
 80133d6:	d12c      	bne.n	8013432 <_strtoul_l.constprop.0+0x86>
 80133d8:	7828      	ldrb	r0, [r5, #0]
 80133da:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80133de:	2858      	cmp	r0, #88	@ 0x58
 80133e0:	d127      	bne.n	8013432 <_strtoul_l.constprop.0+0x86>
 80133e2:	786c      	ldrb	r4, [r5, #1]
 80133e4:	2310      	movs	r3, #16
 80133e6:	3502      	adds	r5, #2
 80133e8:	f04f 38ff 	mov.w	r8, #4294967295
 80133ec:	2600      	movs	r6, #0
 80133ee:	fbb8 f8f3 	udiv	r8, r8, r3
 80133f2:	fb03 f908 	mul.w	r9, r3, r8
 80133f6:	ea6f 0909 	mvn.w	r9, r9
 80133fa:	4630      	mov	r0, r6
 80133fc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8013400:	f1bc 0f09 	cmp.w	ip, #9
 8013404:	d81c      	bhi.n	8013440 <_strtoul_l.constprop.0+0x94>
 8013406:	4664      	mov	r4, ip
 8013408:	42a3      	cmp	r3, r4
 801340a:	dd2a      	ble.n	8013462 <_strtoul_l.constprop.0+0xb6>
 801340c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8013410:	d007      	beq.n	8013422 <_strtoul_l.constprop.0+0x76>
 8013412:	4580      	cmp	r8, r0
 8013414:	d322      	bcc.n	801345c <_strtoul_l.constprop.0+0xb0>
 8013416:	d101      	bne.n	801341c <_strtoul_l.constprop.0+0x70>
 8013418:	45a1      	cmp	r9, r4
 801341a:	db1f      	blt.n	801345c <_strtoul_l.constprop.0+0xb0>
 801341c:	fb00 4003 	mla	r0, r0, r3, r4
 8013420:	2601      	movs	r6, #1
 8013422:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013426:	e7e9      	b.n	80133fc <_strtoul_l.constprop.0+0x50>
 8013428:	2c2b      	cmp	r4, #43	@ 0x2b
 801342a:	bf04      	itt	eq
 801342c:	782c      	ldrbeq	r4, [r5, #0]
 801342e:	1c85      	addeq	r5, r0, #2
 8013430:	e7cd      	b.n	80133ce <_strtoul_l.constprop.0+0x22>
 8013432:	2b00      	cmp	r3, #0
 8013434:	d1d8      	bne.n	80133e8 <_strtoul_l.constprop.0+0x3c>
 8013436:	2c30      	cmp	r4, #48	@ 0x30
 8013438:	bf0c      	ite	eq
 801343a:	2308      	moveq	r3, #8
 801343c:	230a      	movne	r3, #10
 801343e:	e7d3      	b.n	80133e8 <_strtoul_l.constprop.0+0x3c>
 8013440:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8013444:	f1bc 0f19 	cmp.w	ip, #25
 8013448:	d801      	bhi.n	801344e <_strtoul_l.constprop.0+0xa2>
 801344a:	3c37      	subs	r4, #55	@ 0x37
 801344c:	e7dc      	b.n	8013408 <_strtoul_l.constprop.0+0x5c>
 801344e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8013452:	f1bc 0f19 	cmp.w	ip, #25
 8013456:	d804      	bhi.n	8013462 <_strtoul_l.constprop.0+0xb6>
 8013458:	3c57      	subs	r4, #87	@ 0x57
 801345a:	e7d5      	b.n	8013408 <_strtoul_l.constprop.0+0x5c>
 801345c:	f04f 36ff 	mov.w	r6, #4294967295
 8013460:	e7df      	b.n	8013422 <_strtoul_l.constprop.0+0x76>
 8013462:	1c73      	adds	r3, r6, #1
 8013464:	d106      	bne.n	8013474 <_strtoul_l.constprop.0+0xc8>
 8013466:	2322      	movs	r3, #34	@ 0x22
 8013468:	f8ce 3000 	str.w	r3, [lr]
 801346c:	4630      	mov	r0, r6
 801346e:	b932      	cbnz	r2, 801347e <_strtoul_l.constprop.0+0xd2>
 8013470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013474:	b107      	cbz	r7, 8013478 <_strtoul_l.constprop.0+0xcc>
 8013476:	4240      	negs	r0, r0
 8013478:	2a00      	cmp	r2, #0
 801347a:	d0f9      	beq.n	8013470 <_strtoul_l.constprop.0+0xc4>
 801347c:	b106      	cbz	r6, 8013480 <_strtoul_l.constprop.0+0xd4>
 801347e:	1e69      	subs	r1, r5, #1
 8013480:	6011      	str	r1, [r2, #0]
 8013482:	e7f5      	b.n	8013470 <_strtoul_l.constprop.0+0xc4>
 8013484:	080197d3 	.word	0x080197d3

08013488 <_strtoul_r>:
 8013488:	f7ff bf90 	b.w	80133ac <_strtoul_l.constprop.0>

0801348c <cosf>:
 801348c:	ee10 3a10 	vmov	r3, s0
 8013490:	b507      	push	{r0, r1, r2, lr}
 8013492:	4a1e      	ldr	r2, [pc, #120]	@ (801350c <cosf+0x80>)
 8013494:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013498:	4293      	cmp	r3, r2
 801349a:	d806      	bhi.n	80134aa <cosf+0x1e>
 801349c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8013510 <cosf+0x84>
 80134a0:	b003      	add	sp, #12
 80134a2:	f85d eb04 	ldr.w	lr, [sp], #4
 80134a6:	f000 b8eb 	b.w	8013680 <__kernel_cosf>
 80134aa:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80134ae:	d304      	bcc.n	80134ba <cosf+0x2e>
 80134b0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80134b4:	b003      	add	sp, #12
 80134b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80134ba:	4668      	mov	r0, sp
 80134bc:	f000 f980 	bl	80137c0 <__ieee754_rem_pio2f>
 80134c0:	f000 0003 	and.w	r0, r0, #3
 80134c4:	2801      	cmp	r0, #1
 80134c6:	d009      	beq.n	80134dc <cosf+0x50>
 80134c8:	2802      	cmp	r0, #2
 80134ca:	d010      	beq.n	80134ee <cosf+0x62>
 80134cc:	b9b0      	cbnz	r0, 80134fc <cosf+0x70>
 80134ce:	eddd 0a01 	vldr	s1, [sp, #4]
 80134d2:	ed9d 0a00 	vldr	s0, [sp]
 80134d6:	f000 f8d3 	bl	8013680 <__kernel_cosf>
 80134da:	e7eb      	b.n	80134b4 <cosf+0x28>
 80134dc:	eddd 0a01 	vldr	s1, [sp, #4]
 80134e0:	ed9d 0a00 	vldr	s0, [sp]
 80134e4:	f000 f924 	bl	8013730 <__kernel_sinf>
 80134e8:	eeb1 0a40 	vneg.f32	s0, s0
 80134ec:	e7e2      	b.n	80134b4 <cosf+0x28>
 80134ee:	eddd 0a01 	vldr	s1, [sp, #4]
 80134f2:	ed9d 0a00 	vldr	s0, [sp]
 80134f6:	f000 f8c3 	bl	8013680 <__kernel_cosf>
 80134fa:	e7f5      	b.n	80134e8 <cosf+0x5c>
 80134fc:	eddd 0a01 	vldr	s1, [sp, #4]
 8013500:	ed9d 0a00 	vldr	s0, [sp]
 8013504:	2001      	movs	r0, #1
 8013506:	f000 f913 	bl	8013730 <__kernel_sinf>
 801350a:	e7d3      	b.n	80134b4 <cosf+0x28>
 801350c:	3f490fd8 	.word	0x3f490fd8
 8013510:	00000000 	.word	0x00000000

08013514 <fabsf>:
 8013514:	ee10 3a10 	vmov	r3, s0
 8013518:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801351c:	ee00 3a10 	vmov	s0, r3
 8013520:	4770      	bx	lr
	...

08013524 <sinf>:
 8013524:	ee10 3a10 	vmov	r3, s0
 8013528:	b507      	push	{r0, r1, r2, lr}
 801352a:	4a1f      	ldr	r2, [pc, #124]	@ (80135a8 <sinf+0x84>)
 801352c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013530:	4293      	cmp	r3, r2
 8013532:	d807      	bhi.n	8013544 <sinf+0x20>
 8013534:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80135ac <sinf+0x88>
 8013538:	2000      	movs	r0, #0
 801353a:	b003      	add	sp, #12
 801353c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013540:	f000 b8f6 	b.w	8013730 <__kernel_sinf>
 8013544:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8013548:	d304      	bcc.n	8013554 <sinf+0x30>
 801354a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801354e:	b003      	add	sp, #12
 8013550:	f85d fb04 	ldr.w	pc, [sp], #4
 8013554:	4668      	mov	r0, sp
 8013556:	f000 f933 	bl	80137c0 <__ieee754_rem_pio2f>
 801355a:	f000 0003 	and.w	r0, r0, #3
 801355e:	2801      	cmp	r0, #1
 8013560:	d00a      	beq.n	8013578 <sinf+0x54>
 8013562:	2802      	cmp	r0, #2
 8013564:	d00f      	beq.n	8013586 <sinf+0x62>
 8013566:	b9c0      	cbnz	r0, 801359a <sinf+0x76>
 8013568:	eddd 0a01 	vldr	s1, [sp, #4]
 801356c:	ed9d 0a00 	vldr	s0, [sp]
 8013570:	2001      	movs	r0, #1
 8013572:	f000 f8dd 	bl	8013730 <__kernel_sinf>
 8013576:	e7ea      	b.n	801354e <sinf+0x2a>
 8013578:	eddd 0a01 	vldr	s1, [sp, #4]
 801357c:	ed9d 0a00 	vldr	s0, [sp]
 8013580:	f000 f87e 	bl	8013680 <__kernel_cosf>
 8013584:	e7e3      	b.n	801354e <sinf+0x2a>
 8013586:	eddd 0a01 	vldr	s1, [sp, #4]
 801358a:	ed9d 0a00 	vldr	s0, [sp]
 801358e:	2001      	movs	r0, #1
 8013590:	f000 f8ce 	bl	8013730 <__kernel_sinf>
 8013594:	eeb1 0a40 	vneg.f32	s0, s0
 8013598:	e7d9      	b.n	801354e <sinf+0x2a>
 801359a:	eddd 0a01 	vldr	s1, [sp, #4]
 801359e:	ed9d 0a00 	vldr	s0, [sp]
 80135a2:	f000 f86d 	bl	8013680 <__kernel_cosf>
 80135a6:	e7f5      	b.n	8013594 <sinf+0x70>
 80135a8:	3f490fd8 	.word	0x3f490fd8
 80135ac:	00000000 	.word	0x00000000

080135b0 <floorf>:
 80135b0:	ee10 3a10 	vmov	r3, s0
 80135b4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80135b8:	3a7f      	subs	r2, #127	@ 0x7f
 80135ba:	2a16      	cmp	r2, #22
 80135bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80135c0:	dc2b      	bgt.n	801361a <floorf+0x6a>
 80135c2:	2a00      	cmp	r2, #0
 80135c4:	da12      	bge.n	80135ec <floorf+0x3c>
 80135c6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801362c <floorf+0x7c>
 80135ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 80135ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80135d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135d6:	dd06      	ble.n	80135e6 <floorf+0x36>
 80135d8:	2b00      	cmp	r3, #0
 80135da:	da24      	bge.n	8013626 <floorf+0x76>
 80135dc:	2900      	cmp	r1, #0
 80135de:	4b14      	ldr	r3, [pc, #80]	@ (8013630 <floorf+0x80>)
 80135e0:	bf08      	it	eq
 80135e2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80135e6:	ee00 3a10 	vmov	s0, r3
 80135ea:	4770      	bx	lr
 80135ec:	4911      	ldr	r1, [pc, #68]	@ (8013634 <floorf+0x84>)
 80135ee:	4111      	asrs	r1, r2
 80135f0:	420b      	tst	r3, r1
 80135f2:	d0fa      	beq.n	80135ea <floorf+0x3a>
 80135f4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801362c <floorf+0x7c>
 80135f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80135fc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013604:	ddef      	ble.n	80135e6 <floorf+0x36>
 8013606:	2b00      	cmp	r3, #0
 8013608:	bfbe      	ittt	lt
 801360a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801360e:	fa40 f202 	asrlt.w	r2, r0, r2
 8013612:	189b      	addlt	r3, r3, r2
 8013614:	ea23 0301 	bic.w	r3, r3, r1
 8013618:	e7e5      	b.n	80135e6 <floorf+0x36>
 801361a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801361e:	d3e4      	bcc.n	80135ea <floorf+0x3a>
 8013620:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013624:	4770      	bx	lr
 8013626:	2300      	movs	r3, #0
 8013628:	e7dd      	b.n	80135e6 <floorf+0x36>
 801362a:	bf00      	nop
 801362c:	7149f2ca 	.word	0x7149f2ca
 8013630:	bf800000 	.word	0xbf800000
 8013634:	007fffff 	.word	0x007fffff

08013638 <roundf>:
 8013638:	ee10 0a10 	vmov	r0, s0
 801363c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8013640:	3a7f      	subs	r2, #127	@ 0x7f
 8013642:	2a16      	cmp	r2, #22
 8013644:	dc15      	bgt.n	8013672 <roundf+0x3a>
 8013646:	2a00      	cmp	r2, #0
 8013648:	da08      	bge.n	801365c <roundf+0x24>
 801364a:	3201      	adds	r2, #1
 801364c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8013650:	d101      	bne.n	8013656 <roundf+0x1e>
 8013652:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8013656:	ee00 3a10 	vmov	s0, r3
 801365a:	4770      	bx	lr
 801365c:	4907      	ldr	r1, [pc, #28]	@ (801367c <roundf+0x44>)
 801365e:	4111      	asrs	r1, r2
 8013660:	4201      	tst	r1, r0
 8013662:	d0fa      	beq.n	801365a <roundf+0x22>
 8013664:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8013668:	4113      	asrs	r3, r2
 801366a:	4403      	add	r3, r0
 801366c:	ea23 0301 	bic.w	r3, r3, r1
 8013670:	e7f1      	b.n	8013656 <roundf+0x1e>
 8013672:	2a80      	cmp	r2, #128	@ 0x80
 8013674:	d1f1      	bne.n	801365a <roundf+0x22>
 8013676:	ee30 0a00 	vadd.f32	s0, s0, s0
 801367a:	4770      	bx	lr
 801367c:	007fffff 	.word	0x007fffff

08013680 <__kernel_cosf>:
 8013680:	ee10 3a10 	vmov	r3, s0
 8013684:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013688:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801368c:	eef0 6a40 	vmov.f32	s13, s0
 8013690:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013694:	d204      	bcs.n	80136a0 <__kernel_cosf+0x20>
 8013696:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801369a:	ee17 2a90 	vmov	r2, s15
 801369e:	b342      	cbz	r2, 80136f2 <__kernel_cosf+0x72>
 80136a0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80136a4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8013710 <__kernel_cosf+0x90>
 80136a8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8013714 <__kernel_cosf+0x94>
 80136ac:	4a1a      	ldr	r2, [pc, #104]	@ (8013718 <__kernel_cosf+0x98>)
 80136ae:	eea7 6a27 	vfma.f32	s12, s14, s15
 80136b2:	4293      	cmp	r3, r2
 80136b4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801371c <__kernel_cosf+0x9c>
 80136b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80136bc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8013720 <__kernel_cosf+0xa0>
 80136c0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80136c4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8013724 <__kernel_cosf+0xa4>
 80136c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80136cc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8013728 <__kernel_cosf+0xa8>
 80136d0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80136d4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80136d8:	ee26 6a07 	vmul.f32	s12, s12, s14
 80136dc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80136e0:	eee7 0a06 	vfma.f32	s1, s14, s12
 80136e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136e8:	d804      	bhi.n	80136f4 <__kernel_cosf+0x74>
 80136ea:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80136ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80136f2:	4770      	bx	lr
 80136f4:	4a0d      	ldr	r2, [pc, #52]	@ (801372c <__kernel_cosf+0xac>)
 80136f6:	4293      	cmp	r3, r2
 80136f8:	bf9a      	itte	ls
 80136fa:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80136fe:	ee07 3a10 	vmovls	s14, r3
 8013702:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8013706:	ee30 0a47 	vsub.f32	s0, s0, s14
 801370a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801370e:	e7ec      	b.n	80136ea <__kernel_cosf+0x6a>
 8013710:	ad47d74e 	.word	0xad47d74e
 8013714:	310f74f6 	.word	0x310f74f6
 8013718:	3e999999 	.word	0x3e999999
 801371c:	b493f27c 	.word	0xb493f27c
 8013720:	37d00d01 	.word	0x37d00d01
 8013724:	bab60b61 	.word	0xbab60b61
 8013728:	3d2aaaab 	.word	0x3d2aaaab
 801372c:	3f480000 	.word	0x3f480000

08013730 <__kernel_sinf>:
 8013730:	ee10 3a10 	vmov	r3, s0
 8013734:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013738:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801373c:	d204      	bcs.n	8013748 <__kernel_sinf+0x18>
 801373e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013742:	ee17 3a90 	vmov	r3, s15
 8013746:	b35b      	cbz	r3, 80137a0 <__kernel_sinf+0x70>
 8013748:	ee20 7a00 	vmul.f32	s14, s0, s0
 801374c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80137a4 <__kernel_sinf+0x74>
 8013750:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80137a8 <__kernel_sinf+0x78>
 8013754:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013758:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80137ac <__kernel_sinf+0x7c>
 801375c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013760:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80137b0 <__kernel_sinf+0x80>
 8013764:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013768:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80137b4 <__kernel_sinf+0x84>
 801376c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8013770:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013774:	b930      	cbnz	r0, 8013784 <__kernel_sinf+0x54>
 8013776:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80137b8 <__kernel_sinf+0x88>
 801377a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801377e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8013782:	4770      	bx	lr
 8013784:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013788:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801378c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013790:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8013794:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80137bc <__kernel_sinf+0x8c>
 8013798:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801379c:	ee30 0a60 	vsub.f32	s0, s0, s1
 80137a0:	4770      	bx	lr
 80137a2:	bf00      	nop
 80137a4:	2f2ec9d3 	.word	0x2f2ec9d3
 80137a8:	b2d72f34 	.word	0xb2d72f34
 80137ac:	3638ef1b 	.word	0x3638ef1b
 80137b0:	b9500d01 	.word	0xb9500d01
 80137b4:	3c088889 	.word	0x3c088889
 80137b8:	be2aaaab 	.word	0xbe2aaaab
 80137bc:	3e2aaaab 	.word	0x3e2aaaab

080137c0 <__ieee754_rem_pio2f>:
 80137c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137c2:	ee10 6a10 	vmov	r6, s0
 80137c6:	4b88      	ldr	r3, [pc, #544]	@ (80139e8 <__ieee754_rem_pio2f+0x228>)
 80137c8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80137cc:	429d      	cmp	r5, r3
 80137ce:	b087      	sub	sp, #28
 80137d0:	4604      	mov	r4, r0
 80137d2:	d805      	bhi.n	80137e0 <__ieee754_rem_pio2f+0x20>
 80137d4:	2300      	movs	r3, #0
 80137d6:	ed80 0a00 	vstr	s0, [r0]
 80137da:	6043      	str	r3, [r0, #4]
 80137dc:	2000      	movs	r0, #0
 80137de:	e022      	b.n	8013826 <__ieee754_rem_pio2f+0x66>
 80137e0:	4b82      	ldr	r3, [pc, #520]	@ (80139ec <__ieee754_rem_pio2f+0x22c>)
 80137e2:	429d      	cmp	r5, r3
 80137e4:	d83a      	bhi.n	801385c <__ieee754_rem_pio2f+0x9c>
 80137e6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80137ea:	2e00      	cmp	r6, #0
 80137ec:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80139f0 <__ieee754_rem_pio2f+0x230>
 80137f0:	4a80      	ldr	r2, [pc, #512]	@ (80139f4 <__ieee754_rem_pio2f+0x234>)
 80137f2:	f023 030f 	bic.w	r3, r3, #15
 80137f6:	dd18      	ble.n	801382a <__ieee754_rem_pio2f+0x6a>
 80137f8:	4293      	cmp	r3, r2
 80137fa:	ee70 7a47 	vsub.f32	s15, s0, s14
 80137fe:	bf09      	itett	eq
 8013800:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80139f8 <__ieee754_rem_pio2f+0x238>
 8013804:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80139fc <__ieee754_rem_pio2f+0x23c>
 8013808:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8013a00 <__ieee754_rem_pio2f+0x240>
 801380c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013810:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8013814:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013818:	ed80 7a00 	vstr	s14, [r0]
 801381c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013820:	edc0 7a01 	vstr	s15, [r0, #4]
 8013824:	2001      	movs	r0, #1
 8013826:	b007      	add	sp, #28
 8013828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801382a:	4293      	cmp	r3, r2
 801382c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013830:	bf09      	itett	eq
 8013832:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80139f8 <__ieee754_rem_pio2f+0x238>
 8013836:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80139fc <__ieee754_rem_pio2f+0x23c>
 801383a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8013a00 <__ieee754_rem_pio2f+0x240>
 801383e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013842:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013846:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801384a:	ed80 7a00 	vstr	s14, [r0]
 801384e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013852:	edc0 7a01 	vstr	s15, [r0, #4]
 8013856:	f04f 30ff 	mov.w	r0, #4294967295
 801385a:	e7e4      	b.n	8013826 <__ieee754_rem_pio2f+0x66>
 801385c:	4b69      	ldr	r3, [pc, #420]	@ (8013a04 <__ieee754_rem_pio2f+0x244>)
 801385e:	429d      	cmp	r5, r3
 8013860:	d873      	bhi.n	801394a <__ieee754_rem_pio2f+0x18a>
 8013862:	f7ff fe57 	bl	8013514 <fabsf>
 8013866:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8013a08 <__ieee754_rem_pio2f+0x248>
 801386a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801386e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013876:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801387a:	ee17 0a90 	vmov	r0, s15
 801387e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80139f0 <__ieee754_rem_pio2f+0x230>
 8013882:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013886:	281f      	cmp	r0, #31
 8013888:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80139fc <__ieee754_rem_pio2f+0x23c>
 801388c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013890:	eeb1 6a47 	vneg.f32	s12, s14
 8013894:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013898:	ee16 1a90 	vmov	r1, s13
 801389c:	dc09      	bgt.n	80138b2 <__ieee754_rem_pio2f+0xf2>
 801389e:	4a5b      	ldr	r2, [pc, #364]	@ (8013a0c <__ieee754_rem_pio2f+0x24c>)
 80138a0:	1e47      	subs	r7, r0, #1
 80138a2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80138a6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80138aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80138ae:	4293      	cmp	r3, r2
 80138b0:	d107      	bne.n	80138c2 <__ieee754_rem_pio2f+0x102>
 80138b2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80138b6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80138ba:	2a08      	cmp	r2, #8
 80138bc:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80138c0:	dc14      	bgt.n	80138ec <__ieee754_rem_pio2f+0x12c>
 80138c2:	6021      	str	r1, [r4, #0]
 80138c4:	ed94 7a00 	vldr	s14, [r4]
 80138c8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80138cc:	2e00      	cmp	r6, #0
 80138ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 80138d2:	ed84 0a01 	vstr	s0, [r4, #4]
 80138d6:	daa6      	bge.n	8013826 <__ieee754_rem_pio2f+0x66>
 80138d8:	eeb1 7a47 	vneg.f32	s14, s14
 80138dc:	eeb1 0a40 	vneg.f32	s0, s0
 80138e0:	ed84 7a00 	vstr	s14, [r4]
 80138e4:	ed84 0a01 	vstr	s0, [r4, #4]
 80138e8:	4240      	negs	r0, r0
 80138ea:	e79c      	b.n	8013826 <__ieee754_rem_pio2f+0x66>
 80138ec:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80139f8 <__ieee754_rem_pio2f+0x238>
 80138f0:	eef0 6a40 	vmov.f32	s13, s0
 80138f4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80138f8:	ee70 7a66 	vsub.f32	s15, s0, s13
 80138fc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013900:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8013a00 <__ieee754_rem_pio2f+0x240>
 8013904:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013908:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801390c:	ee15 2a90 	vmov	r2, s11
 8013910:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013914:	1a5b      	subs	r3, r3, r1
 8013916:	2b19      	cmp	r3, #25
 8013918:	dc04      	bgt.n	8013924 <__ieee754_rem_pio2f+0x164>
 801391a:	edc4 5a00 	vstr	s11, [r4]
 801391e:	eeb0 0a66 	vmov.f32	s0, s13
 8013922:	e7cf      	b.n	80138c4 <__ieee754_rem_pio2f+0x104>
 8013924:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8013a10 <__ieee754_rem_pio2f+0x250>
 8013928:	eeb0 0a66 	vmov.f32	s0, s13
 801392c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013930:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013934:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8013a14 <__ieee754_rem_pio2f+0x254>
 8013938:	eee6 7a25 	vfma.f32	s15, s12, s11
 801393c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013940:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013944:	ed84 7a00 	vstr	s14, [r4]
 8013948:	e7bc      	b.n	80138c4 <__ieee754_rem_pio2f+0x104>
 801394a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801394e:	d306      	bcc.n	801395e <__ieee754_rem_pio2f+0x19e>
 8013950:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013954:	edc0 7a01 	vstr	s15, [r0, #4]
 8013958:	edc0 7a00 	vstr	s15, [r0]
 801395c:	e73e      	b.n	80137dc <__ieee754_rem_pio2f+0x1c>
 801395e:	15ea      	asrs	r2, r5, #23
 8013960:	3a86      	subs	r2, #134	@ 0x86
 8013962:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013966:	ee07 3a90 	vmov	s15, r3
 801396a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801396e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8013a18 <__ieee754_rem_pio2f+0x258>
 8013972:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013976:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801397a:	ed8d 7a03 	vstr	s14, [sp, #12]
 801397e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013982:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013986:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801398a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801398e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013992:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013996:	eef5 7a40 	vcmp.f32	s15, #0.0
 801399a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801399e:	edcd 7a05 	vstr	s15, [sp, #20]
 80139a2:	d11e      	bne.n	80139e2 <__ieee754_rem_pio2f+0x222>
 80139a4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80139a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ac:	bf0c      	ite	eq
 80139ae:	2301      	moveq	r3, #1
 80139b0:	2302      	movne	r3, #2
 80139b2:	491a      	ldr	r1, [pc, #104]	@ (8013a1c <__ieee754_rem_pio2f+0x25c>)
 80139b4:	9101      	str	r1, [sp, #4]
 80139b6:	2102      	movs	r1, #2
 80139b8:	9100      	str	r1, [sp, #0]
 80139ba:	a803      	add	r0, sp, #12
 80139bc:	4621      	mov	r1, r4
 80139be:	f000 f895 	bl	8013aec <__kernel_rem_pio2f>
 80139c2:	2e00      	cmp	r6, #0
 80139c4:	f6bf af2f 	bge.w	8013826 <__ieee754_rem_pio2f+0x66>
 80139c8:	edd4 7a00 	vldr	s15, [r4]
 80139cc:	eef1 7a67 	vneg.f32	s15, s15
 80139d0:	edc4 7a00 	vstr	s15, [r4]
 80139d4:	edd4 7a01 	vldr	s15, [r4, #4]
 80139d8:	eef1 7a67 	vneg.f32	s15, s15
 80139dc:	edc4 7a01 	vstr	s15, [r4, #4]
 80139e0:	e782      	b.n	80138e8 <__ieee754_rem_pio2f+0x128>
 80139e2:	2303      	movs	r3, #3
 80139e4:	e7e5      	b.n	80139b2 <__ieee754_rem_pio2f+0x1f2>
 80139e6:	bf00      	nop
 80139e8:	3f490fd8 	.word	0x3f490fd8
 80139ec:	4016cbe3 	.word	0x4016cbe3
 80139f0:	3fc90f80 	.word	0x3fc90f80
 80139f4:	3fc90fd0 	.word	0x3fc90fd0
 80139f8:	37354400 	.word	0x37354400
 80139fc:	37354443 	.word	0x37354443
 8013a00:	2e85a308 	.word	0x2e85a308
 8013a04:	43490f80 	.word	0x43490f80
 8013a08:	3f22f984 	.word	0x3f22f984
 8013a0c:	08019924 	.word	0x08019924
 8013a10:	2e85a300 	.word	0x2e85a300
 8013a14:	248d3132 	.word	0x248d3132
 8013a18:	43800000 	.word	0x43800000
 8013a1c:	080199a4 	.word	0x080199a4

08013a20 <scalbnf>:
 8013a20:	ee10 3a10 	vmov	r3, s0
 8013a24:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8013a28:	d02b      	beq.n	8013a82 <scalbnf+0x62>
 8013a2a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013a2e:	d302      	bcc.n	8013a36 <scalbnf+0x16>
 8013a30:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013a34:	4770      	bx	lr
 8013a36:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8013a3a:	d123      	bne.n	8013a84 <scalbnf+0x64>
 8013a3c:	4b24      	ldr	r3, [pc, #144]	@ (8013ad0 <scalbnf+0xb0>)
 8013a3e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8013ad4 <scalbnf+0xb4>
 8013a42:	4298      	cmp	r0, r3
 8013a44:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013a48:	db17      	blt.n	8013a7a <scalbnf+0x5a>
 8013a4a:	ee10 3a10 	vmov	r3, s0
 8013a4e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013a52:	3a19      	subs	r2, #25
 8013a54:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013a58:	4288      	cmp	r0, r1
 8013a5a:	dd15      	ble.n	8013a88 <scalbnf+0x68>
 8013a5c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8013ad8 <scalbnf+0xb8>
 8013a60:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8013adc <scalbnf+0xbc>
 8013a64:	ee10 3a10 	vmov	r3, s0
 8013a68:	eeb0 7a67 	vmov.f32	s14, s15
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	bfb8      	it	lt
 8013a70:	eef0 7a66 	vmovlt.f32	s15, s13
 8013a74:	ee27 0a87 	vmul.f32	s0, s15, s14
 8013a78:	4770      	bx	lr
 8013a7a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013ae0 <scalbnf+0xc0>
 8013a7e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013a82:	4770      	bx	lr
 8013a84:	0dd2      	lsrs	r2, r2, #23
 8013a86:	e7e5      	b.n	8013a54 <scalbnf+0x34>
 8013a88:	4410      	add	r0, r2
 8013a8a:	28fe      	cmp	r0, #254	@ 0xfe
 8013a8c:	dce6      	bgt.n	8013a5c <scalbnf+0x3c>
 8013a8e:	2800      	cmp	r0, #0
 8013a90:	dd06      	ble.n	8013aa0 <scalbnf+0x80>
 8013a92:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013a96:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013a9a:	ee00 3a10 	vmov	s0, r3
 8013a9e:	4770      	bx	lr
 8013aa0:	f110 0f16 	cmn.w	r0, #22
 8013aa4:	da09      	bge.n	8013aba <scalbnf+0x9a>
 8013aa6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8013ae0 <scalbnf+0xc0>
 8013aaa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8013ae4 <scalbnf+0xc4>
 8013aae:	ee10 3a10 	vmov	r3, s0
 8013ab2:	eeb0 7a67 	vmov.f32	s14, s15
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	e7d9      	b.n	8013a6e <scalbnf+0x4e>
 8013aba:	3019      	adds	r0, #25
 8013abc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013ac0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013ac4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8013ae8 <scalbnf+0xc8>
 8013ac8:	ee07 3a90 	vmov	s15, r3
 8013acc:	e7d7      	b.n	8013a7e <scalbnf+0x5e>
 8013ace:	bf00      	nop
 8013ad0:	ffff3cb0 	.word	0xffff3cb0
 8013ad4:	4c000000 	.word	0x4c000000
 8013ad8:	7149f2ca 	.word	0x7149f2ca
 8013adc:	f149f2ca 	.word	0xf149f2ca
 8013ae0:	0da24260 	.word	0x0da24260
 8013ae4:	8da24260 	.word	0x8da24260
 8013ae8:	33000000 	.word	0x33000000

08013aec <__kernel_rem_pio2f>:
 8013aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013af0:	ed2d 8b04 	vpush	{d8-d9}
 8013af4:	b0d9      	sub	sp, #356	@ 0x164
 8013af6:	4690      	mov	r8, r2
 8013af8:	9001      	str	r0, [sp, #4]
 8013afa:	4ab9      	ldr	r2, [pc, #740]	@ (8013de0 <__kernel_rem_pio2f+0x2f4>)
 8013afc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8013afe:	f118 0f04 	cmn.w	r8, #4
 8013b02:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8013b06:	460f      	mov	r7, r1
 8013b08:	f103 3bff 	add.w	fp, r3, #4294967295
 8013b0c:	db27      	blt.n	8013b5e <__kernel_rem_pio2f+0x72>
 8013b0e:	f1b8 0203 	subs.w	r2, r8, #3
 8013b12:	bf48      	it	mi
 8013b14:	f108 0204 	addmi.w	r2, r8, #4
 8013b18:	10d2      	asrs	r2, r2, #3
 8013b1a:	1c55      	adds	r5, r2, #1
 8013b1c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013b1e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8013df0 <__kernel_rem_pio2f+0x304>
 8013b22:	00e8      	lsls	r0, r5, #3
 8013b24:	eba2 060b 	sub.w	r6, r2, fp
 8013b28:	9002      	str	r0, [sp, #8]
 8013b2a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8013b2e:	eb0a 0c0b 	add.w	ip, sl, fp
 8013b32:	ac1c      	add	r4, sp, #112	@ 0x70
 8013b34:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8013b38:	2000      	movs	r0, #0
 8013b3a:	4560      	cmp	r0, ip
 8013b3c:	dd11      	ble.n	8013b62 <__kernel_rem_pio2f+0x76>
 8013b3e:	a91c      	add	r1, sp, #112	@ 0x70
 8013b40:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8013b44:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8013b48:	f04f 0c00 	mov.w	ip, #0
 8013b4c:	45d4      	cmp	ip, sl
 8013b4e:	dc27      	bgt.n	8013ba0 <__kernel_rem_pio2f+0xb4>
 8013b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8013b54:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8013df0 <__kernel_rem_pio2f+0x304>
 8013b58:	4606      	mov	r6, r0
 8013b5a:	2400      	movs	r4, #0
 8013b5c:	e016      	b.n	8013b8c <__kernel_rem_pio2f+0xa0>
 8013b5e:	2200      	movs	r2, #0
 8013b60:	e7db      	b.n	8013b1a <__kernel_rem_pio2f+0x2e>
 8013b62:	42c6      	cmn	r6, r0
 8013b64:	bf5d      	ittte	pl
 8013b66:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8013b6a:	ee07 1a90 	vmovpl	s15, r1
 8013b6e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013b72:	eef0 7a47 	vmovmi.f32	s15, s14
 8013b76:	ece4 7a01 	vstmia	r4!, {s15}
 8013b7a:	3001      	adds	r0, #1
 8013b7c:	e7dd      	b.n	8013b3a <__kernel_rem_pio2f+0x4e>
 8013b7e:	ecfe 6a01 	vldmia	lr!, {s13}
 8013b82:	ed96 7a00 	vldr	s14, [r6]
 8013b86:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013b8a:	3401      	adds	r4, #1
 8013b8c:	455c      	cmp	r4, fp
 8013b8e:	f1a6 0604 	sub.w	r6, r6, #4
 8013b92:	ddf4      	ble.n	8013b7e <__kernel_rem_pio2f+0x92>
 8013b94:	ece9 7a01 	vstmia	r9!, {s15}
 8013b98:	f10c 0c01 	add.w	ip, ip, #1
 8013b9c:	3004      	adds	r0, #4
 8013b9e:	e7d5      	b.n	8013b4c <__kernel_rem_pio2f+0x60>
 8013ba0:	a908      	add	r1, sp, #32
 8013ba2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013ba6:	9104      	str	r1, [sp, #16]
 8013ba8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013baa:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8013dec <__kernel_rem_pio2f+0x300>
 8013bae:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8013de8 <__kernel_rem_pio2f+0x2fc>
 8013bb2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8013bb6:	9203      	str	r2, [sp, #12]
 8013bb8:	4654      	mov	r4, sl
 8013bba:	00a2      	lsls	r2, r4, #2
 8013bbc:	9205      	str	r2, [sp, #20]
 8013bbe:	aa58      	add	r2, sp, #352	@ 0x160
 8013bc0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8013bc4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8013bc8:	a944      	add	r1, sp, #272	@ 0x110
 8013bca:	aa08      	add	r2, sp, #32
 8013bcc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8013bd0:	4694      	mov	ip, r2
 8013bd2:	4626      	mov	r6, r4
 8013bd4:	2e00      	cmp	r6, #0
 8013bd6:	f1a0 0004 	sub.w	r0, r0, #4
 8013bda:	dc4c      	bgt.n	8013c76 <__kernel_rem_pio2f+0x18a>
 8013bdc:	4628      	mov	r0, r5
 8013bde:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013be2:	f7ff ff1d 	bl	8013a20 <scalbnf>
 8013be6:	eeb0 8a40 	vmov.f32	s16, s0
 8013bea:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8013bee:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013bf2:	f7ff fcdd 	bl	80135b0 <floorf>
 8013bf6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8013bfa:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013bfe:	2d00      	cmp	r5, #0
 8013c00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013c04:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013c08:	ee17 9a90 	vmov	r9, s15
 8013c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c10:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013c14:	dd41      	ble.n	8013c9a <__kernel_rem_pio2f+0x1ae>
 8013c16:	f104 3cff 	add.w	ip, r4, #4294967295
 8013c1a:	a908      	add	r1, sp, #32
 8013c1c:	f1c5 0e08 	rsb	lr, r5, #8
 8013c20:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8013c24:	fa46 f00e 	asr.w	r0, r6, lr
 8013c28:	4481      	add	r9, r0
 8013c2a:	fa00 f00e 	lsl.w	r0, r0, lr
 8013c2e:	1a36      	subs	r6, r6, r0
 8013c30:	f1c5 0007 	rsb	r0, r5, #7
 8013c34:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8013c38:	4106      	asrs	r6, r0
 8013c3a:	2e00      	cmp	r6, #0
 8013c3c:	dd3c      	ble.n	8013cb8 <__kernel_rem_pio2f+0x1cc>
 8013c3e:	f04f 0e00 	mov.w	lr, #0
 8013c42:	f109 0901 	add.w	r9, r9, #1
 8013c46:	4670      	mov	r0, lr
 8013c48:	4574      	cmp	r4, lr
 8013c4a:	dc68      	bgt.n	8013d1e <__kernel_rem_pio2f+0x232>
 8013c4c:	2d00      	cmp	r5, #0
 8013c4e:	dd03      	ble.n	8013c58 <__kernel_rem_pio2f+0x16c>
 8013c50:	2d01      	cmp	r5, #1
 8013c52:	d074      	beq.n	8013d3e <__kernel_rem_pio2f+0x252>
 8013c54:	2d02      	cmp	r5, #2
 8013c56:	d07d      	beq.n	8013d54 <__kernel_rem_pio2f+0x268>
 8013c58:	2e02      	cmp	r6, #2
 8013c5a:	d12d      	bne.n	8013cb8 <__kernel_rem_pio2f+0x1cc>
 8013c5c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013c60:	ee30 8a48 	vsub.f32	s16, s0, s16
 8013c64:	b340      	cbz	r0, 8013cb8 <__kernel_rem_pio2f+0x1cc>
 8013c66:	4628      	mov	r0, r5
 8013c68:	9306      	str	r3, [sp, #24]
 8013c6a:	f7ff fed9 	bl	8013a20 <scalbnf>
 8013c6e:	9b06      	ldr	r3, [sp, #24]
 8013c70:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013c74:	e020      	b.n	8013cb8 <__kernel_rem_pio2f+0x1cc>
 8013c76:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013c7a:	3e01      	subs	r6, #1
 8013c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c84:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8013c88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013c8c:	ecac 0a01 	vstmia	ip!, {s0}
 8013c90:	ed90 0a00 	vldr	s0, [r0]
 8013c94:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013c98:	e79c      	b.n	8013bd4 <__kernel_rem_pio2f+0xe8>
 8013c9a:	d105      	bne.n	8013ca8 <__kernel_rem_pio2f+0x1bc>
 8013c9c:	1e60      	subs	r0, r4, #1
 8013c9e:	a908      	add	r1, sp, #32
 8013ca0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8013ca4:	11f6      	asrs	r6, r6, #7
 8013ca6:	e7c8      	b.n	8013c3a <__kernel_rem_pio2f+0x14e>
 8013ca8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013cac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cb4:	da31      	bge.n	8013d1a <__kernel_rem_pio2f+0x22e>
 8013cb6:	2600      	movs	r6, #0
 8013cb8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cc0:	f040 8098 	bne.w	8013df4 <__kernel_rem_pio2f+0x308>
 8013cc4:	1e60      	subs	r0, r4, #1
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	4550      	cmp	r0, sl
 8013cca:	da4b      	bge.n	8013d64 <__kernel_rem_pio2f+0x278>
 8013ccc:	2a00      	cmp	r2, #0
 8013cce:	d065      	beq.n	8013d9c <__kernel_rem_pio2f+0x2b0>
 8013cd0:	3c01      	subs	r4, #1
 8013cd2:	ab08      	add	r3, sp, #32
 8013cd4:	3d08      	subs	r5, #8
 8013cd6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d0f8      	beq.n	8013cd0 <__kernel_rem_pio2f+0x1e4>
 8013cde:	4628      	mov	r0, r5
 8013ce0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013ce4:	f7ff fe9c 	bl	8013a20 <scalbnf>
 8013ce8:	1c63      	adds	r3, r4, #1
 8013cea:	aa44      	add	r2, sp, #272	@ 0x110
 8013cec:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8013dec <__kernel_rem_pio2f+0x300>
 8013cf0:	0099      	lsls	r1, r3, #2
 8013cf2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013cf6:	4623      	mov	r3, r4
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	f280 80a9 	bge.w	8013e50 <__kernel_rem_pio2f+0x364>
 8013cfe:	4623      	mov	r3, r4
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	f2c0 80c7 	blt.w	8013e94 <__kernel_rem_pio2f+0x3a8>
 8013d06:	aa44      	add	r2, sp, #272	@ 0x110
 8013d08:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8013d0c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8013de4 <__kernel_rem_pio2f+0x2f8>
 8013d10:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8013df0 <__kernel_rem_pio2f+0x304>
 8013d14:	2000      	movs	r0, #0
 8013d16:	1ae2      	subs	r2, r4, r3
 8013d18:	e0b1      	b.n	8013e7e <__kernel_rem_pio2f+0x392>
 8013d1a:	2602      	movs	r6, #2
 8013d1c:	e78f      	b.n	8013c3e <__kernel_rem_pio2f+0x152>
 8013d1e:	f852 1b04 	ldr.w	r1, [r2], #4
 8013d22:	b948      	cbnz	r0, 8013d38 <__kernel_rem_pio2f+0x24c>
 8013d24:	b121      	cbz	r1, 8013d30 <__kernel_rem_pio2f+0x244>
 8013d26:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8013d2a:	f842 1c04 	str.w	r1, [r2, #-4]
 8013d2e:	2101      	movs	r1, #1
 8013d30:	f10e 0e01 	add.w	lr, lr, #1
 8013d34:	4608      	mov	r0, r1
 8013d36:	e787      	b.n	8013c48 <__kernel_rem_pio2f+0x15c>
 8013d38:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8013d3c:	e7f5      	b.n	8013d2a <__kernel_rem_pio2f+0x23e>
 8013d3e:	f104 3cff 	add.w	ip, r4, #4294967295
 8013d42:	aa08      	add	r2, sp, #32
 8013d44:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8013d48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8013d4c:	a908      	add	r1, sp, #32
 8013d4e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8013d52:	e781      	b.n	8013c58 <__kernel_rem_pio2f+0x16c>
 8013d54:	f104 3cff 	add.w	ip, r4, #4294967295
 8013d58:	aa08      	add	r2, sp, #32
 8013d5a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8013d5e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8013d62:	e7f3      	b.n	8013d4c <__kernel_rem_pio2f+0x260>
 8013d64:	a908      	add	r1, sp, #32
 8013d66:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8013d6a:	3801      	subs	r0, #1
 8013d6c:	430a      	orrs	r2, r1
 8013d6e:	e7ab      	b.n	8013cc8 <__kernel_rem_pio2f+0x1dc>
 8013d70:	3201      	adds	r2, #1
 8013d72:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8013d76:	2e00      	cmp	r6, #0
 8013d78:	d0fa      	beq.n	8013d70 <__kernel_rem_pio2f+0x284>
 8013d7a:	9905      	ldr	r1, [sp, #20]
 8013d7c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8013d80:	eb0d 0001 	add.w	r0, sp, r1
 8013d84:	18e6      	adds	r6, r4, r3
 8013d86:	a91c      	add	r1, sp, #112	@ 0x70
 8013d88:	f104 0c01 	add.w	ip, r4, #1
 8013d8c:	384c      	subs	r0, #76	@ 0x4c
 8013d8e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8013d92:	4422      	add	r2, r4
 8013d94:	4562      	cmp	r2, ip
 8013d96:	da04      	bge.n	8013da2 <__kernel_rem_pio2f+0x2b6>
 8013d98:	4614      	mov	r4, r2
 8013d9a:	e70e      	b.n	8013bba <__kernel_rem_pio2f+0xce>
 8013d9c:	9804      	ldr	r0, [sp, #16]
 8013d9e:	2201      	movs	r2, #1
 8013da0:	e7e7      	b.n	8013d72 <__kernel_rem_pio2f+0x286>
 8013da2:	9903      	ldr	r1, [sp, #12]
 8013da4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8013da8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8013dac:	9105      	str	r1, [sp, #20]
 8013dae:	ee07 1a90 	vmov	s15, r1
 8013db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013db6:	2400      	movs	r4, #0
 8013db8:	ece6 7a01 	vstmia	r6!, {s15}
 8013dbc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8013df0 <__kernel_rem_pio2f+0x304>
 8013dc0:	46b1      	mov	r9, r6
 8013dc2:	455c      	cmp	r4, fp
 8013dc4:	dd04      	ble.n	8013dd0 <__kernel_rem_pio2f+0x2e4>
 8013dc6:	ece0 7a01 	vstmia	r0!, {s15}
 8013dca:	f10c 0c01 	add.w	ip, ip, #1
 8013dce:	e7e1      	b.n	8013d94 <__kernel_rem_pio2f+0x2a8>
 8013dd0:	ecfe 6a01 	vldmia	lr!, {s13}
 8013dd4:	ed39 7a01 	vldmdb	r9!, {s14}
 8013dd8:	3401      	adds	r4, #1
 8013dda:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013dde:	e7f0      	b.n	8013dc2 <__kernel_rem_pio2f+0x2d6>
 8013de0:	08019ce8 	.word	0x08019ce8
 8013de4:	08019cbc 	.word	0x08019cbc
 8013de8:	43800000 	.word	0x43800000
 8013dec:	3b800000 	.word	0x3b800000
 8013df0:	00000000 	.word	0x00000000
 8013df4:	9b02      	ldr	r3, [sp, #8]
 8013df6:	eeb0 0a48 	vmov.f32	s0, s16
 8013dfa:	eba3 0008 	sub.w	r0, r3, r8
 8013dfe:	f7ff fe0f 	bl	8013a20 <scalbnf>
 8013e02:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8013de8 <__kernel_rem_pio2f+0x2fc>
 8013e06:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e0e:	db19      	blt.n	8013e44 <__kernel_rem_pio2f+0x358>
 8013e10:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8013dec <__kernel_rem_pio2f+0x300>
 8013e14:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013e18:	aa08      	add	r2, sp, #32
 8013e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013e1e:	3508      	adds	r5, #8
 8013e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e24:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013e2c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013e30:	ee10 3a10 	vmov	r3, s0
 8013e34:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013e38:	ee17 3a90 	vmov	r3, s15
 8013e3c:	3401      	adds	r4, #1
 8013e3e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013e42:	e74c      	b.n	8013cde <__kernel_rem_pio2f+0x1f2>
 8013e44:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013e48:	aa08      	add	r2, sp, #32
 8013e4a:	ee10 3a10 	vmov	r3, s0
 8013e4e:	e7f6      	b.n	8013e3e <__kernel_rem_pio2f+0x352>
 8013e50:	a808      	add	r0, sp, #32
 8013e52:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8013e56:	9001      	str	r0, [sp, #4]
 8013e58:	ee07 0a90 	vmov	s15, r0
 8013e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e60:	3b01      	subs	r3, #1
 8013e62:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013e66:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013e6a:	ed62 7a01 	vstmdb	r2!, {s15}
 8013e6e:	e743      	b.n	8013cf8 <__kernel_rem_pio2f+0x20c>
 8013e70:	ecfc 6a01 	vldmia	ip!, {s13}
 8013e74:	ecb5 7a01 	vldmia	r5!, {s14}
 8013e78:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013e7c:	3001      	adds	r0, #1
 8013e7e:	4550      	cmp	r0, sl
 8013e80:	dc01      	bgt.n	8013e86 <__kernel_rem_pio2f+0x39a>
 8013e82:	4282      	cmp	r2, r0
 8013e84:	daf4      	bge.n	8013e70 <__kernel_rem_pio2f+0x384>
 8013e86:	a858      	add	r0, sp, #352	@ 0x160
 8013e88:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8013e8c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8013e90:	3b01      	subs	r3, #1
 8013e92:	e735      	b.n	8013d00 <__kernel_rem_pio2f+0x214>
 8013e94:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8013e96:	2b02      	cmp	r3, #2
 8013e98:	dc09      	bgt.n	8013eae <__kernel_rem_pio2f+0x3c2>
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	dc2b      	bgt.n	8013ef6 <__kernel_rem_pio2f+0x40a>
 8013e9e:	d044      	beq.n	8013f2a <__kernel_rem_pio2f+0x43e>
 8013ea0:	f009 0007 	and.w	r0, r9, #7
 8013ea4:	b059      	add	sp, #356	@ 0x164
 8013ea6:	ecbd 8b04 	vpop	{d8-d9}
 8013eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eae:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8013eb0:	2b03      	cmp	r3, #3
 8013eb2:	d1f5      	bne.n	8013ea0 <__kernel_rem_pio2f+0x3b4>
 8013eb4:	aa30      	add	r2, sp, #192	@ 0xc0
 8013eb6:	1f0b      	subs	r3, r1, #4
 8013eb8:	4413      	add	r3, r2
 8013eba:	461a      	mov	r2, r3
 8013ebc:	4620      	mov	r0, r4
 8013ebe:	2800      	cmp	r0, #0
 8013ec0:	f1a2 0204 	sub.w	r2, r2, #4
 8013ec4:	dc52      	bgt.n	8013f6c <__kernel_rem_pio2f+0x480>
 8013ec6:	4622      	mov	r2, r4
 8013ec8:	2a01      	cmp	r2, #1
 8013eca:	f1a3 0304 	sub.w	r3, r3, #4
 8013ece:	dc5d      	bgt.n	8013f8c <__kernel_rem_pio2f+0x4a0>
 8013ed0:	ab30      	add	r3, sp, #192	@ 0xc0
 8013ed2:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8013df0 <__kernel_rem_pio2f+0x304>
 8013ed6:	440b      	add	r3, r1
 8013ed8:	2c01      	cmp	r4, #1
 8013eda:	dc67      	bgt.n	8013fac <__kernel_rem_pio2f+0x4c0>
 8013edc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8013ee0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8013ee4:	2e00      	cmp	r6, #0
 8013ee6:	d167      	bne.n	8013fb8 <__kernel_rem_pio2f+0x4cc>
 8013ee8:	edc7 6a00 	vstr	s13, [r7]
 8013eec:	ed87 7a01 	vstr	s14, [r7, #4]
 8013ef0:	edc7 7a02 	vstr	s15, [r7, #8]
 8013ef4:	e7d4      	b.n	8013ea0 <__kernel_rem_pio2f+0x3b4>
 8013ef6:	ab30      	add	r3, sp, #192	@ 0xc0
 8013ef8:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8013df0 <__kernel_rem_pio2f+0x304>
 8013efc:	440b      	add	r3, r1
 8013efe:	4622      	mov	r2, r4
 8013f00:	2a00      	cmp	r2, #0
 8013f02:	da24      	bge.n	8013f4e <__kernel_rem_pio2f+0x462>
 8013f04:	b34e      	cbz	r6, 8013f5a <__kernel_rem_pio2f+0x46e>
 8013f06:	eef1 7a47 	vneg.f32	s15, s14
 8013f0a:	edc7 7a00 	vstr	s15, [r7]
 8013f0e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8013f12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f16:	aa31      	add	r2, sp, #196	@ 0xc4
 8013f18:	2301      	movs	r3, #1
 8013f1a:	429c      	cmp	r4, r3
 8013f1c:	da20      	bge.n	8013f60 <__kernel_rem_pio2f+0x474>
 8013f1e:	b10e      	cbz	r6, 8013f24 <__kernel_rem_pio2f+0x438>
 8013f20:	eef1 7a67 	vneg.f32	s15, s15
 8013f24:	edc7 7a01 	vstr	s15, [r7, #4]
 8013f28:	e7ba      	b.n	8013ea0 <__kernel_rem_pio2f+0x3b4>
 8013f2a:	ab30      	add	r3, sp, #192	@ 0xc0
 8013f2c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8013df0 <__kernel_rem_pio2f+0x304>
 8013f30:	440b      	add	r3, r1
 8013f32:	2c00      	cmp	r4, #0
 8013f34:	da05      	bge.n	8013f42 <__kernel_rem_pio2f+0x456>
 8013f36:	b10e      	cbz	r6, 8013f3c <__kernel_rem_pio2f+0x450>
 8013f38:	eef1 7a67 	vneg.f32	s15, s15
 8013f3c:	edc7 7a00 	vstr	s15, [r7]
 8013f40:	e7ae      	b.n	8013ea0 <__kernel_rem_pio2f+0x3b4>
 8013f42:	ed33 7a01 	vldmdb	r3!, {s14}
 8013f46:	3c01      	subs	r4, #1
 8013f48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f4c:	e7f1      	b.n	8013f32 <__kernel_rem_pio2f+0x446>
 8013f4e:	ed73 7a01 	vldmdb	r3!, {s15}
 8013f52:	3a01      	subs	r2, #1
 8013f54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013f58:	e7d2      	b.n	8013f00 <__kernel_rem_pio2f+0x414>
 8013f5a:	eef0 7a47 	vmov.f32	s15, s14
 8013f5e:	e7d4      	b.n	8013f0a <__kernel_rem_pio2f+0x41e>
 8013f60:	ecb2 7a01 	vldmia	r2!, {s14}
 8013f64:	3301      	adds	r3, #1
 8013f66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f6a:	e7d6      	b.n	8013f1a <__kernel_rem_pio2f+0x42e>
 8013f6c:	edd2 7a00 	vldr	s15, [r2]
 8013f70:	edd2 6a01 	vldr	s13, [r2, #4]
 8013f74:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013f78:	3801      	subs	r0, #1
 8013f7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f7e:	ed82 7a00 	vstr	s14, [r2]
 8013f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f86:	edc2 7a01 	vstr	s15, [r2, #4]
 8013f8a:	e798      	b.n	8013ebe <__kernel_rem_pio2f+0x3d2>
 8013f8c:	edd3 7a00 	vldr	s15, [r3]
 8013f90:	edd3 6a01 	vldr	s13, [r3, #4]
 8013f94:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013f98:	3a01      	subs	r2, #1
 8013f9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f9e:	ed83 7a00 	vstr	s14, [r3]
 8013fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013fa6:	edc3 7a01 	vstr	s15, [r3, #4]
 8013faa:	e78d      	b.n	8013ec8 <__kernel_rem_pio2f+0x3dc>
 8013fac:	ed33 7a01 	vldmdb	r3!, {s14}
 8013fb0:	3c01      	subs	r4, #1
 8013fb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013fb6:	e78f      	b.n	8013ed8 <__kernel_rem_pio2f+0x3ec>
 8013fb8:	eef1 6a66 	vneg.f32	s13, s13
 8013fbc:	eeb1 7a47 	vneg.f32	s14, s14
 8013fc0:	edc7 6a00 	vstr	s13, [r7]
 8013fc4:	ed87 7a01 	vstr	s14, [r7, #4]
 8013fc8:	eef1 7a67 	vneg.f32	s15, s15
 8013fcc:	e790      	b.n	8013ef0 <__kernel_rem_pio2f+0x404>
 8013fce:	bf00      	nop

08013fd0 <_init>:
 8013fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fd2:	bf00      	nop
 8013fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fd6:	bc08      	pop	{r3}
 8013fd8:	469e      	mov	lr, r3
 8013fda:	4770      	bx	lr

08013fdc <_fini>:
 8013fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fde:	bf00      	nop
 8013fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fe2:	bc08      	pop	{r3}
 8013fe4:	469e      	mov	lr, r3
 8013fe6:	4770      	bx	lr
