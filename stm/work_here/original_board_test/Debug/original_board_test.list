
original_board_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123b0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005b78  080124f0  080124f0  000134f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018068  08018068  00019068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018070  08018070  00019070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08018074  08018074  00019074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000220  20000008  08018078  0001a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000228  08018298  0001a228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000260  080182cd  0001a260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  20000274  080182de  0001a274  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009f4  080182de  0001a9f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001ba67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0001c000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0001c000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  080182de  0001b1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0005fa9f  00000000  00000000  0001ba97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000d78a  00000000  00000000  0007b536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003820  00000000  00000000  00088cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001fdf  00000000  00000000  0008c4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d8d6  00000000  00000000  0008e4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00040821  00000000  00000000  000bbd95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00106015  00000000  00000000  000fc5b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      0000008f  00000000  00000000  002025cb  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000e468  00000000  00000000  0020265c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000053  00000000  00000000  00210ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    0001947a  00000000  00000000  00210b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_ranges 00003908  00000000  00000000  00229f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000274 	.word	0x20000274
 800015c:	00000000 	.word	0x00000000
 8000160:	080124d8 	.word	0x080124d8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000278 	.word	0x20000278
 800017c:	080124d8 	.word	0x080124d8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 bab4 	b.w	80007b0 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f826 	bl	80002a0 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__aeabi_f2ulz>:
 8000260:	b5d0      	push	{r4, r6, r7, lr}
 8000262:	f000 fc0b 	bl	8000a7c <__aeabi_f2d>
 8000266:	4b0c      	ldr	r3, [pc, #48]	@ (8000298 <__aeabi_f2ulz+0x38>)
 8000268:	2200      	movs	r2, #0
 800026a:	4606      	mov	r6, r0
 800026c:	460f      	mov	r7, r1
 800026e:	f000 f975 	bl	800055c <__aeabi_dmul>
 8000272:	f000 fc5b 	bl	8000b2c <__aeabi_d2uiz>
 8000276:	4604      	mov	r4, r0
 8000278:	f000 fbde 	bl	8000a38 <__aeabi_ui2d>
 800027c:	4b07      	ldr	r3, [pc, #28]	@ (800029c <__aeabi_f2ulz+0x3c>)
 800027e:	2200      	movs	r2, #0
 8000280:	f000 f96c 	bl	800055c <__aeabi_dmul>
 8000284:	4602      	mov	r2, r0
 8000286:	460b      	mov	r3, r1
 8000288:	4630      	mov	r0, r6
 800028a:	4639      	mov	r1, r7
 800028c:	f000 fa96 	bl	80007bc <__aeabi_dsub>
 8000290:	f000 fc4c 	bl	8000b2c <__aeabi_d2uiz>
 8000294:	4621      	mov	r1, r4
 8000296:	bdd0      	pop	{r4, r6, r7, pc}
 8000298:	3df00000 	.word	0x3df00000
 800029c:	41f00000 	.word	0x41f00000

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_idiv0>:
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop

080007b4 <__aeabi_drsub>:
 80007b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	e002      	b.n	80007c0 <__adddf3>
 80007ba:	bf00      	nop

080007bc <__aeabi_dsub>:
 80007bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080007c0 <__adddf3>:
 80007c0:	b530      	push	{r4, r5, lr}
 80007c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80007c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80007ca:	ea94 0f05 	teq	r4, r5
 80007ce:	bf08      	it	eq
 80007d0:	ea90 0f02 	teqeq	r0, r2
 80007d4:	bf1f      	itttt	ne
 80007d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80007da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80007de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80007e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007e6:	f000 80e2 	beq.w	80009ae <__adddf3+0x1ee>
 80007ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80007ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80007f2:	bfb8      	it	lt
 80007f4:	426d      	neglt	r5, r5
 80007f6:	dd0c      	ble.n	8000812 <__adddf3+0x52>
 80007f8:	442c      	add	r4, r5
 80007fa:	ea80 0202 	eor.w	r2, r0, r2
 80007fe:	ea81 0303 	eor.w	r3, r1, r3
 8000802:	ea82 0000 	eor.w	r0, r2, r0
 8000806:	ea83 0101 	eor.w	r1, r3, r1
 800080a:	ea80 0202 	eor.w	r2, r0, r2
 800080e:	ea81 0303 	eor.w	r3, r1, r3
 8000812:	2d36      	cmp	r5, #54	@ 0x36
 8000814:	bf88      	it	hi
 8000816:	bd30      	pophi	{r4, r5, pc}
 8000818:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800081c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000820:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000824:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000828:	d002      	beq.n	8000830 <__adddf3+0x70>
 800082a:	4240      	negs	r0, r0
 800082c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000830:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000834:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000838:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800083c:	d002      	beq.n	8000844 <__adddf3+0x84>
 800083e:	4252      	negs	r2, r2
 8000840:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000844:	ea94 0f05 	teq	r4, r5
 8000848:	f000 80a7 	beq.w	800099a <__adddf3+0x1da>
 800084c:	f1a4 0401 	sub.w	r4, r4, #1
 8000850:	f1d5 0e20 	rsbs	lr, r5, #32
 8000854:	db0d      	blt.n	8000872 <__adddf3+0xb2>
 8000856:	fa02 fc0e 	lsl.w	ip, r2, lr
 800085a:	fa22 f205 	lsr.w	r2, r2, r5
 800085e:	1880      	adds	r0, r0, r2
 8000860:	f141 0100 	adc.w	r1, r1, #0
 8000864:	fa03 f20e 	lsl.w	r2, r3, lr
 8000868:	1880      	adds	r0, r0, r2
 800086a:	fa43 f305 	asr.w	r3, r3, r5
 800086e:	4159      	adcs	r1, r3
 8000870:	e00e      	b.n	8000890 <__adddf3+0xd0>
 8000872:	f1a5 0520 	sub.w	r5, r5, #32
 8000876:	f10e 0e20 	add.w	lr, lr, #32
 800087a:	2a01      	cmp	r2, #1
 800087c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000880:	bf28      	it	cs
 8000882:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000886:	fa43 f305 	asr.w	r3, r3, r5
 800088a:	18c0      	adds	r0, r0, r3
 800088c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000890:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000894:	d507      	bpl.n	80008a6 <__adddf3+0xe6>
 8000896:	f04f 0e00 	mov.w	lr, #0
 800089a:	f1dc 0c00 	rsbs	ip, ip, #0
 800089e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80008a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80008a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80008aa:	d31b      	bcc.n	80008e4 <__adddf3+0x124>
 80008ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80008b0:	d30c      	bcc.n	80008cc <__adddf3+0x10c>
 80008b2:	0849      	lsrs	r1, r1, #1
 80008b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80008b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80008bc:	f104 0401 	add.w	r4, r4, #1
 80008c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80008c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80008c8:	f080 809a 	bcs.w	8000a00 <__adddf3+0x240>
 80008cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008d0:	bf08      	it	eq
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	ea41 0105 	orr.w	r1, r1, r5
 80008e2:	bd30      	pop	{r4, r5, pc}
 80008e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80008e8:	4140      	adcs	r0, r0
 80008ea:	eb41 0101 	adc.w	r1, r1, r1
 80008ee:	3c01      	subs	r4, #1
 80008f0:	bf28      	it	cs
 80008f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80008f6:	d2e9      	bcs.n	80008cc <__adddf3+0x10c>
 80008f8:	f091 0f00 	teq	r1, #0
 80008fc:	bf04      	itt	eq
 80008fe:	4601      	moveq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	fab1 f381 	clz	r3, r1
 8000906:	bf08      	it	eq
 8000908:	3320      	addeq	r3, #32
 800090a:	f1a3 030b 	sub.w	r3, r3, #11
 800090e:	f1b3 0220 	subs.w	r2, r3, #32
 8000912:	da0c      	bge.n	800092e <__adddf3+0x16e>
 8000914:	320c      	adds	r2, #12
 8000916:	dd08      	ble.n	800092a <__adddf3+0x16a>
 8000918:	f102 0c14 	add.w	ip, r2, #20
 800091c:	f1c2 020c 	rsb	r2, r2, #12
 8000920:	fa01 f00c 	lsl.w	r0, r1, ip
 8000924:	fa21 f102 	lsr.w	r1, r1, r2
 8000928:	e00c      	b.n	8000944 <__adddf3+0x184>
 800092a:	f102 0214 	add.w	r2, r2, #20
 800092e:	bfd8      	it	le
 8000930:	f1c2 0c20 	rsble	ip, r2, #32
 8000934:	fa01 f102 	lsl.w	r1, r1, r2
 8000938:	fa20 fc0c 	lsr.w	ip, r0, ip
 800093c:	bfdc      	itt	le
 800093e:	ea41 010c 	orrle.w	r1, r1, ip
 8000942:	4090      	lslle	r0, r2
 8000944:	1ae4      	subs	r4, r4, r3
 8000946:	bfa2      	ittt	ge
 8000948:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800094c:	4329      	orrge	r1, r5
 800094e:	bd30      	popge	{r4, r5, pc}
 8000950:	ea6f 0404 	mvn.w	r4, r4
 8000954:	3c1f      	subs	r4, #31
 8000956:	da1c      	bge.n	8000992 <__adddf3+0x1d2>
 8000958:	340c      	adds	r4, #12
 800095a:	dc0e      	bgt.n	800097a <__adddf3+0x1ba>
 800095c:	f104 0414 	add.w	r4, r4, #20
 8000960:	f1c4 0220 	rsb	r2, r4, #32
 8000964:	fa20 f004 	lsr.w	r0, r0, r4
 8000968:	fa01 f302 	lsl.w	r3, r1, r2
 800096c:	ea40 0003 	orr.w	r0, r0, r3
 8000970:	fa21 f304 	lsr.w	r3, r1, r4
 8000974:	ea45 0103 	orr.w	r1, r5, r3
 8000978:	bd30      	pop	{r4, r5, pc}
 800097a:	f1c4 040c 	rsb	r4, r4, #12
 800097e:	f1c4 0220 	rsb	r2, r4, #32
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	fa01 f304 	lsl.w	r3, r1, r4
 800098a:	ea40 0003 	orr.w	r0, r0, r3
 800098e:	4629      	mov	r1, r5
 8000990:	bd30      	pop	{r4, r5, pc}
 8000992:	fa21 f004 	lsr.w	r0, r1, r4
 8000996:	4629      	mov	r1, r5
 8000998:	bd30      	pop	{r4, r5, pc}
 800099a:	f094 0f00 	teq	r4, #0
 800099e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80009a2:	bf06      	itte	eq
 80009a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80009a8:	3401      	addeq	r4, #1
 80009aa:	3d01      	subne	r5, #1
 80009ac:	e74e      	b.n	800084c <__adddf3+0x8c>
 80009ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80009b2:	bf18      	it	ne
 80009b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80009b8:	d029      	beq.n	8000a0e <__adddf3+0x24e>
 80009ba:	ea94 0f05 	teq	r4, r5
 80009be:	bf08      	it	eq
 80009c0:	ea90 0f02 	teqeq	r0, r2
 80009c4:	d005      	beq.n	80009d2 <__adddf3+0x212>
 80009c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80009ca:	bf04      	itt	eq
 80009cc:	4619      	moveq	r1, r3
 80009ce:	4610      	moveq	r0, r2
 80009d0:	bd30      	pop	{r4, r5, pc}
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf1e      	ittt	ne
 80009d8:	2100      	movne	r1, #0
 80009da:	2000      	movne	r0, #0
 80009dc:	bd30      	popne	{r4, r5, pc}
 80009de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80009e2:	d105      	bne.n	80009f0 <__adddf3+0x230>
 80009e4:	0040      	lsls	r0, r0, #1
 80009e6:	4149      	adcs	r1, r1
 80009e8:	bf28      	it	cs
 80009ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80009ee:	bd30      	pop	{r4, r5, pc}
 80009f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80009f4:	bf3c      	itt	cc
 80009f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80009fa:	bd30      	popcc	{r4, r5, pc}
 80009fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000a00:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000a04:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000a08:	f04f 0000 	mov.w	r0, #0
 8000a0c:	bd30      	pop	{r4, r5, pc}
 8000a0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a12:	bf1a      	itte	ne
 8000a14:	4619      	movne	r1, r3
 8000a16:	4610      	movne	r0, r2
 8000a18:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000a1c:	bf1c      	itt	ne
 8000a1e:	460b      	movne	r3, r1
 8000a20:	4602      	movne	r2, r0
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	bf06      	itte	eq
 8000a28:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000a2c:	ea91 0f03 	teqeq	r1, r3
 8000a30:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000a34:	bd30      	pop	{r4, r5, pc}
 8000a36:	bf00      	nop

08000a38 <__aeabi_ui2d>:
 8000a38:	f090 0f00 	teq	r0, #0
 8000a3c:	bf04      	itt	eq
 8000a3e:	2100      	moveq	r1, #0
 8000a40:	4770      	bxeq	lr
 8000a42:	b530      	push	{r4, r5, lr}
 8000a44:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000a48:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000a4c:	f04f 0500 	mov.w	r5, #0
 8000a50:	f04f 0100 	mov.w	r1, #0
 8000a54:	e750      	b.n	80008f8 <__adddf3+0x138>
 8000a56:	bf00      	nop

08000a58 <__aeabi_i2d>:
 8000a58:	f090 0f00 	teq	r0, #0
 8000a5c:	bf04      	itt	eq
 8000a5e:	2100      	moveq	r1, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	b530      	push	{r4, r5, lr}
 8000a64:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000a68:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000a6c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000a70:	bf48      	it	mi
 8000a72:	4240      	negmi	r0, r0
 8000a74:	f04f 0100 	mov.w	r1, #0
 8000a78:	e73e      	b.n	80008f8 <__adddf3+0x138>
 8000a7a:	bf00      	nop

08000a7c <__aeabi_f2d>:
 8000a7c:	0042      	lsls	r2, r0, #1
 8000a7e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000a82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a86:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000a8a:	bf1f      	itttt	ne
 8000a8c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000a90:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000a94:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000a98:	4770      	bxne	lr
 8000a9a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000a9e:	bf08      	it	eq
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000aa6:	bf04      	itt	eq
 8000aa8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000aac:	4770      	bxeq	lr
 8000aae:	b530      	push	{r4, r5, lr}
 8000ab0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000ab4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000ab8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000abc:	e71c      	b.n	80008f8 <__adddf3+0x138>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_ul2d>:
 8000ac0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac4:	bf08      	it	eq
 8000ac6:	4770      	bxeq	lr
 8000ac8:	b530      	push	{r4, r5, lr}
 8000aca:	f04f 0500 	mov.w	r5, #0
 8000ace:	e00a      	b.n	8000ae6 <__aeabi_l2d+0x16>

08000ad0 <__aeabi_l2d>:
 8000ad0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad4:	bf08      	it	eq
 8000ad6:	4770      	bxeq	lr
 8000ad8:	b530      	push	{r4, r5, lr}
 8000ada:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000ade:	d502      	bpl.n	8000ae6 <__aeabi_l2d+0x16>
 8000ae0:	4240      	negs	r0, r0
 8000ae2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000aea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000aee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000af2:	f43f aed8 	beq.w	80008a6 <__adddf3+0xe6>
 8000af6:	f04f 0203 	mov.w	r2, #3
 8000afa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000afe:	bf18      	it	ne
 8000b00:	3203      	addne	r2, #3
 8000b02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b06:	bf18      	it	ne
 8000b08:	3203      	addne	r2, #3
 8000b0a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000b0e:	f1c2 0320 	rsb	r3, r2, #32
 8000b12:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b16:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1a:	fa01 fe03 	lsl.w	lr, r1, r3
 8000b1e:	ea40 000e 	orr.w	r0, r0, lr
 8000b22:	fa21 f102 	lsr.w	r1, r1, r2
 8000b26:	4414      	add	r4, r2
 8000b28:	e6bd      	b.n	80008a6 <__adddf3+0xe6>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <disable_interrupts>:
//	{SEN_EN5_GPIO_Port, SEN_EN5_Pin, SEN_INT5_GPIO_Port, SEN_INT5_Pin},
};


static inline void disable_interrupts(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
	__disable_irq();
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <enable_interrupts>:


static inline void enable_interrupts(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000b82:	b662      	cpsie	i
}
 8000b84:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000b86:	f3bf 8f6f 	isb	sy
}
 8000b8a:	bf00      	nop
	__enable_irq();
	__ISB();
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <spi_select>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void spi_select(acc_sensor_id_t sensor_id)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	GPIO_PinState sel0 = GPIO_PIN_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState sel1 = GPIO_PIN_RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState sel2 = GPIO_PIN_RESET;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	737b      	strb	r3, [r7, #13]

	switch (sensor_id)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	2b04      	cmp	r3, #4
 8000bb2:	d81b      	bhi.n	8000bec <spi_select+0x54>
 8000bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8000bbc <spi_select+0x24>)
 8000bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bba:	bf00      	nop
 8000bbc:	08000bed 	.word	0x08000bed
 8000bc0:	08000bd1 	.word	0x08000bd1
 8000bc4:	08000bd7 	.word	0x08000bd7
 8000bc8:	08000bdd 	.word	0x08000bdd
 8000bcc:	08000be7 	.word	0x08000be7
	{
		case 1:
			break;
		case 2:
			sel0 = GPIO_PIN_SET;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
			break;
 8000bd4:	e00b      	b.n	8000bee <spi_select+0x56>
		case 3:
			sel1 = GPIO_PIN_SET;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	73bb      	strb	r3, [r7, #14]
			break;
 8000bda:	e008      	b.n	8000bee <spi_select+0x56>
		case 4:
			sel0 = GPIO_PIN_SET;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
			sel1 = GPIO_PIN_SET;
 8000be0:	2301      	movs	r3, #1
 8000be2:	73bb      	strb	r3, [r7, #14]
			break;
 8000be4:	e003      	b.n	8000bee <spi_select+0x56>
		case 5:
			sel2 = GPIO_PIN_SET;
 8000be6:	2301      	movs	r3, #1
 8000be8:	737b      	strb	r3, [r7, #13]
			break;
 8000bea:	e000      	b.n	8000bee <spi_select+0x56>
		default:
			break;
 8000bec:	bf00      	nop
	}

	HAL_GPIO_WritePin(SPI_SEL0_GPIO_Port, SPI_SEL0_Pin, sel0);
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf8:	f002 fd96 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_SEL1_GPIO_Port, SPI_SEL1_Pin, sel1);
 8000bfc:	7bbb      	ldrb	r3, [r7, #14]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	2102      	movs	r1, #2
 8000c02:	4806      	ldr	r0, [pc, #24]	@ (8000c1c <spi_select+0x84>)
 8000c04:	f002 fd90 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_SEL2_GPIO_Port, SPI_SEL2_Pin, sel2);
 8000c08:	7b7b      	ldrb	r3, [r7, #13]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <spi_select+0x84>)
 8000c10:	f002 fd8a 	bl	8003728 <HAL_GPIO_WritePin>
}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	48000800 	.word	0x48000800

08000c20 <acc_hal_integration_sensor_transfer>:


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af02      	add	r7, sp, #8
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d002      	beq.n	8000c38 <acc_hal_integration_sensor_transfer+0x18>
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2b05      	cmp	r3, #5
 8000c36:	d901      	bls.n	8000c3c <acc_hal_integration_sensor_transfer+0x1c>
	{
		Error_Handler();
 8000c38:	f001 ff02 	bl	8002a40 <Error_Handler>
	}

	spi_select(sensor_id);
 8000c3c:	68f8      	ldr	r0, [r7, #12]
 8000c3e:	f7ff ffab 	bl	8000b98 <spi_select>

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 8000c42:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c46:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(A121_SPI_SS_GPIO_Port, A121_SPI_SS_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2110      	movs	r1, #16
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c50:	f002 fd6a 	bl	8003728 <HAL_GPIO_WritePin>
		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}

#else
	HAL_SPI_TransmitReceive(&A121_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	4806      	ldr	r0, [pc, #24]	@ (8000c7c <acc_hal_integration_sensor_transfer+0x5c>)
 8000c64:	f004 fe8b 	bl	800597e <HAL_SPI_TransmitReceive>
#endif

	HAL_GPIO_WritePin(A121_SPI_SS_GPIO_Port, A121_SPI_SS_Pin, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2110      	movs	r1, #16
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c70:	f002 fd5a 	bl	8003728 <HAL_GPIO_WritePin>
}
 8000c74:	bf00      	nop
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200003c4 	.word	0x200003c4

08000c80 <acc_hal_integration_sensor_supply_on>:


void acc_hal_integration_sensor_supply_on(acc_sensor_id_t sensor_id)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <acc_hal_integration_sensor_supply_on+0x14>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b05      	cmp	r3, #5
 8000c92:	d901      	bls.n	8000c98 <acc_hal_integration_sensor_supply_on+0x18>
	{
		Error_Handler();
 8000c94:	f001 fed4 	bl	8002a40 <Error_Handler>
	}

	// There is no power supply control on the XE121
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <acc_hal_integration_sensor_supply_off>:


void acc_hal_integration_sensor_supply_off(acc_sensor_id_t sensor_id)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <acc_hal_integration_sensor_supply_off+0x14>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b05      	cmp	r3, #5
 8000cb2:	d901      	bls.n	8000cb8 <acc_hal_integration_sensor_supply_off+0x18>
	{
		Error_Handler();
 8000cb4:	f001 fec4 	bl	8002a40 <Error_Handler>
	}

	// There is no power supply control on the XE121
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <acc_hal_integration_sensor_enable>:


void acc_hal_integration_sensor_enable(acc_sensor_id_t sensor_id)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d002      	beq.n	8000cd4 <acc_hal_integration_sensor_enable+0x14>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b05      	cmp	r3, #5
 8000cd2:	d901      	bls.n	8000cd8 <acc_hal_integration_sensor_enable+0x18>
	{
		Error_Handler();
 8000cd4:	f001 feb4 	bl	8002a40 <Error_Handler>
	}

	const acc_sensor_info_t *sensor_info = &sensor_infos[sensor_id - 1];
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <acc_hal_integration_sensor_enable+0x48>)
 8000ce0:	4413      	add	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(sensor_info->en_port, sensor_info->en_pin_mask, GPIO_PIN_SET);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6818      	ldr	r0, [r3, #0]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f002 fd19 	bl	8003728 <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal has time to stabilize
	acc_integration_sleep_us(2000);
 8000cf6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000cfa:	f000 f91d 	bl	8000f38 <acc_integration_sleep_us>
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	0801282c 	.word	0x0801282c

08000d0c <acc_hal_integration_sensor_disable>:


void acc_hal_integration_sensor_disable(acc_sensor_id_t sensor_id)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <acc_hal_integration_sensor_disable+0x14>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b05      	cmp	r3, #5
 8000d1e:	d901      	bls.n	8000d24 <acc_hal_integration_sensor_disable+0x18>
	{
		Error_Handler();
 8000d20:	f001 fe8e 	bl	8002a40 <Error_Handler>
	}

	const acc_sensor_info_t *sensor_info = &sensor_infos[sensor_id - 1];
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <acc_hal_integration_sensor_disable+0x48>)
 8000d2c:	4413      	add	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(sensor_info->en_port, sensor_info->en_pin_mask, GPIO_PIN_RESET);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6818      	ldr	r0, [r3, #0]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f002 fcf3 	bl	8003728 <HAL_GPIO_WritePin>

	// Wait after disable to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	acc_integration_sleep_us(2000);
 8000d42:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d46:	f000 f8f7 	bl	8000f38 <acc_integration_sleep_us>
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	0801282c 	.word	0x0801282c

08000d58 <acc_hal_integration_wait_for_sensor_interrupt>:


bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
	bool status = false;
 8000d62:	2300      	movs	r3, #0
 8000d64:	77fb      	strb	r3, [r7, #31]

	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d002      	beq.n	8000d72 <acc_hal_integration_wait_for_sensor_interrupt+0x1a>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b05      	cmp	r3, #5
 8000d70:	d901      	bls.n	8000d76 <acc_hal_integration_wait_for_sensor_interrupt+0x1e>
	{
		Error_Handler();
 8000d72:	f001 fe65 	bl	8002a40 <Error_Handler>
	}

	const acc_sensor_info_t *sensor_info  = &sensor_infos[sensor_id - 1];
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	011b      	lsls	r3, r3, #4
 8000d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8000df8 <acc_hal_integration_wait_for_sensor_interrupt+0xa0>)
 8000d7e:	4413      	add	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
	GPIO_TypeDef            *int_port     = sensor_info->int_port;
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	617b      	str	r3, [r7, #20]
	uint32_t                int_pin_mask  = sensor_info->int_pin_mask;
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	613b      	str	r3, [r7, #16]
	const uint32_t          wait_begin_ms = HAL_GetTick();
 8000d8e:	f002 f985 	bl	800309c <HAL_GetTick>
 8000d92:	60f8      	str	r0, [r7, #12]

	while ((HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET) &&
 8000d94:	e00d      	b.n	8000db2 <acc_hal_integration_wait_for_sensor_interrupt+0x5a>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 8000d96:	f7ff fee9 	bl	8000b6c <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET)
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	4619      	mov	r1, r3
 8000da0:	6978      	ldr	r0, [r7, #20]
 8000da2:	f002 fca9 	bl	80036f8 <HAL_GPIO_ReadPin>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d000      	beq.n	8000dae <acc_hal_integration_wait_for_sensor_interrupt+0x56>
		{
			__WFI();
 8000dac:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 8000dae:	f7ff fee6 	bl	8000b7e <enable_interrupts>
	while ((HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET) &&
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	4619      	mov	r1, r3
 8000db8:	6978      	ldr	r0, [r7, #20]
 8000dba:	f002 fc9d 	bl	80036f8 <HAL_GPIO_ReadPin>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d007      	beq.n	8000dd4 <acc_hal_integration_wait_for_sensor_interrupt+0x7c>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8000dc4:	f002 f96a 	bl	800309c <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET) &&
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d8e0      	bhi.n	8000d96 <acc_hal_integration_wait_for_sensor_interrupt+0x3e>
	}

	status = HAL_GPIO_ReadPin(int_port, int_pin_mask) == GPIO_PIN_SET;
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	4619      	mov	r1, r3
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f002 fc8c 	bl	80036f8 <HAL_GPIO_ReadPin>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	bf0c      	ite	eq
 8000de6:	2301      	moveq	r3, #1
 8000de8:	2300      	movne	r3, #0
 8000dea:	77fb      	strb	r3, [r7, #31]

	return status;
 8000dec:	7ffb      	ldrb	r3, [r7, #31]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3720      	adds	r7, #32
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	0801282c 	.word	0x0801282c

08000dfc <acc_hal_rss_integration_get_implementation>:
	return SENSOR_COUNT;
}


const acc_hal_a121_t *acc_hal_rss_integration_get_implementation(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
		.log      = acc_integration_log,

		.optimization.transfer16 = NULL,
	};

	return &val;
 8000e00:	4b02      	ldr	r3, [pc, #8]	@ (8000e0c <acc_hal_rss_integration_get_implementation+0x10>)
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	0801287c 	.word	0x0801287c

08000e10 <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 8000e10:	b40c      	push	{r2, r3}
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b0b4      	sub	sp, #208	@ 0xd0
 8000e16:	af04      	add	r7, sp, #16
 8000e18:	4603      	mov	r3, r0
 8000e1a:	6039      	str	r1, [r7, #0]
 8000e1c:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 8000e1e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e22:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8000e24:	f107 000c 	add.w	r0, r7, #12
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8000e2e:	2196      	movs	r1, #150	@ 0x96
 8000e30:	f00f fe82 	bl	8010b38 <vsniprintf>
 8000e34:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 8000e38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000e3c:	2b95      	cmp	r3, #149	@ 0x95
 8000e3e:	dd0b      	ble.n	8000e58 <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 8000e40:	232e      	movs	r3, #46	@ 0x2e
 8000e42:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 8000e46:	232e      	movs	r3, #46	@ 0x2e
 8000e48:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 8000e4c:	232e      	movs	r3, #46	@ 0x2e
 8000e4e:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 8000e58:	f000 f882 	bl	8000f60 <acc_integration_get_time>
 8000e5c:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 8000e60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000e64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 8000e68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8000f20 <acc_integration_log+0x110>)
 8000e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e72:	0d5b      	lsrs	r3, r3, #21
 8000e74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 8000e78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e7c:	4a29      	ldr	r2, [pc, #164]	@ (8000f24 <acc_integration_log+0x114>)
 8000e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e82:	0b9a      	lsrs	r2, r3, #14
 8000e84:	4b28      	ldr	r3, [pc, #160]	@ (8000f28 <acc_integration_log+0x118>)
 8000e86:	fba3 1302 	umull	r1, r3, r3, r2
 8000e8a:	0959      	lsrs	r1, r3, #5
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	011b      	lsls	r3, r3, #4
 8000e90:	1a5b      	subs	r3, r3, r1
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 8000e9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e9e:	4a23      	ldr	r2, [pc, #140]	@ (8000f2c <acc_integration_log+0x11c>)
 8000ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea4:	099a      	lsrs	r2, r3, #6
 8000ea6:	4b20      	ldr	r3, [pc, #128]	@ (8000f28 <acc_integration_log+0x118>)
 8000ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8000eac:	0959      	lsrs	r1, r3, #5
 8000eae:	460b      	mov	r3, r1
 8000eb0:	011b      	lsls	r3, r3, #4
 8000eb2:	1a5b      	subs	r3, r3, r1
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	unsigned int milliseconds = timestamp % 1000;
 8000ebc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f2c <acc_integration_log+0x11c>)
 8000ec2:	fba2 1203 	umull	r1, r2, r2, r3
 8000ec6:	0992      	lsrs	r2, r2, #6
 8000ec8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ecc:	fb01 f202 	mul.w	r2, r1, r2
 8000ed0:	1a9b      	subs	r3, r3, r2
 8000ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d803      	bhi.n	8000ee4 <acc_integration_log+0xd4>
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	4a14      	ldr	r2, [pc, #80]	@ (8000f30 <acc_integration_log+0x120>)
 8000ee0:	5cd3      	ldrb	r3, [r2, r3]
 8000ee2:	e000      	b.n	8000ee6 <acc_integration_log+0xd6>
 8000ee4:	233f      	movs	r3, #63	@ 0x3f
 8000ee6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 8000eea:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8000eee:	f107 020c 	add.w	r2, r7, #12
 8000ef2:	9203      	str	r2, [sp, #12]
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	9202      	str	r2, [sp, #8]
 8000ef8:	9301      	str	r3, [sp, #4]
 8000efa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8000f08:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8000f0c:	4809      	ldr	r0, [pc, #36]	@ (8000f34 <acc_integration_log+0x124>)
 8000f0e:	f00f fd35 	bl	801097c <iprintf>

	va_end(ap);
}
 8000f12:	bf00      	nop
 8000f14:	37c0      	adds	r7, #192	@ 0xc0
 8000f16:	46bd      	mov	sp, r7
 8000f18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f1c:	b002      	add	sp, #8
 8000f1e:	4770      	bx	lr
 8000f20:	95217cb1 	.word	0x95217cb1
 8000f24:	45e7b273 	.word	0x45e7b273
 8000f28:	88888889 	.word	0x88888889
 8000f2c:	10624dd3 	.word	0x10624dd3
 8000f30:	08012514 	.word	0x08012514
 8000f34:	080124f0 	.word	0x080124f0

08000f38 <acc_integration_sleep_us>:
	HAL_Delay(time_msec);
}


void acc_integration_sleep_us(uint32_t time_usec)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	uint32_t time_msec = (time_usec / 1000);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a06      	ldr	r2, [pc, #24]	@ (8000f5c <acc_integration_sleep_us+0x24>)
 8000f44:	fba2 2303 	umull	r2, r3, r2, r3
 8000f48:	099b      	lsrs	r3, r3, #6
 8000f4a:	60fb      	str	r3, [r7, #12]

	HAL_Delay(time_msec);
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f000 fa34 	bl	80013ba <HAL_Delay>
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	10624dd3 	.word	0x10624dd3

08000f60 <acc_integration_get_time>:


uint32_t acc_integration_get_time(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000f64:	f002 f89a 	bl	800309c <HAL_GetTick>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <acc_integration_mem_alloc>:


void *acc_integration_mem_alloc(size_t size)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
	return malloc(size);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f00f fb80 	bl	801067c <malloc>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <acc_integration_mem_free>:
	return calloc(nmemb, size);
}


void acc_integration_mem_free(void *ptr)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
	free(ptr);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f00f fb7c 	bl	801068c <free>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000f9c:	b5b0      	push	{r4, r5, r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <APPD_EnableCPU2+0x34>)
 8000fa4:	1d3c      	adds	r4, r7, #4
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fb0:	c403      	stmia	r4!, {r0, r1}
 8000fb2:	8022      	strh	r2, [r4, #0]
 8000fb4:	3402      	adds	r4, #2
 8000fb6:	0c13      	lsrs	r3, r2, #16
 8000fb8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000fba:	f007 ff5b 	bl	8008e74 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f007 f9ec 	bl	800839e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000fc6:	bf00      	nop
}
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	0801251c 	.word	0x0801251c

08000fd4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000fdc:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <LL_C2_PWR_SetPowerMode+0x28>)
 8000fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe2:	f023 0207 	bic.w	r2, r3, #7
 8000fe6:	4905      	ldr	r1, [pc, #20]	@ (8000ffc <LL_C2_PWR_SetPowerMode+0x28>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	58000400 	.word	0x58000400

08001000 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <LL_EXTI_EnableIT_32_63+0x24>)
 800100a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800100e:	4905      	ldr	r1, [pc, #20]	@ (8001024 <LL_EXTI_EnableIT_32_63+0x24>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4313      	orrs	r3, r2
 8001014:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	58000800 	.word	0x58000800

08001028 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001034:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001036:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800103a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800103e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001042:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800104e:	4313      	orrs	r3, r2
 8001050:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	cafecafe 	.word	0xcafecafe

08001064 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800106c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001076:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4313      	orrs	r3, r2
 800107e:	608b      	str	r3, [r1, #8]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001090:	4b04      	ldr	r3, [pc, #16]	@ (80010a4 <LL_DBGMCU_GetDeviceID+0x18>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e0042000 	.word	0xe0042000

080010a8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80010ac:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <LL_DBGMCU_GetRevisionID+0x18>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	0c1b      	lsrs	r3, r3, #16
 80010b2:	b29b      	uxth	r3, r3
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e0042000 	.word	0xe0042000

080010c4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80010c8:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <LL_LPM_EnableSleep+0x1c>)
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <LL_LPM_EnableSleep+0x1c>)
 80010ce:	f023 0304 	bic.w	r3, r3, #4
 80010d2:	6113      	str	r3, [r2, #16]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	22ff      	movs	r2, #255	@ 0xff
 80010f0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	22ca      	movs	r2, #202	@ 0xca
 800110a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2253      	movs	r2, #83	@ 0x53
 8001110:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f023 0207 	bic.w	r2, r3, #7
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	609a      	str	r2, [r3, #8]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <MX_APPE_Config+0x18>)
 800114a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800114e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001150:	f000 f824 	bl	800119c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001154:	f000 f829 	bl	80011aa <Config_HSE>

  return;
 8001158:	bf00      	nop
}
 800115a:	bd80      	pop	{r7, pc}
 800115c:	58004000 	.word	0x58004000

08001160 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001164:	f000 f835 	bl	80011d2 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001168:	f000 f84e 	bl	8001208 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800116c:	4903      	ldr	r1, [pc, #12]	@ (800117c <MX_APPE_Init+0x1c>)
 800116e:	2000      	movs	r0, #0
 8001170:	f001 f846 	bl	8002200 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001174:	f000 f856 	bl	8001224 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001178:	bf00      	nop
}
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200003a0 	.word	0x200003a0

08001180 <Init_Smps>:

void Init_Smps(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001184:	bf00      	nop
}
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <Init_Exti>:

void Init_Exti(void)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001192:	2050      	movs	r0, #80	@ 0x50
 8001194:	f7ff ff34 	bl	8001000 <LL_EXTI_EnableIT_32_63>

  return;
 8001198:	bf00      	nop
}
 800119a:	bd80      	pop	{r7, pc}

0800119c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80011a0:	bf00      	nop
}
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f007 feeb 	bl	8008f8c <OTP_Read>
 80011b6:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d005      	beq.n	80011ca <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	799b      	ldrb	r3, [r3, #6]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff30 	bl	8001028 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
}
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <System_Init>:

static void System_Init(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
  Init_Smps();
 80011d6:	f7ff ffd3 	bl	8001180 <Init_Smps>

  Init_Exti();
 80011da:	f7ff ffd8 	bl	800118e <Init_Exti>

  Init_Rtc();
 80011de:	f000 f803 	bl	80011e8 <Init_Rtc>

  return;
 80011e2:	bf00      	nop
}
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <Init_Rtc>:

static void Init_Rtc(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80011ec:	4805      	ldr	r0, [pc, #20]	@ (8001204 <Init_Rtc+0x1c>)
 80011ee:	f7ff ff86 	bl	80010fe <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80011f2:	2100      	movs	r1, #0
 80011f4:	4803      	ldr	r0, [pc, #12]	@ (8001204 <Init_Rtc+0x1c>)
 80011f6:	f7ff ff92 	bl	800111e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80011fa:	4802      	ldr	r0, [pc, #8]	@ (8001204 <Init_Rtc+0x1c>)
 80011fc:	f7ff ff72 	bl	80010e4 <LL_RTC_EnableWriteProtection>

  return;
 8001200:	bf00      	nop
}
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40002800 	.word	0x40002800

08001208 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800120c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001210:	f7ff ff28 	bl	8001064 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001214:	f008 ff5e 	bl	800a0d4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001218:	2004      	movs	r0, #4
 800121a:	f7ff fedb 	bl	8000fd4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800121e:	bf00      	nop
}
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800122a:	f007 fc6d 	bl	8008b08 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800122e:	4a11      	ldr	r2, [pc, #68]	@ (8001274 <appe_Tl_Init+0x50>)
 8001230:	2100      	movs	r1, #0
 8001232:	2008      	movs	r0, #8
 8001234:	f009 f88c 	bl	800a350 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <appe_Tl_Init+0x54>)
 800123a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <appe_Tl_Init+0x58>)
 800123e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001240:	463b      	mov	r3, r7
 8001242:	4619      	mov	r1, r3
 8001244:	480e      	ldr	r0, [pc, #56]	@ (8001280 <appe_Tl_Init+0x5c>)
 8001246:	f007 fb21 	bl	800888c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <appe_Tl_Init+0x60>)
 800124c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <appe_Tl_Init+0x64>)
 8001250:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <appe_Tl_Init+0x68>)
 8001254:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001256:	f240 533c 	movw	r3, #1340	@ 0x53c
 800125a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	4618      	mov	r0, r3
 8001262:	f007 fd93 	bl	8008d8c <TL_MM_Init>

  TL_Enable();
 8001266:	f007 fc49 	bl	8008afc <TL_Enable>

  return;
 800126a:	bf00      	nop
}
 800126c:	3720      	adds	r7, #32
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	080088c5 	.word	0x080088c5
 8001278:	20030734 	.word	0x20030734
 800127c:	08001291 	.word	0x08001291
 8001280:	080012a9 	.word	0x080012a9
 8001284:	2003094c 	.word	0x2003094c
 8001288:	20030840 	.word	0x20030840
 800128c:	200301f8 	.word	0x200301f8

08001290 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800129a:	bf00      	nop
}
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	330b      	adds	r3, #11
 80012b6:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80012c2:	2b07      	cmp	r3, #7
 80012c4:	d81f      	bhi.n	8001306 <APPE_SysUserEvtRx+0x5e>
 80012c6:	a201      	add	r2, pc, #4	@ (adr r2, 80012cc <APPE_SysUserEvtRx+0x24>)
 80012c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012cc:	080012ed 	.word	0x080012ed
 80012d0:	080012ff 	.word	0x080012ff
 80012d4:	08001307 	.word	0x08001307
 80012d8:	08001307 	.word	0x08001307
 80012dc:	08001307 	.word	0x08001307
 80012e0:	08001307 	.word	0x08001307
 80012e4:	08001307 	.word	0x08001307
 80012e8:	08001307 	.word	0x08001307
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4618      	mov	r0, r3
 80012f2:	f007 f881 	bl	80083f8 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f81b 	bl	8001332 <APPE_SysEvtReadyProcessing>
    break;
 80012fc:	e004      	b.n	8001308 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f806 	bl	8001310 <APPE_SysEvtError>
    break;
 8001304:	e000      	b.n	8001308 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8001306:	bf00      	nop
  }

  return;
 8001308:	bf00      	nop
}
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	330b      	adds	r3, #11
 800131e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	3302      	adds	r3, #2
 8001324:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001326:	bf00      	nop
}
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b08a      	sub	sp, #40	@ 0x28
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	330b      	adds	r3, #11
 8001356:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	3302      	adds	r3, #2
 800135c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d11d      	bne.n	80013a2 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001366:	f7ff fe19 	bl	8000f9c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800136a:	230f      	movs	r3, #15
 800136c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800136e:	237f      	movs	r3, #127	@ 0x7f
 8001370:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001372:	f7ff fe99 	bl	80010a8 <LL_DBGMCU_GetRevisionID>
 8001376:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8001378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137a:	b29b      	uxth	r3, r3
 800137c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800137e:	f7ff fe85 	bl	800108c <LL_DBGMCU_GetDeviceID>
 8001382:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	b29b      	uxth	r3, r3
 8001388:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	4618      	mov	r0, r3
 8001390:	f007 f81c 	bl	80083cc <SHCI_C2_Config>

    APP_BLE_Init();
 8001394:	f007 ff04 	bl	80091a0 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001398:	2100      	movs	r1, #0
 800139a:	2001      	movs	r0, #1
 800139c:	f008 feac 	bl	800a0f8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80013a0:	e007      	b.n	80013b2 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d103      	bne.n	80013b2 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
  return;
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
}
 80013b4:	3728      	adds	r7, #40	@ 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c2:	f001 fe6b 	bl	800309c <HAL_GetTick>
 80013c6:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d2:	d00a      	beq.n	80013ea <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80013d4:	f001 fe7a 	bl	80030cc <HAL_GetTickFreq>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013e2:	e002      	b.n	80013ea <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80013e4:	f7ff fe6e 	bl	80010c4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80013e8:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80013ea:	f001 fe57 	bl	800309c <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d8f4      	bhi.n	80013e4 <HAL_Delay+0x2a>
  }
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f008 fea4 	bl	800a158 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001418:	bf00      	nop
}
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f008 fe92 	bl	800a158 <UTIL_SEQ_Run>
  return;
 8001434:	bf00      	nop
}
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001444:	2100      	movs	r1, #0
 8001446:	2008      	movs	r0, #8
 8001448:	f008 ffa4 	bl	800a394 <UTIL_SEQ_SetTask>
  return;
 800144c:	bf00      	nop
}
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800145c:	2002      	movs	r0, #2
 800145e:	f009 f805 	bl	800a46c <UTIL_SEQ_SetEvt>
  return;
 8001462:	bf00      	nop
}
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001472:	2002      	movs	r0, #2
 8001474:	f009 f81a 	bl	800a4ac <UTIL_SEQ_WaitEvt>
  return;
 8001478:	bf00      	nop
}
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <acc_example_service_init>:

bool acc_example_service_init();
int acc_example_service(int argc, uint8_t argv[]);

bool acc_example_service_init()
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
    const acc_hal_a121_t *hal = acc_hal_rss_integration_get_implementation();
 8001486:	f7ff fcb9 	bl	8000dfc <acc_hal_rss_integration_get_implementation>
 800148a:	6078      	str	r0, [r7, #4]

    if (!acc_rss_hal_register(hal))
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f009 f89d 	bl	800a5cc <acc_rss_hal_register>
 8001492:	4603      	mov	r3, r0
 8001494:	f083 0301 	eor.w	r3, r3, #1
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <acc_example_service_init+0x22>
    {
        return false;
 800149e:	2300      	movs	r3, #0
 80014a0:	e08a      	b.n	80015b8 <acc_example_service_init+0x138>
    }

    config = acc_config_create();
 80014a2:	f009 fa7b 	bl	800a99c <acc_config_create>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a45      	ldr	r2, [pc, #276]	@ (80015c0 <acc_example_service_init+0x140>)
 80014aa:	6013      	str	r3, [r2, #0]
    if (config == NULL)
 80014ac:	4b44      	ldr	r3, [pc, #272]	@ (80015c0 <acc_example_service_init+0x140>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d106      	bne.n	80014c2 <acc_example_service_init+0x42>
    {
        printf("acc_config_create() failed\n");
 80014b4:	4843      	ldr	r0, [pc, #268]	@ (80015c4 <acc_example_service_init+0x144>)
 80014b6:	f00f fac9 	bl	8010a4c <puts>
        cleanup();
 80014ba:	f000 fa45 	bl	8001948 <cleanup>
        return false;
 80014be:	2300      	movs	r3, #0
 80014c0:	e07a      	b.n	80015b8 <acc_example_service_init+0x138>
    }

    set_config(config);
 80014c2:	4b3f      	ldr	r3, [pc, #252]	@ (80015c0 <acc_example_service_init+0x140>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f992 	bl	80017f0 <set_config>

    // Print the configuration
    acc_config_log(config);
 80014cc:	4b3c      	ldr	r3, [pc, #240]	@ (80015c0 <acc_example_service_init+0x140>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f009 f8a9 	bl	800a628 <acc_config_log>

    processing = acc_processing_create(config, &proc_meta);
 80014d6:	4b3a      	ldr	r3, [pc, #232]	@ (80015c0 <acc_example_service_init+0x140>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	493b      	ldr	r1, [pc, #236]	@ (80015c8 <acc_example_service_init+0x148>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f009 fc77 	bl	800add0 <acc_processing_create>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4a39      	ldr	r2, [pc, #228]	@ (80015cc <acc_example_service_init+0x14c>)
 80014e6:	6013      	str	r3, [r2, #0]
    if (processing == NULL)
 80014e8:	4b38      	ldr	r3, [pc, #224]	@ (80015cc <acc_example_service_init+0x14c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d106      	bne.n	80014fe <acc_example_service_init+0x7e>
    {
        printf("acc_processing_create() failed\n");
 80014f0:	4837      	ldr	r0, [pc, #220]	@ (80015d0 <acc_example_service_init+0x150>)
 80014f2:	f00f faab 	bl	8010a4c <puts>
        cleanup();
 80014f6:	f000 fa27 	bl	8001948 <cleanup>
        return false;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e05c      	b.n	80015b8 <acc_example_service_init+0x138>
    }

    if (!acc_rss_get_buffer_size(config, &buffer_size))
 80014fe:	4b30      	ldr	r3, [pc, #192]	@ (80015c0 <acc_example_service_init+0x140>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4934      	ldr	r1, [pc, #208]	@ (80015d4 <acc_example_service_init+0x154>)
 8001504:	4618      	mov	r0, r3
 8001506:	f009 f865 	bl	800a5d4 <acc_rss_get_buffer_size>
 800150a:	4603      	mov	r3, r0
 800150c:	f083 0301 	eor.w	r3, r3, #1
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d006      	beq.n	8001524 <acc_example_service_init+0xa4>
    {
        printf("acc_rss_get_buffer_size() failed\n");
 8001516:	4830      	ldr	r0, [pc, #192]	@ (80015d8 <acc_example_service_init+0x158>)
 8001518:	f00f fa98 	bl	8010a4c <puts>
        cleanup();
 800151c:	f000 fa14 	bl	8001948 <cleanup>
        return false;
 8001520:	2300      	movs	r3, #0
 8001522:	e049      	b.n	80015b8 <acc_example_service_init+0x138>
    }

    buffer = acc_integration_mem_alloc(buffer_size);
 8001524:	4b2b      	ldr	r3, [pc, #172]	@ (80015d4 <acc_example_service_init+0x154>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fd20 	bl	8000f6e <acc_integration_mem_alloc>
 800152e:	4603      	mov	r3, r0
 8001530:	4a2a      	ldr	r2, [pc, #168]	@ (80015dc <acc_example_service_init+0x15c>)
 8001532:	6013      	str	r3, [r2, #0]
    if (buffer == NULL)
 8001534:	4b29      	ldr	r3, [pc, #164]	@ (80015dc <acc_example_service_init+0x15c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d106      	bne.n	800154a <acc_example_service_init+0xca>
    {
        printf("Buffer allocation failed\n");
 800153c:	4828      	ldr	r0, [pc, #160]	@ (80015e0 <acc_example_service_init+0x160>)
 800153e:	f00f fa85 	bl	8010a4c <puts>
        cleanup();
 8001542:	f000 fa01 	bl	8001948 <cleanup>
        return false;
 8001546:	2300      	movs	r3, #0
 8001548:	e036      	b.n	80015b8 <acc_example_service_init+0x138>
    }

    acc_hal_integration_sensor_supply_on(SENSOR_ID);
 800154a:	2002      	movs	r0, #2
 800154c:	f7ff fb98 	bl	8000c80 <acc_hal_integration_sensor_supply_on>
    acc_hal_integration_sensor_enable(SENSOR_ID);
 8001550:	2002      	movs	r0, #2
 8001552:	f7ff fbb5 	bl	8000cc0 <acc_hal_integration_sensor_enable>

    sensor = acc_sensor_create(SENSOR_ID);
 8001556:	2002      	movs	r0, #2
 8001558:	f009 fcce 	bl	800aef8 <acc_sensor_create>
 800155c:	4603      	mov	r3, r0
 800155e:	4a21      	ldr	r2, [pc, #132]	@ (80015e4 <acc_example_service_init+0x164>)
 8001560:	6013      	str	r3, [r2, #0]
    if (sensor == NULL)
 8001562:	4b20      	ldr	r3, [pc, #128]	@ (80015e4 <acc_example_service_init+0x164>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d106      	bne.n	8001578 <acc_example_service_init+0xf8>
    {
        printf("acc_sensor_create() failed\n");
 800156a:	481f      	ldr	r0, [pc, #124]	@ (80015e8 <acc_example_service_init+0x168>)
 800156c:	f00f fa6e 	bl	8010a4c <puts>
        cleanup();
 8001570:	f000 f9ea 	bl	8001948 <cleanup>
        return false;
 8001574:	2300      	movs	r3, #0
 8001576:	e01f      	b.n	80015b8 <acc_example_service_init+0x138>
    }

    if (!do_sensor_calibration_and_prepare(sensor, config, buffer, buffer_size))
 8001578:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <acc_example_service_init+0x164>)
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <acc_example_service_init+0x140>)
 800157e:	6819      	ldr	r1, [r3, #0]
 8001580:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <acc_example_service_init+0x15c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <acc_example_service_init+0x154>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f000 f96a 	bl	8001860 <do_sensor_calibration_and_prepare>
 800158c:	4603      	mov	r3, r0
 800158e:	f083 0301 	eor.w	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00b      	beq.n	80015b0 <acc_example_service_init+0x130>
    {
        printf("do_sensor_calibration_and_prepare() failed\n");
 8001598:	4814      	ldr	r0, [pc, #80]	@ (80015ec <acc_example_service_init+0x16c>)
 800159a:	f00f fa57 	bl	8010a4c <puts>
        acc_sensor_status(sensor);
 800159e:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <acc_example_service_init+0x164>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f009 fde2 	bl	800b16c <acc_sensor_status>
        cleanup();
 80015a8:	f000 f9ce 	bl	8001948 <cleanup>
        return false;
 80015ac:	2300      	movs	r3, #0
 80015ae:	e003      	b.n	80015b8 <acc_example_service_init+0x138>
    }

    is_initialized = true; // Mark as initialized
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <acc_example_service_init+0x170>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	701a      	strb	r2, [r3, #0]
    return true;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000290 	.word	0x20000290
 80015c4:	08012538 	.word	0x08012538
 80015c8:	200002a4 	.word	0x200002a4
 80015cc:	20000294 	.word	0x20000294
 80015d0:	08012554 	.word	0x08012554
 80015d4:	200002a0 	.word	0x200002a0
 80015d8:	08012574 	.word	0x08012574
 80015dc:	2000029c 	.word	0x2000029c
 80015e0:	08012598 	.word	0x08012598
 80015e4:	20000298 	.word	0x20000298
 80015e8:	080125b4 	.word	0x080125b4
 80015ec:	080125d0 	.word	0x080125d0
 80015f0:	200002c0 	.word	0x200002c0

080015f4 <acc_example_service>:

int acc_example_service(int argc, uint8_t argv[])
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
     //Initialize on first run
    if (!is_initialized)
 80015fe:	4b6e      	ldr	r3, [pc, #440]	@ (80017b8 <acc_example_service+0x1c4>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	f083 0301 	eor.w	r3, r3, #1
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d009      	beq.n	8001620 <acc_example_service+0x2c>
    {
        if (!acc_example_service_init())
 800160c:	f7ff ff38 	bl	8001480 <acc_example_service_init>
 8001610:	4603      	mov	r3, r0
 8001612:	f083 0301 	eor.w	r3, r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <acc_example_service+0x2c>
        {
            return EXIT_FAILURE;
 800161c:	2301      	movs	r3, #1
 800161e:	e0c7      	b.n	80017b0 <acc_example_service+0x1bc>
        }
    }

    acc_processing_result_t proc_result;

    if (!acc_sensor_measure(sensor))
 8001620:	4b66      	ldr	r3, [pc, #408]	@ (80017bc <acc_example_service+0x1c8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f009 fd39 	bl	800b09c <acc_sensor_measure>
 800162a:	4603      	mov	r3, r0
 800162c:	f083 0301 	eor.w	r3, r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00b      	beq.n	800164e <acc_example_service+0x5a>
    {
        printf("acc_sensor_measure failed\n");
 8001636:	4862      	ldr	r0, [pc, #392]	@ (80017c0 <acc_example_service+0x1cc>)
 8001638:	f00f fa08 	bl	8010a4c <puts>
        acc_sensor_status(sensor);
 800163c:	4b5f      	ldr	r3, [pc, #380]	@ (80017bc <acc_example_service+0x1c8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f009 fd93 	bl	800b16c <acc_sensor_status>
        cleanup();
 8001646:	f000 f97f 	bl	8001948 <cleanup>
        return EXIT_FAILURE;
 800164a:	2301      	movs	r3, #1
 800164c:	e0b0      	b.n	80017b0 <acc_example_service+0x1bc>
    }

    if (!acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID, SENSOR_TIMEOUT_MS))
 800164e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001652:	2002      	movs	r0, #2
 8001654:	f7ff fb80 	bl	8000d58 <acc_hal_integration_wait_for_sensor_interrupt>
 8001658:	4603      	mov	r3, r0
 800165a:	f083 0301 	eor.w	r3, r3, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00b      	beq.n	800167c <acc_example_service+0x88>
    {
        printf("Sensor interrupt timeout\n");
 8001664:	4857      	ldr	r0, [pc, #348]	@ (80017c4 <acc_example_service+0x1d0>)
 8001666:	f00f f9f1 	bl	8010a4c <puts>
        acc_sensor_status(sensor);
 800166a:	4b54      	ldr	r3, [pc, #336]	@ (80017bc <acc_example_service+0x1c8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f009 fd7c 	bl	800b16c <acc_sensor_status>
        cleanup();
 8001674:	f000 f968 	bl	8001948 <cleanup>
        return EXIT_FAILURE;
 8001678:	2301      	movs	r3, #1
 800167a:	e099      	b.n	80017b0 <acc_example_service+0x1bc>
    }

    if (!acc_sensor_read(sensor, buffer, buffer_size))
 800167c:	4b4f      	ldr	r3, [pc, #316]	@ (80017bc <acc_example_service+0x1c8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a51      	ldr	r2, [pc, #324]	@ (80017c8 <acc_example_service+0x1d4>)
 8001682:	6811      	ldr	r1, [r2, #0]
 8001684:	4a51      	ldr	r2, [pc, #324]	@ (80017cc <acc_example_service+0x1d8>)
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f009 fd2f 	bl	800b0ec <acc_sensor_read>
 800168e:	4603      	mov	r3, r0
 8001690:	f083 0301 	eor.w	r3, r3, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00b      	beq.n	80016b2 <acc_example_service+0xbe>
    {
        printf("acc_sensor_read failed\n");
 800169a:	484d      	ldr	r0, [pc, #308]	@ (80017d0 <acc_example_service+0x1dc>)
 800169c:	f00f f9d6 	bl	8010a4c <puts>
        acc_sensor_status(sensor);
 80016a0:	4b46      	ldr	r3, [pc, #280]	@ (80017bc <acc_example_service+0x1c8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f009 fd61 	bl	800b16c <acc_sensor_status>
        cleanup();
 80016aa:	f000 f94d 	bl	8001948 <cleanup>
        return EXIT_FAILURE;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e07e      	b.n	80017b0 <acc_example_service+0x1bc>
    }

    acc_processing_execute(processing, buffer, &proc_result);
 80016b2:	4b48      	ldr	r3, [pc, #288]	@ (80017d4 <acc_example_service+0x1e0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a44      	ldr	r2, [pc, #272]	@ (80017c8 <acc_example_service+0x1d4>)
 80016b8:	6811      	ldr	r1, [r2, #0]
 80016ba:	f107 0208 	add.w	r2, r7, #8
 80016be:	4618      	mov	r0, r3
 80016c0:	f009 fb26 	bl	800ad10 <acc_processing_execute>

    if (proc_result.calibration_needed)
 80016c4:	7abb      	ldrb	r3, [r7, #10]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d025      	beq.n	8001716 <acc_example_service+0x122>
    {
        printf("The current calibration is not valid for the current temperature.\n");
 80016ca:	4843      	ldr	r0, [pc, #268]	@ (80017d8 <acc_example_service+0x1e4>)
 80016cc:	f00f f9be 	bl	8010a4c <puts>
        printf("The sensor needs to be re-calibrated.\n");
 80016d0:	4842      	ldr	r0, [pc, #264]	@ (80017dc <acc_example_service+0x1e8>)
 80016d2:	f00f f9bb 	bl	8010a4c <puts>

        if (!do_sensor_calibration_and_prepare(sensor, config, buffer, buffer_size))
 80016d6:	4b39      	ldr	r3, [pc, #228]	@ (80017bc <acc_example_service+0x1c8>)
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	4b41      	ldr	r3, [pc, #260]	@ (80017e0 <acc_example_service+0x1ec>)
 80016dc:	6819      	ldr	r1, [r3, #0]
 80016de:	4b3a      	ldr	r3, [pc, #232]	@ (80017c8 <acc_example_service+0x1d4>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b3a      	ldr	r3, [pc, #232]	@ (80017cc <acc_example_service+0x1d8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f000 f8bb 	bl	8001860 <do_sensor_calibration_and_prepare>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f083 0301 	eor.w	r3, r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00b      	beq.n	800170e <acc_example_service+0x11a>
        {
            printf("do_sensor_calibration_and_prepare() failed\n");
 80016f6:	483b      	ldr	r0, [pc, #236]	@ (80017e4 <acc_example_service+0x1f0>)
 80016f8:	f00f f9a8 	bl	8010a4c <puts>
            acc_sensor_status(sensor);
 80016fc:	4b2f      	ldr	r3, [pc, #188]	@ (80017bc <acc_example_service+0x1c8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f009 fd33 	bl	800b16c <acc_sensor_status>
            cleanup();
 8001706:	f000 f91f 	bl	8001948 <cleanup>
            return EXIT_FAILURE;
 800170a:	2301      	movs	r3, #1
 800170c:	e050      	b.n	80017b0 <acc_example_service+0x1bc>
        }

        printf("The sensor was successfully re-calibrated.\n");
 800170e:	4836      	ldr	r0, [pc, #216]	@ (80017e8 <acc_example_service+0x1f4>)
 8001710:	f00f f99c 	bl	8010a4c <puts>
 8001714:	e04b      	b.n	80017ae <acc_example_service+0x1ba>
    }
    else
    {

		for (uint16_t j = 0; (j < proc_meta.frame_data_length) && (4*(j+1) <= argc); j++)
 8001716:	2300      	movs	r3, #0
 8001718:	82fb      	strh	r3, [r7, #22]
 800171a:	e03d      	b.n	8001798 <acc_example_service+0x1a4>

		{

            argv[1+4*j] = (uint8_t)(proc_result.frame[j].real & 0xFF);
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	8afb      	ldrh	r3, [r7, #22]
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001728:	8afb      	ldrh	r3, [r7, #22]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	3301      	adds	r3, #1
 800172e:	4619      	mov	r1, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	440b      	add	r3, r1
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	701a      	strb	r2, [r3, #0]
            argv[0+4*j] = (uint8_t)((proc_result.frame[j].real >> 8) & 0xFF);
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	8afb      	ldrh	r3, [r7, #22]
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001744:	121b      	asrs	r3, r3, #8
 8001746:	b21a      	sxth	r2, r3
 8001748:	8afb      	ldrh	r3, [r7, #22]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4619      	mov	r1, r3
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	440b      	add	r3, r1
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]
            argv[3+4*j] = (uint8_t)(proc_result.frame[j].imag & 0xFF);
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	8afb      	ldrh	r3, [r7, #22]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001762:	8afb      	ldrh	r3, [r7, #22]
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	3303      	adds	r3, #3
 8001768:	4619      	mov	r1, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	440b      	add	r3, r1
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	701a      	strb	r2, [r3, #0]
            argv[2+4*j] = (uint8_t)((proc_result.frame[j].imag >> 8) & 0xFF);
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	8afb      	ldrh	r3, [r7, #22]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800177e:	121b      	asrs	r3, r3, #8
 8001780:	b21a      	sxth	r2, r3
 8001782:	8afb      	ldrh	r3, [r7, #22]
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	4619      	mov	r1, r3
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	440b      	add	r3, r1
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]
		for (uint16_t j = 0; (j < proc_meta.frame_data_length) && (4*(j+1) <= argc); j++)
 8001792:	8afb      	ldrh	r3, [r7, #22]
 8001794:	3301      	adds	r3, #1
 8001796:	82fb      	strh	r3, [r7, #22]
 8001798:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <acc_example_service+0x1f8>)
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	8afa      	ldrh	r2, [r7, #22]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d205      	bcs.n	80017ae <acc_example_service+0x1ba>
 80017a2:	8afb      	ldrh	r3, [r7, #22]
 80017a4:	3301      	adds	r3, #1
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	dab6      	bge.n	800171c <acc_example_service+0x128>
		}
//        print_data(proc_result.frame, proc_meta.frame_data_length);
    }

    return EXIT_SUCCESS;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200002c0 	.word	0x200002c0
 80017bc:	20000298 	.word	0x20000298
 80017c0:	080125fc 	.word	0x080125fc
 80017c4:	08012618 	.word	0x08012618
 80017c8:	2000029c 	.word	0x2000029c
 80017cc:	200002a0 	.word	0x200002a0
 80017d0:	08012634 	.word	0x08012634
 80017d4:	20000294 	.word	0x20000294
 80017d8:	0801264c 	.word	0x0801264c
 80017dc:	08012690 	.word	0x08012690
 80017e0:	20000290 	.word	0x20000290
 80017e4:	080125d0 	.word	0x080125d0
 80017e8:	080126b8 	.word	0x080126b8
 80017ec:	200002a4 	.word	0x200002a4

080017f0 <set_config>:

static void set_config(acc_config_t *config)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	acc_config_sweep_rate_set(config,100.0f);
 80017f8:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800185c <set_config+0x6c>
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f009 f9e1 	bl	800abc4 <acc_config_sweep_rate_set>
    acc_config_hwaas_set(config,50);
 8001802:	2132      	movs	r1, #50	@ 0x32
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f009 f9d5 	bl	800abb4 <acc_config_hwaas_set>
    acc_config_start_point_set(config, 20);
 800180a:	2114      	movs	r1, #20
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f009 f9c1 	bl	800ab94 <acc_config_start_point_set>
    acc_config_num_points_set(config, 38);
 8001812:	2126      	movs	r1, #38	@ 0x26
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f009 f9c1 	bl	800ab9c <acc_config_num_points_set>
    acc_config_step_length_set(config,1);
 800181a:	2101      	movs	r1, #1
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f009 f9c1 	bl	800aba4 <acc_config_step_length_set>
    acc_config_profile_set (config , ACC_CONFIG_PROFILE_1);
 8001822:	2101      	movs	r1, #1
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f009 f9c1 	bl	800abac <acc_config_profile_set>
    acc_config_continuous_sweep_mode_set(config,true);
 800182a:	2101      	movs	r1, #1
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f009 f9df 	bl	800abf0 <acc_config_continuous_sweep_mode_set>
    acc_config_receiver_gain_set(config,12);
 8001832:	210c      	movs	r1, #12
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f009 f9c1 	bl	800abbc <acc_config_receiver_gain_set>
    acc_config_inter_sweep_idle_state_set(config,ACC_CONFIG_IDLE_STATE_READY);
 800183a:	2102      	movs	r1, #2
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f009 fa03 	bl	800ac48 <acc_config_inter_sweep_idle_state_set>
    acc_config_inter_frame_idle_state_set(config,ACC_CONFIG_IDLE_STATE_READY);
 8001842:	2102      	movs	r1, #2
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f009 f9e9 	bl	800ac1c <acc_config_inter_frame_idle_state_set>
    acc_config_prf_set(config,ACC_CONFIG_PRF_19_5_MHZ);
 800184a:	2100      	movs	r1, #0
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f009 fa4b 	bl	800ace8 <acc_config_prf_set>
//    acc_config_phase_enhancement_set(config,true);
//    acc_config_double_buffering_set(config,true);
//    acc_config_enable_loopback_set(config,true);
//    acc_detector_distance_config_start_set()

}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	42c80000 	.word	0x42c80000

08001860 <do_sensor_calibration_and_prepare>:

static bool do_sensor_calibration_and_prepare(acc_sensor_t *sensor, acc_config_t *config, void *buffer, uint32_t buffer_size)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0b8      	sub	sp, #224	@ 0xe0
 8001864:	af02      	add	r7, sp, #8
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	603b      	str	r3, [r7, #0]
    bool status = false;
 800186e:	2300      	movs	r3, #0
 8001870:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    bool cal_complete = false;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    acc_cal_result_t cal_result;
    const uint16_t calibration_retries = 1U;
 800187a:	2301      	movs	r3, #1
 800187c:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2

    // Random disturbances may cause the calibration to fail. At failure, retry at least once.
    for (uint16_t i = 0; !status && (i <= calibration_retries); i++)
 8001880:	2300      	movs	r3, #0
 8001882:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
 8001886:	e035      	b.n	80018f4 <do_sensor_calibration_and_prepare+0x94>
    {
        // Reset sensor before calibration by disabling/enabling it
        acc_hal_integration_sensor_disable(SENSOR_ID);
 8001888:	2002      	movs	r0, #2
 800188a:	f7ff fa3f 	bl	8000d0c <acc_hal_integration_sensor_disable>
        acc_hal_integration_sensor_enable(SENSOR_ID);
 800188e:	2002      	movs	r0, #2
 8001890:	f7ff fa16 	bl	8000cc0 <acc_hal_integration_sensor_enable>

        do
        {
            status = acc_sensor_calibrate(sensor, &cal_complete, &cal_result, buffer, buffer_size);
 8001894:	f107 0210 	add.w	r2, r7, #16
 8001898:	f107 01d1 	add.w	r1, r7, #209	@ 0xd1
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f009 fb72 	bl	800af8c <acc_sensor_calibrate>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7

            if (status && !cal_complete)
 80018ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00e      	beq.n	80018d4 <do_sensor_calibration_and_prepare+0x74>
 80018b6:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 80018ba:	f083 0301 	eor.w	r3, r3, #1
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <do_sensor_calibration_and_prepare+0x74>
            {
                status = acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID, SENSOR_TIMEOUT_MS);
 80018c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018c8:	2002      	movs	r0, #2
 80018ca:	f7ff fa45 	bl	8000d58 <acc_hal_integration_wait_for_sensor_interrupt>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
            }
        } while (status && !cal_complete);
 80018d4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <do_sensor_calibration_and_prepare+0x8a>
 80018dc:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 80018e0:	f083 0301 	eor.w	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1d4      	bne.n	8001894 <do_sensor_calibration_and_prepare+0x34>
    for (uint16_t i = 0; !status && (i <= calibration_retries); i++)
 80018ea:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 80018ee:	3301      	adds	r3, #1
 80018f0:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
 80018f4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80018f8:	f083 0301 	eor.w	r3, r3, #1
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d005      	beq.n	800190e <do_sensor_calibration_and_prepare+0xae>
 8001902:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	@ 0xd4
 8001906:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800190a:	429a      	cmp	r2, r3
 800190c:	d9bc      	bls.n	8001888 <do_sensor_calibration_and_prepare+0x28>
    }

    if (status)
 800190e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8001912:	2b00      	cmp	r3, #0
 8001914:	d011      	beq.n	800193a <do_sensor_calibration_and_prepare+0xda>
    {
        // Reset sensor after calibration by disabling/enabling it
        acc_hal_integration_sensor_disable(SENSOR_ID);
 8001916:	2002      	movs	r0, #2
 8001918:	f7ff f9f8 	bl	8000d0c <acc_hal_integration_sensor_disable>
        acc_hal_integration_sensor_enable(SENSOR_ID);
 800191c:	2002      	movs	r0, #2
 800191e:	f7ff f9cf 	bl	8000cc0 <acc_hal_integration_sensor_enable>

        status = acc_sensor_prepare(sensor, config, &cal_result, buffer, buffer_size);
 8001922:	f107 0210 	add.w	r2, r7, #16
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f009 fb5e 	bl	800aff0 <acc_sensor_prepare>
 8001934:	4603      	mov	r3, r0
 8001936:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    }

    return status;
 800193a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800193e:	4618      	mov	r0, r3
 8001940:	37d8      	adds	r7, #216	@ 0xd8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <cleanup>:

    printf("\n");
}

static void cleanup()
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
    acc_hal_integration_sensor_disable(SENSOR_ID);
 800194c:	2002      	movs	r0, #2
 800194e:	f7ff f9dd 	bl	8000d0c <acc_hal_integration_sensor_disable>
    acc_hal_integration_sensor_supply_off(SENSOR_ID);
 8001952:	2002      	movs	r0, #2
 8001954:	f7ff f9a4 	bl	8000ca0 <acc_hal_integration_sensor_supply_off>

    if (sensor != NULL)
 8001958:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <cleanup+0x7c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <cleanup+0x28>
    {
        acc_sensor_destroy(sensor);
 8001960:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <cleanup+0x7c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f009 faa5 	bl	800aeb4 <acc_sensor_destroy>
        sensor = NULL;
 800196a:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <cleanup+0x7c>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
    }

    if (processing != NULL)
 8001970:	4b15      	ldr	r3, [pc, #84]	@ (80019c8 <cleanup+0x80>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d007      	beq.n	8001988 <cleanup+0x40>
    {
        acc_processing_destroy(processing);
 8001978:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <cleanup+0x80>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f009 fa03 	bl	800ad88 <acc_processing_destroy>
        processing = NULL;
 8001982:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <cleanup+0x80>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
    }

    if (config != NULL)
 8001988:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <cleanup+0x84>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d007      	beq.n	80019a0 <cleanup+0x58>
    {
        acc_config_destroy(config);
 8001990:	4b0e      	ldr	r3, [pc, #56]	@ (80019cc <cleanup+0x84>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f009 f819 	bl	800a9cc <acc_config_destroy>
        config = NULL;
 800199a:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <cleanup+0x84>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
    }

    if (buffer != NULL)
 80019a0:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <cleanup+0x88>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d007      	beq.n	80019b8 <cleanup+0x70>
    {
        acc_integration_mem_free(buffer);
 80019a8:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <cleanup+0x88>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff faea 	bl	8000f86 <acc_integration_mem_free>
        buffer = NULL;
 80019b2:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <cleanup+0x88>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
    }

    is_initialized = false; // Reset initialization flag
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <cleanup+0x8c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000298 	.word	0x20000298
 80019c8:	20000294 	.word	0x20000294
 80019cc:	20000290 	.word	0x20000290
 80019d0:	2000029c 	.word	0x2000029c
 80019d4:	200002c0 	.word	0x200002c0

080019d8 <LL_EXTI_EnableIT_0_31>:
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <LL_EXTI_EnableIT_0_31+0x24>)
 80019e2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80019e6:	4905      	ldr	r1, [pc, #20]	@ (80019fc <LL_EXTI_EnableIT_0_31+0x24>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	58000800 	.word	0x58000800

08001a00 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4904      	ldr	r1, [pc, #16]	@ (8001a20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]

}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	58000800 	.word	0x58000800

08001a24 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <ReadRtcSsrValue+0x3c>)
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001a32:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <ReadRtcSsrValue+0x3c>)
 8001a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001a3a:	e005      	b.n	8001a48 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001a40:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <ReadRtcSsrValue+0x3c>)
 8001a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d1f5      	bne.n	8001a3c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001a50:	683b      	ldr	r3, [r7, #0]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40002800 	.word	0x40002800

08001a64 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	460a      	mov	r2, r1
 8001a6e:	71fb      	strb	r3, [r7, #7]
 8001a70:	4613      	mov	r3, r2
 8001a72:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001a74:	79ba      	ldrb	r2, [r7, #6]
 8001a76:	491d      	ldr	r1, [pc, #116]	@ (8001aec <LinkTimerAfter+0x88>)
 8001a78:	4613      	mov	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	440b      	add	r3, r1
 8001a82:	3315      	adds	r3, #21
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d009      	beq.n	8001aa2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	4916      	ldr	r1, [pc, #88]	@ (8001aec <LinkTimerAfter+0x88>)
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3314      	adds	r3, #20
 8001a9e:	79fa      	ldrb	r2, [r7, #7]
 8001aa0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001aa2:	79fa      	ldrb	r2, [r7, #7]
 8001aa4:	4911      	ldr	r1, [pc, #68]	@ (8001aec <LinkTimerAfter+0x88>)
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	440b      	add	r3, r1
 8001ab0:	3315      	adds	r3, #21
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001ab6:	79fa      	ldrb	r2, [r7, #7]
 8001ab8:	490c      	ldr	r1, [pc, #48]	@ (8001aec <LinkTimerAfter+0x88>)
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	440b      	add	r3, r1
 8001ac4:	3314      	adds	r3, #20
 8001ac6:	79ba      	ldrb	r2, [r7, #6]
 8001ac8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001aca:	79ba      	ldrb	r2, [r7, #6]
 8001acc:	4907      	ldr	r1, [pc, #28]	@ (8001aec <LinkTimerAfter+0x88>)
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	440b      	add	r3, r1
 8001ad8:	3315      	adds	r3, #21
 8001ada:	79fa      	ldrb	r2, [r7, #7]
 8001adc:	701a      	strb	r2, [r3, #0]

  return;
 8001ade:	bf00      	nop
}
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	200002c4 	.word	0x200002c4

08001af0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	460a      	mov	r2, r1
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	4613      	mov	r3, r2
 8001afe:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001b00:	4b29      	ldr	r3, [pc, #164]	@ (8001ba8 <LinkTimerBefore+0xb8>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	79ba      	ldrb	r2, [r7, #6]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d032      	beq.n	8001b72 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001b0c:	79ba      	ldrb	r2, [r7, #6]
 8001b0e:	4927      	ldr	r1, [pc, #156]	@ (8001bac <LinkTimerBefore+0xbc>)
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	440b      	add	r3, r1
 8001b1a:	3314      	adds	r3, #20
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001b20:	7bfa      	ldrb	r2, [r7, #15]
 8001b22:	4922      	ldr	r1, [pc, #136]	@ (8001bac <LinkTimerBefore+0xbc>)
 8001b24:	4613      	mov	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	440b      	add	r3, r1
 8001b2e:	3315      	adds	r3, #21
 8001b30:	79fa      	ldrb	r2, [r7, #7]
 8001b32:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001b34:	79fa      	ldrb	r2, [r7, #7]
 8001b36:	491d      	ldr	r1, [pc, #116]	@ (8001bac <LinkTimerBefore+0xbc>)
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	440b      	add	r3, r1
 8001b42:	3315      	adds	r3, #21
 8001b44:	79ba      	ldrb	r2, [r7, #6]
 8001b46:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001b48:	79fa      	ldrb	r2, [r7, #7]
 8001b4a:	4918      	ldr	r1, [pc, #96]	@ (8001bac <LinkTimerBefore+0xbc>)
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	440b      	add	r3, r1
 8001b56:	3314      	adds	r3, #20
 8001b58:	7bfa      	ldrb	r2, [r7, #15]
 8001b5a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001b5c:	79ba      	ldrb	r2, [r7, #6]
 8001b5e:	4913      	ldr	r1, [pc, #76]	@ (8001bac <LinkTimerBefore+0xbc>)
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	440b      	add	r3, r1
 8001b6a:	3314      	adds	r3, #20
 8001b6c:	79fa      	ldrb	r2, [r7, #7]
 8001b6e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001b70:	e014      	b.n	8001b9c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001b72:	79fa      	ldrb	r2, [r7, #7]
 8001b74:	490d      	ldr	r1, [pc, #52]	@ (8001bac <LinkTimerBefore+0xbc>)
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	440b      	add	r3, r1
 8001b80:	3315      	adds	r3, #21
 8001b82:	79ba      	ldrb	r2, [r7, #6]
 8001b84:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001b86:	79ba      	ldrb	r2, [r7, #6]
 8001b88:	4908      	ldr	r1, [pc, #32]	@ (8001bac <LinkTimerBefore+0xbc>)
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	3314      	adds	r3, #20
 8001b96:	79fa      	ldrb	r2, [r7, #7]
 8001b98:	701a      	strb	r2, [r3, #0]
  return;
 8001b9a:	bf00      	nop
}
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000354 	.word	0x20000354
 8001bac:	200002c4 	.word	0x200002c4

08001bb0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001bba:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf4 <linkTimer+0x144>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b06      	cmp	r3, #6
 8001bc2:	d118      	bne.n	8001bf6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001bc4:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf4 <linkTimer+0x144>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf8 <linkTimer+0x148>)
 8001bcc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001bce:	4a49      	ldr	r2, [pc, #292]	@ (8001cf4 <linkTimer+0x144>)
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	4949      	ldr	r1, [pc, #292]	@ (8001cfc <linkTimer+0x14c>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	3315      	adds	r3, #21
 8001be4:	2206      	movs	r2, #6
 8001be6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001be8:	4b45      	ldr	r3, [pc, #276]	@ (8001d00 <linkTimer+0x150>)
 8001bea:	f04f 32ff 	mov.w	r2, #4294967295
 8001bee:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	81fb      	strh	r3, [r7, #14]
 8001bf4:	e078      	b.n	8001ce8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001bf6:	f000 f909 	bl	8001e0c <ReturnTimeElapsed>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001bfe:	79fa      	ldrb	r2, [r7, #7]
 8001c00:	493e      	ldr	r1, [pc, #248]	@ (8001cfc <linkTimer+0x14c>)
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3308      	adds	r3, #8
 8001c0e:	6819      	ldr	r1, [r3, #0]
 8001c10:	89fb      	ldrh	r3, [r7, #14]
 8001c12:	79fa      	ldrb	r2, [r7, #7]
 8001c14:	4419      	add	r1, r3
 8001c16:	4839      	ldr	r0, [pc, #228]	@ (8001cfc <linkTimer+0x14c>)
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4403      	add	r3, r0
 8001c22:	3308      	adds	r3, #8
 8001c24:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001c26:	79fa      	ldrb	r2, [r7, #7]
 8001c28:	4934      	ldr	r1, [pc, #208]	@ (8001cfc <linkTimer+0x14c>)
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	3308      	adds	r3, #8
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001c3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf4 <linkTimer+0x144>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	4619      	mov	r1, r3
 8001c42:	4a2e      	ldr	r2, [pc, #184]	@ (8001cfc <linkTimer+0x14c>)
 8001c44:	460b      	mov	r3, r1
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	440b      	add	r3, r1
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3308      	adds	r3, #8
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d337      	bcc.n	8001cc8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001c58:	4b26      	ldr	r3, [pc, #152]	@ (8001cf4 <linkTimer+0x144>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001c5e:	7b7a      	ldrb	r2, [r7, #13]
 8001c60:	4926      	ldr	r1, [pc, #152]	@ (8001cfc <linkTimer+0x14c>)
 8001c62:	4613      	mov	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3315      	adds	r3, #21
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001c72:	e013      	b.n	8001c9c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001c74:	7b7a      	ldrb	r2, [r7, #13]
 8001c76:	4921      	ldr	r1, [pc, #132]	@ (8001cfc <linkTimer+0x14c>)
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	440b      	add	r3, r1
 8001c82:	3315      	adds	r3, #21
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001c88:	7b7a      	ldrb	r2, [r7, #13]
 8001c8a:	491c      	ldr	r1, [pc, #112]	@ (8001cfc <linkTimer+0x14c>)
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	440b      	add	r3, r1
 8001c96:	3315      	adds	r3, #21
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001c9c:	7b3b      	ldrb	r3, [r7, #12]
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d00b      	beq.n	8001cba <linkTimer+0x10a>
 8001ca2:	7b3a      	ldrb	r2, [r7, #12]
 8001ca4:	4915      	ldr	r1, [pc, #84]	@ (8001cfc <linkTimer+0x14c>)
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	440b      	add	r3, r1
 8001cb0:	3308      	adds	r3, #8
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d2dc      	bcs.n	8001c74 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001cba:	7b7a      	ldrb	r2, [r7, #13]
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fecf 	bl	8001a64 <LinkTimerAfter>
 8001cc6:	e00f      	b.n	8001ce8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf4 <linkTimer+0x144>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ff0c 	bl	8001af0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <linkTimer+0x144>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <linkTimer+0x148>)
 8001ce0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <linkTimer+0x144>)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001ce8:	89fb      	ldrh	r3, [r7, #14]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000354 	.word	0x20000354
 8001cf8:	20000355 	.word	0x20000355
 8001cfc:	200002c4 	.word	0x200002c4
 8001d00:	20000358 	.word	0x20000358

08001d04 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	460a      	mov	r2, r1
 8001d0e:	71fb      	strb	r3, [r7, #7]
 8001d10:	4613      	mov	r3, r2
 8001d12:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001d14:	4b39      	ldr	r3, [pc, #228]	@ (8001dfc <UnlinkTimer+0xf8>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	79fa      	ldrb	r2, [r7, #7]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d111      	bne.n	8001d44 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001d20:	4b36      	ldr	r3, [pc, #216]	@ (8001dfc <UnlinkTimer+0xf8>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4b36      	ldr	r3, [pc, #216]	@ (8001e00 <UnlinkTimer+0xfc>)
 8001d28:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001d2a:	79fa      	ldrb	r2, [r7, #7]
 8001d2c:	4935      	ldr	r1, [pc, #212]	@ (8001e04 <UnlinkTimer+0x100>)
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	440b      	add	r3, r1
 8001d38:	3315      	adds	r3, #21
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001dfc <UnlinkTimer+0xf8>)
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	e03e      	b.n	8001dc2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001d44:	79fa      	ldrb	r2, [r7, #7]
 8001d46:	492f      	ldr	r1, [pc, #188]	@ (8001e04 <UnlinkTimer+0x100>)
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	3314      	adds	r3, #20
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001d58:	79fa      	ldrb	r2, [r7, #7]
 8001d5a:	492a      	ldr	r1, [pc, #168]	@ (8001e04 <UnlinkTimer+0x100>)
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	440b      	add	r3, r1
 8001d66:	3315      	adds	r3, #21
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001d6c:	79f9      	ldrb	r1, [r7, #7]
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	4824      	ldr	r0, [pc, #144]	@ (8001e04 <UnlinkTimer+0x100>)
 8001d72:	460b      	mov	r3, r1
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	440b      	add	r3, r1
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4403      	add	r3, r0
 8001d7c:	3315      	adds	r3, #21
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b2d8      	uxtb	r0, r3
 8001d82:	4920      	ldr	r1, [pc, #128]	@ (8001e04 <UnlinkTimer+0x100>)
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3315      	adds	r3, #21
 8001d90:	4602      	mov	r2, r0
 8001d92:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d94:	7bbb      	ldrb	r3, [r7, #14]
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d013      	beq.n	8001dc2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001d9a:	79f9      	ldrb	r1, [r7, #7]
 8001d9c:	7bba      	ldrb	r2, [r7, #14]
 8001d9e:	4819      	ldr	r0, [pc, #100]	@ (8001e04 <UnlinkTimer+0x100>)
 8001da0:	460b      	mov	r3, r1
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	440b      	add	r3, r1
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4403      	add	r3, r0
 8001daa:	3314      	adds	r3, #20
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b2d8      	uxtb	r0, r3
 8001db0:	4914      	ldr	r1, [pc, #80]	@ (8001e04 <UnlinkTimer+0x100>)
 8001db2:	4613      	mov	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	440b      	add	r3, r1
 8001dbc:	3314      	adds	r3, #20
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001dc2:	79fa      	ldrb	r2, [r7, #7]
 8001dc4:	490f      	ldr	r1, [pc, #60]	@ (8001e04 <UnlinkTimer+0x100>)
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	440b      	add	r3, r1
 8001dd0:	330c      	adds	r3, #12
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001dd6:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <UnlinkTimer+0xf8>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b06      	cmp	r3, #6
 8001dde:	d107      	bne.n	8001df0 <UnlinkTimer+0xec>
 8001de0:	79bb      	ldrb	r3, [r7, #6]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d104      	bne.n	8001df0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001de6:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <UnlinkTimer+0x104>)
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	601a      	str	r2, [r3, #0]
  }

  return;
 8001dee:	bf00      	nop
 8001df0:	bf00      	nop
}
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	20000354 	.word	0x20000354
 8001e00:	20000355 	.word	0x20000355
 8001e04:	200002c4 	.word	0x200002c4
 8001e08:	20000358 	.word	0x20000358

08001e0c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001e12:	4b1a      	ldr	r3, [pc, #104]	@ (8001e7c <ReturnTimeElapsed+0x70>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1a:	d026      	beq.n	8001e6a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001e1c:	f7ff fe02 	bl	8001a24 <ReadRtcSsrValue>
 8001e20:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001e22:	4b16      	ldr	r3, [pc, #88]	@ (8001e7c <ReturnTimeElapsed+0x70>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d805      	bhi.n	8001e38 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001e2c:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <ReturnTimeElapsed+0x70>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	e00a      	b.n	8001e4e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001e38:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <ReturnTimeElapsed+0x74>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001e44:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <ReturnTimeElapsed+0x70>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <ReturnTimeElapsed+0x78>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	fb02 f303 	mul.w	r3, r2, r3
 8001e5a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <ReturnTimeElapsed+0x7c>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	40d3      	lsrs	r3, r2
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	e001      	b.n	8001e6e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	b29b      	uxth	r3, r3
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000358 	.word	0x20000358
 8001e80:	20000360 	.word	0x20000360
 8001e84:	2000035e 	.word	0x2000035e
 8001e88:	2000035d 	.word	0x2000035d

08001e8c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d108      	bne.n	8001eae <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001e9c:	f7ff fdc2 	bl	8001a24 <ReadRtcSsrValue>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4a21      	ldr	r2, [pc, #132]	@ (8001f28 <RestartWakeupCounter+0x9c>)
 8001ea4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001ea6:	2003      	movs	r0, #3
 8001ea8:	f001 fa99 	bl	80033de <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001eac:	e039      	b.n	8001f22 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d803      	bhi.n	8001ebc <RestartWakeupCounter+0x30>
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f2c <RestartWakeupCounter+0xa0>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d002      	beq.n	8001ec2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001ec2:	bf00      	nop
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <RestartWakeupCounter+0xa4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f8      	beq.n	8001ec4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001ed2:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <RestartWakeupCounter+0xa4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <RestartWakeupCounter+0xa4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001ee2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001ee4:	4b13      	ldr	r3, [pc, #76]	@ (8001f34 <RestartWakeupCounter+0xa8>)
 8001ee6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001eea:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001eec:	2003      	movs	r0, #3
 8001eee:	f001 fa84 	bl	80033fa <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001ef2:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <RestartWakeupCounter+0xac>)
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	0c1b      	lsrs	r3, r3, #16
 8001ef8:	041b      	lsls	r3, r3, #16
 8001efa:	88fa      	ldrh	r2, [r7, #6]
 8001efc:	490e      	ldr	r1, [pc, #56]	@ (8001f38 <RestartWakeupCounter+0xac>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001f02:	f7ff fd8f 	bl	8001a24 <ReadRtcSsrValue>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4a07      	ldr	r2, [pc, #28]	@ (8001f28 <RestartWakeupCounter+0x9c>)
 8001f0a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001f0c:	4b08      	ldr	r3, [pc, #32]	@ (8001f30 <RestartWakeupCounter+0xa4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <RestartWakeupCounter+0xa4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f1a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001f1c:	f3af 8000 	nop.w
  return ;
 8001f20:	bf00      	nop
}
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000358 	.word	0x20000358
 8001f2c:	2000035d 	.word	0x2000035d
 8001f30:	200003a0 	.word	0x200003a0
 8001f34:	58000800 	.word	0x58000800
 8001f38:	40002800 	.word	0x40002800

08001f3c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001f42:	4b45      	ldr	r3, [pc, #276]	@ (8002058 <RescheduleTimerList+0x11c>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f4e:	d107      	bne.n	8001f60 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001f50:	bf00      	nop
 8001f52:	4b42      	ldr	r3, [pc, #264]	@ (800205c <RescheduleTimerList+0x120>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f8      	bne.n	8001f52 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001f60:	4b3e      	ldr	r3, [pc, #248]	@ (800205c <RescheduleTimerList+0x120>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	4b3d      	ldr	r3, [pc, #244]	@ (800205c <RescheduleTimerList+0x120>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f6e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001f70:	4b3b      	ldr	r3, [pc, #236]	@ (8002060 <RescheduleTimerList+0x124>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	493a      	ldr	r1, [pc, #232]	@ (8002064 <RescheduleTimerList+0x128>)
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	440b      	add	r3, r1
 8001f84:	3308      	adds	r3, #8
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001f8a:	f7ff ff3f 	bl	8001e0c <ReturnTimeElapsed>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d205      	bcs.n	8001fa6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f9e:	4b32      	ldr	r3, [pc, #200]	@ (8002068 <RescheduleTimerList+0x12c>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e04d      	b.n	8002042 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	4a30      	ldr	r2, [pc, #192]	@ (800206c <RescheduleTimerList+0x130>)
 8001faa:	8812      	ldrh	r2, [r2, #0]
 8001fac:	b292      	uxth	r2, r2
 8001fae:	4413      	add	r3, r2
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d906      	bls.n	8001fc6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001fb8:	4b2c      	ldr	r3, [pc, #176]	@ (800206c <RescheduleTimerList+0x130>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8002068 <RescheduleTimerList+0x12c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e03d      	b.n	8002042 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001fd0:	4b25      	ldr	r3, [pc, #148]	@ (8002068 <RescheduleTimerList+0x12c>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001fd6:	e034      	b.n	8002042 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	4922      	ldr	r1, [pc, #136]	@ (8002064 <RescheduleTimerList+0x128>)
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3308      	adds	r3, #8
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d20a      	bcs.n	8002006 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	491c      	ldr	r1, [pc, #112]	@ (8002064 <RescheduleTimerList+0x128>)
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	440b      	add	r3, r1
 8001ffe:	3308      	adds	r3, #8
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	e013      	b.n	800202e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	4916      	ldr	r1, [pc, #88]	@ (8002064 <RescheduleTimerList+0x128>)
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	3308      	adds	r3, #8
 8002016:	6819      	ldr	r1, [r3, #0]
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	7bfa      	ldrb	r2, [r7, #15]
 800201c:	1ac9      	subs	r1, r1, r3
 800201e:	4811      	ldr	r0, [pc, #68]	@ (8002064 <RescheduleTimerList+0x128>)
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4403      	add	r3, r0
 800202a:	3308      	adds	r3, #8
 800202c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800202e:	7bfa      	ldrb	r2, [r7, #15]
 8002030:	490c      	ldr	r1, [pc, #48]	@ (8002064 <RescheduleTimerList+0x128>)
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	440b      	add	r3, r1
 800203c:	3315      	adds	r3, #21
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	2b06      	cmp	r3, #6
 8002046:	d1c7      	bne.n	8001fd8 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002048:	89bb      	ldrh	r3, [r7, #12]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff1e 	bl	8001e8c <RestartWakeupCounter>

  return ;
 8002050:	bf00      	nop
}
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40002800 	.word	0x40002800
 800205c:	200003a0 	.word	0x200003a0
 8002060:	20000354 	.word	0x20000354
 8002064:	200002c4 	.word	0x200002c4
 8002068:	2000035c 	.word	0x2000035c
 800206c:	20000362 	.word	0x20000362

08002070 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	@ 0x28
 8002074:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002076:	f3ef 8310 	mrs	r3, PRIMASK
 800207a:	617b      	str	r3, [r7, #20]
  return(result);
 800207c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002080:	b672      	cpsid	i
}
 8002082:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002084:	4b59      	ldr	r3, [pc, #356]	@ (80021ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	22ca      	movs	r2, #202	@ 0xca
 800208a:	625a      	str	r2, [r3, #36]	@ 0x24
 800208c:	4b57      	ldr	r3, [pc, #348]	@ (80021ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2253      	movs	r2, #83	@ 0x53
 8002092:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002094:	4b55      	ldr	r3, [pc, #340]	@ (80021ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	4b54      	ldr	r3, [pc, #336]	@ (80021ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020a2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80020a4:	4b52      	ldr	r3, [pc, #328]	@ (80021f0 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80020ac:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80020b0:	4950      	ldr	r1, [pc, #320]	@ (80021f4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	330c      	adds	r3, #12
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d16e      	bne.n	80021a4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80020c6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80020ca:	494a      	ldr	r1, [pc, #296]	@ (80021f4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	440b      	add	r3, r1
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80020da:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80020de:	4945      	ldr	r1, [pc, #276]	@ (80021f4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	440b      	add	r3, r1
 80020ea:	3310      	adds	r3, #16
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80020f0:	4b41      	ldr	r3, [pc, #260]	@ (80021f8 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d04c      	beq.n	8002194 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80020fa:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80020fe:	493d      	ldr	r1, [pc, #244]	@ (80021f4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	330d      	adds	r3, #13
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d124      	bne.n	800215e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002114:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002118:	2101      	movs	r1, #1
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fdf2 	bl	8001d04 <UnlinkTimer>
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	f383 8810 	msr	PRIMASK, r3
}
 800212a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800212c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002130:	4930      	ldr	r1, [pc, #192]	@ (80021f4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	440b      	add	r3, r1
 800213c:	3304      	adds	r3, #4
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f9b8 	bl	80024bc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800214c:	4b27      	ldr	r3, [pc, #156]	@ (80021ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	22ca      	movs	r2, #202	@ 0xca
 8002152:	625a      	str	r2, [r3, #36]	@ 0x24
 8002154:	4b25      	ldr	r3, [pc, #148]	@ (80021ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2253      	movs	r2, #83	@ 0x53
 800215a:	625a      	str	r2, [r3, #36]	@ 0x24
 800215c:	e012      	b.n	8002184 <HW_TS_RTC_Wakeup_Handler+0x114>
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f383 8810 	msr	PRIMASK, r3
}
 8002168:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800216a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800216e:	4618      	mov	r0, r3
 8002170:	f000 f920 	bl	80023b4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002174:	4b1d      	ldr	r3, [pc, #116]	@ (80021ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	22ca      	movs	r2, #202	@ 0xca
 800217a:	625a      	str	r2, [r3, #36]	@ 0x24
 800217c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2253      	movs	r2, #83	@ 0x53
 8002182:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002184:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	4619      	mov	r1, r3
 800218c:	69b8      	ldr	r0, [r7, #24]
 800218e:	f000 fa1b 	bl	80025c8 <HW_TS_RTC_Int_AppNot>
 8002192:	e022      	b.n	80021da <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002194:	f7ff fed2 	bl	8001f3c <RescheduleTimerList>
 8002198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f383 8810 	msr	PRIMASK, r3
}
 80021a2:	e01a      	b.n	80021da <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80021a4:	bf00      	nop
 80021a6:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f8      	beq.n	80021a6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80021b4:	4b0d      	ldr	r3, [pc, #52]	@ (80021ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80021c4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80021c6:	4b0d      	ldr	r3, [pc, #52]	@ (80021fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80021c8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f383 8810 	msr	PRIMASK, r3
}
 80021d8:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80021da:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	22ff      	movs	r2, #255	@ 0xff
 80021e0:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80021e2:	bf00      	nop
}
 80021e4:	3728      	adds	r7, #40	@ 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	200003a0 	.word	0x200003a0
 80021f0:	20000354 	.word	0x20000354
 80021f4:	200002c4 	.word	0x200002c4
 80021f8:	2000035c 	.word	0x2000035c
 80021fc:	58000800 	.word	0x58000800

08002200 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	6039      	str	r1, [r7, #0]
 800220a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800220c:	4b5e      	ldr	r3, [pc, #376]	@ (8002388 <HW_TS_Init+0x188>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	22ca      	movs	r2, #202	@ 0xca
 8002212:	625a      	str	r2, [r3, #36]	@ 0x24
 8002214:	4b5c      	ldr	r3, [pc, #368]	@ (8002388 <HW_TS_Init+0x188>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2253      	movs	r2, #83	@ 0x53
 800221a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800221c:	4b5b      	ldr	r3, [pc, #364]	@ (800238c <HW_TS_Init+0x18c>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4a5a      	ldr	r2, [pc, #360]	@ (800238c <HW_TS_Init+0x18c>)
 8002222:	f043 0320 	orr.w	r3, r3, #32
 8002226:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002228:	4b58      	ldr	r3, [pc, #352]	@ (800238c <HW_TS_Init+0x18c>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	b2db      	uxtb	r3, r3
 8002234:	f1c3 0304 	rsb	r3, r3, #4
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4b55      	ldr	r3, [pc, #340]	@ (8002390 <HW_TS_Init+0x190>)
 800223c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800223e:	4b53      	ldr	r3, [pc, #332]	@ (800238c <HW_TS_Init+0x18c>)
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002246:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800224a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	fa92 f2a2 	rbit	r2, r2
 8002252:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	2a00      	cmp	r2, #0
 800225c:	d101      	bne.n	8002262 <HW_TS_Init+0x62>
  {
    return 32U;
 800225e:	2220      	movs	r2, #32
 8002260:	e003      	b.n	800226a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	fab2 f282 	clz	r2, r2
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	40d3      	lsrs	r3, r2
 800226c:	b2db      	uxtb	r3, r3
 800226e:	3301      	adds	r3, #1
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4b48      	ldr	r3, [pc, #288]	@ (8002394 <HW_TS_Init+0x194>)
 8002274:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002276:	4b45      	ldr	r3, [pc, #276]	@ (800238c <HW_TS_Init+0x18c>)
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	b29b      	uxth	r3, r3
 800227c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002280:	b29b      	uxth	r3, r3
 8002282:	3301      	adds	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	4b44      	ldr	r3, [pc, #272]	@ (8002398 <HW_TS_Init+0x198>)
 8002288:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800228a:	4b43      	ldr	r3, [pc, #268]	@ (8002398 <HW_TS_Init+0x198>)
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	3b01      	subs	r3, #1
 8002290:	4a40      	ldr	r2, [pc, #256]	@ (8002394 <HW_TS_Init+0x194>)
 8002292:	7812      	ldrb	r2, [r2, #0]
 8002294:	fb02 f303 	mul.w	r3, r2, r3
 8002298:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800229c:	4a3c      	ldr	r2, [pc, #240]	@ (8002390 <HW_TS_Init+0x190>)
 800229e:	7812      	ldrb	r2, [r2, #0]
 80022a0:	40d3      	lsrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d904      	bls.n	80022b8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80022ae:	4b3b      	ldr	r3, [pc, #236]	@ (800239c <HW_TS_Init+0x19c>)
 80022b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022b4:	801a      	strh	r2, [r3, #0]
 80022b6:	e003      	b.n	80022c0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	4b37      	ldr	r3, [pc, #220]	@ (800239c <HW_TS_Init+0x19c>)
 80022be:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80022c0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80022c4:	f7ff fb9c 	bl	8001a00 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80022c8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80022cc:	f7ff fb84 	bl	80019d8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d13d      	bne.n	8002352 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80022d6:	4b32      	ldr	r3, [pc, #200]	@ (80023a0 <HW_TS_Init+0x1a0>)
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80022dc:	4b31      	ldr	r3, [pc, #196]	@ (80023a4 <HW_TS_Init+0x1a4>)
 80022de:	f04f 32ff 	mov.w	r2, #4294967295
 80022e2:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80022e4:	2300      	movs	r3, #0
 80022e6:	77fb      	strb	r3, [r7, #31]
 80022e8:	e00c      	b.n	8002304 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80022ea:	7ffa      	ldrb	r2, [r7, #31]
 80022ec:	492e      	ldr	r1, [pc, #184]	@ (80023a8 <HW_TS_Init+0x1a8>)
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	440b      	add	r3, r1
 80022f8:	330c      	adds	r3, #12
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80022fe:	7ffb      	ldrb	r3, [r7, #31]
 8002300:	3301      	adds	r3, #1
 8002302:	77fb      	strb	r3, [r7, #31]
 8002304:	7ffb      	ldrb	r3, [r7, #31]
 8002306:	2b05      	cmp	r3, #5
 8002308:	d9ef      	bls.n	80022ea <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800230a:	4b28      	ldr	r3, [pc, #160]	@ (80023ac <HW_TS_Init+0x1ac>)
 800230c:	2206      	movs	r2, #6
 800230e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002310:	4b1d      	ldr	r3, [pc, #116]	@ (8002388 <HW_TS_Init+0x188>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	4b1c      	ldr	r3, [pc, #112]	@ (8002388 <HW_TS_Init+0x188>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800231e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002320:	4b19      	ldr	r3, [pc, #100]	@ (8002388 <HW_TS_Init+0x188>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	4b17      	ldr	r3, [pc, #92]	@ (8002388 <HW_TS_Init+0x188>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002330:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002332:	4b1f      	ldr	r3, [pc, #124]	@ (80023b0 <HW_TS_Init+0x1b0>)
 8002334:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002338:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800233a:	2003      	movs	r0, #3
 800233c:	f001 f85d 	bl	80033fa <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002340:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <HW_TS_Init+0x188>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <HW_TS_Init+0x188>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	e009      	b.n	8002366 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002352:	4b0d      	ldr	r3, [pc, #52]	@ (8002388 <HW_TS_Init+0x188>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002360:	2003      	movs	r0, #3
 8002362:	f001 f83c 	bl	80033de <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002366:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <HW_TS_Init+0x188>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	22ff      	movs	r2, #255	@ 0xff
 800236c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800236e:	2200      	movs	r2, #0
 8002370:	2103      	movs	r1, #3
 8002372:	2003      	movs	r0, #3
 8002374:	f000 fff1 	bl	800335a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002378:	2003      	movs	r0, #3
 800237a:	f001 f808 	bl	800338e <HAL_NVIC_EnableIRQ>

  return;
 800237e:	bf00      	nop
}
 8002380:	3720      	adds	r7, #32
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200003a0 	.word	0x200003a0
 800238c:	40002800 	.word	0x40002800
 8002390:	2000035d 	.word	0x2000035d
 8002394:	2000035e 	.word	0x2000035e
 8002398:	20000360 	.word	0x20000360
 800239c:	20000362 	.word	0x20000362
 80023a0:	2000035c 	.word	0x2000035c
 80023a4:	20000358 	.word	0x20000358
 80023a8:	200002c4 	.word	0x200002c4
 80023ac:	20000354 	.word	0x20000354
 80023b0:	58000800 	.word	0x58000800

080023b4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023be:	f3ef 8310 	mrs	r3, PRIMASK
 80023c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80023c4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80023c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80023c8:	b672      	cpsid	i
}
 80023ca:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80023cc:	2003      	movs	r0, #3
 80023ce:	f000 ffec 	bl	80033aa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80023d2:	4b34      	ldr	r3, [pc, #208]	@ (80024a4 <HW_TS_Stop+0xf0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	22ca      	movs	r2, #202	@ 0xca
 80023d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80023da:	4b32      	ldr	r3, [pc, #200]	@ (80024a4 <HW_TS_Stop+0xf0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2253      	movs	r2, #83	@ 0x53
 80023e0:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80023e2:	79fa      	ldrb	r2, [r7, #7]
 80023e4:	4930      	ldr	r1, [pc, #192]	@ (80024a8 <HW_TS_Stop+0xf4>)
 80023e6:	4613      	mov	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	440b      	add	r3, r1
 80023f0:	330c      	adds	r3, #12
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d142      	bne.n	8002480 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fc80 	bl	8001d04 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002404:	4b29      	ldr	r3, [pc, #164]	@ (80024ac <HW_TS_Stop+0xf8>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800240a:	7cfb      	ldrb	r3, [r7, #19]
 800240c:	2b06      	cmp	r3, #6
 800240e:	d12f      	bne.n	8002470 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002410:	4b27      	ldr	r3, [pc, #156]	@ (80024b0 <HW_TS_Stop+0xfc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800241c:	d107      	bne.n	800242e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800241e:	bf00      	nop
 8002420:	4b20      	ldr	r3, [pc, #128]	@ (80024a4 <HW_TS_Stop+0xf0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f8      	bne.n	8002420 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800242e:	4b1d      	ldr	r3, [pc, #116]	@ (80024a4 <HW_TS_Stop+0xf0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	4b1b      	ldr	r3, [pc, #108]	@ (80024a4 <HW_TS_Stop+0xf0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800243c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800243e:	bf00      	nop
 8002440:	4b18      	ldr	r3, [pc, #96]	@ (80024a4 <HW_TS_Stop+0xf0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f8      	beq.n	8002440 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800244e:	4b15      	ldr	r3, [pc, #84]	@ (80024a4 <HW_TS_Stop+0xf0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4b13      	ldr	r3, [pc, #76]	@ (80024a4 <HW_TS_Stop+0xf0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800245e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002460:	4b14      	ldr	r3, [pc, #80]	@ (80024b4 <HW_TS_Stop+0x100>)
 8002462:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002466:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002468:	2003      	movs	r0, #3
 800246a:	f000 ffc6 	bl	80033fa <HAL_NVIC_ClearPendingIRQ>
 800246e:	e007      	b.n	8002480 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002470:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <HW_TS_Stop+0x104>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	7cfa      	ldrb	r2, [r7, #19]
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800247c:	f7ff fd5e 	bl	8001f3c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002480:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <HW_TS_Stop+0xf0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	22ff      	movs	r2, #255	@ 0xff
 8002486:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002488:	2003      	movs	r0, #3
 800248a:	f000 ff80 	bl	800338e <HAL_NVIC_EnableIRQ>
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f383 8810 	msr	PRIMASK, r3
}
 8002498:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800249a:	bf00      	nop
}
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	200003a0 	.word	0x200003a0
 80024a8:	200002c4 	.word	0x200002c4
 80024ac:	20000354 	.word	0x20000354
 80024b0:	40002800 	.word	0x40002800
 80024b4:	58000800 	.word	0x58000800
 80024b8:	20000355 	.word	0x20000355

080024bc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80024c8:	79fa      	ldrb	r2, [r7, #7]
 80024ca:	493b      	ldr	r1, [pc, #236]	@ (80025b8 <HW_TS_Start+0xfc>)
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	440b      	add	r3, r1
 80024d6:	330c      	adds	r3, #12
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d103      	bne.n	80024e8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ff66 	bl	80023b4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024e8:	f3ef 8310 	mrs	r3, PRIMASK
 80024ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80024ee:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80024f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80024f2:	b672      	cpsid	i
}
 80024f4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80024f6:	2003      	movs	r0, #3
 80024f8:	f000 ff57 	bl	80033aa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80024fc:	4b2f      	ldr	r3, [pc, #188]	@ (80025bc <HW_TS_Start+0x100>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	22ca      	movs	r2, #202	@ 0xca
 8002502:	625a      	str	r2, [r3, #36]	@ 0x24
 8002504:	4b2d      	ldr	r3, [pc, #180]	@ (80025bc <HW_TS_Start+0x100>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2253      	movs	r2, #83	@ 0x53
 800250a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800250c:	79fa      	ldrb	r2, [r7, #7]
 800250e:	492a      	ldr	r1, [pc, #168]	@ (80025b8 <HW_TS_Start+0xfc>)
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	440b      	add	r3, r1
 800251a:	330c      	adds	r3, #12
 800251c:	2202      	movs	r2, #2
 800251e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002520:	79fa      	ldrb	r2, [r7, #7]
 8002522:	4925      	ldr	r1, [pc, #148]	@ (80025b8 <HW_TS_Start+0xfc>)
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	440b      	add	r3, r1
 800252e:	3308      	adds	r3, #8
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002534:	79fa      	ldrb	r2, [r7, #7]
 8002536:	4920      	ldr	r1, [pc, #128]	@ (80025b8 <HW_TS_Start+0xfc>)
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	440b      	add	r3, r1
 8002542:	3304      	adds	r3, #4
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fb30 	bl	8001bb0 <linkTimer>
 8002550:	4603      	mov	r3, r0
 8002552:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002554:	4b1a      	ldr	r3, [pc, #104]	@ (80025c0 <HW_TS_Start+0x104>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800255a:	4b1a      	ldr	r3, [pc, #104]	@ (80025c4 <HW_TS_Start+0x108>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	7c7a      	ldrb	r2, [r7, #17]
 8002562:	429a      	cmp	r2, r3
 8002564:	d002      	beq.n	800256c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002566:	f7ff fce9 	bl	8001f3c <RescheduleTimerList>
 800256a:	e013      	b.n	8002594 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800256c:	79fa      	ldrb	r2, [r7, #7]
 800256e:	4912      	ldr	r1, [pc, #72]	@ (80025b8 <HW_TS_Start+0xfc>)
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	440b      	add	r3, r1
 800257a:	3308      	adds	r3, #8
 800257c:	6819      	ldr	r1, [r3, #0]
 800257e:	8a7b      	ldrh	r3, [r7, #18]
 8002580:	79fa      	ldrb	r2, [r7, #7]
 8002582:	1ac9      	subs	r1, r1, r3
 8002584:	480c      	ldr	r0, [pc, #48]	@ (80025b8 <HW_TS_Start+0xfc>)
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4403      	add	r3, r0
 8002590:	3308      	adds	r3, #8
 8002592:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002594:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <HW_TS_Start+0x100>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	22ff      	movs	r2, #255	@ 0xff
 800259a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800259c:	2003      	movs	r0, #3
 800259e:	f000 fef6 	bl	800338e <HAL_NVIC_EnableIRQ>
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f383 8810 	msr	PRIMASK, r3
}
 80025ac:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80025ae:	bf00      	nop
}
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200002c4 	.word	0x200002c4
 80025bc:	200003a0 	.word	0x200003a0
 80025c0:	20000354 	.word	0x20000354
 80025c4:	20000355 	.word	0x20000355

080025c8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	460b      	mov	r3, r1
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4798      	blx	r3

  return;
 80025da:	bf00      	nop
}
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <LL_RCC_LSE_SetDriveCapability>:
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80025ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f2:	f023 0218 	bic.w	r2, r3, #24
 80025f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800260e:	b480      	push	{r7}
 8002610:	b085      	sub	sp, #20
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800261a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800261c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4313      	orrs	r3, r2
 8002624:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800262a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4013      	ands	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002632:	68fb      	ldr	r3, [r7, #12]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
    (void)file;
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 0xFFFF);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	b29a      	uxth	r2, r3
 8002650:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002654:	68b9      	ldr	r1, [r7, #8]
 8002656:	4804      	ldr	r0, [pc, #16]	@ (8002668 <_write+0x28>)
 8002658:	f003 fd88 	bl	800616c <HAL_UART_Transmit>
    return len;
 800265c:	687b      	ldr	r3, [r7, #4]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000428 	.word	0x20000428

0800266c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002670:	f000 fca6 	bl	8002fc0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002674:	f7fe fd66 	bl	8001144 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002678:	f000 f814 	bl	80026a4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800267c:	f000 f874 	bl	8002768 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002680:	f000 f892 	bl	80027a8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002684:	f000 f96a 	bl	800295c <MX_GPIO_Init>
  MX_SPI1_Init();
 8002688:	f000 f8de 	bl	8002848 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800268c:	f000 f91a 	bl	80028c4 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002690:	f000 f8a6 	bl	80027e0 <MX_RTC_Init>
  MX_RF_Init();
 8002694:	f000 f89c 	bl	80027d0 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
//  acc_example_service (0 , NULL ) ;
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002698:	f7fe fd62 	bl	8001160 <MX_APPE_Init>
  {
//	  HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
//	  HAL_Delay(1000);
//	  printf("sFGSSSSSDF\n");
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800269c:	f7fe feb2 	bl	8001404 <MX_APPE_Process>
 80026a0:	e7fc      	b.n	800269c <main+0x30>
	...

080026a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b09a      	sub	sp, #104	@ 0x68
 80026a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026aa:	f107 0320 	add.w	r3, r7, #32
 80026ae:	2248      	movs	r2, #72	@ 0x48
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f00e fafc 	bl	8010cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	609a      	str	r2, [r3, #8]
 80026c2:	60da      	str	r2, [r3, #12]
 80026c4:	611a      	str	r2, [r3, #16]
 80026c6:	615a      	str	r2, [r3, #20]
 80026c8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80026ca:	f001 f92d 	bl	8003928 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80026ce:	2010      	movs	r0, #16
 80026d0:	f7ff ff87 	bl	80025e2 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d4:	4b23      	ldr	r3, [pc, #140]	@ (8002764 <SystemClock_Config+0xc0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026dc:	4a21      	ldr	r2, [pc, #132]	@ (8002764 <SystemClock_Config+0xc0>)
 80026de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002764 <SystemClock_Config+0xc0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80026f0:	2327      	movs	r3, #39	@ 0x27
 80026f2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80026fa:	2301      	movs	r3, #1
 80026fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002704:	2301      	movs	r3, #1
 8002706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002708:	2340      	movs	r3, #64	@ 0x40
 800270a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800270c:	2300      	movs	r3, #0
 800270e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8002710:	23a0      	movs	r3, #160	@ 0xa0
 8002712:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002714:	2300      	movs	r3, #0
 8002716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002718:	f107 0320 	add.w	r3, r7, #32
 800271c:	4618      	mov	r0, r3
 800271e:	f001 fc97 	bl	8004050 <HAL_RCC_OscConfig>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002728:	f000 f98a 	bl	8002a40 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800272c:	236f      	movs	r3, #111	@ 0x6f
 800272e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002730:	2300      	movs	r3, #0
 8002732:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002738:	2300      	movs	r3, #0
 800273a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002740:	2300      	movs	r3, #0
 8002742:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002744:	2300      	movs	r3, #0
 8002746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	2101      	movs	r1, #1
 800274c:	4618      	mov	r0, r3
 800274e:	f001 fff3 	bl	8004738 <HAL_RCC_ClockConfig>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002758:	f000 f972 	bl	8002a40 <Error_Handler>
  }
}
 800275c:	bf00      	nop
 800275e:	3768      	adds	r7, #104	@ 0x68
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	58000400 	.word	0x58000400

08002768 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b094      	sub	sp, #80	@ 0x50
 800276c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800276e:	463b      	mov	r3, r7
 8002770:	2250      	movs	r2, #80	@ 0x50
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f00e fa9b 	bl	8010cb0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800277a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800277e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002780:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002784:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002786:	2300      	movs	r3, #0
 8002788:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800278a:	2300      	movs	r3, #0
 800278c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800278e:	463b      	mov	r3, r7
 8002790:	4618      	mov	r0, r3
 8002792:	f002 fc0e 	bl	8004fb2 <HAL_RCCEx_PeriphCLKConfig>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800279c:	f000 f950 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80027a0:	bf00      	nop
 80027a2:	3750      	adds	r7, #80	@ 0x50
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80027ac:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <MX_IPCC_Init+0x20>)
 80027ae:	4a07      	ldr	r2, [pc, #28]	@ (80027cc <MX_IPCC_Init+0x24>)
 80027b0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80027b2:	4805      	ldr	r0, [pc, #20]	@ (80027c8 <MX_IPCC_Init+0x20>)
 80027b4:	f001 f832 	bl	800381c <HAL_IPCC_Init>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80027be:	f000 f93f 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000364 	.word	0x20000364
 80027cc:	58000c00 	.word	0x58000c00

080027d0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80027e4:	4b16      	ldr	r3, [pc, #88]	@ (8002840 <MX_RTC_Init+0x60>)
 80027e6:	4a17      	ldr	r2, [pc, #92]	@ (8002844 <MX_RTC_Init+0x64>)
 80027e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80027ea:	4b15      	ldr	r3, [pc, #84]	@ (8002840 <MX_RTC_Init+0x60>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80027f0:	4b13      	ldr	r3, [pc, #76]	@ (8002840 <MX_RTC_Init+0x60>)
 80027f2:	220f      	movs	r2, #15
 80027f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80027f6:	4b12      	ldr	r3, [pc, #72]	@ (8002840 <MX_RTC_Init+0x60>)
 80027f8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80027fc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80027fe:	4b10      	ldr	r3, [pc, #64]	@ (8002840 <MX_RTC_Init+0x60>)
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002804:	4b0e      	ldr	r3, [pc, #56]	@ (8002840 <MX_RTC_Init+0x60>)
 8002806:	2200      	movs	r2, #0
 8002808:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800280a:	4b0d      	ldr	r3, [pc, #52]	@ (8002840 <MX_RTC_Init+0x60>)
 800280c:	2200      	movs	r2, #0
 800280e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002810:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <MX_RTC_Init+0x60>)
 8002812:	2200      	movs	r2, #0
 8002814:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002816:	480a      	ldr	r0, [pc, #40]	@ (8002840 <MX_RTC_Init+0x60>)
 8002818:	f002 fe52 	bl	80054c0 <HAL_RTC_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002822:	f000 f90d 	bl	8002a40 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002826:	2200      	movs	r2, #0
 8002828:	2100      	movs	r1, #0
 800282a:	4805      	ldr	r0, [pc, #20]	@ (8002840 <MX_RTC_Init+0x60>)
 800282c:	f002 ff48 	bl	80056c0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002836:	f000 f903 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200003a0 	.word	0x200003a0
 8002844:	40002800 	.word	0x40002800

08002848 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800284c:	4b1b      	ldr	r3, [pc, #108]	@ (80028bc <MX_SPI1_Init+0x74>)
 800284e:	4a1c      	ldr	r2, [pc, #112]	@ (80028c0 <MX_SPI1_Init+0x78>)
 8002850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002852:	4b1a      	ldr	r3, [pc, #104]	@ (80028bc <MX_SPI1_Init+0x74>)
 8002854:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800285a:	4b18      	ldr	r3, [pc, #96]	@ (80028bc <MX_SPI1_Init+0x74>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002860:	4b16      	ldr	r3, [pc, #88]	@ (80028bc <MX_SPI1_Init+0x74>)
 8002862:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002866:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002868:	4b14      	ldr	r3, [pc, #80]	@ (80028bc <MX_SPI1_Init+0x74>)
 800286a:	2200      	movs	r2, #0
 800286c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800286e:	4b13      	ldr	r3, [pc, #76]	@ (80028bc <MX_SPI1_Init+0x74>)
 8002870:	2200      	movs	r2, #0
 8002872:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002874:	4b11      	ldr	r3, [pc, #68]	@ (80028bc <MX_SPI1_Init+0x74>)
 8002876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800287a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800287c:	4b0f      	ldr	r3, [pc, #60]	@ (80028bc <MX_SPI1_Init+0x74>)
 800287e:	2208      	movs	r2, #8
 8002880:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002882:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <MX_SPI1_Init+0x74>)
 8002884:	2200      	movs	r2, #0
 8002886:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002888:	4b0c      	ldr	r3, [pc, #48]	@ (80028bc <MX_SPI1_Init+0x74>)
 800288a:	2200      	movs	r2, #0
 800288c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800288e:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <MX_SPI1_Init+0x74>)
 8002890:	2200      	movs	r2, #0
 8002892:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002894:	4b09      	ldr	r3, [pc, #36]	@ (80028bc <MX_SPI1_Init+0x74>)
 8002896:	2207      	movs	r2, #7
 8002898:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800289a:	4b08      	ldr	r3, [pc, #32]	@ (80028bc <MX_SPI1_Init+0x74>)
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028a0:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <MX_SPI1_Init+0x74>)
 80028a2:	2208      	movs	r2, #8
 80028a4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028a6:	4805      	ldr	r0, [pc, #20]	@ (80028bc <MX_SPI1_Init+0x74>)
 80028a8:	f002 ffc6 	bl	8005838 <HAL_SPI_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80028b2:	f000 f8c5 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	200003c4 	.word	0x200003c4
 80028c0:	40013000 	.word	0x40013000

080028c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028c8:	4b22      	ldr	r3, [pc, #136]	@ (8002954 <MX_USART1_UART_Init+0x90>)
 80028ca:	4a23      	ldr	r2, [pc, #140]	@ (8002958 <MX_USART1_UART_Init+0x94>)
 80028cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028ce:	4b21      	ldr	r3, [pc, #132]	@ (8002954 <MX_USART1_UART_Init+0x90>)
 80028d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002954 <MX_USART1_UART_Init+0x90>)
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <MX_USART1_UART_Init+0x90>)
 80028de:	2200      	movs	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002954 <MX_USART1_UART_Init+0x90>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002954 <MX_USART1_UART_Init+0x90>)
 80028ea:	220c      	movs	r2, #12
 80028ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ee:	4b19      	ldr	r3, [pc, #100]	@ (8002954 <MX_USART1_UART_Init+0x90>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f4:	4b17      	ldr	r3, [pc, #92]	@ (8002954 <MX_USART1_UART_Init+0x90>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028fa:	4b16      	ldr	r3, [pc, #88]	@ (8002954 <MX_USART1_UART_Init+0x90>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002900:	4b14      	ldr	r3, [pc, #80]	@ (8002954 <MX_USART1_UART_Init+0x90>)
 8002902:	2200      	movs	r2, #0
 8002904:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002906:	4b13      	ldr	r3, [pc, #76]	@ (8002954 <MX_USART1_UART_Init+0x90>)
 8002908:	2200      	movs	r2, #0
 800290a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800290c:	4811      	ldr	r0, [pc, #68]	@ (8002954 <MX_USART1_UART_Init+0x90>)
 800290e:	f003 fbdd 	bl	80060cc <HAL_UART_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002918:	f000 f892 	bl	8002a40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800291c:	2100      	movs	r1, #0
 800291e:	480d      	ldr	r0, [pc, #52]	@ (8002954 <MX_USART1_UART_Init+0x90>)
 8002920:	f004 f932 	bl	8006b88 <HAL_UARTEx_SetTxFifoThreshold>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800292a:	f000 f889 	bl	8002a40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800292e:	2100      	movs	r1, #0
 8002930:	4808      	ldr	r0, [pc, #32]	@ (8002954 <MX_USART1_UART_Init+0x90>)
 8002932:	f004 f967 	bl	8006c04 <HAL_UARTEx_SetRxFifoThreshold>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800293c:	f000 f880 	bl	8002a40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002940:	4804      	ldr	r0, [pc, #16]	@ (8002954 <MX_USART1_UART_Init+0x90>)
 8002942:	f004 f8e8 	bl	8006b16 <HAL_UARTEx_DisableFifoMode>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800294c:	f000 f878 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002950:	bf00      	nop
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000428 	.word	0x20000428
 8002958:	40013800 	.word	0x40013800

0800295c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002970:	2004      	movs	r0, #4
 8002972:	f7ff fe4c 	bl	800260e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002976:	2001      	movs	r0, #1
 8002978:	f7ff fe49 	bl	800260e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800297c:	2002      	movs	r0, #2
 800297e:	f7ff fe46 	bl	800260e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI_SEL2_Pin|SPI_SEL1_Pin|SEN_EN4_Pin|SEN_EN2_Pin, GPIO_PIN_RESET);
 8002982:	2200      	movs	r2, #0
 8002984:	f240 4143 	movw	r1, #1091	@ 0x443
 8002988:	482b      	ldr	r0, [pc, #172]	@ (8002a38 <MX_GPIO_Init+0xdc>)
 800298a:	f000 fecd 	bl	8003728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEN_EN1_Pin|SPI_SEL0_Pin|SEN_EN3_Pin, GPIO_PIN_RESET);
 800298e:	2200      	movs	r2, #0
 8002990:	f240 4103 	movw	r1, #1027	@ 0x403
 8002994:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002998:	f000 fec6 	bl	8003728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A121_SPI_SS_GPIO_Port, A121_SPI_SS_Pin, GPIO_PIN_SET);
 800299c:	2201      	movs	r2, #1
 800299e:	2110      	movs	r1, #16
 80029a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029a4:	f000 fec0 	bl	8003728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80029a8:	2200      	movs	r2, #0
 80029aa:	2120      	movs	r1, #32
 80029ac:	4823      	ldr	r0, [pc, #140]	@ (8002a3c <MX_GPIO_Init+0xe0>)
 80029ae:	f000 febb 	bl	8003728 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEN_INT2_Pin SEN_INT1_Pin */
  GPIO_InitStruct.Pin = SEN_INT2_Pin|SEN_INT1_Pin;
 80029b2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80029b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029b8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c2:	1d3b      	adds	r3, r7, #4
 80029c4:	4619      	mov	r1, r3
 80029c6:	481c      	ldr	r0, [pc, #112]	@ (8002a38 <MX_GPIO_Init+0xdc>)
 80029c8:	f000 fd26 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_SEL2_Pin SPI_SEL1_Pin SEN_EN4_Pin SEN_EN2_Pin */
  GPIO_InitStruct.Pin = SPI_SEL2_Pin|SPI_SEL1_Pin|SEN_EN4_Pin|SEN_EN2_Pin;
 80029cc:	f240 4343 	movw	r3, #1091	@ 0x443
 80029d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d2:	2301      	movs	r3, #1
 80029d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	4619      	mov	r1, r3
 80029e2:	4815      	ldr	r0, [pc, #84]	@ (8002a38 <MX_GPIO_Init+0xdc>)
 80029e4:	f000 fd18 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEN_EN1_Pin SPI_SEL0_Pin A121_SPI_SS_Pin SEN_EN3_Pin */
  GPIO_InitStruct.Pin = SEN_EN1_Pin|SPI_SEL0_Pin|A121_SPI_SS_Pin|SEN_EN3_Pin;
 80029e8:	f240 4313 	movw	r3, #1043	@ 0x413
 80029ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ee:	2301      	movs	r3, #1
 80029f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f6:	2303      	movs	r3, #3
 80029f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fa:	1d3b      	adds	r3, r7, #4
 80029fc:	4619      	mov	r1, r3
 80029fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a02:	f000 fd09 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8002a06:	2320      	movs	r3, #32
 8002a08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4808      	ldr	r0, [pc, #32]	@ (8002a3c <MX_GPIO_Init+0xe0>)
 8002a1c:	f000 fcfc 	bl	8003418 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2100      	movs	r1, #0
 8002a24:	2028      	movs	r0, #40	@ 0x28
 8002a26:	f000 fc98 	bl	800335a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a2a:	2028      	movs	r0, #40	@ 0x28
 8002a2c:	f000 fcaf 	bl	800338e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a30:	bf00      	nop
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	48000800 	.word	0x48000800
 8002a3c:	48000400 	.word	0x48000400

08002a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a44:	b672      	cpsid	i
}
 8002a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <Error_Handler+0x8>

08002a4c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002a50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <LL_AHB2_GRP1_EnableClock>:
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b085      	sub	sp, #20
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002aae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002ab8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002abc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ade:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ae0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4013      	ands	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002af6:	68fb      	ldr	r3, [r7, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4013      	ands	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b28:	68fb      	ldr	r3, [r7, #12]
}
 8002b2a:	bf00      	nop
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002b3a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002b3e:	f7ff ffaf 	bl	8002aa0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2100      	movs	r1, #0
 8002b46:	202e      	movs	r0, #46	@ 0x2e
 8002b48:	f000 fc07 	bl	800335a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002b4c:	202e      	movs	r0, #46	@ 0x2e
 8002b4e:	f000 fc1e 	bl	800338e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0d      	ldr	r2, [pc, #52]	@ (8002b9c <HAL_IPCC_MspInit+0x44>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d113      	bne.n	8002b92 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002b6a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002b6e:	f7ff ff97 	bl	8002aa0 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2100      	movs	r1, #0
 8002b76:	202c      	movs	r0, #44	@ 0x2c
 8002b78:	f000 fbef 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002b7c:	202c      	movs	r0, #44	@ 0x2c
 8002b7e:	f000 fc06 	bl	800338e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	202d      	movs	r0, #45	@ 0x2d
 8002b88:	f000 fbe7 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002b8c:	202d      	movs	r0, #45	@ 0x2d
 8002b8e:	f000 fbfe 	bl	800338e <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	58000c00 	.word	0x58000c00

08002ba0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b096      	sub	sp, #88	@ 0x58
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ba8:	f107 0308 	add.w	r3, r7, #8
 8002bac:	2250      	movs	r2, #80	@ 0x50
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f00e f87d 	bl	8010cb0 <memset>
  if(hrtc->Instance==RTC)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a12      	ldr	r2, [pc, #72]	@ (8002c04 <HAL_RTC_MspInit+0x64>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d11d      	bne.n	8002bfc <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002bc0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002bc4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002bc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bca:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bcc:	f107 0308 	add.w	r3, r7, #8
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f002 f9ee 	bl	8004fb2 <HAL_RCCEx_PeriphCLKConfig>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002bdc:	f7ff ff30 	bl	8002a40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002be0:	f7ff ff34 	bl	8002a4c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002be4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002be8:	f7ff ff73 	bl	8002ad2 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002bec:	2200      	movs	r2, #0
 8002bee:	2100      	movs	r1, #0
 8002bf0:	2003      	movs	r0, #3
 8002bf2:	f000 fbb2 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002bf6:	2003      	movs	r0, #3
 8002bf8:	f000 fbc9 	bl	800338e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002bfc:	bf00      	nop
 8002bfe:	3758      	adds	r7, #88	@ 0x58
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40002800 	.word	0x40002800

08002c08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c10:	f107 030c 	add.w	r3, r7, #12
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0f      	ldr	r2, [pc, #60]	@ (8002c64 <HAL_SPI_MspInit+0x5c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d117      	bne.n	8002c5a <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c2a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002c2e:	f7ff ff69 	bl	8002b04 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c32:	2001      	movs	r0, #1
 8002c34:	f7ff ff1b 	bl	8002a6e <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002c38:	23e0      	movs	r3, #224	@ 0xe0
 8002c3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c48:	2305      	movs	r3, #5
 8002c4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4c:	f107 030c 	add.w	r3, r7, #12
 8002c50:	4619      	mov	r1, r3
 8002c52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c56:	f000 fbdf 	bl	8003418 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002c5a:	bf00      	nop
 8002c5c:	3720      	adds	r7, #32
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40013000 	.word	0x40013000

08002c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b09c      	sub	sp, #112	@ 0x70
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c80:	f107 030c 	add.w	r3, r7, #12
 8002c84:	2250      	movs	r2, #80	@ 0x50
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f00e f811 	bl	8010cb0 <memset>
  if(huart->Instance==USART1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a16      	ldr	r2, [pc, #88]	@ (8002cec <HAL_UART_MspInit+0x84>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d124      	bne.n	8002ce2 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ca0:	f107 030c 	add.w	r3, r7, #12
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f002 f984 	bl	8004fb2 <HAL_RCCEx_PeriphCLKConfig>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002cb0:	f7ff fec6 	bl	8002a40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cb4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002cb8:	f7ff ff24 	bl	8002b04 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbc:	2002      	movs	r0, #2
 8002cbe:	f7ff fed6 	bl	8002a6e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002cc2:	23c0      	movs	r3, #192	@ 0xc0
 8002cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cd2:	2307      	movs	r3, #7
 8002cd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4804      	ldr	r0, [pc, #16]	@ (8002cf0 <HAL_UART_MspInit+0x88>)
 8002cde:	f000 fb9b 	bl	8003418 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002ce2:	bf00      	nop
 8002ce4:	3770      	adds	r7, #112	@ 0x70
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40013800 	.word	0x40013800
 8002cf0:	48000400 	.word	0x48000400

08002cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cf8:	bf00      	nop
 8002cfa:	e7fd      	b.n	8002cf8 <NMI_Handler+0x4>

08002cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d00:	bf00      	nop
 8002d02:	e7fd      	b.n	8002d00 <HardFault_Handler+0x4>

08002d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d08:	bf00      	nop
 8002d0a:	e7fd      	b.n	8002d08 <MemManage_Handler+0x4>

08002d0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d10:	bf00      	nop
 8002d12:	e7fd      	b.n	8002d10 <BusFault_Handler+0x4>

08002d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d18:	bf00      	nop
 8002d1a:	e7fd      	b.n	8002d18 <UsageFault_Handler+0x4>

08002d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d4a:	f000 f993 	bl	8003074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002d56:	f7ff f98b 	bl	8002070 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEN_INT1_Pin);
 8002d62:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002d66:	f000 fd11 	bl	800378c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SEN_INT2_Pin);
 8002d6a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002d6e:	f000 fd0d 	bl	800378c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002d7a:	f007 f86d 	bl	8009e58 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002d86:	f007 f89d 	bl	8009ec4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002d92:	f000 fd1f 	bl	80037d4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	e00a      	b.n	8002dc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dac:	f3af 8000 	nop.w
 8002db0:	4601      	mov	r1, r0
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	60ba      	str	r2, [r7, #8]
 8002db8:	b2ca      	uxtb	r2, r1
 8002dba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	dbf0      	blt.n	8002dac <_read+0x12>
  }

  return len;
 8002dca:	687b      	ldr	r3, [r7, #4]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dfc:	605a      	str	r2, [r3, #4]
  return 0;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <_isatty>:

int _isatty(int file)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e14:	2301      	movs	r3, #1
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e44:	4a14      	ldr	r2, [pc, #80]	@ (8002e98 <_sbrk+0x5c>)
 8002e46:	4b15      	ldr	r3, [pc, #84]	@ (8002e9c <_sbrk+0x60>)
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e50:	4b13      	ldr	r3, [pc, #76]	@ (8002ea0 <_sbrk+0x64>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e58:	4b11      	ldr	r3, [pc, #68]	@ (8002ea0 <_sbrk+0x64>)
 8002e5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ea4 <_sbrk+0x68>)
 8002e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ea0 <_sbrk+0x64>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d207      	bcs.n	8002e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e6c:	f00d ff7e 	bl	8010d6c <__errno>
 8002e70:	4603      	mov	r3, r0
 8002e72:	220c      	movs	r2, #12
 8002e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7a:	e009      	b.n	8002e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ea0 <_sbrk+0x64>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e82:	4b07      	ldr	r3, [pc, #28]	@ (8002ea0 <_sbrk+0x64>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4413      	add	r3, r2
 8002e8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ea0 <_sbrk+0x64>)
 8002e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20030000 	.word	0x20030000
 8002e9c:	00000400 	.word	0x00000400
 8002ea0:	200004bc 	.word	0x200004bc
 8002ea4:	200009f8 	.word	0x200009f8

08002ea8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002eac:	4b24      	ldr	r3, [pc, #144]	@ (8002f40 <SystemInit+0x98>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb2:	4a23      	ldr	r2, [pc, #140]	@ (8002f40 <SystemInit+0x98>)
 8002eb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002eb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002ecc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ed0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002ed4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ee0:	4b18      	ldr	r3, [pc, #96]	@ (8002f44 <SystemInit+0x9c>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ef2:	f023 0305 	bic.w	r3, r3, #5
 8002ef6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f06:	f023 0301 	bic.w	r3, r3, #1
 8002f0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002f0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f12:	4a0d      	ldr	r2, [pc, #52]	@ (8002f48 <SystemInit+0xa0>)
 8002f14:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	@ (8002f48 <SystemInit+0xa0>)
 8002f1c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f32:	2200      	movs	r2, #0
 8002f34:	619a      	str	r2, [r3, #24]
}
 8002f36:	bf00      	nop
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00
 8002f44:	faf6fefb 	.word	0xfaf6fefb
 8002f48:	22041000 	.word	0x22041000

08002f4c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002f4c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f4e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f50:	3304      	adds	r3, #4

08002f52 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f52:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f54:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002f56:	d3f9      	bcc.n	8002f4c <CopyDataInit>
  bx lr
 8002f58:	4770      	bx	lr

08002f5a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002f5a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002f5c:	3004      	adds	r0, #4

08002f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002f5e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002f60:	d3fb      	bcc.n	8002f5a <FillZerobss>
  bx lr
 8002f62:	4770      	bx	lr

08002f64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f64:	480c      	ldr	r0, [pc, #48]	@ (8002f98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f66:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f68:	f7ff ff9e 	bl	8002ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002f6c:	480b      	ldr	r0, [pc, #44]	@ (8002f9c <LoopForever+0x6>)
 8002f6e:	490c      	ldr	r1, [pc, #48]	@ (8002fa0 <LoopForever+0xa>)
 8002f70:	4a0c      	ldr	r2, [pc, #48]	@ (8002fa4 <LoopForever+0xe>)
 8002f72:	2300      	movs	r3, #0
 8002f74:	f7ff ffed 	bl	8002f52 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002f78:	480b      	ldr	r0, [pc, #44]	@ (8002fa8 <LoopForever+0x12>)
 8002f7a:	490c      	ldr	r1, [pc, #48]	@ (8002fac <LoopForever+0x16>)
 8002f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8002fb0 <LoopForever+0x1a>)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f7ff ffe7 	bl	8002f52 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002f84:	480b      	ldr	r0, [pc, #44]	@ (8002fb4 <LoopForever+0x1e>)
 8002f86:	490c      	ldr	r1, [pc, #48]	@ (8002fb8 <LoopForever+0x22>)
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f7ff ffe8 	bl	8002f5e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f8e:	f00d fef3 	bl	8010d78 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002f92:	f7ff fb6b 	bl	800266c <main>

08002f96 <LoopForever>:

LoopForever:
  b LoopForever
 8002f96:	e7fe      	b.n	8002f96 <LoopForever>
  ldr   r0, =_estack
 8002f98:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002f9c:	20000008 	.word	0x20000008
 8002fa0:	20000228 	.word	0x20000228
 8002fa4:	08018078 	.word	0x08018078
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002fa8:	200301e4 	.word	0x200301e4
 8002fac:	20030a67 	.word	0x20030a67
 8002fb0:	080182de 	.word	0x080182de
  INIT_BSS _sbss, _ebss
 8002fb4:	20000274 	.word	0x20000274
 8002fb8:	200009f4 	.word	0x200009f4

08002fbc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fbc:	e7fe      	b.n	8002fbc <ADC1_IRQHandler>
	...

08002fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fca:	4b0c      	ldr	r3, [pc, #48]	@ (8002ffc <HAL_Init+0x3c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a0b      	ldr	r2, [pc, #44]	@ (8002ffc <HAL_Init+0x3c>)
 8002fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd6:	2003      	movs	r0, #3
 8002fd8:	f000 f9b4 	bl	8003344 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f000 f80f 	bl	8003000 <HAL_InitTick>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	71fb      	strb	r3, [r7, #7]
 8002fec:	e001      	b.n	8002ff2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fee:	f7ff fda2 	bl	8002b36 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	58004000 	.word	0x58004000

08003000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800300c:	4b17      	ldr	r3, [pc, #92]	@ (800306c <HAL_InitTick+0x6c>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d024      	beq.n	800305e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003014:	f001 fd3c 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8003018:	4602      	mov	r2, r0
 800301a:	4b14      	ldr	r3, [pc, #80]	@ (800306c <HAL_InitTick+0x6c>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	4619      	mov	r1, r3
 8003020:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003024:	fbb3 f3f1 	udiv	r3, r3, r1
 8003028:	fbb2 f3f3 	udiv	r3, r2, r3
 800302c:	4618      	mov	r0, r3
 800302e:	f000 f9ca 	bl	80033c6 <HAL_SYSTICK_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10f      	bne.n	8003058 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b0f      	cmp	r3, #15
 800303c:	d809      	bhi.n	8003052 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800303e:	2200      	movs	r2, #0
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	f04f 30ff 	mov.w	r0, #4294967295
 8003046:	f000 f988 	bl	800335a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800304a:	4a09      	ldr	r2, [pc, #36]	@ (8003070 <HAL_InitTick+0x70>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	e007      	b.n	8003062 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
 8003056:	e004      	b.n	8003062 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
 800305c:	e001      	b.n	8003062 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003062:	7bfb      	ldrb	r3, [r7, #15]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20000010 	.word	0x20000010
 8003070:	2000000c 	.word	0x2000000c

08003074 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003078:	4b06      	ldr	r3, [pc, #24]	@ (8003094 <HAL_IncTick+0x20>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	4b06      	ldr	r3, [pc, #24]	@ (8003098 <HAL_IncTick+0x24>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4413      	add	r3, r2
 8003084:	4a04      	ldr	r2, [pc, #16]	@ (8003098 <HAL_IncTick+0x24>)
 8003086:	6013      	str	r3, [r2, #0]
}
 8003088:	bf00      	nop
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000010 	.word	0x20000010
 8003098:	200004c0 	.word	0x200004c0

0800309c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return uwTick;
 80030a0:	4b03      	ldr	r3, [pc, #12]	@ (80030b0 <HAL_GetTick+0x14>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	200004c0 	.word	0x200004c0

080030b4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80030b8:	4b03      	ldr	r3, [pc, #12]	@ (80030c8 <HAL_GetTickPrio+0x14>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	2000000c 	.word	0x2000000c

080030cc <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80030d0:	4b03      	ldr	r3, [pc, #12]	@ (80030e0 <HAL_GetTickFreq+0x14>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000010 	.word	0x20000010

080030e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003100:	4013      	ands	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800310c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003116:	4a04      	ldr	r2, [pc, #16]	@ (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	60d3      	str	r3, [r2, #12]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003130:	4b04      	ldr	r3, [pc, #16]	@ (8003144 <__NVIC_GetPriorityGrouping+0x18>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	0a1b      	lsrs	r3, r3, #8
 8003136:	f003 0307 	and.w	r3, r3, #7
}
 800313a:	4618      	mov	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	2b00      	cmp	r3, #0
 8003158:	db0b      	blt.n	8003172 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	f003 021f 	and.w	r2, r3, #31
 8003160:	4907      	ldr	r1, [pc, #28]	@ (8003180 <__NVIC_EnableIRQ+0x38>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	2001      	movs	r0, #1
 800316a:	fa00 f202 	lsl.w	r2, r0, r2
 800316e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000e100 	.word	0xe000e100

08003184 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003192:	2b00      	cmp	r3, #0
 8003194:	db12      	blt.n	80031bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	f003 021f 	and.w	r2, r3, #31
 800319c:	490a      	ldr	r1, [pc, #40]	@ (80031c8 <__NVIC_DisableIRQ+0x44>)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	2001      	movs	r0, #1
 80031a6:	fa00 f202 	lsl.w	r2, r0, r2
 80031aa:	3320      	adds	r3, #32
 80031ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80031b0:	f3bf 8f4f 	dsb	sy
}
 80031b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031b6:	f3bf 8f6f 	isb	sy
}
 80031ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000e100 	.word	0xe000e100

080031cc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	db0c      	blt.n	80031f8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	f003 021f 	and.w	r2, r3, #31
 80031e4:	4907      	ldr	r1, [pc, #28]	@ (8003204 <__NVIC_SetPendingIRQ+0x38>)
 80031e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	2001      	movs	r0, #1
 80031ee:	fa00 f202 	lsl.w	r2, r0, r2
 80031f2:	3340      	adds	r3, #64	@ 0x40
 80031f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000e100 	.word	0xe000e100

08003208 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	2b00      	cmp	r3, #0
 8003218:	db0c      	blt.n	8003234 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	f003 021f 	and.w	r2, r3, #31
 8003220:	4907      	ldr	r1, [pc, #28]	@ (8003240 <__NVIC_ClearPendingIRQ+0x38>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2001      	movs	r0, #1
 800322a:	fa00 f202 	lsl.w	r2, r0, r2
 800322e:	3360      	adds	r3, #96	@ 0x60
 8003230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000e100 	.word	0xe000e100

08003244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	6039      	str	r1, [r7, #0]
 800324e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	2b00      	cmp	r3, #0
 8003256:	db0a      	blt.n	800326e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	490c      	ldr	r1, [pc, #48]	@ (8003290 <__NVIC_SetPriority+0x4c>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	0112      	lsls	r2, r2, #4
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	440b      	add	r3, r1
 8003268:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800326c:	e00a      	b.n	8003284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	b2da      	uxtb	r2, r3
 8003272:	4908      	ldr	r1, [pc, #32]	@ (8003294 <__NVIC_SetPriority+0x50>)
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	3b04      	subs	r3, #4
 800327c:	0112      	lsls	r2, r2, #4
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	440b      	add	r3, r1
 8003282:	761a      	strb	r2, [r3, #24]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000e100 	.word	0xe000e100
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	@ 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f1c3 0307 	rsb	r3, r3, #7
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	bf28      	it	cs
 80032b6:	2304      	movcs	r3, #4
 80032b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3304      	adds	r3, #4
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d902      	bls.n	80032c8 <NVIC_EncodePriority+0x30>
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3b03      	subs	r3, #3
 80032c6:	e000      	b.n	80032ca <NVIC_EncodePriority+0x32>
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	f04f 32ff 	mov.w	r2, #4294967295
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43da      	mvns	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	401a      	ands	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e0:	f04f 31ff 	mov.w	r1, #4294967295
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ea:	43d9      	mvns	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	4313      	orrs	r3, r2
         );
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3724      	adds	r7, #36	@ 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
	...

08003300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3b01      	subs	r3, #1
 800330c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003310:	d301      	bcc.n	8003316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003312:	2301      	movs	r3, #1
 8003314:	e00f      	b.n	8003336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003316:	4a0a      	ldr	r2, [pc, #40]	@ (8003340 <SysTick_Config+0x40>)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3b01      	subs	r3, #1
 800331c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800331e:	210f      	movs	r1, #15
 8003320:	f04f 30ff 	mov.w	r0, #4294967295
 8003324:	f7ff ff8e 	bl	8003244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003328:	4b05      	ldr	r3, [pc, #20]	@ (8003340 <SysTick_Config+0x40>)
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800332e:	4b04      	ldr	r3, [pc, #16]	@ (8003340 <SysTick_Config+0x40>)
 8003330:	2207      	movs	r2, #7
 8003332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	e000e010 	.word	0xe000e010

08003344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff fec9 	bl	80030e4 <__NVIC_SetPriorityGrouping>
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	4603      	mov	r3, r0
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003368:	f7ff fee0 	bl	800312c <__NVIC_GetPriorityGrouping>
 800336c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	6978      	ldr	r0, [r7, #20]
 8003374:	f7ff ff90 	bl	8003298 <NVIC_EncodePriority>
 8003378:	4602      	mov	r2, r0
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff5f 	bl	8003244 <__NVIC_SetPriority>
}
 8003386:	bf00      	nop
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	4603      	mov	r3, r0
 8003396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fed3 	bl	8003148 <__NVIC_EnableIRQ>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	4603      	mov	r3, r0
 80033b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fee3 	bl	8003184 <__NVIC_DisableIRQ>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff ff96 	bl	8003300 <SysTick_Config>
 80033d4:	4603      	mov	r3, r0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	4603      	mov	r3, r0
 80033e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80033e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff feed 	bl	80031cc <__NVIC_SetPendingIRQ>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fefd 	bl	8003208 <__NVIC_ClearPendingIRQ>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003426:	e14c      	b.n	80036c2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	2101      	movs	r1, #1
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	fa01 f303 	lsl.w	r3, r1, r3
 8003434:	4013      	ands	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 813e 	beq.w	80036bc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d005      	beq.n	8003458 <HAL_GPIO_Init+0x40>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d130      	bne.n	80034ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2203      	movs	r2, #3
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4013      	ands	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800348e:	2201      	movs	r2, #1
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4013      	ands	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	f003 0201 	and.w	r2, r3, #1
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d017      	beq.n	80034f6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	2203      	movs	r2, #3
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4013      	ands	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d123      	bne.n	800354a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	08da      	lsrs	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3208      	adds	r2, #8
 800350a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	220f      	movs	r2, #15
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	08da      	lsrs	r2, r3, #3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3208      	adds	r2, #8
 8003544:	6939      	ldr	r1, [r7, #16]
 8003546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	2203      	movs	r2, #3
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4013      	ands	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 0203 	and.w	r2, r3, #3
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8098 	beq.w	80036bc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800358c:	4a54      	ldr	r2, [pc, #336]	@ (80036e0 <HAL_GPIO_Init+0x2c8>)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	3302      	adds	r3, #2
 8003594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003598:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	220f      	movs	r2, #15
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4013      	ands	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80035b6:	d019      	beq.n	80035ec <HAL_GPIO_Init+0x1d4>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a4a      	ldr	r2, [pc, #296]	@ (80036e4 <HAL_GPIO_Init+0x2cc>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d013      	beq.n	80035e8 <HAL_GPIO_Init+0x1d0>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a49      	ldr	r2, [pc, #292]	@ (80036e8 <HAL_GPIO_Init+0x2d0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00d      	beq.n	80035e4 <HAL_GPIO_Init+0x1cc>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a48      	ldr	r2, [pc, #288]	@ (80036ec <HAL_GPIO_Init+0x2d4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d007      	beq.n	80035e0 <HAL_GPIO_Init+0x1c8>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a47      	ldr	r2, [pc, #284]	@ (80036f0 <HAL_GPIO_Init+0x2d8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d101      	bne.n	80035dc <HAL_GPIO_Init+0x1c4>
 80035d8:	2304      	movs	r3, #4
 80035da:	e008      	b.n	80035ee <HAL_GPIO_Init+0x1d6>
 80035dc:	2307      	movs	r3, #7
 80035de:	e006      	b.n	80035ee <HAL_GPIO_Init+0x1d6>
 80035e0:	2303      	movs	r3, #3
 80035e2:	e004      	b.n	80035ee <HAL_GPIO_Init+0x1d6>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e002      	b.n	80035ee <HAL_GPIO_Init+0x1d6>
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <HAL_GPIO_Init+0x1d6>
 80035ec:	2300      	movs	r3, #0
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	f002 0203 	and.w	r2, r2, #3
 80035f4:	0092      	lsls	r2, r2, #2
 80035f6:	4093      	lsls	r3, r2
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035fe:	4938      	ldr	r1, [pc, #224]	@ (80036e0 <HAL_GPIO_Init+0x2c8>)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	089b      	lsrs	r3, r3, #2
 8003604:	3302      	adds	r3, #2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800360c:	4b39      	ldr	r3, [pc, #228]	@ (80036f4 <HAL_GPIO_Init+0x2dc>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	43db      	mvns	r3, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003630:	4a30      	ldr	r2, [pc, #192]	@ (80036f4 <HAL_GPIO_Init+0x2dc>)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003636:	4b2f      	ldr	r3, [pc, #188]	@ (80036f4 <HAL_GPIO_Init+0x2dc>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	43db      	mvns	r3, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800365a:	4a26      	ldr	r2, [pc, #152]	@ (80036f4 <HAL_GPIO_Init+0x2dc>)
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003660:	4b24      	ldr	r3, [pc, #144]	@ (80036f4 <HAL_GPIO_Init+0x2dc>)
 8003662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	43db      	mvns	r3, r3
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4013      	ands	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003686:	4a1b      	ldr	r2, [pc, #108]	@ (80036f4 <HAL_GPIO_Init+0x2dc>)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800368e:	4b19      	ldr	r3, [pc, #100]	@ (80036f4 <HAL_GPIO_Init+0x2dc>)
 8003690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	43db      	mvns	r3, r3
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4013      	ands	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036b4:	4a0f      	ldr	r2, [pc, #60]	@ (80036f4 <HAL_GPIO_Init+0x2dc>)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	3301      	adds	r3, #1
 80036c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f47f aeab 	bne.w	8003428 <HAL_GPIO_Init+0x10>
  }
}
 80036d2:	bf00      	nop
 80036d4:	bf00      	nop
 80036d6:	371c      	adds	r7, #28
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	40010000 	.word	0x40010000
 80036e4:	48000400 	.word	0x48000400
 80036e8:	48000800 	.word	0x48000800
 80036ec:	48000c00 	.word	0x48000c00
 80036f0:	48001000 	.word	0x48001000
 80036f4:	58000800 	.word	0x58000800

080036f8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	887b      	ldrh	r3, [r7, #2]
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
 8003714:	e001      	b.n	800371a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003716:	2300      	movs	r3, #0
 8003718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800371a:	7bfb      	ldrb	r3, [r7, #15]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	807b      	strh	r3, [r7, #2]
 8003734:	4613      	mov	r3, r2
 8003736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003738:	787b      	ldrb	r3, [r7, #1]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800373e:	887a      	ldrh	r2, [r7, #2]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003744:	e002      	b.n	800374c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003746:	887a      	ldrh	r2, [r7, #2]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800376a:	887a      	ldrh	r2, [r7, #2]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4013      	ands	r3, r2
 8003770:	041a      	lsls	r2, r3, #16
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	43d9      	mvns	r1, r3
 8003776:	887b      	ldrh	r3, [r7, #2]
 8003778:	400b      	ands	r3, r1
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	619a      	str	r2, [r3, #24]
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003796:	4b08      	ldr	r3, [pc, #32]	@ (80037b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	88fb      	ldrh	r3, [r7, #6]
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d006      	beq.n	80037b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037a2:	4a05      	ldr	r2, [pc, #20]	@ (80037b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037a4:	88fb      	ldrh	r3, [r7, #6]
 80037a6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037a8:	88fb      	ldrh	r3, [r7, #6]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f806 	bl	80037bc <HAL_GPIO_EXTI_Callback>
  }
}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	58000800 	.word	0x58000800

080037bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80037da:	4b0a      	ldr	r3, [pc, #40]	@ (8003804 <HAL_HSEM_IRQHandler+0x30>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80037e0:	4b08      	ldr	r3, [pc, #32]	@ (8003804 <HAL_HSEM_IRQHandler+0x30>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	4906      	ldr	r1, [pc, #24]	@ (8003804 <HAL_HSEM_IRQHandler+0x30>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80037ee:	4a05      	ldr	r2, [pc, #20]	@ (8003804 <HAL_HSEM_IRQHandler+0x30>)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f807 	bl	8003808 <HAL_HSEM_FreeCallback>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	58001500 	.word	0x58001500

08003808 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003824:	2300      	movs	r3, #0
 8003826:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d01e      	beq.n	800386c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800382e:	4b13      	ldr	r3, [pc, #76]	@ (800387c <HAL_IPCC_Init+0x60>)
 8003830:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff f98a 	bl	8002b58 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003844:	68b8      	ldr	r0, [r7, #8]
 8003846:	f000 f85b 	bl	8003900 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f82c 	bl	80038b4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800386a:	e001      	b.n	8003870 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003870:	7bfb      	ldrb	r3, [r7, #15]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	58000c00 	.word	0x58000c00

08003880 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	4613      	mov	r3, r2
 800388c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800389a:	b480      	push	{r7}
 800389c:	b085      	sub	sp, #20
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	4613      	mov	r3, r2
 80038a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	e00f      	b.n	80038e2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	4a0b      	ldr	r2, [pc, #44]	@ (80038f8 <IPCC_SetDefaultCallbacks+0x44>)
 80038cc:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	3306      	adds	r3, #6
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	4a08      	ldr	r2, [pc, #32]	@ (80038fc <IPCC_SetDefaultCallbacks+0x48>)
 80038da:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3301      	adds	r3, #1
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b05      	cmp	r3, #5
 80038e6:	d9ec      	bls.n	80038c2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	08003881 	.word	0x08003881
 80038fc:	0800389b 	.word	0x0800389b

08003900 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8003914:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	223f      	movs	r2, #63	@ 0x3f
 800391a:	609a      	str	r2, [r3, #8]
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800392c:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a04      	ldr	r2, [pc, #16]	@ (8003944 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003936:	6013      	str	r3, [r2, #0]
}
 8003938:	bf00      	nop
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	58000400 	.word	0x58000400

08003948 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800394c:	4b04      	ldr	r3, [pc, #16]	@ (8003960 <HAL_PWREx_GetVoltageRange+0x18>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	58000400 	.word	0x58000400

08003964 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003972:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003976:	d101      	bne.n	800397c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <LL_RCC_HSE_Enable>:
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800398c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800399a:	6013      	str	r3, [r2, #0]
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <LL_RCC_HSE_Disable>:
{
 80039a6:	b480      	push	{r7}
 80039a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80039aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
}
 80039ba:	bf00      	nop
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <LL_RCC_HSE_IsReady>:
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80039c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039d6:	d101      	bne.n	80039dc <LL_RCC_HSE_IsReady+0x18>
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <LL_RCC_HSE_IsReady+0x1a>
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <LL_RCC_HSI_Enable>:
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80039ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039fa:	6013      	str	r3, [r2, #0]
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <LL_RCC_HSI_Disable>:
{
 8003a06:	b480      	push	{r7}
 8003a08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a18:	6013      	str	r3, [r2, #0]
}
 8003a1a:	bf00      	nop
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <LL_RCC_HSI_IsReady>:
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a36:	d101      	bne.n	8003a3c <LL_RCC_HSI_IsReady+0x18>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <LL_RCC_HSI_IsReady+0x1a>
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003a50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	061b      	lsls	r3, r3, #24
 8003a5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a62:	4313      	orrs	r3, r2
 8003a64:	604b      	str	r3, [r1, #4]
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <LL_RCC_HSI48_Enable>:
{
 8003a72:	b480      	push	{r7}
 8003a74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003a8a:	bf00      	nop
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <LL_RCC_HSI48_Disable>:
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003aa0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <LL_RCC_HSI48_IsReady>:
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003aba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d101      	bne.n	8003ace <LL_RCC_HSI48_IsReady+0x18>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <LL_RCC_HSI48_IsReady+0x1a>
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <LL_RCC_LSE_Enable>:
{
 8003ada:	b480      	push	{r7}
 8003adc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ade:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003af2:	bf00      	nop
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <LL_RCC_LSE_Disable>:
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003b14:	bf00      	nop
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <LL_RCC_LSE_EnableBypass>:
{
 8003b1e:	b480      	push	{r7}
 8003b20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b2e:	f043 0304 	orr.w	r3, r3, #4
 8003b32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003b36:	bf00      	nop
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <LL_RCC_LSE_DisableBypass>:
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b50:	f023 0304 	bic.w	r3, r3, #4
 8003b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003b58:	bf00      	nop
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <LL_RCC_LSE_IsReady>:
{
 8003b62:	b480      	push	{r7}
 8003b64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d101      	bne.n	8003b7a <LL_RCC_LSE_IsReady+0x18>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <LL_RCC_LSE_IsReady+0x1a>
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <LL_RCC_LSI1_Enable>:
{
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003b9e:	bf00      	nop
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <LL_RCC_LSI1_Disable>:
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <LL_RCC_LSI1_IsReady>:
{
 8003bca:	b480      	push	{r7}
 8003bcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d101      	bne.n	8003be2 <LL_RCC_LSI1_IsReady+0x18>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <LL_RCC_LSI1_IsReady+0x1a>
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <LL_RCC_LSI2_Enable>:
{
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003c06:	bf00      	nop
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <LL_RCC_LSI2_Disable>:
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c20:	f023 0304 	bic.w	r3, r3, #4
 8003c24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <LL_RCC_LSI2_IsReady>:
{
 8003c32:	b480      	push	{r7}
 8003c34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d101      	bne.n	8003c4a <LL_RCC_LSI2_IsReady+0x18>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <LL_RCC_LSI2_IsReady+0x1a>
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <LL_RCC_LSI2_SetTrimming>:
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003c5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c66:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	021b      	lsls	r3, r3, #8
 8003c6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <LL_RCC_MSI_Enable>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	6013      	str	r3, [r2, #0]
}
 8003c98:	bf00      	nop
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <LL_RCC_MSI_Disable>:
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	6013      	str	r3, [r2, #0]
}
 8003cb6:	bf00      	nop
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <LL_RCC_MSI_IsReady>:
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d101      	bne.n	8003cd6 <LL_RCC_MSI_IsReady+0x16>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <LL_RCC_MSI_IsReady+0x18>
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <LL_RCC_MSI_SetRange>:
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	600b      	str	r3, [r1, #0]
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_RCC_MSI_GetRange>:
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d1a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2bb0      	cmp	r3, #176	@ 0xb0
 8003d20:	d901      	bls.n	8003d26 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003d22:	23b0      	movs	r3, #176	@ 0xb0
 8003d24:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003d26:	687b      	ldr	r3, [r7, #4]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	021b      	lsls	r3, r3, #8
 8003d4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	604b      	str	r3, [r1, #4]
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <LL_RCC_SetSysClkSource>:
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f023 0203 	bic.w	r2, r3, #3
 8003d70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <LL_RCC_GetSysClkSource>:
{
 8003d86:	b480      	push	{r7}
 8003d88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 030c 	and.w	r3, r3, #12
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <LL_RCC_SetAHBPrescaler>:
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003db0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003dce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003dd6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <LL_RCC_SetAHB4Prescaler>:
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003dfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dfe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003e02:	f023 020f 	bic.w	r2, r3, #15
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	091b      	lsrs	r3, r3, #4
 8003e0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <LL_RCC_SetAPB1Prescaler>:
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	608b      	str	r3, [r1, #8]
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <LL_RCC_SetAPB2Prescaler>:
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	608b      	str	r3, [r1, #8]
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <LL_RCC_GetAHBPrescaler>:
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <LL_RCC_GetAHB4Prescaler>:
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e90:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <LL_RCC_GetAPB1Prescaler>:
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <LL_RCC_GetAPB2Prescaler>:
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ee2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ee6:	6013      	str	r3, [r2, #0]
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f04:	6013      	str	r3, [r2, #0]
}
 8003f06:	bf00      	nop
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f22:	d101      	bne.n	8003f28 <LL_RCC_PLL_IsReady+0x18>
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <LL_RCC_PLL_IsReady+0x1a>
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	0a1b      	lsrs	r3, r3, #8
 8003f40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003f66:	b480      	push	{r7}
 8003f68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003f6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0303 	and.w	r3, r3, #3
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003f96:	b480      	push	{r7}
 8003f98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa8:	d101      	bne.n	8003fae <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003fbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fce:	d101      	bne.n	8003fd4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003fe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fe8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff4:	d101      	bne.n	8003ffa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004006:	b480      	push	{r7}
 8004008:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800400a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004014:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004018:	d101      	bne.n	800401e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800402a:	b480      	push	{r7}
 800402c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800402e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004038:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800403c:	d101      	bne.n	8004042 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
	...

08004050 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004050:	b590      	push	{r4, r7, lr}
 8004052:	b08d      	sub	sp, #52	@ 0x34
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e363      	b.n	800472a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 808d 	beq.w	800418a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004070:	f7ff fe89 	bl	8003d86 <LL_RCC_GetSysClkSource>
 8004074:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004076:	f7ff ff82 	bl	8003f7e <LL_RCC_PLL_GetMainSource>
 800407a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800407c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <HAL_RCC_OscConfig+0x3e>
 8004082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004084:	2b0c      	cmp	r3, #12
 8004086:	d147      	bne.n	8004118 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408a:	2b01      	cmp	r3, #1
 800408c:	d144      	bne.n	8004118 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e347      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800409e:	f7ff fe34 	bl	8003d0a <LL_RCC_MSI_GetRange>
 80040a2:	4603      	mov	r3, r0
 80040a4:	429c      	cmp	r4, r3
 80040a6:	d914      	bls.n	80040d2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fd2f 	bl	8004b10 <RCC_SetFlashLatencyFromMSIRange>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e336      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff fe0e 	bl	8003ce2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff fe32 	bl	8003d34 <LL_RCC_MSI_SetCalibTrimming>
 80040d0:	e013      	b.n	80040fa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fe03 	bl	8003ce2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fe27 	bl	8003d34 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fd10 	bl	8004b10 <RCC_SetFlashLatencyFromMSIRange>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e317      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80040fa:	f000 fcc9 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 80040fe:	4603      	mov	r3, r0
 8004100:	4aa4      	ldr	r2, [pc, #656]	@ (8004394 <HAL_RCC_OscConfig+0x344>)
 8004102:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004104:	4ba4      	ldr	r3, [pc, #656]	@ (8004398 <HAL_RCC_OscConfig+0x348>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f7fe ff79 	bl	8003000 <HAL_InitTick>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d039      	beq.n	8004188 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e308      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01e      	beq.n	800415e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004120:	f7ff fdb0 	bl	8003c84 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004124:	f7fe ffba 	bl	800309c <HAL_GetTick>
 8004128:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800412c:	f7fe ffb6 	bl	800309c <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e2f5      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800413e:	f7ff fdbf 	bl	8003cc0 <LL_RCC_MSI_IsReady>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f1      	beq.n	800412c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff fdc8 	bl	8003ce2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff fdec 	bl	8003d34 <LL_RCC_MSI_SetCalibTrimming>
 800415c:	e015      	b.n	800418a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800415e:	f7ff fda0 	bl	8003ca2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004162:	f7fe ff9b 	bl	800309c <HAL_GetTick>
 8004166:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800416a:	f7fe ff97 	bl	800309c <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e2d6      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800417c:	f7ff fda0 	bl	8003cc0 <LL_RCC_MSI_IsReady>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f1      	bne.n	800416a <HAL_RCC_OscConfig+0x11a>
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004188:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d047      	beq.n	8004226 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004196:	f7ff fdf6 	bl	8003d86 <LL_RCC_GetSysClkSource>
 800419a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800419c:	f7ff feef 	bl	8003f7e <LL_RCC_PLL_GetMainSource>
 80041a0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_OscConfig+0x164>
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	2b0c      	cmp	r3, #12
 80041ac:	d108      	bne.n	80041c0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d105      	bne.n	80041c0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d134      	bne.n	8004226 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e2b4      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041c8:	d102      	bne.n	80041d0 <HAL_RCC_OscConfig+0x180>
 80041ca:	f7ff fbdd 	bl	8003988 <LL_RCC_HSE_Enable>
 80041ce:	e001      	b.n	80041d4 <HAL_RCC_OscConfig+0x184>
 80041d0:	f7ff fbe9 	bl	80039a6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d012      	beq.n	8004202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fe ff5e 	bl	800309c <HAL_GetTick>
 80041e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e4:	f7fe ff5a 	bl	800309c <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	@ 0x64
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e299      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80041f6:	f7ff fbe5 	bl	80039c4 <LL_RCC_HSE_IsReady>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0f1      	beq.n	80041e4 <HAL_RCC_OscConfig+0x194>
 8004200:	e011      	b.n	8004226 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004202:	f7fe ff4b 	bl	800309c <HAL_GetTick>
 8004206:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800420a:	f7fe ff47 	bl	800309c <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b64      	cmp	r3, #100	@ 0x64
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e286      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800421c:	f7ff fbd2 	bl	80039c4 <LL_RCC_HSE_IsReady>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f1      	bne.n	800420a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d04c      	beq.n	80042cc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004232:	f7ff fda8 	bl	8003d86 <LL_RCC_GetSysClkSource>
 8004236:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004238:	f7ff fea1 	bl	8003f7e <LL_RCC_PLL_GetMainSource>
 800423c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b04      	cmp	r3, #4
 8004242:	d005      	beq.n	8004250 <HAL_RCC_OscConfig+0x200>
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	2b0c      	cmp	r3, #12
 8004248:	d10e      	bne.n	8004268 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d10b      	bne.n	8004268 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e266      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fbf1 	bl	8003a48 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004266:	e031      	b.n	80042cc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d019      	beq.n	80042a4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004270:	f7ff fbba 	bl	80039e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fe ff12 	bl	800309c <HAL_GetTick>
 8004278:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800427c:	f7fe ff0e 	bl	800309c <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e24d      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800428e:	f7ff fbc9 	bl	8003a24 <LL_RCC_HSI_IsReady>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f1      	beq.n	800427c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff fbd3 	bl	8003a48 <LL_RCC_HSI_SetCalibTrimming>
 80042a2:	e013      	b.n	80042cc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042a4:	f7ff fbaf 	bl	8003a06 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7fe fef8 	bl	800309c <HAL_GetTick>
 80042ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b0:	f7fe fef4 	bl	800309c <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e233      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80042c2:	f7ff fbaf 	bl	8003a24 <LL_RCC_HSI_IsReady>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f1      	bne.n	80042b0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 80a3 	beq.w	800442c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d076      	beq.n	80043dc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d046      	beq.n	8004388 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80042fa:	f7ff fc66 	bl	8003bca <LL_RCC_LSI1_IsReady>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d113      	bne.n	800432c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004304:	f7ff fc3f 	bl	8003b86 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004308:	f7fe fec8 	bl	800309c <HAL_GetTick>
 800430c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004310:	f7fe fec4 	bl	800309c <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e203      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004322:	f7ff fc52 	bl	8003bca <LL_RCC_LSI1_IsReady>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0f1      	beq.n	8004310 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800432c:	f7ff fc5f 	bl	8003bee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fe feb4 	bl	800309c <HAL_GetTick>
 8004334:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004338:	f7fe feb0 	bl	800309c <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b03      	cmp	r3, #3
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1ef      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800434a:	f7ff fc72 	bl	8003c32 <LL_RCC_LSI2_IsReady>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f1      	beq.n	8004338 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff fc7c 	bl	8003c56 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800435e:	f7ff fc23 	bl	8003ba8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004362:	f7fe fe9b 	bl	800309c <HAL_GetTick>
 8004366:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800436a:	f7fe fe97 	bl	800309c <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e1d6      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800437c:	f7ff fc25 	bl	8003bca <LL_RCC_LSI1_IsReady>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f1      	bne.n	800436a <HAL_RCC_OscConfig+0x31a>
 8004386:	e051      	b.n	800442c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004388:	f7ff fbfd 	bl	8003b86 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fe fe86 	bl	800309c <HAL_GetTick>
 8004390:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004392:	e00c      	b.n	80043ae <HAL_RCC_OscConfig+0x35e>
 8004394:	20000008 	.word	0x20000008
 8004398:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800439c:	f7fe fe7e 	bl	800309c <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e1bd      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80043ae:	f7ff fc0c 	bl	8003bca <LL_RCC_LSI1_IsReady>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f1      	beq.n	800439c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80043b8:	f7ff fc2a 	bl	8003c10 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80043be:	f7fe fe6d 	bl	800309c <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e1ac      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80043d0:	f7ff fc2f 	bl	8003c32 <LL_RCC_LSI2_IsReady>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f1      	bne.n	80043be <HAL_RCC_OscConfig+0x36e>
 80043da:	e027      	b.n	800442c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80043dc:	f7ff fc18 	bl	8003c10 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e0:	f7fe fe5c 	bl	800309c <HAL_GetTick>
 80043e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80043e8:	f7fe fe58 	bl	800309c <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e197      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80043fa:	f7ff fc1a 	bl	8003c32 <LL_RCC_LSI2_IsReady>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1f1      	bne.n	80043e8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004404:	f7ff fbd0 	bl	8003ba8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004408:	f7fe fe48 	bl	800309c <HAL_GetTick>
 800440c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004410:	f7fe fe44 	bl	800309c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e183      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004422:	f7ff fbd2 	bl	8003bca <LL_RCC_LSI1_IsReady>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1f1      	bne.n	8004410 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d05b      	beq.n	80044f0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004438:	4ba7      	ldr	r3, [pc, #668]	@ (80046d8 <HAL_RCC_OscConfig+0x688>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d114      	bne.n	800446e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004444:	f7ff fa70 	bl	8003928 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004448:	f7fe fe28 	bl	800309c <HAL_GetTick>
 800444c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004450:	f7fe fe24 	bl	800309c <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e163      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004462:	4b9d      	ldr	r3, [pc, #628]	@ (80046d8 <HAL_RCC_OscConfig+0x688>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d102      	bne.n	800447c <HAL_RCC_OscConfig+0x42c>
 8004476:	f7ff fb30 	bl	8003ada <LL_RCC_LSE_Enable>
 800447a:	e00c      	b.n	8004496 <HAL_RCC_OscConfig+0x446>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b05      	cmp	r3, #5
 8004482:	d104      	bne.n	800448e <HAL_RCC_OscConfig+0x43e>
 8004484:	f7ff fb4b 	bl	8003b1e <LL_RCC_LSE_EnableBypass>
 8004488:	f7ff fb27 	bl	8003ada <LL_RCC_LSE_Enable>
 800448c:	e003      	b.n	8004496 <HAL_RCC_OscConfig+0x446>
 800448e:	f7ff fb35 	bl	8003afc <LL_RCC_LSE_Disable>
 8004492:	f7ff fb55 	bl	8003b40 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d014      	beq.n	80044c8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449e:	f7fe fdfd 	bl	800309c <HAL_GetTick>
 80044a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80044a4:	e00a      	b.n	80044bc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a6:	f7fe fdf9 	bl	800309c <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e136      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80044bc:	f7ff fb51 	bl	8003b62 <LL_RCC_LSE_IsReady>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0ef      	beq.n	80044a6 <HAL_RCC_OscConfig+0x456>
 80044c6:	e013      	b.n	80044f0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c8:	f7fe fde8 	bl	800309c <HAL_GetTick>
 80044cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80044ce:	e00a      	b.n	80044e6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d0:	f7fe fde4 	bl	800309c <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e121      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80044e6:	f7ff fb3c 	bl	8003b62 <LL_RCC_LSE_IsReady>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1ef      	bne.n	80044d0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d02c      	beq.n	8004556 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	2b00      	cmp	r3, #0
 8004502:	d014      	beq.n	800452e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004504:	f7ff fab5 	bl	8003a72 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004508:	f7fe fdc8 	bl	800309c <HAL_GetTick>
 800450c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004510:	f7fe fdc4 	bl	800309c <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e103      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004522:	f7ff fac8 	bl	8003ab6 <LL_RCC_HSI48_IsReady>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0f1      	beq.n	8004510 <HAL_RCC_OscConfig+0x4c0>
 800452c:	e013      	b.n	8004556 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800452e:	f7ff fab1 	bl	8003a94 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004532:	f7fe fdb3 	bl	800309c <HAL_GetTick>
 8004536:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800453a:	f7fe fdaf 	bl	800309c <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e0ee      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800454c:	f7ff fab3 	bl	8003ab6 <LL_RCC_HSI48_IsReady>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f1      	bne.n	800453a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 80e4 	beq.w	8004728 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004560:	f7ff fc11 	bl	8003d86 <LL_RCC_GetSysClkSource>
 8004564:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004572:	2b02      	cmp	r3, #2
 8004574:	f040 80b4 	bne.w	80046e0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 0203 	and.w	r2, r3, #3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004582:	429a      	cmp	r2, r3
 8004584:	d123      	bne.n	80045ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004590:	429a      	cmp	r2, r3
 8004592:	d11c      	bne.n	80045ce <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	0a1b      	lsrs	r3, r3, #8
 8004598:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d114      	bne.n	80045ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d10d      	bne.n	80045ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045bc:	429a      	cmp	r2, r3
 80045be:	d106      	bne.n	80045ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d05d      	beq.n	800468a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b0c      	cmp	r3, #12
 80045d2:	d058      	beq.n	8004686 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80045d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e0a1      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045e6:	f7ff fc84 	bl	8003ef2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045ea:	f7fe fd57 	bl	800309c <HAL_GetTick>
 80045ee:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f2:	f7fe fd53 	bl	800309c <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e092      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1ef      	bne.n	80045f2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	4b30      	ldr	r3, [pc, #192]	@ (80046dc <HAL_RCC_OscConfig+0x68c>)
 800461a:	4013      	ands	r3, r2
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004624:	4311      	orrs	r1, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800462a:	0212      	lsls	r2, r2, #8
 800462c:	4311      	orrs	r1, r2
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004632:	4311      	orrs	r1, r2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004638:	4311      	orrs	r1, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800463e:	430a      	orrs	r2, r1
 8004640:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004644:	4313      	orrs	r3, r2
 8004646:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004648:	f7ff fc44 	bl	8003ed4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800464c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800465a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800465c:	f7fe fd1e 	bl	800309c <HAL_GetTick>
 8004660:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004664:	f7fe fd1a 	bl	800309c <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e059      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004676:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ef      	beq.n	8004664 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004684:	e050      	b.n	8004728 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e04f      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800468a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d147      	bne.n	8004728 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004698:	f7ff fc1c 	bl	8003ed4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800469c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046ac:	f7fe fcf6 	bl	800309c <HAL_GetTick>
 80046b0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b4:	f7fe fcf2 	bl	800309c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e031      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0ef      	beq.n	80046b4 <HAL_RCC_OscConfig+0x664>
 80046d4:	e028      	b.n	8004728 <HAL_RCC_OscConfig+0x6d8>
 80046d6:	bf00      	nop
 80046d8:	58000400 	.word	0x58000400
 80046dc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	d01e      	beq.n	8004724 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e6:	f7ff fc04 	bl	8003ef2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ea:	f7fe fcd7 	bl	800309c <HAL_GetTick>
 80046ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f2:	f7fe fcd3 	bl	800309c <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e012      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004704:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ef      	bne.n	80046f2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800471c:	4b05      	ldr	r3, [pc, #20]	@ (8004734 <HAL_RCC_OscConfig+0x6e4>)
 800471e:	4013      	ands	r3, r2
 8004720:	60cb      	str	r3, [r1, #12]
 8004722:	e001      	b.n	8004728 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3734      	adds	r7, #52	@ 0x34
 800472e:	46bd      	mov	sp, r7
 8004730:	bd90      	pop	{r4, r7, pc}
 8004732:	bf00      	nop
 8004734:	eefefffc 	.word	0xeefefffc

08004738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e12d      	b.n	80049a8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800474c:	4b98      	ldr	r3, [pc, #608]	@ (80049b0 <HAL_RCC_ClockConfig+0x278>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d91b      	bls.n	8004792 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475a:	4b95      	ldr	r3, [pc, #596]	@ (80049b0 <HAL_RCC_ClockConfig+0x278>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f023 0207 	bic.w	r2, r3, #7
 8004762:	4993      	ldr	r1, [pc, #588]	@ (80049b0 <HAL_RCC_ClockConfig+0x278>)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	4313      	orrs	r3, r2
 8004768:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476a:	f7fe fc97 	bl	800309c <HAL_GetTick>
 800476e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004770:	e008      	b.n	8004784 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004772:	f7fe fc93 	bl	800309c <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e111      	b.n	80049a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004784:	4b8a      	ldr	r3, [pc, #552]	@ (80049b0 <HAL_RCC_ClockConfig+0x278>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d1ef      	bne.n	8004772 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d016      	beq.n	80047cc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff fafb 	bl	8003d9e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80047a8:	f7fe fc78 	bl	800309c <HAL_GetTick>
 80047ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80047b0:	f7fe fc74 	bl	800309c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e0f2      	b.n	80049a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80047c2:	f7ff fbe8 	bl	8003f96 <LL_RCC_IsActiveFlag_HPRE>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f1      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d016      	beq.n	8004806 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff faf2 	bl	8003dc6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80047e2:	f7fe fc5b 	bl	800309c <HAL_GetTick>
 80047e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80047ea:	f7fe fc57 	bl	800309c <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e0d5      	b.n	80049a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80047fc:	f7ff fbdd 	bl	8003fba <LL_RCC_IsActiveFlag_C2HPRE>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f1      	beq.n	80047ea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d016      	beq.n	8004840 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff faeb 	bl	8003df2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800481c:	f7fe fc3e 	bl	800309c <HAL_GetTick>
 8004820:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004822:	e008      	b.n	8004836 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004824:	f7fe fc3a 	bl	800309c <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e0b8      	b.n	80049a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004836:	f7ff fbd3 	bl	8003fe0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f1      	beq.n	8004824 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d016      	beq.n	800487a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff fae5 	bl	8003e20 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004856:	f7fe fc21 	bl	800309c <HAL_GetTick>
 800485a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800485c:	e008      	b.n	8004870 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800485e:	f7fe fc1d 	bl	800309c <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e09b      	b.n	80049a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004870:	f7ff fbc9 	bl	8004006 <LL_RCC_IsActiveFlag_PPRE1>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f1      	beq.n	800485e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d017      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff fadb 	bl	8003e48 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004892:	f7fe fc03 	bl	800309c <HAL_GetTick>
 8004896:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004898:	e008      	b.n	80048ac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800489a:	f7fe fbff 	bl	800309c <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e07d      	b.n	80049a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80048ac:	f7ff fbbd 	bl	800402a <LL_RCC_IsActiveFlag_PPRE2>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f1      	beq.n	800489a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d043      	beq.n	800494a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d106      	bne.n	80048d8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80048ca:	f7ff f87b 	bl	80039c4 <LL_RCC_HSE_IsReady>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d11e      	bne.n	8004912 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e067      	b.n	80049a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b03      	cmp	r3, #3
 80048de:	d106      	bne.n	80048ee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80048e0:	f7ff fb16 	bl	8003f10 <LL_RCC_PLL_IsReady>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d113      	bne.n	8004912 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e05c      	b.n	80049a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80048f6:	f7ff f9e3 	bl	8003cc0 <LL_RCC_MSI_IsReady>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d108      	bne.n	8004912 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e051      	b.n	80049a8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004904:	f7ff f88e 	bl	8003a24 <LL_RCC_HSI_IsReady>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e04a      	b.n	80049a8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff fa21 	bl	8003d5e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800491c:	f7fe fbbe 	bl	800309c <HAL_GetTick>
 8004920:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004922:	e00a      	b.n	800493a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004924:	f7fe fbba 	bl	800309c <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e036      	b.n	80049a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493a:	f7ff fa24 	bl	8003d86 <LL_RCC_GetSysClkSource>
 800493e:	4602      	mov	r2, r0
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	429a      	cmp	r2, r3
 8004948:	d1ec      	bne.n	8004924 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800494a:	4b19      	ldr	r3, [pc, #100]	@ (80049b0 <HAL_RCC_ClockConfig+0x278>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d21b      	bcs.n	8004990 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004958:	4b15      	ldr	r3, [pc, #84]	@ (80049b0 <HAL_RCC_ClockConfig+0x278>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f023 0207 	bic.w	r2, r3, #7
 8004960:	4913      	ldr	r1, [pc, #76]	@ (80049b0 <HAL_RCC_ClockConfig+0x278>)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	4313      	orrs	r3, r2
 8004966:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004968:	f7fe fb98 	bl	800309c <HAL_GetTick>
 800496c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800496e:	e008      	b.n	8004982 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004970:	f7fe fb94 	bl	800309c <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e012      	b.n	80049a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004982:	4b0b      	ldr	r3, [pc, #44]	@ (80049b0 <HAL_RCC_ClockConfig+0x278>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d1ef      	bne.n	8004970 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004990:	f000 f87e 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004994:	4603      	mov	r3, r0
 8004996:	4a07      	ldr	r2, [pc, #28]	@ (80049b4 <HAL_RCC_ClockConfig+0x27c>)
 8004998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800499a:	f7fe fb8b 	bl	80030b4 <HAL_GetTickPrio>
 800499e:	4603      	mov	r3, r0
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fe fb2d 	bl	8003000 <HAL_InitTick>
 80049a6:	4603      	mov	r3, r0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	58004000 	.word	0x58004000
 80049b4:	20000008 	.word	0x20000008

080049b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b8:	b590      	push	{r4, r7, lr}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049be:	f7ff f9e2 	bl	8003d86 <LL_RCC_GetSysClkSource>
 80049c2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10a      	bne.n	80049e0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80049ca:	f7ff f99e 	bl	8003d0a <LL_RCC_MSI_GetRange>
 80049ce:	4603      	mov	r3, r0
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0xcc>)
 80049d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	e04b      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d102      	bne.n	80049ec <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049e6:	4b28      	ldr	r3, [pc, #160]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0xd0>)
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	e045      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d10a      	bne.n	8004a08 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80049f2:	f7fe ffb7 	bl	8003964 <LL_RCC_HSE_IsEnabledDiv2>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d102      	bne.n	8004a02 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80049fc:	4b22      	ldr	r3, [pc, #136]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0xd0>)
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e03a      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004a02:	4b22      	ldr	r3, [pc, #136]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	e037      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004a08:	f7ff fab9 	bl	8003f7e <LL_RCC_PLL_GetMainSource>
 8004a0c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d003      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0x64>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d003      	beq.n	8004a22 <HAL_RCC_GetSysClockFreq+0x6a>
 8004a1a:	e00d      	b.n	8004a38 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a1e:	60bb      	str	r3, [r7, #8]
        break;
 8004a20:	e015      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004a22:	f7fe ff9f 	bl	8003964 <LL_RCC_HSE_IsEnabledDiv2>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d102      	bne.n	8004a32 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004a2c:	4b16      	ldr	r3, [pc, #88]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a2e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004a30:	e00d      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004a32:	4b16      	ldr	r3, [pc, #88]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004a34:	60bb      	str	r3, [r7, #8]
        break;
 8004a36:	e00a      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004a38:	f7ff f967 	bl	8003d0a <LL_RCC_MSI_GetRange>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	091b      	lsrs	r3, r3, #4
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	4a0f      	ldr	r2, [pc, #60]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a4a:	60bb      	str	r3, [r7, #8]
        break;
 8004a4c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004a4e:	f7ff fa71 	bl	8003f34 <LL_RCC_PLL_GetN>
 8004a52:	4602      	mov	r2, r0
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	fb03 f402 	mul.w	r4, r3, r2
 8004a5a:	f7ff fa84 	bl	8003f66 <LL_RCC_PLL_GetDivider>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	091b      	lsrs	r3, r3, #4
 8004a62:	3301      	adds	r3, #1
 8004a64:	fbb4 f4f3 	udiv	r4, r4, r3
 8004a68:	f7ff fa71 	bl	8003f4e <LL_RCC_PLL_GetR>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	0f5b      	lsrs	r3, r3, #29
 8004a70:	3301      	adds	r3, #1
 8004a72:	fbb4 f3f3 	udiv	r3, r4, r3
 8004a76:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004a78:	68fb      	ldr	r3, [r7, #12]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd90      	pop	{r4, r7, pc}
 8004a82:	bf00      	nop
 8004a84:	08012a24 	.word	0x08012a24
 8004a88:	00f42400 	.word	0x00f42400
 8004a8c:	01e84800 	.word	0x01e84800

08004a90 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a90:	b598      	push	{r3, r4, r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004a94:	f7ff ff90 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 8004a98:	4604      	mov	r4, r0
 8004a9a:	f7ff f9e9 	bl	8003e70 <LL_RCC_GetAHBPrescaler>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	091b      	lsrs	r3, r3, #4
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	4a03      	ldr	r2, [pc, #12]	@ (8004ab4 <HAL_RCC_GetHCLKFreq+0x24>)
 8004aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	bd98      	pop	{r3, r4, r7, pc}
 8004ab4:	080129c4 	.word	0x080129c4

08004ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab8:	b598      	push	{r3, r4, r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004abc:	f7ff ffe8 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	f7ff f9ef 	bl	8003ea4 <LL_RCC_GetAPB1Prescaler>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	4a04      	ldr	r2, [pc, #16]	@ (8004ae0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad4:	f003 031f 	and.w	r3, r3, #31
 8004ad8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	bd98      	pop	{r3, r4, r7, pc}
 8004ae0:	08012a04 	.word	0x08012a04

08004ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ae4:	b598      	push	{r3, r4, r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004ae8:	f7ff ffd2 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004aec:	4604      	mov	r4, r0
 8004aee:	f7ff f9e5 	bl	8003ebc <LL_RCC_GetAPB2Prescaler>
 8004af2:	4603      	mov	r3, r0
 8004af4:	0adb      	lsrs	r3, r3, #11
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	4a04      	ldr	r2, [pc, #16]	@ (8004b0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b00:	f003 031f 	and.w	r3, r3, #31
 8004b04:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	bd98      	pop	{r3, r4, r7, pc}
 8004b0c:	08012a04 	.word	0x08012a04

08004b10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2bb0      	cmp	r3, #176	@ 0xb0
 8004b1c:	d903      	bls.n	8004b26 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004b1e:	4b15      	ldr	r3, [pc, #84]	@ (8004b74 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	e007      	b.n	8004b36 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	4a11      	ldr	r2, [pc, #68]	@ (8004b74 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b34:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004b36:	f7ff f9a7 	bl	8003e88 <LL_RCC_GetAHB4Prescaler>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	4a0d      	ldr	r2, [pc, #52]	@ (8004b78 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	4a0a      	ldr	r2, [pc, #40]	@ (8004b7c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004b54:	fba2 2303 	umull	r2, r3, r2, r3
 8004b58:	0c9c      	lsrs	r4, r3, #18
 8004b5a:	f7fe fef5 	bl	8003948 <HAL_PWREx_GetVoltageRange>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	4619      	mov	r1, r3
 8004b62:	4620      	mov	r0, r4
 8004b64:	f000 f80c 	bl	8004b80 <RCC_SetFlashLatency>
 8004b68:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd90      	pop	{r4, r7, pc}
 8004b72:	bf00      	nop
 8004b74:	08012a24 	.word	0x08012a24
 8004b78:	080129c4 	.word	0x080129c4
 8004b7c:	431bde83 	.word	0x431bde83

08004b80 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004b80:	b590      	push	{r4, r7, lr}
 8004b82:	b093      	sub	sp, #76	@ 0x4c
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004b8a:	4b37      	ldr	r3, [pc, #220]	@ (8004c68 <RCC_SetFlashLatency+0xe8>)
 8004b8c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8004b90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004b96:	4a35      	ldr	r2, [pc, #212]	@ (8004c6c <RCC_SetFlashLatency+0xec>)
 8004b98:	f107 031c 	add.w	r3, r7, #28
 8004b9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004ba2:	4b33      	ldr	r3, [pc, #204]	@ (8004c70 <RCC_SetFlashLatency+0xf0>)
 8004ba4:	f107 040c 	add.w	r4, r7, #12
 8004ba8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004baa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004bae:	2300      	movs	r3, #0
 8004bb0:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bb8:	d11a      	bne.n	8004bf0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004bba:	2300      	movs	r3, #0
 8004bbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bbe:	e013      	b.n	8004be8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004bc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	3348      	adds	r3, #72	@ 0x48
 8004bc6:	443b      	add	r3, r7
 8004bc8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d807      	bhi.n	8004be2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	3348      	adds	r3, #72	@ 0x48
 8004bd8:	443b      	add	r3, r7
 8004bda:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004bde:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004be0:	e020      	b.n	8004c24 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004be2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be4:	3301      	adds	r3, #1
 8004be6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d9e8      	bls.n	8004bc0 <RCC_SetFlashLatency+0x40>
 8004bee:	e019      	b.n	8004c24 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bf4:	e013      	b.n	8004c1e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	3348      	adds	r3, #72	@ 0x48
 8004bfc:	443b      	add	r3, r7
 8004bfe:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d807      	bhi.n	8004c18 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	3348      	adds	r3, #72	@ 0x48
 8004c0e:	443b      	add	r3, r7
 8004c10:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004c14:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004c16:	e005      	b.n	8004c24 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d9e8      	bls.n	8004bf6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004c24:	4b13      	ldr	r3, [pc, #76]	@ (8004c74 <RCC_SetFlashLatency+0xf4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f023 0207 	bic.w	r2, r3, #7
 8004c2c:	4911      	ldr	r1, [pc, #68]	@ (8004c74 <RCC_SetFlashLatency+0xf4>)
 8004c2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c30:	4313      	orrs	r3, r2
 8004c32:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004c34:	f7fe fa32 	bl	800309c <HAL_GetTick>
 8004c38:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004c3a:	e008      	b.n	8004c4e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c3c:	f7fe fa2e 	bl	800309c <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e007      	b.n	8004c5e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004c4e:	4b09      	ldr	r3, [pc, #36]	@ (8004c74 <RCC_SetFlashLatency+0xf4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d1ef      	bne.n	8004c3c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	374c      	adds	r7, #76	@ 0x4c
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd90      	pop	{r4, r7, pc}
 8004c66:	bf00      	nop
 8004c68:	08012708 	.word	0x08012708
 8004c6c:	08012718 	.word	0x08012718
 8004c70:	08012724 	.word	0x08012724
 8004c74:	58004000 	.word	0x58004000

08004c78 <LL_RCC_LSE_IsEnabled>:
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004c7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <LL_RCC_LSE_IsEnabled+0x18>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e000      	b.n	8004c92 <LL_RCC_LSE_IsEnabled+0x1a>
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <LL_RCC_LSE_IsReady>:
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d101      	bne.n	8004cb4 <LL_RCC_LSE_IsReady+0x18>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <LL_RCC_LSE_IsReady+0x1a>
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <LL_RCC_SetRFWKPClockSource>:
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cd0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004cd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <LL_RCC_SetSMPSClockSource>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfa:	f023 0203 	bic.w	r2, r3, #3
 8004cfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <LL_RCC_SetSMPSPrescaler>:
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <LL_RCC_SetUSARTClockSource>:
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4c:	f023 0203 	bic.w	r2, r3, #3
 8004d50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <LL_RCC_SetLPUARTClockSource>:
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d78:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <LL_RCC_SetI2CClockSource>:
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004da0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	091b      	lsrs	r3, r3, #4
 8004da8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004dac:	43db      	mvns	r3, r3
 8004dae:	401a      	ands	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004db8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <LL_RCC_SetLPTIMClockSource>:
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dda:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	0c1b      	lsrs	r3, r3, #16
 8004de2:	041b      	lsls	r3, r3, #16
 8004de4:	43db      	mvns	r3, r3
 8004de6:	401a      	ands	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	041b      	lsls	r3, r3, #16
 8004dec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <LL_RCC_SetSAIClockSource>:
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <LL_RCC_SetRNGClockSource>:
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004e36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004e42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <LL_RCC_SetCLK48ClockSource>:
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <LL_RCC_SetUSBClockSource>:
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff ffe3 	bl	8004e5a <LL_RCC_SetCLK48ClockSource>
}
 8004e94:	bf00      	nop
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <LL_RCC_SetADCClockSource>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eac:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004eb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <LL_RCC_SetRTCClockSource>:
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004edc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <LL_RCC_GetRTCClockSource>:
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <LL_RCC_ForceBackupDomainReset>:
{
 8004f0e:	b480      	push	{r7}
 8004f10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004f12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004f26:	bf00      	nop
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004f48:	bf00      	nop
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <LL_RCC_PLLSAI1_Enable>:
{
 8004f52:	b480      	push	{r7}
 8004f54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f64:	6013      	str	r3, [r2, #0]
}
 8004f66:	bf00      	nop
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <LL_RCC_PLLSAI1_Disable>:
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004f74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f82:	6013      	str	r3, [r2, #0]
}
 8004f84:	bf00      	nop
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <LL_RCC_PLLSAI1_IsReady>:
{
 8004f8e:	b480      	push	{r7}
 8004f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fa0:	d101      	bne.n	8004fa6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b088      	sub	sp, #32
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004fba:	2300      	movs	r3, #0
 8004fbc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d034      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004fd6:	d021      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004fd8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004fdc:	d81b      	bhi.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fe2:	d01d      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004fe4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fe8:	d815      	bhi.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00b      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004fee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ff2:	d110      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005002:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005004:	e00d      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3304      	adds	r3, #4
 800500a:	4618      	mov	r0, r3
 800500c:	f000 f947 	bl	800529e <RCCEx_PLLSAI1_ConfigNP>
 8005010:	4603      	mov	r3, r0
 8005012:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005014:	e005      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	77fb      	strb	r3, [r7, #31]
        break;
 800501a:	e002      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800501c:	bf00      	nop
 800501e:	e000      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005022:	7ffb      	ldrb	r3, [r7, #31]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d105      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff fee8 	bl	8004e02 <LL_RCC_SetSAIClockSource>
 8005032:	e001      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005034:	7ffb      	ldrb	r3, [r7, #31]
 8005036:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005040:	2b00      	cmp	r3, #0
 8005042:	d046      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005044:	f7ff ff56 	bl	8004ef4 <LL_RCC_GetRTCClockSource>
 8005048:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	429a      	cmp	r2, r3
 8005052:	d03c      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005054:	f7fe fc68 	bl	8003928 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d105      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff ff30 	bl	8004ec8 <LL_RCC_SetRTCClockSource>
 8005068:	e02e      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800506a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005072:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005074:	f7ff ff4b 	bl	8004f0e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005078:	f7ff ff5a 	bl	8004f30 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005086:	4313      	orrs	r3, r2
 8005088:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800508a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005094:	f7ff fdf0 	bl	8004c78 <LL_RCC_LSE_IsEnabled>
 8005098:	4603      	mov	r3, r0
 800509a:	2b01      	cmp	r3, #1
 800509c:	d114      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800509e:	f7fd fffd 	bl	800309c <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80050a4:	e00b      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a6:	f7fd fff9 	bl	800309c <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d902      	bls.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	77fb      	strb	r3, [r7, #31]
              break;
 80050bc:	e004      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80050be:	f7ff fded 	bl	8004c9c <LL_RCC_LSE_IsReady>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d1ee      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80050c8:	7ffb      	ldrb	r3, [r7, #31]
 80050ca:	77bb      	strb	r3, [r7, #30]
 80050cc:	e001      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ce:	7ffb      	ldrb	r3, [r7, #31]
 80050d0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d004      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff fe2a 	bl	8004d3c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff fe35 	bl	8004d68 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0310 	and.w	r3, r3, #16
 8005106:	2b00      	cmp	r3, #0
 8005108:	d004      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff fe5d 	bl	8004dce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0320 	and.w	r3, r3, #32
 800511c:	2b00      	cmp	r3, #0
 800511e:	d004      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff fe52 	bl	8004dce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d004      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff fe2a 	bl	8004d94 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d004      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff fe1f 	bl	8004d94 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800515e:	2b00      	cmp	r3, #0
 8005160:	d022      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff fe8d 	bl	8004e86 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005170:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005174:	d107      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005180:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005184:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800518a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800518e:	d10b      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3304      	adds	r3, #4
 8005194:	4618      	mov	r0, r3
 8005196:	f000 f8dd 	bl	8005354 <RCCEx_PLLSAI1_ConfigNQ>
 800519a:	4603      	mov	r3, r0
 800519c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800519e:	7ffb      	ldrb	r3, [r7, #31]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80051a4:	7ffb      	ldrb	r3, [r7, #31]
 80051a6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d02b      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051bc:	d008      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051c6:	d003      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d105      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff fe2a 	bl	8004e2e <LL_RCC_SetRNGClockSource>
 80051da:	e00a      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	2000      	movs	r0, #0
 80051e8:	f7ff fe21 	bl	8004e2e <LL_RCC_SetRNGClockSource>
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f7ff fe34 	bl	8004e5a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80051fa:	d107      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80051fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005206:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800520a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005214:	2b00      	cmp	r3, #0
 8005216:	d022      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff fe3d 	bl	8004e9c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005226:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800522a:	d107      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800522c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800523a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005240:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005244:	d10b      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3304      	adds	r3, #4
 800524a:	4618      	mov	r0, r3
 800524c:	f000 f8dd 	bl	800540a <RCCEx_PLLSAI1_ConfigNR>
 8005250:	4603      	mov	r3, r0
 8005252:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005254:	7ffb      	ldrb	r3, [r7, #31]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800525a:	7ffb      	ldrb	r3, [r7, #31]
 800525c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d004      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff fd26 	bl	8004cc0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d009      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff fd45 	bl	8004d14 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff fd2c 	bl	8004cec <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005294:	7fbb      	ldrb	r3, [r7, #30]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3720      	adds	r7, #32
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b084      	sub	sp, #16
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80052aa:	f7ff fe61 	bl	8004f70 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80052ae:	f7fd fef5 	bl	800309c <HAL_GetTick>
 80052b2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80052b4:	e009      	b.n	80052ca <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052b6:	f7fd fef1 	bl	800309c <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d902      	bls.n	80052ca <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	73fb      	strb	r3, [r7, #15]
      break;
 80052c8:	e004      	b.n	80052d4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80052ca:	f7ff fe60 	bl	8004f8e <LL_RCC_PLLSAI1_IsReady>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1f0      	bne.n	80052b6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d137      	bne.n	800534a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80052da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052ee:	4313      	orrs	r3, r2
 80052f0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80052f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005304:	4313      	orrs	r3, r2
 8005306:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005308:	f7ff fe23 	bl	8004f52 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530c:	f7fd fec6 	bl	800309c <HAL_GetTick>
 8005310:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005312:	e009      	b.n	8005328 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005314:	f7fd fec2 	bl	800309c <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d902      	bls.n	8005328 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	73fb      	strb	r3, [r7, #15]
        break;
 8005326:	e004      	b.n	8005332 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005328:	f7ff fe31 	bl	8004f8e <LL_RCC_PLLSAI1_IsReady>
 800532c:	4603      	mov	r3, r0
 800532e:	2b01      	cmp	r3, #1
 8005330:	d1f0      	bne.n	8005314 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005332:	7bfb      	ldrb	r3, [r7, #15]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d108      	bne.n	800534a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005346:	4313      	orrs	r3, r2
 8005348:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800534a:	7bfb      	ldrb	r3, [r7, #15]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005360:	f7ff fe06 	bl	8004f70 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005364:	f7fd fe9a 	bl	800309c <HAL_GetTick>
 8005368:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800536a:	e009      	b.n	8005380 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800536c:	f7fd fe96 	bl	800309c <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d902      	bls.n	8005380 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	73fb      	strb	r3, [r7, #15]
      break;
 800537e:	e004      	b.n	800538a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005380:	f7ff fe05 	bl	8004f8e <LL_RCC_PLLSAI1_IsReady>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d137      	bne.n	8005400 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005390:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053a4:	4313      	orrs	r3, r2
 80053a6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80053a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053ba:	4313      	orrs	r3, r2
 80053bc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80053be:	f7ff fdc8 	bl	8004f52 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053c2:	f7fd fe6b 	bl	800309c <HAL_GetTick>
 80053c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80053c8:	e009      	b.n	80053de <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053ca:	f7fd fe67 	bl	800309c <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d902      	bls.n	80053de <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	73fb      	strb	r3, [r7, #15]
        break;
 80053dc:	e004      	b.n	80053e8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80053de:	f7ff fdd6 	bl	8004f8e <LL_RCC_PLLSAI1_IsReady>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d1f0      	bne.n	80053ca <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d108      	bne.n	8005400 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80053ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053f2:	691a      	ldr	r2, [r3, #16]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053fc:	4313      	orrs	r3, r2
 80053fe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005400:	7bfb      	ldrb	r3, [r7, #15]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005416:	f7ff fdab 	bl	8004f70 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800541a:	f7fd fe3f 	bl	800309c <HAL_GetTick>
 800541e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005420:	e009      	b.n	8005436 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005422:	f7fd fe3b 	bl	800309c <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d902      	bls.n	8005436 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	73fb      	strb	r3, [r7, #15]
      break;
 8005434:	e004      	b.n	8005440 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005436:	f7ff fdaa 	bl	8004f8e <LL_RCC_PLLSAI1_IsReady>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1f0      	bne.n	8005422 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005440:	7bfb      	ldrb	r3, [r7, #15]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d137      	bne.n	80054b6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005446:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800545a:	4313      	orrs	r3, r2
 800545c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800545e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005470:	4313      	orrs	r3, r2
 8005472:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005474:	f7ff fd6d 	bl	8004f52 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005478:	f7fd fe10 	bl	800309c <HAL_GetTick>
 800547c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800547e:	e009      	b.n	8005494 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005480:	f7fd fe0c 	bl	800309c <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d902      	bls.n	8005494 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	73fb      	strb	r3, [r7, #15]
        break;
 8005492:	e004      	b.n	800549e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005494:	f7ff fd7b 	bl	8004f8e <LL_RCC_PLLSAI1_IsReady>
 8005498:	4603      	mov	r3, r0
 800549a:	2b01      	cmp	r3, #1
 800549c:	d1f0      	bne.n	8005480 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800549e:	7bfb      	ldrb	r3, [r7, #15]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d108      	bne.n	80054b6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80054a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054a8:	691a      	ldr	r2, [r3, #16]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054b2:	4313      	orrs	r3, r2
 80054b4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e09f      	b.n	8005612 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fd fb5a 	bl	8002ba0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80054f4:	4b49      	ldr	r3, [pc, #292]	@ (800561c <HAL_RTC_Init+0x15c>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0310 	and.w	r3, r3, #16
 80054fc:	2b10      	cmp	r3, #16
 80054fe:	d07e      	beq.n	80055fe <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	22ca      	movs	r2, #202	@ 0xca
 8005506:	625a      	str	r2, [r3, #36]	@ 0x24
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2253      	movs	r2, #83	@ 0x53
 800550e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f8ab 	bl	800566c <RTC_EnterInitMode>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00a      	beq.n	8005532 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	22ff      	movs	r2, #255	@ 0xff
 8005522:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2204      	movs	r2, #4
 8005528:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
 8005530:	e067      	b.n	8005602 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6812      	ldr	r2, [r2, #0]
 800553c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005544:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6899      	ldr	r1, [r3, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	68d2      	ldr	r2, [r2, #12]
 800556c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6919      	ldr	r1, [r3, #16]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	041a      	lsls	r2, r3, #16
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005590:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0203 	bic.w	r2, r2, #3
 80055a0:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	69da      	ldr	r2, [r3, #28]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d113      	bne.n	80055f0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f829 	bl	8005620 <HAL_RTC_WaitForSynchro>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00d      	beq.n	80055f0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	22ff      	movs	r2, #255	@ 0xff
 80055da:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2204      	movs	r2, #4
 80055e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e010      	b.n	8005612 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	22ff      	movs	r2, #255	@ 0xff
 80055f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 80055f8:	2300      	movs	r3, #0
 80055fa:	73fb      	strb	r3, [r7, #15]
 80055fc:	e001      	b.n	8005602 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d103      	bne.n	8005610 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8005610:	7bfb      	ldrb	r3, [r7, #15]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40002800 	.word	0x40002800

08005620 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005636:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005638:	f7fd fd30 	bl	800309c <HAL_GetTick>
 800563c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800563e:	e009      	b.n	8005654 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005640:	f7fd fd2c 	bl	800309c <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800564e:	d901      	bls.n	8005654 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e007      	b.n	8005664 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0ee      	beq.n	8005640 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d119      	bne.n	80056b6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f04f 32ff 	mov.w	r2, #4294967295
 800568a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800568c:	f7fd fd06 	bl	800309c <HAL_GetTick>
 8005690:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005692:	e009      	b.n	80056a8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005694:	f7fd fd02 	bl	800309c <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056a2:	d901      	bls.n	80056a8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e007      	b.n	80056b8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0ee      	beq.n	8005694 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e0a8      	b.n	800582c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2202      	movs	r2, #2
 80056e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	22ca      	movs	r2, #202	@ 0xca
 80056f0:	625a      	str	r2, [r3, #36]	@ 0x24
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2253      	movs	r2, #83	@ 0x53
 80056f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005704:	2b00      	cmp	r3, #0
 8005706:	d020      	beq.n	800574a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005708:	f7fd fcc8 	bl	800309c <HAL_GetTick>
 800570c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800570e:	e015      	b.n	800573c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005710:	f7fd fcc4 	bl	800309c <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800571e:	d90d      	bls.n	800573c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	22ff      	movs	r2, #255	@ 0xff
 8005726:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2203      	movs	r2, #3
 800572c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e077      	b.n	800582c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1e2      	bne.n	8005710 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005758:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	b2da      	uxtb	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800576a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800576c:	f7fd fc96 	bl	800309c <HAL_GetTick>
 8005770:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005772:	e015      	b.n	80057a0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005774:	f7fd fc92 	bl	800309c <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005782:	d90d      	bls.n	80057a0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	22ff      	movs	r2, #255	@ 0xff
 800578a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2203      	movs	r2, #3
 8005790:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e045      	b.n	800582c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0e2      	beq.n	8005774 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0207 	bic.w	r2, r2, #7
 80057c4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6899      	ldr	r1, [r3, #8]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80057d6:	4b17      	ldr	r3, [pc, #92]	@ (8005834 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80057d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057dc:	4a15      	ldr	r2, [pc, #84]	@ (8005834 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80057de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057e2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80057e6:	4b13      	ldr	r3, [pc, #76]	@ (8005834 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a12      	ldr	r2, [pc, #72]	@ (8005834 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80057ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057f0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005800:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005810:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	22ff      	movs	r2, #255	@ 0xff
 8005818:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	58000800 	.word	0x58000800

08005838 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e095      	b.n	8005976 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584e:	2b00      	cmp	r3, #0
 8005850:	d108      	bne.n	8005864 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800585a:	d009      	beq.n	8005870 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	61da      	str	r2, [r3, #28]
 8005862:	e005      	b.n	8005870 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fd f9bc 	bl	8002c08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058b0:	d902      	bls.n	80058b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	e002      	b.n	80058be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80058c6:	d007      	beq.n	80058d8 <HAL_SPI_Init+0xa0>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058d0:	d002      	beq.n	80058d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800591a:	ea42 0103 	orr.w	r1, r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005922:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	0c1b      	lsrs	r3, r3, #16
 8005934:	f003 0204 	and.w	r2, r3, #4
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	431a      	orrs	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005954:	ea42 0103 	orr.w	r1, r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b08a      	sub	sp, #40	@ 0x28
 8005982:	af00      	add	r7, sp, #0
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	607a      	str	r2, [r7, #4]
 800598a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800598c:	2301      	movs	r3, #1
 800598e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800599c:	2b01      	cmp	r3, #1
 800599e:	d101      	bne.n	80059a4 <HAL_SPI_TransmitReceive+0x26>
 80059a0:	2302      	movs	r3, #2
 80059a2:	e20a      	b.n	8005dba <HAL_SPI_TransmitReceive+0x43c>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059ac:	f7fd fb76 	bl	800309c <HAL_GetTick>
 80059b0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059b8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80059c0:	887b      	ldrh	r3, [r7, #2]
 80059c2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80059c4:	887b      	ldrh	r3, [r7, #2]
 80059c6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059c8:	7efb      	ldrb	r3, [r7, #27]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d00e      	beq.n	80059ec <HAL_SPI_TransmitReceive+0x6e>
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059d4:	d106      	bne.n	80059e4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d102      	bne.n	80059e4 <HAL_SPI_TransmitReceive+0x66>
 80059de:	7efb      	ldrb	r3, [r7, #27]
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d003      	beq.n	80059ec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80059e4:	2302      	movs	r3, #2
 80059e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80059ea:	e1e0      	b.n	8005dae <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <HAL_SPI_TransmitReceive+0x80>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <HAL_SPI_TransmitReceive+0x80>
 80059f8:	887b      	ldrh	r3, [r7, #2]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d103      	bne.n	8005a06 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005a04:	e1d3      	b.n	8005dae <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d003      	beq.n	8005a1a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2205      	movs	r2, #5
 8005a16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	887a      	ldrh	r2, [r7, #2]
 8005a2a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	887a      	ldrh	r2, [r7, #2]
 8005a32:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	887a      	ldrh	r2, [r7, #2]
 8005a40:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	887a      	ldrh	r2, [r7, #2]
 8005a46:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a5c:	d802      	bhi.n	8005a64 <HAL_SPI_TransmitReceive+0xe6>
 8005a5e:	8a3b      	ldrh	r3, [r7, #16]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d908      	bls.n	8005a76 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a72:	605a      	str	r2, [r3, #4]
 8005a74:	e007      	b.n	8005a86 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a84:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a90:	2b40      	cmp	r3, #64	@ 0x40
 8005a92:	d007      	beq.n	8005aa4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005aa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005aac:	f240 8081 	bls.w	8005bb2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <HAL_SPI_TransmitReceive+0x140>
 8005ab8:	8a7b      	ldrh	r3, [r7, #18]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d16d      	bne.n	8005b9a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac2:	881a      	ldrh	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ace:	1c9a      	adds	r2, r3, #2
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ae2:	e05a      	b.n	8005b9a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d11b      	bne.n	8005b2a <HAL_SPI_TransmitReceive+0x1ac>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d016      	beq.n	8005b2a <HAL_SPI_TransmitReceive+0x1ac>
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d113      	bne.n	8005b2a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b06:	881a      	ldrh	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b12:	1c9a      	adds	r2, r3, #2
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d11c      	bne.n	8005b72 <HAL_SPI_TransmitReceive+0x1f4>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d016      	beq.n	8005b72 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4e:	b292      	uxth	r2, r2
 8005b50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b56:	1c9a      	adds	r2, r3, #2
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b72:	f7fd fa93 	bl	800309c <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d80b      	bhi.n	8005b9a <HAL_SPI_TransmitReceive+0x21c>
 8005b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d007      	beq.n	8005b9a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005b98:	e109      	b.n	8005dae <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d19f      	bne.n	8005ae4 <HAL_SPI_TransmitReceive+0x166>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d199      	bne.n	8005ae4 <HAL_SPI_TransmitReceive+0x166>
 8005bb0:	e0e3      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_SPI_TransmitReceive+0x244>
 8005bba:	8a7b      	ldrh	r3, [r7, #18]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	f040 80cf 	bne.w	8005d60 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d912      	bls.n	8005bf2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd0:	881a      	ldrh	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bdc:	1c9a      	adds	r2, r3, #2
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3b02      	subs	r3, #2
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005bf0:	e0b6      	b.n	8005d60 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	330c      	adds	r3, #12
 8005bfc:	7812      	ldrb	r2, [r2, #0]
 8005bfe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c18:	e0a2      	b.n	8005d60 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d134      	bne.n	8005c92 <HAL_SPI_TransmitReceive+0x314>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d02f      	beq.n	8005c92 <HAL_SPI_TransmitReceive+0x314>
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d12c      	bne.n	8005c92 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d912      	bls.n	8005c68 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c46:	881a      	ldrh	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c52:	1c9a      	adds	r2, r3, #2
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b02      	subs	r3, #2
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c66:	e012      	b.n	8005c8e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	330c      	adds	r3, #12
 8005c72:	7812      	ldrb	r2, [r2, #0]
 8005c74:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d148      	bne.n	8005d32 <HAL_SPI_TransmitReceive+0x3b4>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d042      	beq.n	8005d32 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d923      	bls.n	8005d00 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc2:	b292      	uxth	r2, r2
 8005cc4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cca:	1c9a      	adds	r2, r3, #2
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	3b02      	subs	r3, #2
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d81f      	bhi.n	8005d2e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005cfc:	605a      	str	r2, [r3, #4]
 8005cfe:	e016      	b.n	8005d2e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f103 020c 	add.w	r2, r3, #12
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0c:	7812      	ldrb	r2, [r2, #0]
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d32:	f7fd f9b3 	bl	800309c <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d803      	bhi.n	8005d4a <HAL_SPI_TransmitReceive+0x3cc>
 8005d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d48:	d102      	bne.n	8005d50 <HAL_SPI_TransmitReceive+0x3d2>
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d107      	bne.n	8005d60 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005d5e:	e026      	b.n	8005dae <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f47f af57 	bne.w	8005c1a <HAL_SPI_TransmitReceive+0x29c>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f47f af50 	bne.w	8005c1a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 f93e 	bl	8006000 <SPI_EndRxTxTransaction>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d005      	beq.n	8005d96 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2220      	movs	r2, #32
 8005d94:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da4:	e003      	b.n	8005dae <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005db6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3728      	adds	r7, #40	@ 0x28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	603b      	str	r3, [r7, #0]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005dd4:	f7fd f962 	bl	800309c <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ddc:	1a9b      	subs	r3, r3, r2
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	4413      	add	r3, r2
 8005de2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005de4:	f7fd f95a 	bl	800309c <HAL_GetTick>
 8005de8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dea:	4b39      	ldr	r3, [pc, #228]	@ (8005ed0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	015b      	lsls	r3, r3, #5
 8005df0:	0d1b      	lsrs	r3, r3, #20
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	fb02 f303 	mul.w	r3, r2, r3
 8005df8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dfa:	e054      	b.n	8005ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e02:	d050      	beq.n	8005ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e04:	f7fd f94a 	bl	800309c <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d902      	bls.n	8005e1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d13d      	bne.n	8005e96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e32:	d111      	bne.n	8005e58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e3c:	d004      	beq.n	8005e48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e46:	d107      	bne.n	8005e58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e60:	d10f      	bne.n	8005e82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e017      	b.n	8005ec6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	bf0c      	ite	eq
 8005eb6:	2301      	moveq	r3, #1
 8005eb8:	2300      	movne	r3, #0
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d19b      	bne.n	8005dfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3720      	adds	r7, #32
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	20000008 	.word	0x20000008

08005ed4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b08a      	sub	sp, #40	@ 0x28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ee6:	f7fd f8d9 	bl	800309c <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eee:	1a9b      	subs	r3, r3, r2
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005ef6:	f7fd f8d1 	bl	800309c <HAL_GetTick>
 8005efa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	330c      	adds	r3, #12
 8005f02:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f04:	4b3d      	ldr	r3, [pc, #244]	@ (8005ffc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	00da      	lsls	r2, r3, #3
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	0d1b      	lsrs	r3, r3, #20
 8005f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f16:	fb02 f303 	mul.w	r3, r2, r3
 8005f1a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f1c:	e060      	b.n	8005fe0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005f24:	d107      	bne.n	8005f36 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d104      	bne.n	8005f36 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f34:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d050      	beq.n	8005fe0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f3e:	f7fd f8ad 	bl	800309c <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d902      	bls.n	8005f54 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d13d      	bne.n	8005fd0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f6c:	d111      	bne.n	8005f92 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f76:	d004      	beq.n	8005f82 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f80:	d107      	bne.n	8005f92 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f9a:	d10f      	bne.n	8005fbc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e010      	b.n	8005ff2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	4013      	ands	r3, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d196      	bne.n	8005f1e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3728      	adds	r7, #40	@ 0x28
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000008 	.word	0x20000008

08006000 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af02      	add	r7, sp, #8
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2200      	movs	r2, #0
 8006014:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f7ff ff5b 	bl	8005ed4 <SPI_WaitFifoStateUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d007      	beq.n	8006034 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006028:	f043 0220 	orr.w	r2, r3, #32
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e027      	b.n	8006084 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2200      	movs	r2, #0
 800603c:	2180      	movs	r1, #128	@ 0x80
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f7ff fec0 	bl	8005dc4 <SPI_WaitFlagStateUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d007      	beq.n	800605a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800604e:	f043 0220 	orr.w	r2, r3, #32
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e014      	b.n	8006084 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2200      	movs	r2, #0
 8006062:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f7ff ff34 	bl	8005ed4 <SPI_WaitFifoStateUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006076:	f043 0220 	orr.w	r2, r3, #32
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e000      	b.n	8006084 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <LL_RCC_GetUSARTClockSource>:
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006098:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4013      	ands	r3, r2
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <LL_RCC_GetLPUARTClockSource>:
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80060b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4013      	ands	r3, r2
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e042      	b.n	8006164 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d106      	bne.n	80060f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7fc fdb9 	bl	8002c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2224      	movs	r2, #36	@ 0x24
 80060fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0201 	bic.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fade 	bl	80066d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f8b3 	bl	8006288 <UART_SetConfig>
 8006122:	4603      	mov	r3, r0
 8006124:	2b01      	cmp	r3, #1
 8006126:	d101      	bne.n	800612c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e01b      	b.n	8006164 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800613a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800614a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0201 	orr.w	r2, r2, #1
 800615a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fb5d 	bl	800681c <UART_CheckIdleState>
 8006162:	4603      	mov	r3, r0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08a      	sub	sp, #40	@ 0x28
 8006170:	af02      	add	r7, sp, #8
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	603b      	str	r3, [r7, #0]
 8006178:	4613      	mov	r3, r2
 800617a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006182:	2b20      	cmp	r3, #32
 8006184:	d17b      	bne.n	800627e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <HAL_UART_Transmit+0x26>
 800618c:	88fb      	ldrh	r3, [r7, #6]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e074      	b.n	8006280 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2221      	movs	r2, #33	@ 0x21
 80061a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061a6:	f7fc ff79 	bl	800309c <HAL_GetTick>
 80061aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	88fa      	ldrh	r2, [r7, #6]
 80061b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	88fa      	ldrh	r2, [r7, #6]
 80061b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c4:	d108      	bne.n	80061d8 <HAL_UART_Transmit+0x6c>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d104      	bne.n	80061d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	e003      	b.n	80061e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061dc:	2300      	movs	r3, #0
 80061de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061e0:	e030      	b.n	8006244 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2200      	movs	r2, #0
 80061ea:	2180      	movs	r1, #128	@ 0x80
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 fbbf 	bl	8006970 <UART_WaitOnFlagUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d005      	beq.n	8006204 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2220      	movs	r2, #32
 80061fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e03d      	b.n	8006280 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10b      	bne.n	8006222 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006218:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	3302      	adds	r3, #2
 800621e:	61bb      	str	r3, [r7, #24]
 8006220:	e007      	b.n	8006232 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	781a      	ldrb	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	3301      	adds	r3, #1
 8006230:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006238:	b29b      	uxth	r3, r3
 800623a:	3b01      	subs	r3, #1
 800623c:	b29a      	uxth	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800624a:	b29b      	uxth	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1c8      	bne.n	80061e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2200      	movs	r2, #0
 8006258:	2140      	movs	r1, #64	@ 0x40
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 fb88 	bl	8006970 <UART_WaitOnFlagUntilTimeout>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d005      	beq.n	8006272 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2220      	movs	r2, #32
 800626a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e006      	b.n	8006280 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	e000      	b.n	8006280 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800627e:	2302      	movs	r3, #2
  }
}
 8006280:	4618      	mov	r0, r3
 8006282:	3720      	adds	r7, #32
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800628c:	b08c      	sub	sp, #48	@ 0x30
 800628e:	af00      	add	r7, sp, #0
 8006290:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	431a      	orrs	r2, r3
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	431a      	orrs	r2, r3
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	4baf      	ldr	r3, [pc, #700]	@ (8006574 <UART_SetConfig+0x2ec>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	6812      	ldr	r2, [r2, #0]
 80062be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062c0:	430b      	orrs	r3, r1
 80062c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	68da      	ldr	r2, [r3, #12]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4aa4      	ldr	r2, [pc, #656]	@ (8006578 <UART_SetConfig+0x2f0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d004      	beq.n	80062f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062f0:	4313      	orrs	r3, r2
 80062f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80062fe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	6812      	ldr	r2, [r2, #0]
 8006306:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006308:	430b      	orrs	r3, r1
 800630a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006312:	f023 010f 	bic.w	r1, r3, #15
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a95      	ldr	r2, [pc, #596]	@ (800657c <UART_SetConfig+0x2f4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d125      	bne.n	8006378 <UART_SetConfig+0xf0>
 800632c:	2003      	movs	r0, #3
 800632e:	f7ff fead 	bl	800608c <LL_RCC_GetUSARTClockSource>
 8006332:	4603      	mov	r3, r0
 8006334:	2b03      	cmp	r3, #3
 8006336:	d81b      	bhi.n	8006370 <UART_SetConfig+0xe8>
 8006338:	a201      	add	r2, pc, #4	@ (adr r2, 8006340 <UART_SetConfig+0xb8>)
 800633a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633e:	bf00      	nop
 8006340:	08006351 	.word	0x08006351
 8006344:	08006361 	.word	0x08006361
 8006348:	08006359 	.word	0x08006359
 800634c:	08006369 	.word	0x08006369
 8006350:	2301      	movs	r3, #1
 8006352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006356:	e042      	b.n	80063de <UART_SetConfig+0x156>
 8006358:	2302      	movs	r3, #2
 800635a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800635e:	e03e      	b.n	80063de <UART_SetConfig+0x156>
 8006360:	2304      	movs	r3, #4
 8006362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006366:	e03a      	b.n	80063de <UART_SetConfig+0x156>
 8006368:	2308      	movs	r3, #8
 800636a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800636e:	e036      	b.n	80063de <UART_SetConfig+0x156>
 8006370:	2310      	movs	r3, #16
 8006372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006376:	e032      	b.n	80063de <UART_SetConfig+0x156>
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a7e      	ldr	r2, [pc, #504]	@ (8006578 <UART_SetConfig+0x2f0>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d12a      	bne.n	80063d8 <UART_SetConfig+0x150>
 8006382:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8006386:	f7ff fe91 	bl	80060ac <LL_RCC_GetLPUARTClockSource>
 800638a:	4603      	mov	r3, r0
 800638c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006390:	d01a      	beq.n	80063c8 <UART_SetConfig+0x140>
 8006392:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006396:	d81b      	bhi.n	80063d0 <UART_SetConfig+0x148>
 8006398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800639c:	d00c      	beq.n	80063b8 <UART_SetConfig+0x130>
 800639e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063a2:	d815      	bhi.n	80063d0 <UART_SetConfig+0x148>
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <UART_SetConfig+0x128>
 80063a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ac:	d008      	beq.n	80063c0 <UART_SetConfig+0x138>
 80063ae:	e00f      	b.n	80063d0 <UART_SetConfig+0x148>
 80063b0:	2300      	movs	r3, #0
 80063b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063b6:	e012      	b.n	80063de <UART_SetConfig+0x156>
 80063b8:	2302      	movs	r3, #2
 80063ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063be:	e00e      	b.n	80063de <UART_SetConfig+0x156>
 80063c0:	2304      	movs	r3, #4
 80063c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063c6:	e00a      	b.n	80063de <UART_SetConfig+0x156>
 80063c8:	2308      	movs	r3, #8
 80063ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ce:	e006      	b.n	80063de <UART_SetConfig+0x156>
 80063d0:	2310      	movs	r3, #16
 80063d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063d6:	e002      	b.n	80063de <UART_SetConfig+0x156>
 80063d8:	2310      	movs	r3, #16
 80063da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a65      	ldr	r2, [pc, #404]	@ (8006578 <UART_SetConfig+0x2f0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	f040 8097 	bne.w	8006518 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d823      	bhi.n	800643a <UART_SetConfig+0x1b2>
 80063f2:	a201      	add	r2, pc, #4	@ (adr r2, 80063f8 <UART_SetConfig+0x170>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	0800641d 	.word	0x0800641d
 80063fc:	0800643b 	.word	0x0800643b
 8006400:	08006425 	.word	0x08006425
 8006404:	0800643b 	.word	0x0800643b
 8006408:	0800642b 	.word	0x0800642b
 800640c:	0800643b 	.word	0x0800643b
 8006410:	0800643b 	.word	0x0800643b
 8006414:	0800643b 	.word	0x0800643b
 8006418:	08006433 	.word	0x08006433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800641c:	f7fe fb4c 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8006420:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006422:	e010      	b.n	8006446 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006424:	4b56      	ldr	r3, [pc, #344]	@ (8006580 <UART_SetConfig+0x2f8>)
 8006426:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006428:	e00d      	b.n	8006446 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800642a:	f7fe fac5 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 800642e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006430:	e009      	b.n	8006446 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006436:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006438:	e005      	b.n	8006446 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006444:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 812b 	beq.w	80066a4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006452:	4a4c      	ldr	r2, [pc, #304]	@ (8006584 <UART_SetConfig+0x2fc>)
 8006454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006458:	461a      	mov	r2, r3
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006460:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	4613      	mov	r3, r2
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	4413      	add	r3, r2
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	429a      	cmp	r2, r3
 8006470:	d305      	bcc.n	800647e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	429a      	cmp	r2, r3
 800647c:	d903      	bls.n	8006486 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006484:	e10e      	b.n	80066a4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	2200      	movs	r2, #0
 800648a:	60bb      	str	r3, [r7, #8]
 800648c:	60fa      	str	r2, [r7, #12]
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006492:	4a3c      	ldr	r2, [pc, #240]	@ (8006584 <UART_SetConfig+0x2fc>)
 8006494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006498:	b29b      	uxth	r3, r3
 800649a:	2200      	movs	r2, #0
 800649c:	603b      	str	r3, [r7, #0]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064a8:	f7f9 fec2 	bl	8000230 <__aeabi_uldivmod>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4610      	mov	r0, r2
 80064b2:	4619      	mov	r1, r3
 80064b4:	f04f 0200 	mov.w	r2, #0
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	020b      	lsls	r3, r1, #8
 80064be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064c2:	0202      	lsls	r2, r0, #8
 80064c4:	6979      	ldr	r1, [r7, #20]
 80064c6:	6849      	ldr	r1, [r1, #4]
 80064c8:	0849      	lsrs	r1, r1, #1
 80064ca:	2000      	movs	r0, #0
 80064cc:	460c      	mov	r4, r1
 80064ce:	4605      	mov	r5, r0
 80064d0:	eb12 0804 	adds.w	r8, r2, r4
 80064d4:	eb43 0905 	adc.w	r9, r3, r5
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	469a      	mov	sl, r3
 80064e0:	4693      	mov	fp, r2
 80064e2:	4652      	mov	r2, sl
 80064e4:	465b      	mov	r3, fp
 80064e6:	4640      	mov	r0, r8
 80064e8:	4649      	mov	r1, r9
 80064ea:	f7f9 fea1 	bl	8000230 <__aeabi_uldivmod>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4613      	mov	r3, r2
 80064f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064fc:	d308      	bcc.n	8006510 <UART_SetConfig+0x288>
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006504:	d204      	bcs.n	8006510 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6a3a      	ldr	r2, [r7, #32]
 800650c:	60da      	str	r2, [r3, #12]
 800650e:	e0c9      	b.n	80066a4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006516:	e0c5      	b.n	80066a4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006520:	d16d      	bne.n	80065fe <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006522:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006526:	3b01      	subs	r3, #1
 8006528:	2b07      	cmp	r3, #7
 800652a:	d82d      	bhi.n	8006588 <UART_SetConfig+0x300>
 800652c:	a201      	add	r2, pc, #4	@ (adr r2, 8006534 <UART_SetConfig+0x2ac>)
 800652e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006532:	bf00      	nop
 8006534:	08006555 	.word	0x08006555
 8006538:	0800655d 	.word	0x0800655d
 800653c:	08006589 	.word	0x08006589
 8006540:	08006563 	.word	0x08006563
 8006544:	08006589 	.word	0x08006589
 8006548:	08006589 	.word	0x08006589
 800654c:	08006589 	.word	0x08006589
 8006550:	0800656b 	.word	0x0800656b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006554:	f7fe fac6 	bl	8004ae4 <HAL_RCC_GetPCLK2Freq>
 8006558:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800655a:	e01b      	b.n	8006594 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800655c:	4b08      	ldr	r3, [pc, #32]	@ (8006580 <UART_SetConfig+0x2f8>)
 800655e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006560:	e018      	b.n	8006594 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006562:	f7fe fa29 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 8006566:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006568:	e014      	b.n	8006594 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800656a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800656e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006570:	e010      	b.n	8006594 <UART_SetConfig+0x30c>
 8006572:	bf00      	nop
 8006574:	cfff69f3 	.word	0xcfff69f3
 8006578:	40008000 	.word	0x40008000
 800657c:	40013800 	.word	0x40013800
 8006580:	00f42400 	.word	0x00f42400
 8006584:	08012a64 	.word	0x08012a64
      default:
        pclk = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006592:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 8084 	beq.w	80066a4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a0:	4a4b      	ldr	r2, [pc, #300]	@ (80066d0 <UART_SetConfig+0x448>)
 80065a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065a6:	461a      	mov	r2, r3
 80065a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80065ae:	005a      	lsls	r2, r3, #1
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	085b      	lsrs	r3, r3, #1
 80065b6:	441a      	add	r2, r3
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	2b0f      	cmp	r3, #15
 80065c6:	d916      	bls.n	80065f6 <UART_SetConfig+0x36e>
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065ce:	d212      	bcs.n	80065f6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	f023 030f 	bic.w	r3, r3, #15
 80065d8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	085b      	lsrs	r3, r3, #1
 80065de:	b29b      	uxth	r3, r3
 80065e0:	f003 0307 	and.w	r3, r3, #7
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	8bfb      	ldrh	r3, [r7, #30]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	8bfa      	ldrh	r2, [r7, #30]
 80065f2:	60da      	str	r2, [r3, #12]
 80065f4:	e056      	b.n	80066a4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80065fc:	e052      	b.n	80066a4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006602:	3b01      	subs	r3, #1
 8006604:	2b07      	cmp	r3, #7
 8006606:	d822      	bhi.n	800664e <UART_SetConfig+0x3c6>
 8006608:	a201      	add	r2, pc, #4	@ (adr r2, 8006610 <UART_SetConfig+0x388>)
 800660a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660e:	bf00      	nop
 8006610:	08006631 	.word	0x08006631
 8006614:	08006639 	.word	0x08006639
 8006618:	0800664f 	.word	0x0800664f
 800661c:	0800663f 	.word	0x0800663f
 8006620:	0800664f 	.word	0x0800664f
 8006624:	0800664f 	.word	0x0800664f
 8006628:	0800664f 	.word	0x0800664f
 800662c:	08006647 	.word	0x08006647
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006630:	f7fe fa58 	bl	8004ae4 <HAL_RCC_GetPCLK2Freq>
 8006634:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006636:	e010      	b.n	800665a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006638:	4b26      	ldr	r3, [pc, #152]	@ (80066d4 <UART_SetConfig+0x44c>)
 800663a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800663c:	e00d      	b.n	800665a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800663e:	f7fe f9bb 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 8006642:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006644:	e009      	b.n	800665a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800664a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800664c:	e005      	b.n	800665a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006658:	bf00      	nop
    }

    if (pclk != 0U)
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	2b00      	cmp	r3, #0
 800665e:	d021      	beq.n	80066a4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006664:	4a1a      	ldr	r2, [pc, #104]	@ (80066d0 <UART_SetConfig+0x448>)
 8006666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800666a:	461a      	mov	r2, r3
 800666c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	085b      	lsrs	r3, r3, #1
 8006678:	441a      	add	r2, r3
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006682:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	2b0f      	cmp	r3, #15
 8006688:	d909      	bls.n	800669e <UART_SetConfig+0x416>
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006690:	d205      	bcs.n	800669e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	b29a      	uxth	r2, r3
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60da      	str	r2, [r3, #12]
 800669c:	e002      	b.n	80066a4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	2200      	movs	r2, #0
 80066b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2200      	movs	r2, #0
 80066be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80066c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3730      	adds	r7, #48	@ 0x30
 80066c8:	46bd      	mov	sp, r7
 80066ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066ce:	bf00      	nop
 80066d0:	08012a64 	.word	0x08012a64
 80066d4:	00f42400 	.word	0x00f42400

080066d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00a      	beq.n	8006702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00a      	beq.n	8006746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674a:	f003 0304 	and.w	r3, r3, #4
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00a      	beq.n	8006768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676c:	f003 0310 	and.w	r3, r3, #16
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00a      	beq.n	800678a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678e:	f003 0320 	and.w	r3, r3, #32
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d01a      	beq.n	80067ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067d6:	d10a      	bne.n	80067ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	605a      	str	r2, [r3, #4]
  }
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b098      	sub	sp, #96	@ 0x60
 8006820:	af02      	add	r7, sp, #8
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800682c:	f7fc fc36 	bl	800309c <HAL_GetTick>
 8006830:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0308 	and.w	r3, r3, #8
 800683c:	2b08      	cmp	r3, #8
 800683e:	d12f      	bne.n	80068a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006840:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006848:	2200      	movs	r2, #0
 800684a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f88e 	bl	8006970 <UART_WaitOnFlagUntilTimeout>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d022      	beq.n	80068a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006862:	e853 3f00 	ldrex	r3, [r3]
 8006866:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800686a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800686e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	461a      	mov	r2, r3
 8006876:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006878:	647b      	str	r3, [r7, #68]	@ 0x44
 800687a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800687e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006880:	e841 2300 	strex	r3, r2, [r1]
 8006884:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e6      	bne.n	800685a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2220      	movs	r2, #32
 8006890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e063      	b.n	8006968 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d149      	bne.n	8006942 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068b6:	2200      	movs	r2, #0
 80068b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f857 	bl	8006970 <UART_WaitOnFlagUntilTimeout>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d03c      	beq.n	8006942 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	623b      	str	r3, [r7, #32]
   return(result);
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	461a      	mov	r2, r3
 80068e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80068e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1e6      	bne.n	80068c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3308      	adds	r3, #8
 8006900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	60fb      	str	r3, [r7, #12]
   return(result);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f023 0301 	bic.w	r3, r3, #1
 8006910:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3308      	adds	r3, #8
 8006918:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800691a:	61fa      	str	r2, [r7, #28]
 800691c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	69b9      	ldr	r1, [r7, #24]
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	617b      	str	r3, [r7, #20]
   return(result);
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e5      	bne.n	80068fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2220      	movs	r2, #32
 8006932:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e012      	b.n	8006968 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2220      	movs	r2, #32
 8006946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2220      	movs	r2, #32
 800694e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3758      	adds	r7, #88	@ 0x58
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	4613      	mov	r3, r2
 800697e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006980:	e04f      	b.n	8006a22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006988:	d04b      	beq.n	8006a22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800698a:	f7fc fb87 	bl	800309c <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	429a      	cmp	r2, r3
 8006998:	d302      	bcc.n	80069a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e04e      	b.n	8006a42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d037      	beq.n	8006a22 <UART_WaitOnFlagUntilTimeout+0xb2>
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b80      	cmp	r3, #128	@ 0x80
 80069b6:	d034      	beq.n	8006a22 <UART_WaitOnFlagUntilTimeout+0xb2>
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2b40      	cmp	r3, #64	@ 0x40
 80069bc:	d031      	beq.n	8006a22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	f003 0308 	and.w	r3, r3, #8
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d110      	bne.n	80069ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2208      	movs	r2, #8
 80069d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 f838 	bl	8006a4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2208      	movs	r2, #8
 80069de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e029      	b.n	8006a42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069fc:	d111      	bne.n	8006a22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 f81e 	bl	8006a4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2220      	movs	r2, #32
 8006a12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e00f      	b.n	8006a42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	69da      	ldr	r2, [r3, #28]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	bf0c      	ite	eq
 8006a32:	2301      	moveq	r3, #1
 8006a34:	2300      	movne	r3, #0
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d0a0      	beq.n	8006982 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b095      	sub	sp, #84	@ 0x54
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a70:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a72:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e6      	bne.n	8006a52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3308      	adds	r3, #8
 8006a8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a9a:	f023 0301 	bic.w	r3, r3, #1
 8006a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006aa8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006aae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e3      	bne.n	8006a84 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d118      	bne.n	8006af6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	e853 3f00 	ldrex	r3, [r3]
 8006ad0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f023 0310 	bic.w	r3, r3, #16
 8006ad8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ae2:	61bb      	str	r3, [r7, #24]
 8006ae4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	6979      	ldr	r1, [r7, #20]
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	613b      	str	r3, [r7, #16]
   return(result);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e6      	bne.n	8006ac4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b0a:	bf00      	nop
 8006b0c:	3754      	adds	r7, #84	@ 0x54
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b085      	sub	sp, #20
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d101      	bne.n	8006b2c <HAL_UARTEx_DisableFifoMode+0x16>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e027      	b.n	8006b7c <HAL_UARTEx_DisableFifoMode+0x66>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2224      	movs	r2, #36	@ 0x24
 8006b38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 0201 	bic.w	r2, r2, #1
 8006b52:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e02d      	b.n	8006bfc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2224      	movs	r2, #36	@ 0x24
 8006bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0201 	bic.w	r2, r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f84f 	bl	8006c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d101      	bne.n	8006c1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e02d      	b.n	8006c78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2224      	movs	r2, #36	@ 0x24
 8006c28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0201 	bic.w	r2, r2, #1
 8006c42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f811 	bl	8006c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d108      	bne.n	8006ca2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ca0:	e031      	b.n	8006d06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ca2:	2308      	movs	r3, #8
 8006ca4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ca6:	2308      	movs	r3, #8
 8006ca8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	0e5b      	lsrs	r3, r3, #25
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	f003 0307 	and.w	r3, r3, #7
 8006cb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	0f5b      	lsrs	r3, r3, #29
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cca:	7bbb      	ldrb	r3, [r7, #14]
 8006ccc:	7b3a      	ldrb	r2, [r7, #12]
 8006cce:	4911      	ldr	r1, [pc, #68]	@ (8006d14 <UARTEx_SetNbDataToProcess+0x94>)
 8006cd0:	5c8a      	ldrb	r2, [r1, r2]
 8006cd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006cd6:	7b3a      	ldrb	r2, [r7, #12]
 8006cd8:	490f      	ldr	r1, [pc, #60]	@ (8006d18 <UARTEx_SetNbDataToProcess+0x98>)
 8006cda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	7b7a      	ldrb	r2, [r7, #13]
 8006cec:	4909      	ldr	r1, [pc, #36]	@ (8006d14 <UARTEx_SetNbDataToProcess+0x94>)
 8006cee:	5c8a      	ldrb	r2, [r1, r2]
 8006cf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006cf4:	7b7a      	ldrb	r2, [r7, #13]
 8006cf6:	4908      	ldr	r1, [pc, #32]	@ (8006d18 <UARTEx_SetNbDataToProcess+0x98>)
 8006cf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	08012a7c 	.word	0x08012a7c
 8006d18:	08012a84 	.word	0x08012a84

08006d1c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d26:	f107 0308 	add.w	r3, r7, #8
 8006d2a:	2218      	movs	r2, #24
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 f9f0 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d34:	233f      	movs	r3, #63	@ 0x3f
 8006d36:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006d38:	2381      	movs	r3, #129	@ 0x81
 8006d3a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006d3c:	1dfb      	adds	r3, r7, #7
 8006d3e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006d40:	2301      	movs	r3, #1
 8006d42:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006d44:	f107 0308 	add.w	r3, r7, #8
 8006d48:	2100      	movs	r1, #0
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f001 fc6c 	bl	8008628 <hci_send_req>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	da01      	bge.n	8006d5a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006d56:	23ff      	movs	r3, #255	@ 0xff
 8006d58:	e000      	b.n	8006d5c <aci_gap_set_non_discoverable+0x40>
  return status;
 8006d5a:	79fb      	ldrb	r3, [r7, #7]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3720      	adds	r7, #32
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8006d64:	b5b0      	push	{r4, r5, r7, lr}
 8006d66:	b0ce      	sub	sp, #312	@ 0x138
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	4605      	mov	r5, r0
 8006d6c:	460c      	mov	r4, r1
 8006d6e:	4610      	mov	r0, r2
 8006d70:	4619      	mov	r1, r3
 8006d72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d76:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006d7a:	462a      	mov	r2, r5
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d82:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006d86:	4622      	mov	r2, r4
 8006d88:	801a      	strh	r2, [r3, #0]
 8006d8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d8e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8006d92:	4602      	mov	r2, r0
 8006d94:	801a      	strh	r2, [r3, #0]
 8006d96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d9a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006d9e:	460a      	mov	r2, r1
 8006da0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006da2:	f107 0310 	add.w	r3, r7, #16
 8006da6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006daa:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8006dae:	3308      	adds	r3, #8
 8006db0:	f107 0210 	add.w	r2, r7, #16
 8006db4:	4413      	add	r3, r2
 8006db6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006dba:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006dbe:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8006dc2:	4413      	add	r3, r2
 8006dc4:	3309      	adds	r3, #9
 8006dc6:	f107 0210 	add.w	r2, r7, #16
 8006dca:	4413      	add	r3, r2
 8006dcc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006dd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006dd4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006dd8:	2200      	movs	r2, #0
 8006dda:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006de2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006de6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006dea:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8006dee:	7812      	ldrb	r2, [r2, #0]
 8006df0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006df2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006df6:	3301      	adds	r3, #1
 8006df8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006dfc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006e00:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006e04:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8006e08:	8812      	ldrh	r2, [r2, #0]
 8006e0a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006e0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e12:	3302      	adds	r3, #2
 8006e14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006e18:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006e1c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006e20:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8006e24:	8812      	ldrh	r2, [r2, #0]
 8006e26:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006e2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e2e:	3302      	adds	r3, #2
 8006e30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006e34:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006e38:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006e3c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006e40:	7812      	ldrb	r2, [r2, #0]
 8006e42:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006e44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e48:	3301      	adds	r3, #1
 8006e4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006e4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006e52:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8006e56:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006e58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006e62:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006e66:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006e6a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006e6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e70:	3301      	adds	r3, #1
 8006e72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006e76:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006e7a:	3308      	adds	r3, #8
 8006e7c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006e80:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8006e84:	4618      	mov	r0, r3
 8006e86:	f001 f935 	bl	80080f4 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006e8a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8006e8e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006e92:	4413      	add	r3, r2
 8006e94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006e98:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006e9c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006ea0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006ea2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006eac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006eb6:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f001 f91a 	bl	80080f4 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006ec0:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8006ec4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006ec8:	4413      	add	r3, r2
 8006eca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8006ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006ed2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8006ed6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006ed8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006edc:	3302      	adds	r3, #2
 8006ede:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8006ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006ee6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8006eea:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006eec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ef0:	3302      	adds	r3, #2
 8006ef2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ef6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006efa:	2218      	movs	r2, #24
 8006efc:	2100      	movs	r1, #0
 8006efe:	4618      	mov	r0, r3
 8006f00:	f001 f908 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f04:	233f      	movs	r3, #63	@ 0x3f
 8006f06:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8006f0a:	2383      	movs	r3, #131	@ 0x83
 8006f0c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006f10:	f107 0310 	add.w	r3, r7, #16
 8006f14:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006f18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f1c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006f20:	f107 030f 	add.w	r3, r7, #15
 8006f24:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006f32:	2100      	movs	r1, #0
 8006f34:	4618      	mov	r0, r3
 8006f36:	f001 fb77 	bl	8008628 <hci_send_req>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	da01      	bge.n	8006f44 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006f40:	23ff      	movs	r3, #255	@ 0xff
 8006f42:	e004      	b.n	8006f4e <aci_gap_set_discoverable+0x1ea>
  return status;
 8006f44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f48:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006f4c:	781b      	ldrb	r3, [r3, #0]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bdb0      	pop	{r4, r5, r7, pc}

08006f58 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b0cc      	sub	sp, #304	@ 0x130
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	4602      	mov	r2, r0
 8006f60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f64:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006f68:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006f6a:	f107 0310 	add.w	r3, r7, #16
 8006f6e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006f72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f76:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8006f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f88:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006f8c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006f90:	7812      	ldrb	r2, [r2, #0]
 8006f92:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006f94:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f98:	3301      	adds	r3, #1
 8006f9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006fa2:	2218      	movs	r2, #24
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f001 f8b4 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006fac:	233f      	movs	r3, #63	@ 0x3f
 8006fae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8006fb2:	2385      	movs	r3, #133	@ 0x85
 8006fb4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006fb8:	f107 0310 	add.w	r3, r7, #16
 8006fbc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006fc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006fc4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006fc8:	f107 030f 	add.w	r3, r7, #15
 8006fcc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006fd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006fda:	2100      	movs	r1, #0
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f001 fb23 	bl	8008628 <hci_send_req>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	da01      	bge.n	8006fec <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006fe8:	23ff      	movs	r3, #255	@ 0xff
 8006fea:	e004      	b.n	8006ff6 <aci_gap_set_io_capability+0x9e>
  return status;
 8006fec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ff0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006ff4:	781b      	ldrb	r3, [r3, #0]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007000:	b5b0      	push	{r4, r5, r7, lr}
 8007002:	b0cc      	sub	sp, #304	@ 0x130
 8007004:	af00      	add	r7, sp, #0
 8007006:	4605      	mov	r5, r0
 8007008:	460c      	mov	r4, r1
 800700a:	4610      	mov	r0, r2
 800700c:	4619      	mov	r1, r3
 800700e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007012:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007016:	462a      	mov	r2, r5
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800701e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007022:	4622      	mov	r2, r4
 8007024:	701a      	strb	r2, [r3, #0]
 8007026:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800702a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800702e:	4602      	mov	r2, r0
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007036:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800703a:	460a      	mov	r2, r1
 800703c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800703e:	f107 0310 	add.w	r3, r7, #16
 8007042:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007046:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800704a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800704e:	2200      	movs	r2, #0
 8007050:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007052:	2300      	movs	r3, #0
 8007054:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007058:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800705c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007060:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007064:	7812      	ldrb	r2, [r2, #0]
 8007066:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007068:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800706c:	3301      	adds	r3, #1
 800706e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007072:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007076:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800707a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800707e:	7812      	ldrb	r2, [r2, #0]
 8007080:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007082:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007086:	3301      	adds	r3, #1
 8007088:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800708c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007090:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007094:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8007098:	7812      	ldrb	r2, [r2, #0]
 800709a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800709c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80070a0:	3301      	adds	r3, #1
 80070a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80070a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80070aa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80070ae:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80070b2:	7812      	ldrb	r2, [r2, #0]
 80070b4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80070b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80070ba:	3301      	adds	r3, #1
 80070bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80070c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80070c4:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80070c8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80070ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80070ce:	3301      	adds	r3, #1
 80070d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80070d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80070d8:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80070dc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80070de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80070e2:	3301      	adds	r3, #1
 80070e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80070e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80070ec:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80070f0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80070f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80070f6:	3301      	adds	r3, #1
 80070f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80070fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007100:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007104:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007108:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800710c:	3304      	adds	r3, #4
 800710e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007112:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007116:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800711a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800711c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007120:	3301      	adds	r3, #1
 8007122:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007126:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800712a:	2218      	movs	r2, #24
 800712c:	2100      	movs	r1, #0
 800712e:	4618      	mov	r0, r3
 8007130:	f000 fff0 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007134:	233f      	movs	r3, #63	@ 0x3f
 8007136:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800713a:	2386      	movs	r3, #134	@ 0x86
 800713c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007140:	f107 0310 	add.w	r3, r7, #16
 8007144:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007148:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800714c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007150:	f107 030f 	add.w	r3, r7, #15
 8007154:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007158:	2301      	movs	r3, #1
 800715a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800715e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007162:	2100      	movs	r1, #0
 8007164:	4618      	mov	r0, r3
 8007166:	f001 fa5f 	bl	8008628 <hci_send_req>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	da01      	bge.n	8007174 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8007170:	23ff      	movs	r3, #255	@ 0xff
 8007172:	e004      	b.n	800717e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8007174:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007178:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800717c:	781b      	ldrb	r3, [r3, #0]
}
 800717e:	4618      	mov	r0, r3
 8007180:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007184:	46bd      	mov	sp, r7
 8007186:	bdb0      	pop	{r4, r5, r7, pc}

08007188 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b0cc      	sub	sp, #304	@ 0x130
 800718c:	af00      	add	r7, sp, #0
 800718e:	4602      	mov	r2, r0
 8007190:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007194:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007198:	6019      	str	r1, [r3, #0]
 800719a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800719e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80071a2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80071a4:	f107 0310 	add.w	r3, r7, #16
 80071a8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80071ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80071b0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80071b4:	2200      	movs	r2, #0
 80071b6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80071b8:	2300      	movs	r3, #0
 80071ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80071be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80071c2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80071c6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80071ca:	8812      	ldrh	r2, [r2, #0]
 80071cc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80071ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80071d2:	3302      	adds	r3, #2
 80071d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 80071d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80071dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80071e0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80071e4:	6812      	ldr	r2, [r2, #0]
 80071e6:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80071ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80071ee:	3304      	adds	r3, #4
 80071f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80071f8:	2218      	movs	r2, #24
 80071fa:	2100      	movs	r1, #0
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 ff89 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007202:	233f      	movs	r3, #63	@ 0x3f
 8007204:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8007208:	2388      	movs	r3, #136	@ 0x88
 800720a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800720e:	f107 0310 	add.w	r3, r7, #16
 8007212:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007216:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800721a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800721e:	f107 030f 	add.w	r3, r7, #15
 8007222:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007226:	2301      	movs	r3, #1
 8007228:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800722c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007230:	2100      	movs	r1, #0
 8007232:	4618      	mov	r0, r3
 8007234:	f001 f9f8 	bl	8008628 <hci_send_req>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	da01      	bge.n	8007242 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800723e:	23ff      	movs	r3, #255	@ 0xff
 8007240:	e004      	b.n	800724c <aci_gap_pass_key_resp+0xc4>
  return status;
 8007242:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007246:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800724a:	781b      	ldrb	r3, [r3, #0]
}
 800724c:	4618      	mov	r0, r3
 800724e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007256:	b590      	push	{r4, r7, lr}
 8007258:	b0cd      	sub	sp, #308	@ 0x134
 800725a:	af00      	add	r7, sp, #0
 800725c:	4604      	mov	r4, r0
 800725e:	4608      	mov	r0, r1
 8007260:	4611      	mov	r1, r2
 8007262:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007266:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800726a:	6013      	str	r3, [r2, #0]
 800726c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007270:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007274:	4622      	mov	r2, r4
 8007276:	701a      	strb	r2, [r3, #0]
 8007278:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800727c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007280:	4602      	mov	r2, r0
 8007282:	701a      	strb	r2, [r3, #0]
 8007284:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007288:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800728c:	460a      	mov	r2, r1
 800728e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007290:	f107 0310 	add.w	r3, r7, #16
 8007294:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007298:	f107 0308 	add.w	r3, r7, #8
 800729c:	2207      	movs	r2, #7
 800729e:	2100      	movs	r1, #0
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 ff37 	bl	8008114 <Osal_MemSet>
  int index_input = 0;
 80072a6:	2300      	movs	r3, #0
 80072a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80072ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80072b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80072b4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80072b8:	7812      	ldrb	r2, [r2, #0]
 80072ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80072bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80072c0:	3301      	adds	r3, #1
 80072c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80072c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80072ca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80072ce:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80072d2:	7812      	ldrb	r2, [r2, #0]
 80072d4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80072d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80072da:	3301      	adds	r3, #1
 80072dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80072e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80072e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80072e8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80072ec:	7812      	ldrb	r2, [r2, #0]
 80072ee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80072f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80072f4:	3301      	adds	r3, #1
 80072f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80072fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80072fe:	2218      	movs	r2, #24
 8007300:	2100      	movs	r1, #0
 8007302:	4618      	mov	r0, r3
 8007304:	f000 ff06 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007308:	233f      	movs	r3, #63	@ 0x3f
 800730a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800730e:	238a      	movs	r3, #138	@ 0x8a
 8007310:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007314:	f107 0310 	add.w	r3, r7, #16
 8007318:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800731c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007320:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8007324:	f107 0308 	add.w	r3, r7, #8
 8007328:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800732c:	2307      	movs	r3, #7
 800732e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007332:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007336:	2100      	movs	r1, #0
 8007338:	4618      	mov	r0, r3
 800733a:	f001 f975 	bl	8008628 <hci_send_req>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	da01      	bge.n	8007348 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007344:	23ff      	movs	r3, #255	@ 0xff
 8007346:	e02e      	b.n	80073a6 <aci_gap_init+0x150>
  if ( resp.Status )
 8007348:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800734c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d005      	beq.n	8007362 <aci_gap_init+0x10c>
    return resp.Status;
 8007356:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800735a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	e021      	b.n	80073a6 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8007362:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007366:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800736a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800736e:	b29a      	uxth	r2, r3
 8007370:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007374:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800737c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007380:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007384:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007388:	b29a      	uxth	r2, r3
 800738a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800738e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007390:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007394:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007398:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800739c:	b29a      	uxth	r2, r3
 800739e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80073a2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd90      	pop	{r4, r7, pc}

080073b0 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b0cc      	sub	sp, #304	@ 0x130
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	4602      	mov	r2, r0
 80073b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80073bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80073c0:	6019      	str	r1, [r3, #0]
 80073c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80073c6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80073ca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80073cc:	f107 0310 	add.w	r3, r7, #16
 80073d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80073d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80073d8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 80073e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80073ea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80073ee:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80073f2:	7812      	ldrb	r2, [r2, #0]
 80073f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80073f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80073fa:	3301      	adds	r3, #1
 80073fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8007400:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007404:	1c58      	adds	r0, r3, #1
 8007406:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800740a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800740e:	781a      	ldrb	r2, [r3, #0]
 8007410:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007414:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007418:	6819      	ldr	r1, [r3, #0]
 800741a:	f000 fe6b 	bl	80080f4 <Osal_MemCpy>
  index_input += AdvDataLen;
 800741e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007422:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800742c:	4413      	add	r3, r2
 800742e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007432:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007436:	2218      	movs	r2, #24
 8007438:	2100      	movs	r1, #0
 800743a:	4618      	mov	r0, r3
 800743c:	f000 fe6a 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007440:	233f      	movs	r3, #63	@ 0x3f
 8007442:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8007446:	238e      	movs	r3, #142	@ 0x8e
 8007448:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800744c:	f107 0310 	add.w	r3, r7, #16
 8007450:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007454:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007458:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800745c:	f107 030f 	add.w	r3, r7, #15
 8007460:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007464:	2301      	movs	r3, #1
 8007466:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800746a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800746e:	2100      	movs	r1, #0
 8007470:	4618      	mov	r0, r3
 8007472:	f001 f8d9 	bl	8008628 <hci_send_req>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	da01      	bge.n	8007480 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800747c:	23ff      	movs	r3, #255	@ 0xff
 800747e:	e004      	b.n	800748a <aci_gap_update_adv_data+0xda>
  return status;
 8007480:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007484:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007488:	781b      	ldrb	r3, [r3, #0]
}
 800748a:	4618      	mov	r0, r3
 800748c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800749a:	2300      	movs	r3, #0
 800749c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800749e:	f107 0308 	add.w	r3, r7, #8
 80074a2:	2218      	movs	r2, #24
 80074a4:	2100      	movs	r1, #0
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fe34 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x3f;
 80074ac:	233f      	movs	r3, #63	@ 0x3f
 80074ae:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80074b0:	2392      	movs	r3, #146	@ 0x92
 80074b2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80074b4:	1dfb      	adds	r3, r7, #7
 80074b6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80074b8:	2301      	movs	r3, #1
 80074ba:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80074bc:	f107 0308 	add.w	r3, r7, #8
 80074c0:	2100      	movs	r1, #0
 80074c2:	4618      	mov	r0, r3
 80074c4:	f001 f8b0 	bl	8008628 <hci_send_req>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	da01      	bge.n	80074d2 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 80074ce:	23ff      	movs	r3, #255	@ 0xff
 80074d0:	e000      	b.n	80074d4 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 80074d2:	79fb      	ldrb	r3, [r7, #7]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3720      	adds	r7, #32
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b0cc      	sub	sp, #304	@ 0x130
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	4602      	mov	r2, r0
 80074e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80074e8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80074ec:	801a      	strh	r2, [r3, #0]
 80074ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80074f2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80074f6:	460a      	mov	r2, r1
 80074f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80074fa:	f107 0310 	add.w	r3, r7, #16
 80074fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007502:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007506:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800750a:	2200      	movs	r2, #0
 800750c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800750e:	2300      	movs	r3, #0
 8007510:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007514:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007518:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800751c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007520:	8812      	ldrh	r2, [r2, #0]
 8007522:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007524:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007528:	3302      	adds	r3, #2
 800752a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800752e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007532:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007536:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800753a:	7812      	ldrb	r2, [r2, #0]
 800753c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800753e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007542:	3301      	adds	r3, #1
 8007544:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007548:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800754c:	2218      	movs	r2, #24
 800754e:	2100      	movs	r1, #0
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fddf 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007556:	233f      	movs	r3, #63	@ 0x3f
 8007558:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800755c:	23a5      	movs	r3, #165	@ 0xa5
 800755e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007562:	f107 0310 	add.w	r3, r7, #16
 8007566:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800756a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800756e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007572:	f107 030f 	add.w	r3, r7, #15
 8007576:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800757a:	2301      	movs	r3, #1
 800757c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007580:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007584:	2100      	movs	r1, #0
 8007586:	4618      	mov	r0, r3
 8007588:	f001 f84e 	bl	8008628 <hci_send_req>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	da01      	bge.n	8007596 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8007592:	23ff      	movs	r3, #255	@ 0xff
 8007594:	e004      	b.n	80075a0 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8007596:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800759a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800759e:	781b      	ldrb	r3, [r3, #0]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b088      	sub	sp, #32
 80075ae:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075b4:	f107 0308 	add.w	r3, r7, #8
 80075b8:	2218      	movs	r2, #24
 80075ba:	2100      	movs	r1, #0
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 fda9 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x3f;
 80075c2:	233f      	movs	r3, #63	@ 0x3f
 80075c4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80075c6:	f240 1301 	movw	r3, #257	@ 0x101
 80075ca:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80075cc:	1dfb      	adds	r3, r7, #7
 80075ce:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80075d0:	2301      	movs	r3, #1
 80075d2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075d4:	f107 0308 	add.w	r3, r7, #8
 80075d8:	2100      	movs	r1, #0
 80075da:	4618      	mov	r0, r3
 80075dc:	f001 f824 	bl	8008628 <hci_send_req>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	da01      	bge.n	80075ea <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80075e6:	23ff      	movs	r3, #255	@ 0xff
 80075e8:	e000      	b.n	80075ec <aci_gatt_init+0x42>
  return status;
 80075ea:	79fb      	ldrb	r3, [r7, #7]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3720      	adds	r7, #32
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80075f4:	b590      	push	{r4, r7, lr}
 80075f6:	b0cf      	sub	sp, #316	@ 0x13c
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	4604      	mov	r4, r0
 80075fc:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8007600:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8007604:	6001      	str	r1, [r0, #0]
 8007606:	4610      	mov	r0, r2
 8007608:	4619      	mov	r1, r3
 800760a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800760e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007612:	4622      	mov	r2, r4
 8007614:	701a      	strb	r2, [r3, #0]
 8007616:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800761a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800761e:	4602      	mov	r2, r0
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007626:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800762a:	460a      	mov	r2, r1
 800762c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800762e:	f107 0310 	add.w	r3, r7, #16
 8007632:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007636:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800763a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d00a      	beq.n	800765a <aci_gatt_add_service+0x66>
 8007644:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007648:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	2b02      	cmp	r3, #2
 8007650:	d101      	bne.n	8007656 <aci_gatt_add_service+0x62>
 8007652:	2311      	movs	r3, #17
 8007654:	e002      	b.n	800765c <aci_gatt_add_service+0x68>
 8007656:	2301      	movs	r3, #1
 8007658:	e000      	b.n	800765c <aci_gatt_add_service+0x68>
 800765a:	2303      	movs	r3, #3
 800765c:	f107 0210 	add.w	r2, r7, #16
 8007660:	4413      	add	r3, r2
 8007662:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007666:	f107 030c 	add.w	r3, r7, #12
 800766a:	2203      	movs	r2, #3
 800766c:	2100      	movs	r1, #0
 800766e:	4618      	mov	r0, r3
 8007670:	f000 fd50 	bl	8008114 <Osal_MemSet>
  int index_input = 0;
 8007674:	2300      	movs	r3, #0
 8007676:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800767a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800767e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007682:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8007686:	7812      	ldrb	r2, [r2, #0]
 8007688:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800768a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800768e:	3301      	adds	r3, #1
 8007690:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007694:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007698:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d002      	beq.n	80076a8 <aci_gatt_add_service+0xb4>
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d004      	beq.n	80076b0 <aci_gatt_add_service+0xbc>
 80076a6:	e007      	b.n	80076b8 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80076a8:	2302      	movs	r3, #2
 80076aa:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80076ae:	e005      	b.n	80076bc <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80076b0:	2310      	movs	r3, #16
 80076b2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80076b6:	e001      	b.n	80076bc <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80076b8:	2397      	movs	r3, #151	@ 0x97
 80076ba:	e06c      	b.n	8007796 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80076bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80076c0:	1c58      	adds	r0, r3, #1
 80076c2:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 80076c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076ca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80076ce:	6819      	ldr	r1, [r3, #0]
 80076d0:	f000 fd10 	bl	80080f4 <Osal_MemCpy>
    index_input += size;
 80076d4:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80076d8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80076dc:	4413      	add	r3, r2
 80076de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 80076e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076e6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80076ea:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80076ee:	7812      	ldrb	r2, [r2, #0]
 80076f0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80076f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076f6:	3301      	adds	r3, #1
 80076f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80076fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007700:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007704:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8007708:	7812      	ldrb	r2, [r2, #0]
 800770a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800770c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007710:	3301      	adds	r3, #1
 8007712:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007716:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800771a:	2218      	movs	r2, #24
 800771c:	2100      	movs	r1, #0
 800771e:	4618      	mov	r0, r3
 8007720:	f000 fcf8 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007724:	233f      	movs	r3, #63	@ 0x3f
 8007726:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800772a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800772e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007732:	f107 0310 	add.w	r3, r7, #16
 8007736:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800773a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800773e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8007742:	f107 030c 	add.w	r3, r7, #12
 8007746:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800774a:	2303      	movs	r3, #3
 800774c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007750:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007754:	2100      	movs	r1, #0
 8007756:	4618      	mov	r0, r3
 8007758:	f000 ff66 	bl	8008628 <hci_send_req>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	da01      	bge.n	8007766 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8007762:	23ff      	movs	r3, #255	@ 0xff
 8007764:	e017      	b.n	8007796 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8007766:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800776a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d005      	beq.n	8007780 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8007774:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007778:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	e00a      	b.n	8007796 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8007780:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007784:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007788:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800778c:	b29a      	uxth	r2, r3
 800778e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8007792:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800779c:	46bd      	mov	sp, r7
 800779e:	bd90      	pop	{r4, r7, pc}

080077a0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80077a0:	b590      	push	{r4, r7, lr}
 80077a2:	b0d1      	sub	sp, #324	@ 0x144
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4604      	mov	r4, r0
 80077a8:	4608      	mov	r0, r1
 80077aa:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80077ae:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80077b2:	600a      	str	r2, [r1, #0]
 80077b4:	4619      	mov	r1, r3
 80077b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80077ba:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80077be:	4622      	mov	r2, r4
 80077c0:	801a      	strh	r2, [r3, #0]
 80077c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80077c6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80077ca:	4602      	mov	r2, r0
 80077cc:	701a      	strb	r2, [r3, #0]
 80077ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80077d2:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 80077d6:	460a      	mov	r2, r1
 80077d8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80077da:	f107 0318 	add.w	r3, r7, #24
 80077de:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80077e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80077e6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d00a      	beq.n	8007806 <aci_gatt_add_char+0x66>
 80077f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80077f4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d101      	bne.n	8007802 <aci_gatt_add_char+0x62>
 80077fe:	2313      	movs	r3, #19
 8007800:	e002      	b.n	8007808 <aci_gatt_add_char+0x68>
 8007802:	2303      	movs	r3, #3
 8007804:	e000      	b.n	8007808 <aci_gatt_add_char+0x68>
 8007806:	2305      	movs	r3, #5
 8007808:	f107 0218 	add.w	r2, r7, #24
 800780c:	4413      	add	r3, r2
 800780e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007812:	f107 0314 	add.w	r3, r7, #20
 8007816:	2203      	movs	r2, #3
 8007818:	2100      	movs	r1, #0
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fc7a 	bl	8008114 <Osal_MemSet>
  int index_input = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8007826:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800782a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800782e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8007832:	8812      	ldrh	r2, [r2, #0]
 8007834:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007836:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800783a:	3302      	adds	r3, #2
 800783c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007840:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007844:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8007848:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800784c:	7812      	ldrb	r2, [r2, #0]
 800784e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007850:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007854:	3301      	adds	r3, #1
 8007856:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800785a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800785e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d002      	beq.n	800786e <aci_gatt_add_char+0xce>
 8007868:	2b02      	cmp	r3, #2
 800786a:	d004      	beq.n	8007876 <aci_gatt_add_char+0xd6>
 800786c:	e007      	b.n	800787e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800786e:	2302      	movs	r3, #2
 8007870:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8007874:	e005      	b.n	8007882 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8007876:	2310      	movs	r3, #16
 8007878:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800787c:	e001      	b.n	8007882 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800787e:	2397      	movs	r3, #151	@ 0x97
 8007880:	e091      	b.n	80079a6 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007882:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007886:	1cd8      	adds	r0, r3, #3
 8007888:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800788c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007890:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007894:	6819      	ldr	r1, [r3, #0]
 8007896:	f000 fc2d 	bl	80080f4 <Osal_MemCpy>
    index_input += size;
 800789a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800789e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80078a2:	4413      	add	r3, r2
 80078a4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80078a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80078ac:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80078b0:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 80078b4:	8812      	ldrh	r2, [r2, #0]
 80078b6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80078b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80078bc:	3302      	adds	r3, #2
 80078be:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80078c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80078c6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80078ca:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80078cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80078d0:	3301      	adds	r3, #1
 80078d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80078d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80078da:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80078de:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80078e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80078e4:	3301      	adds	r3, #1
 80078e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80078ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80078ee:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 80078f2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80078f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80078f8:	3301      	adds	r3, #1
 80078fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80078fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007902:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8007906:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007908:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800790c:	3301      	adds	r3, #1
 800790e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007912:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007916:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800791a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800791c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007920:	3301      	adds	r3, #1
 8007922:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007926:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800792a:	2218      	movs	r2, #24
 800792c:	2100      	movs	r1, #0
 800792e:	4618      	mov	r0, r3
 8007930:	f000 fbf0 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007934:	233f      	movs	r3, #63	@ 0x3f
 8007936:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800793a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800793e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8007942:	f107 0318 	add.w	r3, r7, #24
 8007946:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800794a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800794e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8007952:	f107 0314 	add.w	r3, r7, #20
 8007956:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800795a:	2303      	movs	r3, #3
 800795c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007960:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007964:	2100      	movs	r1, #0
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fe5e 	bl	8008628 <hci_send_req>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	da01      	bge.n	8007976 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8007972:	23ff      	movs	r3, #255	@ 0xff
 8007974:	e017      	b.n	80079a6 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8007976:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800797a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d005      	beq.n	8007990 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007984:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007988:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	e00a      	b.n	80079a6 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8007990:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007994:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007998:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800799c:	b29a      	uxth	r2, r3
 800799e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80079a2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd90      	pop	{r4, r7, pc}

080079b0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80079b0:	b5b0      	push	{r4, r5, r7, lr}
 80079b2:	b0cc      	sub	sp, #304	@ 0x130
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	4605      	mov	r5, r0
 80079b8:	460c      	mov	r4, r1
 80079ba:	4610      	mov	r0, r2
 80079bc:	4619      	mov	r1, r3
 80079be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079c2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80079c6:	462a      	mov	r2, r5
 80079c8:	801a      	strh	r2, [r3, #0]
 80079ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079d2:	4622      	mov	r2, r4
 80079d4:	801a      	strh	r2, [r3, #0]
 80079d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079da:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80079de:	4602      	mov	r2, r0
 80079e0:	701a      	strb	r2, [r3, #0]
 80079e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079e6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80079ea:	460a      	mov	r2, r1
 80079ec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80079ee:	f107 0310 	add.w	r3, r7, #16
 80079f2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80079f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079fa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80079fe:	2200      	movs	r2, #0
 8007a00:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007a02:	2300      	movs	r3, #0
 8007a04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8007a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007a0c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007a10:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007a14:	8812      	ldrh	r2, [r2, #0]
 8007a16:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007a18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a1c:	3302      	adds	r3, #2
 8007a1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8007a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007a26:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007a2a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8007a2e:	8812      	ldrh	r2, [r2, #0]
 8007a30:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007a32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a36:	3302      	adds	r3, #2
 8007a38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8007a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007a40:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007a44:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8007a48:	7812      	ldrb	r2, [r2, #0]
 8007a4a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007a4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a50:	3301      	adds	r3, #1
 8007a52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007a5a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007a5e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8007a62:	7812      	ldrb	r2, [r2, #0]
 8007a64:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007a66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007a74:	1d98      	adds	r0, r3, #6
 8007a76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007a7a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	461a      	mov	r2, r3
 8007a82:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8007a86:	f000 fb35 	bl	80080f4 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007a8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007a8e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007a98:	4413      	add	r3, r2
 8007a9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007aa2:	2218      	movs	r2, #24
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 fb34 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007aac:	233f      	movs	r3, #63	@ 0x3f
 8007aae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8007ab2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8007ab6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007aba:	f107 0310 	add.w	r3, r7, #16
 8007abe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007ac2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ac6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007aca:	f107 030f 	add.w	r3, r7, #15
 8007ace:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ad8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007adc:	2100      	movs	r1, #0
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 fda2 	bl	8008628 <hci_send_req>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	da01      	bge.n	8007aee <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007aea:	23ff      	movs	r3, #255	@ 0xff
 8007aec:	e004      	b.n	8007af8 <aci_gatt_update_char_value+0x148>
  return status;
 8007aee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007af2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007af6:	781b      	ldrb	r3, [r3, #0]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bdb0      	pop	{r4, r5, r7, pc}

08007b02 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b0cc      	sub	sp, #304	@ 0x130
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	4602      	mov	r2, r0
 8007b0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007b0e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007b12:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8007b14:	f107 0310 	add.w	r3, r7, #16
 8007b18:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007b1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007b20:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007b24:	2200      	movs	r2, #0
 8007b26:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007b32:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007b36:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007b3a:	8812      	ldrh	r2, [r2, #0]
 8007b3c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007b3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b42:	3302      	adds	r3, #2
 8007b44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007b4c:	2218      	movs	r2, #24
 8007b4e:	2100      	movs	r1, #0
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 fadf 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b56:	233f      	movs	r3, #63	@ 0x3f
 8007b58:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8007b5c:	f240 1325 	movw	r3, #293	@ 0x125
 8007b60:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007b64:	f107 0310 	add.w	r3, r7, #16
 8007b68:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007b6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b70:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007b74:	f107 030f 	add.w	r3, r7, #15
 8007b78:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007b86:	2100      	movs	r1, #0
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 fd4d 	bl	8008628 <hci_send_req>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	da01      	bge.n	8007b98 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8007b94:	23ff      	movs	r3, #255	@ 0xff
 8007b96:	e004      	b.n	8007ba2 <aci_gatt_confirm_indication+0xa0>
  return status;
 8007b98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007b9c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007ba0:	781b      	ldrb	r3, [r3, #0]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <aci_gatt_update_char_value_ext>:
                                           uint8_t Update_Type,
                                           uint16_t Char_Length,
                                           uint16_t Value_Offset,
                                           uint8_t Value_Length,
                                           const uint8_t* Value )
{
 8007bac:	b5b0      	push	{r4, r5, r7, lr}
 8007bae:	b0cc      	sub	sp, #304	@ 0x130
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4605      	mov	r5, r0
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	4619      	mov	r1, r3
 8007bba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007bbe:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007bc2:	462a      	mov	r2, r5
 8007bc4:	801a      	strh	r2, [r3, #0]
 8007bc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007bca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007bce:	4622      	mov	r2, r4
 8007bd0:	801a      	strh	r2, [r3, #0]
 8007bd2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007bd6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007bda:	4602      	mov	r2, r0
 8007bdc:	801a      	strh	r2, [r3, #0]
 8007bde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007be2:	f2a3 132f 	subw	r3, r3, #303	@ 0x12f
 8007be6:	460a      	mov	r2, r1
 8007be8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_ext_cp0 *cp0 = (aci_gatt_update_char_value_ext_cp0*)(cmd_buffer);
 8007bea:	f107 0310 	add.w	r3, r7, #16
 8007bee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007bf2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007bf6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Handle_To_Notify = Conn_Handle_To_Notify;
 8007c04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007c08:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007c0c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007c10:	8812      	ldrh	r2, [r2, #0]
 8007c12:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007c14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007c18:	3302      	adds	r3, #2
 8007c1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8007c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007c22:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007c26:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8007c2a:	8812      	ldrh	r2, [r2, #0]
 8007c2c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007c2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007c32:	3302      	adds	r3, #2
 8007c34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8007c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007c3c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007c40:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8007c44:	8812      	ldrh	r2, [r2, #0]
 8007c46:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8007c48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007c4c:	3302      	adds	r3, #2
 8007c4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Update_Type = Update_Type;
 8007c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007c56:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007c5a:	f2a2 122f 	subw	r2, r2, #303	@ 0x12f
 8007c5e:	7812      	ldrb	r2, [r2, #0]
 8007c60:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007c62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007c66:	3301      	adds	r3, #1
 8007c68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Length = Char_Length;
 8007c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007c70:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 8007c74:	f8a3 2007 	strh.w	r2, [r3, #7]
  index_input += 2;
 8007c78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007c7c:	3302      	adds	r3, #2
 8007c7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Value_Offset = Value_Offset;
 8007c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007c86:	f8b7 2144 	ldrh.w	r2, [r7, #324]	@ 0x144
 8007c8a:	f8a3 2009 	strh.w	r2, [r3, #9]
  index_input += 2;
 8007c8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007c92:	3302      	adds	r3, #2
 8007c94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Value_Length = Value_Length;
 8007c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007c9c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8007ca0:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007ca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Value_Length );
 8007cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007cb0:	330c      	adds	r3, #12
 8007cb2:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8007cb6:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 fa1a 	bl	80080f4 <Osal_MemCpy>
  index_input += Value_Length;
 8007cc0:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 8007cc4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007cc8:	4413      	add	r3, r2
 8007cca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007cce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007cd2:	2218      	movs	r2, #24
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 fa1c 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007cdc:	233f      	movs	r3, #63	@ 0x3f
 8007cde:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x12c;
 8007ce2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8007ce6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007cea:	f107 0310 	add.w	r3, r7, #16
 8007cee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007cf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007cf6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007cfa:	f107 030f 	add.w	r3, r7, #15
 8007cfe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007d02:	2301      	movs	r3, #1
 8007d04:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 fc8a 	bl	8008628 <hci_send_req>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	da01      	bge.n	8007d1e <aci_gatt_update_char_value_ext+0x172>
    return BLE_STATUS_TIMEOUT;
 8007d1a:	23ff      	movs	r3, #255	@ 0xff
 8007d1c:	e004      	b.n	8007d28 <aci_gatt_update_char_value_ext+0x17c>
  return status;
 8007d1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d22:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007d26:	781b      	ldrb	r3, [r3, #0]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bdb0      	pop	{r4, r5, r7, pc}

08007d32 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b0cc      	sub	sp, #304	@ 0x130
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d3c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d46:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	701a      	strb	r2, [r3, #0]
 8007d4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d52:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007d56:	460a      	mov	r2, r1
 8007d58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007d5a:	f107 0310 	add.w	r3, r7, #16
 8007d5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007d62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d66:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8007d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007d7c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007d80:	7812      	ldrb	r2, [r2, #0]
 8007d82:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d88:	3301      	adds	r3, #1
 8007d8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8007d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d92:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007d96:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007d9a:	7812      	ldrb	r2, [r2, #0]
 8007d9c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007d9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007da2:	3301      	adds	r3, #1
 8007da4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007dac:	1c98      	adds	r0, r3, #2
 8007dae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007db2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007db6:	781a      	ldrb	r2, [r3, #0]
 8007db8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007dbc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007dc0:	6819      	ldr	r1, [r3, #0]
 8007dc2:	f000 f997 	bl	80080f4 <Osal_MemCpy>
  index_input += Length;
 8007dc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007dca:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007dda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007dde:	2218      	movs	r2, #24
 8007de0:	2100      	movs	r1, #0
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 f996 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007de8:	233f      	movs	r3, #63	@ 0x3f
 8007dea:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8007dee:	230c      	movs	r3, #12
 8007df0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007df4:	f107 0310 	add.w	r3, r7, #16
 8007df8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007dfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007e00:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007e04:	f107 030f 	add.w	r3, r7, #15
 8007e08:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007e16:	2100      	movs	r1, #0
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 fc05 	bl	8008628 <hci_send_req>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	da01      	bge.n	8007e28 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007e24:	23ff      	movs	r3, #255	@ 0xff
 8007e26:	e004      	b.n	8007e32 <aci_hal_write_config_data+0x100>
  return status;
 8007e28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007e2c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007e30:	781b      	ldrb	r3, [r3, #0]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b0cc      	sub	sp, #304	@ 0x130
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4602      	mov	r2, r0
 8007e44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007e48:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007e4c:	701a      	strb	r2, [r3, #0]
 8007e4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007e52:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007e56:	460a      	mov	r2, r1
 8007e58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007e5a:	f107 0310 	add.w	r3, r7, #16
 8007e5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007e62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007e66:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8007e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007e78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007e7c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007e80:	7812      	ldrb	r2, [r2, #0]
 8007e82:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007e84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007e88:	3301      	adds	r3, #1
 8007e8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8007e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007e92:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007e96:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007e9a:	7812      	ldrb	r2, [r2, #0]
 8007e9c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007e9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ea8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007eac:	2218      	movs	r2, #24
 8007eae:	2100      	movs	r1, #0
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 f92f 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007eb6:	233f      	movs	r3, #63	@ 0x3f
 8007eb8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8007ebc:	230f      	movs	r3, #15
 8007ebe:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007ec2:	f107 0310 	add.w	r3, r7, #16
 8007ec6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007eca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ece:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007ed2:	f107 030f 	add.w	r3, r7, #15
 8007ed6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007eda:	2301      	movs	r3, #1
 8007edc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ee0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 fb9e 	bl	8008628 <hci_send_req>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	da01      	bge.n	8007ef6 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8007ef2:	23ff      	movs	r3, #255	@ 0xff
 8007ef4:	e004      	b.n	8007f00 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007ef6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007efa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007efe:	781b      	ldrb	r3, [r3, #0]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b0cc      	sub	sp, #304	@ 0x130
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	4602      	mov	r2, r0
 8007f12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007f16:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007f1a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007f1c:	f107 0310 	add.w	r3, r7, #16
 8007f20:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007f24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007f28:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007f3a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007f3e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007f42:	8812      	ldrh	r2, [r2, #0]
 8007f44:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007f46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f4a:	3302      	adds	r3, #2
 8007f4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007f54:	2218      	movs	r2, #24
 8007f56:	2100      	movs	r1, #0
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 f8db 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f5e:	233f      	movs	r3, #63	@ 0x3f
 8007f60:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8007f64:	2318      	movs	r3, #24
 8007f66:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007f6a:	f107 0310 	add.w	r3, r7, #16
 8007f6e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007f72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f76:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007f7a:	f107 030f 	add.w	r3, r7, #15
 8007f7e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007f82:	2301      	movs	r3, #1
 8007f84:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 fb4a 	bl	8008628 <hci_send_req>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	da01      	bge.n	8007f9e <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007f9a:	23ff      	movs	r3, #255	@ 0xff
 8007f9c:	e004      	b.n	8007fa8 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007f9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007fa2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007fa6:	781b      	ldrb	r3, [r3, #0]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b088      	sub	sp, #32
 8007fb6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007fbc:	f107 0308 	add.w	r3, r7, #8
 8007fc0:	2218      	movs	r2, #24
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 f8a5 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x03;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007fd2:	1dfb      	adds	r3, r7, #7
 8007fd4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007fda:	f107 0308 	add.w	r3, r7, #8
 8007fde:	2100      	movs	r1, #0
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 fb21 	bl	8008628 <hci_send_req>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	da01      	bge.n	8007ff0 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007fec:	23ff      	movs	r3, #255	@ 0xff
 8007fee:	e000      	b.n	8007ff2 <hci_reset+0x40>
  return status;
 8007ff0:	79fb      	ldrb	r3, [r7, #7]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3720      	adds	r7, #32
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007ffa:	b590      	push	{r4, r7, lr}
 8007ffc:	b0cd      	sub	sp, #308	@ 0x134
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	4604      	mov	r4, r0
 8008002:	4608      	mov	r0, r1
 8008004:	4611      	mov	r1, r2
 8008006:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800800a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800800e:	4622      	mov	r2, r4
 8008010:	701a      	strb	r2, [r3, #0]
 8008012:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008016:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800801a:	4602      	mov	r2, r0
 800801c:	701a      	strb	r2, [r3, #0]
 800801e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008022:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008026:	460a      	mov	r2, r1
 8008028:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800802a:	f107 0310 	add.w	r3, r7, #16
 800802e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008032:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008036:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800803a:	2200      	movs	r2, #0
 800803c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800803e:	2300      	movs	r3, #0
 8008040:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008044:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008048:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800804c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008050:	7812      	ldrb	r2, [r2, #0]
 8008052:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008054:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008058:	3301      	adds	r3, #1
 800805a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800805e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008062:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008066:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800806a:	7812      	ldrb	r2, [r2, #0]
 800806c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800806e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008072:	3301      	adds	r3, #1
 8008074:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8008078:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800807c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008080:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008084:	7812      	ldrb	r2, [r2, #0]
 8008086:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008088:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800808c:	3301      	adds	r3, #1
 800808e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008092:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008096:	2218      	movs	r2, #24
 8008098:	2100      	movs	r1, #0
 800809a:	4618      	mov	r0, r3
 800809c:	f000 f83a 	bl	8008114 <Osal_MemSet>
  rq.ogf = 0x08;
 80080a0:	2308      	movs	r3, #8
 80080a2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 80080a6:	2331      	movs	r3, #49	@ 0x31
 80080a8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80080ac:	f107 0310 	add.w	r3, r7, #16
 80080b0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80080b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80080b8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80080bc:	f107 030f 	add.w	r3, r7, #15
 80080c0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80080c4:	2301      	movs	r3, #1
 80080c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80080ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80080ce:	2100      	movs	r1, #0
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 faa9 	bl	8008628 <hci_send_req>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	da01      	bge.n	80080e0 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80080dc:	23ff      	movs	r3, #255	@ 0xff
 80080de:	e004      	b.n	80080ea <hci_le_set_default_phy+0xf0>
  return status;
 80080e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80080e4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80080e8:	781b      	ldrb	r3, [r3, #0]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd90      	pop	{r4, r7, pc}

080080f4 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	68b9      	ldr	r1, [r7, #8]
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f008 fe5e 	bl	8010dc6 <memcpy>
 800810a:	4603      	mov	r3, r0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	68b9      	ldr	r1, [r7, #8]
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f008 fdc3 	bl	8010cb0 <memset>
 800812a:	4603      	mov	r3, r0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8008134:	b480      	push	{r7}
 8008136:	af00      	add	r7, sp, #0
  return;
 8008138:	bf00      	nop
}
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8008142:	b480      	push	{r7}
 8008144:	af00      	add	r7, sp, #0
  return;
 8008146:	bf00      	nop
}
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8008150:	b480      	push	{r7}
 8008152:	af00      	add	r7, sp, #0
  return;
 8008154:	bf00      	nop
}
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800815e:	b480      	push	{r7}
 8008160:	af00      	add	r7, sp, #0
  return;
 8008162:	bf00      	nop
}
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
  return;
 8008170:	bf00      	nop
}
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800817a:	b480      	push	{r7}
 800817c:	af00      	add	r7, sp, #0
  return;
 800817e:	bf00      	nop
}
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8008188:	b480      	push	{r7}
 800818a:	af00      	add	r7, sp, #0
  return;
 800818c:	bf00      	nop
}
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8008196:	b480      	push	{r7}
 8008198:	af00      	add	r7, sp, #0
  return;
 800819a:	bf00      	nop
}
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80081a4:	b480      	push	{r7}
 80081a6:	af00      	add	r7, sp, #0
  return;
 80081a8:	bf00      	nop
}
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80081b2:	b480      	push	{r7}
 80081b4:	af00      	add	r7, sp, #0
  return;
 80081b6:	bf00      	nop
}
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80081c0:	b480      	push	{r7}
 80081c2:	af00      	add	r7, sp, #0
  return;
 80081c4:	bf00      	nop
}
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80081ce:	b480      	push	{r7}
 80081d0:	af00      	add	r7, sp, #0
  return;
 80081d2:	bf00      	nop
}
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0
  return;
 80081e0:	bf00      	nop
}
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80081ea:	b480      	push	{r7}
 80081ec:	af00      	add	r7, sp, #0
  return;
 80081ee:	bf00      	nop
}
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80081f8:	b480      	push	{r7}
 80081fa:	af00      	add	r7, sp, #0
  return;
 80081fc:	bf00      	nop
}
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8008206:	b480      	push	{r7}
 8008208:	af00      	add	r7, sp, #0
  return;
 800820a:	bf00      	nop
}
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8008214:	b480      	push	{r7}
 8008216:	af00      	add	r7, sp, #0
  return;
 8008218:	bf00      	nop
}
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
	...

08008224 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008228:	4b04      	ldr	r3, [pc, #16]	@ (800823c <SVCCTL_Init+0x18>)
 800822a:	2200      	movs	r2, #0
 800822c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800822e:	4b04      	ldr	r3, [pc, #16]	@ (8008240 <SVCCTL_Init+0x1c>)
 8008230:	2200      	movs	r2, #0
 8008232:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008234:	f000 f806 	bl	8008244 <SVCCTL_SvcInit>

  return;
 8008238:	bf00      	nop
}
 800823a:	bd80      	pop	{r7, pc}
 800823c:	20000228 	.word	0x20000228
 8008240:	20000248 	.word	0x20000248

08008244 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	af00      	add	r7, sp, #0
  BAS_Init();
 8008248:	f7ff ff74 	bl	8008134 <BAS_Init>

  BLS_Init();
 800824c:	f7ff ff79 	bl	8008142 <BLS_Init>

  CRS_STM_Init();
 8008250:	f7ff ff7e 	bl	8008150 <CRS_STM_Init>

  DIS_Init();
 8008254:	f7ff ff83 	bl	800815e <DIS_Init>

  EDS_STM_Init();
 8008258:	f7ff ff88 	bl	800816c <EDS_STM_Init>

  HIDS_Init();
 800825c:	f7ff ff8d 	bl	800817a <HIDS_Init>

  HRS_Init();
 8008260:	f7ff ff92 	bl	8008188 <HRS_Init>

  HTS_Init();
 8008264:	f7ff ff97 	bl	8008196 <HTS_Init>

  IAS_Init();
 8008268:	f7ff ff9c 	bl	80081a4 <IAS_Init>

  LLS_Init();
 800826c:	f7ff ffa1 	bl	80081b2 <LLS_Init>

  TPS_Init();
 8008270:	f7ff ffa6 	bl	80081c0 <TPS_Init>

  MOTENV_STM_Init();
 8008274:	f7ff ffab 	bl	80081ce <MOTENV_STM_Init>

  P2PS_STM_Init();
 8008278:	f7ff ffb0 	bl	80081dc <P2PS_STM_Init>

  ZDD_STM_Init();
 800827c:	f7ff ffb5 	bl	80081ea <ZDD_STM_Init>

  OTAS_STM_Init();
 8008280:	f7ff ffba 	bl	80081f8 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008284:	f7ff ffc6 	bl	8008214 <BVOPUS_STM_Init>

  MESH_Init();
 8008288:	f7ff ffbd 	bl	8008206 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800828c:	f001 fb8c 	bl	80099a8 <SVCCTL_InitCustomSvc>
  
  return;
 8008290:	bf00      	nop
}
 8008292:	bd80      	pop	{r7, pc}

08008294 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800829c:	4b09      	ldr	r3, [pc, #36]	@ (80082c4 <SVCCTL_RegisterSvcHandler+0x30>)
 800829e:	7f1b      	ldrb	r3, [r3, #28]
 80082a0:	4619      	mov	r1, r3
 80082a2:	4a08      	ldr	r2, [pc, #32]	@ (80082c4 <SVCCTL_RegisterSvcHandler+0x30>)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80082aa:	4b06      	ldr	r3, [pc, #24]	@ (80082c4 <SVCCTL_RegisterSvcHandler+0x30>)
 80082ac:	7f1b      	ldrb	r3, [r3, #28]
 80082ae:	3301      	adds	r3, #1
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	4b04      	ldr	r3, [pc, #16]	@ (80082c4 <SVCCTL_RegisterSvcHandler+0x30>)
 80082b4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80082b6:	bf00      	nop
}
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	20000228 	.word	0x20000228

080082c8 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	3301      	adds	r3, #1
 80082d4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80082d6:	2300      	movs	r3, #0
 80082d8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	2bff      	cmp	r3, #255	@ 0xff
 80082e0:	d125      	bne.n	800832e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	3302      	adds	r3, #2
 80082e6:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	881b      	ldrh	r3, [r3, #0]
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80082f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082f6:	d118      	bne.n	800832a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80082f8:	2300      	movs	r3, #0
 80082fa:	757b      	strb	r3, [r7, #21]
 80082fc:	e00d      	b.n	800831a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80082fe:	7d7b      	ldrb	r3, [r7, #21]
 8008300:	4a1a      	ldr	r2, [pc, #104]	@ (800836c <SVCCTL_UserEvtRx+0xa4>)
 8008302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	4798      	blx	r3
 800830a:	4603      	mov	r3, r0
 800830c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800830e:	7dfb      	ldrb	r3, [r7, #23]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d108      	bne.n	8008326 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008314:	7d7b      	ldrb	r3, [r7, #21]
 8008316:	3301      	adds	r3, #1
 8008318:	757b      	strb	r3, [r7, #21]
 800831a:	4b14      	ldr	r3, [pc, #80]	@ (800836c <SVCCTL_UserEvtRx+0xa4>)
 800831c:	7f1b      	ldrb	r3, [r3, #28]
 800831e:	7d7a      	ldrb	r2, [r7, #21]
 8008320:	429a      	cmp	r2, r3
 8008322:	d3ec      	bcc.n	80082fe <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8008324:	e002      	b.n	800832c <SVCCTL_UserEvtRx+0x64>
              break;
 8008326:	bf00      	nop
          break;
 8008328:	e000      	b.n	800832c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800832a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800832c:	e000      	b.n	8008330 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800832e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8008330:	7dfb      	ldrb	r3, [r7, #23]
 8008332:	2b02      	cmp	r3, #2
 8008334:	d00f      	beq.n	8008356 <SVCCTL_UserEvtRx+0x8e>
 8008336:	2b02      	cmp	r3, #2
 8008338:	dc10      	bgt.n	800835c <SVCCTL_UserEvtRx+0x94>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <SVCCTL_UserEvtRx+0x7c>
 800833e:	2b01      	cmp	r3, #1
 8008340:	d006      	beq.n	8008350 <SVCCTL_UserEvtRx+0x88>
 8008342:	e00b      	b.n	800835c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 ff8f 	bl	8009268 <SVCCTL_App_Notification>
 800834a:	4603      	mov	r3, r0
 800834c:	75bb      	strb	r3, [r7, #22]
      break;
 800834e:	e008      	b.n	8008362 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008350:	2301      	movs	r3, #1
 8008352:	75bb      	strb	r3, [r7, #22]
      break;
 8008354:	e005      	b.n	8008362 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8008356:	2300      	movs	r3, #0
 8008358:	75bb      	strb	r3, [r7, #22]
      break;
 800835a:	e002      	b.n	8008362 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800835c:	2301      	movs	r3, #1
 800835e:	75bb      	strb	r3, [r7, #22]
      break;
 8008360:	bf00      	nop
  }

  return (return_status);
 8008362:	7dbb      	ldrb	r3, [r7, #22]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3718      	adds	r7, #24
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	20000228 	.word	0x20000228

08008370 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b088      	sub	sp, #32
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008378:	f107 030c 	add.w	r3, r7, #12
 800837c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	212e      	movs	r1, #46	@ 0x2e
 8008388:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800838c:	f000 fae8 	bl	8008960 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	330b      	adds	r3, #11
 8008394:	78db      	ldrb	r3, [r3, #3]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3720      	adds	r7, #32
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b088      	sub	sp, #32
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80083a6:	f107 030c 	add.w	r3, r7, #12
 80083aa:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	210f      	movs	r1, #15
 80083b6:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 80083ba:	f000 fad1 	bl	8008960 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	330b      	adds	r3, #11
 80083c2:	78db      	ldrb	r3, [r3, #3]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3720      	adds	r7, #32
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b088      	sub	sp, #32
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80083d4:	f107 030c 	add.w	r3, r7, #12
 80083d8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	2110      	movs	r1, #16
 80083e0:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 80083e4:	f000 fabc 	bl	8008960 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	330b      	adds	r3, #11
 80083ec:	78db      	ldrb	r3, [r3, #3]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3720      	adds	r7, #32
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
	...

080083f8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80083f8:	b480      	push	{r7}
 80083fa:	b08b      	sub	sp, #44	@ 0x2c
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008400:	2300      	movs	r3, #0
 8008402:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8008404:	2300      	movs	r3, #0
 8008406:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008408:	2300      	movs	r3, #0
 800840a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800840c:	2300      	movs	r3, #0
 800840e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8008414:	2300      	movs	r3, #0
 8008416:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8008420:	4b4a      	ldr	r3, [pc, #296]	@ (800854c <SHCI_GetWirelessFwInfo+0x154>)
 8008422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008424:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008428:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8008432:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a44      	ldr	r2, [pc, #272]	@ (8008550 <SHCI_GetWirelessFwInfo+0x158>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d10f      	bne.n	8008464 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	617b      	str	r3, [r7, #20]
 8008462:	e01a      	b.n	800849a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800846c:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8008470:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800849a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849c:	0e1b      	lsrs	r3, r3, #24
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80084a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a6:	0c1b      	lsrs	r3, r3, #16
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80084ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b0:	0a1b      	lsrs	r3, r3, #8
 80084b2:	b2da      	uxtb	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80084b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ba:	091b      	lsrs	r3, r3, #4
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	f003 030f 	and.w	r3, r3, #15
 80084c2:	b2da      	uxtb	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80084c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	f003 030f 	and.w	r3, r3, #15
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80084d6:	6a3b      	ldr	r3, [r7, #32]
 80084d8:	0e1b      	lsrs	r3, r3, #24
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	0c1b      	lsrs	r3, r3, #16
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	0a1b      	lsrs	r3, r3, #8
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	0e1b      	lsrs	r3, r3, #24
 8008508:	b2da      	uxtb	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	0c1b      	lsrs	r3, r3, #16
 8008512:	b2da      	uxtb	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	0a1b      	lsrs	r3, r3, #8
 800851c:	b2da      	uxtb	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	0e1b      	lsrs	r3, r3, #24
 8008526:	b2da      	uxtb	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	0c1b      	lsrs	r3, r3, #16
 8008530:	b2da      	uxtb	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	b2da      	uxtb	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	372c      	adds	r7, #44	@ 0x2c
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr
 800854c:	58004000 	.word	0x58004000
 8008550:	a94656b9 	.word	0xa94656b9

08008554 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	4a08      	ldr	r2, [pc, #32]	@ (8008584 <hci_init+0x30>)
 8008564:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008566:	4a08      	ldr	r2, [pc, #32]	@ (8008588 <hci_init+0x34>)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800856c:	4806      	ldr	r0, [pc, #24]	@ (8008588 <hci_init+0x34>)
 800856e:	f000 f979 	bl	8008864 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4618      	mov	r0, r3
 8008578:	f000 f8da 	bl	8008730 <TlInit>

  return;
 800857c:	bf00      	nop
}
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	200004ec 	.word	0x200004ec
 8008588:	200004c4 	.word	0x200004c4

0800858c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008592:	4822      	ldr	r0, [pc, #136]	@ (800861c <hci_user_evt_proc+0x90>)
 8008594:	f000 fd32 	bl	8008ffc <LST_is_empty>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d12b      	bne.n	80085f6 <hci_user_evt_proc+0x6a>
 800859e:	4b20      	ldr	r3, [pc, #128]	@ (8008620 <hci_user_evt_proc+0x94>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d027      	beq.n	80085f6 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80085a6:	f107 030c 	add.w	r3, r7, #12
 80085aa:	4619      	mov	r1, r3
 80085ac:	481b      	ldr	r0, [pc, #108]	@ (800861c <hci_user_evt_proc+0x90>)
 80085ae:	f000 fdb4 	bl	800911a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80085b2:	4b1c      	ldr	r3, [pc, #112]	@ (8008624 <hci_user_evt_proc+0x98>)
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00c      	beq.n	80085d4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80085be:	2301      	movs	r3, #1
 80085c0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80085c2:	4b18      	ldr	r3, [pc, #96]	@ (8008624 <hci_user_evt_proc+0x98>)
 80085c4:	69db      	ldr	r3, [r3, #28]
 80085c6:	1d3a      	adds	r2, r7, #4
 80085c8:	4610      	mov	r0, r2
 80085ca:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80085cc:	793a      	ldrb	r2, [r7, #4]
 80085ce:	4b14      	ldr	r3, [pc, #80]	@ (8008620 <hci_user_evt_proc+0x94>)
 80085d0:	701a      	strb	r2, [r3, #0]
 80085d2:	e002      	b.n	80085da <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80085d4:	4b12      	ldr	r3, [pc, #72]	@ (8008620 <hci_user_evt_proc+0x94>)
 80085d6:	2201      	movs	r2, #1
 80085d8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80085da:	4b11      	ldr	r3, [pc, #68]	@ (8008620 <hci_user_evt_proc+0x94>)
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d004      	beq.n	80085ec <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 fc0d 	bl	8008e04 <TL_MM_EvtDone>
 80085ea:	e004      	b.n	80085f6 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	4619      	mov	r1, r3
 80085f0:	480a      	ldr	r0, [pc, #40]	@ (800861c <hci_user_evt_proc+0x90>)
 80085f2:	f000 fd25 	bl	8009040 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80085f6:	4809      	ldr	r0, [pc, #36]	@ (800861c <hci_user_evt_proc+0x90>)
 80085f8:	f000 fd00 	bl	8008ffc <LST_is_empty>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d107      	bne.n	8008612 <hci_user_evt_proc+0x86>
 8008602:	4b07      	ldr	r3, [pc, #28]	@ (8008620 <hci_user_evt_proc+0x94>)
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d003      	beq.n	8008612 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800860a:	4804      	ldr	r0, [pc, #16]	@ (800861c <hci_user_evt_proc+0x90>)
 800860c:	f001 f852 	bl	80096b4 <hci_notify_asynch_evt>
  }


  return;
 8008610:	bf00      	nop
 8008612:	bf00      	nop
}
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	20000250 	.word	0x20000250
 8008620:	2000025c 	.word	0x2000025c
 8008624:	200004c4 	.word	0x200004c4

08008628 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b088      	sub	sp, #32
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008634:	2000      	movs	r0, #0
 8008636:	f000 f8d1 	bl	80087dc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800863a:	2300      	movs	r3, #0
 800863c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	885b      	ldrh	r3, [r3, #2]
 8008642:	b21b      	sxth	r3, r3
 8008644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008648:	b21a      	sxth	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	029b      	lsls	r3, r3, #10
 8008650:	b21b      	sxth	r3, r3
 8008652:	4313      	orrs	r3, r2
 8008654:	b21b      	sxth	r3, r3
 8008656:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8008658:	4b33      	ldr	r3, [pc, #204]	@ (8008728 <hci_send_req+0x100>)
 800865a:	2201      	movs	r2, #1
 800865c:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	b2d9      	uxtb	r1, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	689a      	ldr	r2, [r3, #8]
 8008668:	8bbb      	ldrh	r3, [r7, #28]
 800866a:	4618      	mov	r0, r3
 800866c:	f000 f890 	bl	8008790 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008670:	e04e      	b.n	8008710 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008672:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8008676:	f001 f834 	bl	80096e2 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800867a:	e043      	b.n	8008704 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800867c:	f107 030c 	add.w	r3, r7, #12
 8008680:	4619      	mov	r1, r3
 8008682:	482a      	ldr	r0, [pc, #168]	@ (800872c <hci_send_req+0x104>)
 8008684:	f000 fd49 	bl	800911a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	7a5b      	ldrb	r3, [r3, #9]
 800868c:	2b0f      	cmp	r3, #15
 800868e:	d114      	bne.n	80086ba <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	330b      	adds	r3, #11
 8008694:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	885b      	ldrh	r3, [r3, #2]
 800869a:	b29b      	uxth	r3, r3
 800869c:	8bba      	ldrh	r2, [r7, #28]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d104      	bne.n	80086ac <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	7812      	ldrb	r2, [r2, #0]
 80086aa:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	785b      	ldrb	r3, [r3, #1]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d027      	beq.n	8008704 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80086b4:	2301      	movs	r3, #1
 80086b6:	77fb      	strb	r3, [r7, #31]
 80086b8:	e024      	b.n	8008704 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	330b      	adds	r3, #11
 80086be:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	8bba      	ldrh	r2, [r7, #28]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d114      	bne.n	80086f8 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	7a9b      	ldrb	r3, [r3, #10]
 80086d2:	3b03      	subs	r3, #3
 80086d4:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	695a      	ldr	r2, [r3, #20]
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	429a      	cmp	r2, r3
 80086de:	bfa8      	it	ge
 80086e0:	461a      	movge	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6918      	ldr	r0, [r3, #16]
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	1cd9      	adds	r1, r3, #3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	461a      	mov	r2, r3
 80086f4:	f008 fb67 	bl	8010dc6 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008700:	2301      	movs	r3, #1
 8008702:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008704:	4809      	ldr	r0, [pc, #36]	@ (800872c <hci_send_req+0x104>)
 8008706:	f000 fc79 	bl	8008ffc <LST_is_empty>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0b5      	beq.n	800867c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008710:	7ffb      	ldrb	r3, [r7, #31]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d0ad      	beq.n	8008672 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008716:	2001      	movs	r0, #1
 8008718:	f000 f860 	bl	80087dc <NotifyCmdStatus>

  return 0;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3720      	adds	r7, #32
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	200004f0 	.word	0x200004f0
 800872c:	200004e4 	.word	0x200004e4

08008730 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008738:	480f      	ldr	r0, [pc, #60]	@ (8008778 <TlInit+0x48>)
 800873a:	f000 fc4f 	bl	8008fdc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800873e:	4a0f      	ldr	r2, [pc, #60]	@ (800877c <TlInit+0x4c>)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008744:	480e      	ldr	r0, [pc, #56]	@ (8008780 <TlInit+0x50>)
 8008746:	f000 fc49 	bl	8008fdc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800874a:	4b0e      	ldr	r3, [pc, #56]	@ (8008784 <TlInit+0x54>)
 800874c:	2201      	movs	r2, #1
 800874e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008750:	4b0d      	ldr	r3, [pc, #52]	@ (8008788 <TlInit+0x58>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00a      	beq.n	800876e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800875c:	4b0b      	ldr	r3, [pc, #44]	@ (800878c <TlInit+0x5c>)
 800875e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008760:	4b09      	ldr	r3, [pc, #36]	@ (8008788 <TlInit+0x58>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f107 0208 	add.w	r2, r7, #8
 8008768:	4610      	mov	r0, r2
 800876a:	4798      	blx	r3
  }

  return;
 800876c:	bf00      	nop
 800876e:	bf00      	nop
}
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	200004e4 	.word	0x200004e4
 800877c:	20000258 	.word	0x20000258
 8008780:	20000250 	.word	0x20000250
 8008784:	2000025c 	.word	0x2000025c
 8008788:	200004c4 	.word	0x200004c4
 800878c:	0800881d 	.word	0x0800881d

08008790 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	4603      	mov	r3, r0
 8008798:	603a      	str	r2, [r7, #0]
 800879a:	80fb      	strh	r3, [r7, #6]
 800879c:	460b      	mov	r3, r1
 800879e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80087a0:	4b0c      	ldr	r3, [pc, #48]	@ (80087d4 <SendCmd+0x44>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	88fa      	ldrh	r2, [r7, #6]
 80087a6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80087aa:	4b0a      	ldr	r3, [pc, #40]	@ (80087d4 <SendCmd+0x44>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	797a      	ldrb	r2, [r7, #5]
 80087b0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80087b2:	4b08      	ldr	r3, [pc, #32]	@ (80087d4 <SendCmd+0x44>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	330c      	adds	r3, #12
 80087b8:	797a      	ldrb	r2, [r7, #5]
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	4618      	mov	r0, r3
 80087be:	f008 fb02 	bl	8010dc6 <memcpy>

  hciContext.io.Send(0,0);
 80087c2:	4b05      	ldr	r3, [pc, #20]	@ (80087d8 <SendCmd+0x48>)
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	2100      	movs	r1, #0
 80087c8:	2000      	movs	r0, #0
 80087ca:	4798      	blx	r3

  return;
 80087cc:	bf00      	nop
}
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	20000258 	.word	0x20000258
 80087d8:	200004c4 	.word	0x200004c4

080087dc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	4603      	mov	r3, r0
 80087e4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80087e6:	79fb      	ldrb	r3, [r7, #7]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d108      	bne.n	80087fe <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80087ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008818 <NotifyCmdStatus+0x3c>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00d      	beq.n	8008810 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80087f4:	4b08      	ldr	r3, [pc, #32]	@ (8008818 <NotifyCmdStatus+0x3c>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2000      	movs	r0, #0
 80087fa:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80087fc:	e008      	b.n	8008810 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80087fe:	4b06      	ldr	r3, [pc, #24]	@ (8008818 <NotifyCmdStatus+0x3c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d004      	beq.n	8008810 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008806:	4b04      	ldr	r3, [pc, #16]	@ (8008818 <NotifyCmdStatus+0x3c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2001      	movs	r0, #1
 800880c:	4798      	blx	r3
  return;
 800880e:	bf00      	nop
 8008810:	bf00      	nop
}
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	200004ec 	.word	0x200004ec

0800881c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	7a5b      	ldrb	r3, [r3, #9]
 8008828:	2b0f      	cmp	r3, #15
 800882a:	d003      	beq.n	8008834 <TlEvtReceived+0x18>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	7a5b      	ldrb	r3, [r3, #9]
 8008830:	2b0e      	cmp	r3, #14
 8008832:	d107      	bne.n	8008844 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008834:	6879      	ldr	r1, [r7, #4]
 8008836:	4809      	ldr	r0, [pc, #36]	@ (800885c <TlEvtReceived+0x40>)
 8008838:	f000 fc28 	bl	800908c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800883c:	2000      	movs	r0, #0
 800883e:	f000 ff45 	bl	80096cc <hci_cmd_resp_release>
 8008842:	e006      	b.n	8008852 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008844:	6879      	ldr	r1, [r7, #4]
 8008846:	4806      	ldr	r0, [pc, #24]	@ (8008860 <TlEvtReceived+0x44>)
 8008848:	f000 fc20 	bl	800908c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800884c:	4804      	ldr	r0, [pc, #16]	@ (8008860 <TlEvtReceived+0x44>)
 800884e:	f000 ff31 	bl	80096b4 <hci_notify_asynch_evt>
  }

  return;
 8008852:	bf00      	nop
}
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	200004e4 	.word	0x200004e4
 8008860:	20000250 	.word	0x20000250

08008864 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a05      	ldr	r2, [pc, #20]	@ (8008884 <hci_register_io_bus+0x20>)
 8008870:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a04      	ldr	r2, [pc, #16]	@ (8008888 <hci_register_io_bus+0x24>)
 8008876:	611a      	str	r2, [r3, #16]

  return;
 8008878:	bf00      	nop
}
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	08008b7d 	.word	0x08008b7d
 8008888:	08008be5 	.word	0x08008be5

0800888c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	4a08      	ldr	r2, [pc, #32]	@ (80088bc <shci_init+0x30>)
 800889c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800889e:	4a08      	ldr	r2, [pc, #32]	@ (80088c0 <shci_init+0x34>)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80088a4:	4806      	ldr	r0, [pc, #24]	@ (80088c0 <shci_init+0x34>)
 80088a6:	f000 f915 	bl	8008ad4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 f898 	bl	80089e4 <TlInit>

  return;
 80088b4:	bf00      	nop
}
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	20000514 	.word	0x20000514
 80088c0:	200004f4 	.word	0x200004f4

080088c4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80088ca:	4822      	ldr	r0, [pc, #136]	@ (8008954 <shci_user_evt_proc+0x90>)
 80088cc:	f000 fb96 	bl	8008ffc <LST_is_empty>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d12b      	bne.n	800892e <shci_user_evt_proc+0x6a>
 80088d6:	4b20      	ldr	r3, [pc, #128]	@ (8008958 <shci_user_evt_proc+0x94>)
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d027      	beq.n	800892e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80088de:	f107 030c 	add.w	r3, r7, #12
 80088e2:	4619      	mov	r1, r3
 80088e4:	481b      	ldr	r0, [pc, #108]	@ (8008954 <shci_user_evt_proc+0x90>)
 80088e6:	f000 fc18 	bl	800911a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80088ea:	4b1c      	ldr	r3, [pc, #112]	@ (800895c <shci_user_evt_proc+0x98>)
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00c      	beq.n	800890c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80088f6:	2301      	movs	r3, #1
 80088f8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80088fa:	4b18      	ldr	r3, [pc, #96]	@ (800895c <shci_user_evt_proc+0x98>)
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	1d3a      	adds	r2, r7, #4
 8008900:	4610      	mov	r0, r2
 8008902:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8008904:	793a      	ldrb	r2, [r7, #4]
 8008906:	4b14      	ldr	r3, [pc, #80]	@ (8008958 <shci_user_evt_proc+0x94>)
 8008908:	701a      	strb	r2, [r3, #0]
 800890a:	e002      	b.n	8008912 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800890c:	4b12      	ldr	r3, [pc, #72]	@ (8008958 <shci_user_evt_proc+0x94>)
 800890e:	2201      	movs	r2, #1
 8008910:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8008912:	4b11      	ldr	r3, [pc, #68]	@ (8008958 <shci_user_evt_proc+0x94>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d004      	beq.n	8008924 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	4618      	mov	r0, r3
 800891e:	f000 fa71 	bl	8008e04 <TL_MM_EvtDone>
 8008922:	e004      	b.n	800892e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	4619      	mov	r1, r3
 8008928:	480a      	ldr	r0, [pc, #40]	@ (8008954 <shci_user_evt_proc+0x90>)
 800892a:	f000 fb89 	bl	8009040 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800892e:	4809      	ldr	r0, [pc, #36]	@ (8008954 <shci_user_evt_proc+0x90>)
 8008930:	f000 fb64 	bl	8008ffc <LST_is_empty>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d107      	bne.n	800894a <shci_user_evt_proc+0x86>
 800893a:	4b07      	ldr	r3, [pc, #28]	@ (8008958 <shci_user_evt_proc+0x94>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8008942:	4804      	ldr	r0, [pc, #16]	@ (8008954 <shci_user_evt_proc+0x90>)
 8008944:	f7f8 fd7a 	bl	800143c <shci_notify_asynch_evt>
  }


  return;
 8008948:	bf00      	nop
 800894a:	bf00      	nop
}
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	20000260 	.word	0x20000260
 8008958:	20000270 	.word	0x20000270
 800895c:	200004f4 	.word	0x200004f4

08008960 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	60ba      	str	r2, [r7, #8]
 8008968:	607b      	str	r3, [r7, #4]
 800896a:	4603      	mov	r3, r0
 800896c:	81fb      	strh	r3, [r7, #14]
 800896e:	460b      	mov	r3, r1
 8008970:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8008972:	2000      	movs	r0, #0
 8008974:	f000 f868 	bl	8008a48 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008978:	4b17      	ldr	r3, [pc, #92]	@ (80089d8 <shci_send+0x78>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	89fa      	ldrh	r2, [r7, #14]
 800897e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8008982:	4b15      	ldr	r3, [pc, #84]	@ (80089d8 <shci_send+0x78>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	7b7a      	ldrb	r2, [r7, #13]
 8008988:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800898a:	4b13      	ldr	r3, [pc, #76]	@ (80089d8 <shci_send+0x78>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	330c      	adds	r3, #12
 8008990:	7b7a      	ldrb	r2, [r7, #13]
 8008992:	68b9      	ldr	r1, [r7, #8]
 8008994:	4618      	mov	r0, r3
 8008996:	f008 fa16 	bl	8010dc6 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800899a:	4b10      	ldr	r3, [pc, #64]	@ (80089dc <shci_send+0x7c>)
 800899c:	2201      	movs	r2, #1
 800899e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80089a0:	4b0f      	ldr	r3, [pc, #60]	@ (80089e0 <shci_send+0x80>)
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	2100      	movs	r1, #0
 80089a6:	2000      	movs	r0, #0
 80089a8:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80089aa:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80089ae:	f7f8 fd5c 	bl	800146a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f103 0008 	add.w	r0, r3, #8
 80089b8:	4b07      	ldr	r3, [pc, #28]	@ (80089d8 <shci_send+0x78>)
 80089ba:	6819      	ldr	r1, [r3, #0]
 80089bc:	4b06      	ldr	r3, [pc, #24]	@ (80089d8 <shci_send+0x78>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	789b      	ldrb	r3, [r3, #2]
 80089c2:	3303      	adds	r3, #3
 80089c4:	461a      	mov	r2, r3
 80089c6:	f008 f9fe 	bl	8010dc6 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80089ca:	2001      	movs	r0, #1
 80089cc:	f000 f83c 	bl	8008a48 <Cmd_SetStatus>

  return;
 80089d0:	bf00      	nop
}
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	2000026c 	.word	0x2000026c
 80089dc:	20000518 	.word	0x20000518
 80089e0:	200004f4 	.word	0x200004f4

080089e4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80089ec:	4a10      	ldr	r2, [pc, #64]	@ (8008a30 <TlInit+0x4c>)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80089f2:	4810      	ldr	r0, [pc, #64]	@ (8008a34 <TlInit+0x50>)
 80089f4:	f000 faf2 	bl	8008fdc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80089f8:	2001      	movs	r0, #1
 80089fa:	f000 f825 	bl	8008a48 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80089fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008a38 <TlInit+0x54>)
 8008a00:	2201      	movs	r2, #1
 8008a02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008a04:	4b0d      	ldr	r3, [pc, #52]	@ (8008a3c <TlInit+0x58>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00c      	beq.n	8008a26 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008a10:	4b0b      	ldr	r3, [pc, #44]	@ (8008a40 <TlInit+0x5c>)
 8008a12:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008a14:	4b0b      	ldr	r3, [pc, #44]	@ (8008a44 <TlInit+0x60>)
 8008a16:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008a18:	4b08      	ldr	r3, [pc, #32]	@ (8008a3c <TlInit+0x58>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f107 020c 	add.w	r2, r7, #12
 8008a20:	4610      	mov	r0, r2
 8008a22:	4798      	blx	r3
  }

  return;
 8008a24:	bf00      	nop
 8008a26:	bf00      	nop
}
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	2000026c 	.word	0x2000026c
 8008a34:	20000260 	.word	0x20000260
 8008a38:	20000270 	.word	0x20000270
 8008a3c:	200004f4 	.word	0x200004f4
 8008a40:	08008a99 	.word	0x08008a99
 8008a44:	08008ab1 	.word	0x08008ab1

08008a48 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8008a52:	79fb      	ldrb	r3, [r7, #7]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10b      	bne.n	8008a70 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008a58:	4b0d      	ldr	r3, [pc, #52]	@ (8008a90 <Cmd_SetStatus+0x48>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d003      	beq.n	8008a68 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008a60:	4b0b      	ldr	r3, [pc, #44]	@ (8008a90 <Cmd_SetStatus+0x48>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2000      	movs	r0, #0
 8008a66:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008a68:	4b0a      	ldr	r3, [pc, #40]	@ (8008a94 <Cmd_SetStatus+0x4c>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8008a6e:	e00b      	b.n	8008a88 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008a70:	4b08      	ldr	r3, [pc, #32]	@ (8008a94 <Cmd_SetStatus+0x4c>)
 8008a72:	2201      	movs	r2, #1
 8008a74:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008a76:	4b06      	ldr	r3, [pc, #24]	@ (8008a90 <Cmd_SetStatus+0x48>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d004      	beq.n	8008a88 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8008a7e:	4b04      	ldr	r3, [pc, #16]	@ (8008a90 <Cmd_SetStatus+0x48>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2001      	movs	r0, #1
 8008a84:	4798      	blx	r3
  return;
 8008a86:	bf00      	nop
 8008a88:	bf00      	nop
}
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	20000514 	.word	0x20000514
 8008a94:	20000268 	.word	0x20000268

08008a98 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	f7f8 fcd7 	bl	8001454 <shci_cmd_resp_release>

  return;
 8008aa6:	bf00      	nop
}
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008ab8:	6879      	ldr	r1, [r7, #4]
 8008aba:	4805      	ldr	r0, [pc, #20]	@ (8008ad0 <TlUserEvtReceived+0x20>)
 8008abc:	f000 fae6 	bl	800908c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008ac0:	4803      	ldr	r0, [pc, #12]	@ (8008ad0 <TlUserEvtReceived+0x20>)
 8008ac2:	f7f8 fcbb 	bl	800143c <shci_notify_asynch_evt>

  return;
 8008ac6:	bf00      	nop
}
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20000260 	.word	0x20000260

08008ad4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a05      	ldr	r2, [pc, #20]	@ (8008af4 <shci_register_io_bus+0x20>)
 8008ae0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a04      	ldr	r2, [pc, #16]	@ (8008af8 <shci_register_io_bus+0x24>)
 8008ae6:	611a      	str	r2, [r3, #16]

  return;
 8008ae8:	bf00      	nop
}
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr
 8008af4:	08008c91 	.word	0x08008c91
 8008af8:	08008ce5 	.word	0x08008ce5

08008afc <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008b00:	f001 fa16 	bl	8009f30 <HW_IPCC_Enable>

  return;
 8008b04:	bf00      	nop
}
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <TL_Init>:


void TL_Init( void )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008b0c:	4b10      	ldr	r3, [pc, #64]	@ (8008b50 <TL_Init+0x48>)
 8008b0e:	4a11      	ldr	r2, [pc, #68]	@ (8008b54 <TL_Init+0x4c>)
 8008b10:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8008b12:	4b0f      	ldr	r3, [pc, #60]	@ (8008b50 <TL_Init+0x48>)
 8008b14:	4a10      	ldr	r2, [pc, #64]	@ (8008b58 <TL_Init+0x50>)
 8008b16:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008b18:	4b0d      	ldr	r3, [pc, #52]	@ (8008b50 <TL_Init+0x48>)
 8008b1a:	4a10      	ldr	r2, [pc, #64]	@ (8008b5c <TL_Init+0x54>)
 8008b1c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8008b50 <TL_Init+0x48>)
 8008b20:	4a0f      	ldr	r2, [pc, #60]	@ (8008b60 <TL_Init+0x58>)
 8008b22:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008b24:	4b0a      	ldr	r3, [pc, #40]	@ (8008b50 <TL_Init+0x48>)
 8008b26:	4a0f      	ldr	r2, [pc, #60]	@ (8008b64 <TL_Init+0x5c>)
 8008b28:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008b2a:	4b09      	ldr	r3, [pc, #36]	@ (8008b50 <TL_Init+0x48>)
 8008b2c:	4a0e      	ldr	r2, [pc, #56]	@ (8008b68 <TL_Init+0x60>)
 8008b2e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008b30:	4b07      	ldr	r3, [pc, #28]	@ (8008b50 <TL_Init+0x48>)
 8008b32:	4a0e      	ldr	r2, [pc, #56]	@ (8008b6c <TL_Init+0x64>)
 8008b34:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008b36:	4b06      	ldr	r3, [pc, #24]	@ (8008b50 <TL_Init+0x48>)
 8008b38:	4a0d      	ldr	r2, [pc, #52]	@ (8008b70 <TL_Init+0x68>)
 8008b3a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008b3c:	4b04      	ldr	r3, [pc, #16]	@ (8008b50 <TL_Init+0x48>)
 8008b3e:	4a0d      	ldr	r2, [pc, #52]	@ (8008b74 <TL_Init+0x6c>)
 8008b40:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8008b42:	4b03      	ldr	r3, [pc, #12]	@ (8008b50 <TL_Init+0x48>)
 8008b44:	4a0c      	ldr	r2, [pc, #48]	@ (8008b78 <TL_Init+0x70>)
 8008b46:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008b48:	f001 fa06 	bl	8009f58 <HW_IPCC_Init>

  return;
 8008b4c:	bf00      	nop
}
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	20030000 	.word	0x20030000
 8008b54:	20030028 	.word	0x20030028
 8008b58:	20030048 	.word	0x20030048
 8008b5c:	20030058 	.word	0x20030058
 8008b60:	20030068 	.word	0x20030068
 8008b64:	20030070 	.word	0x20030070
 8008b68:	20030078 	.word	0x20030078
 8008b6c:	20030080 	.word	0x20030080
 8008b70:	2003009c 	.word	0x2003009c
 8008b74:	200300a0 	.word	0x200300a0
 8008b78:	200300ac 	.word	0x200300ac

08008b7c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008b88:	4811      	ldr	r0, [pc, #68]	@ (8008bd0 <TL_BLE_Init+0x54>)
 8008b8a:	f000 fa27 	bl	8008fdc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008b8e:	4b11      	ldr	r3, [pc, #68]	@ (8008bd4 <TL_BLE_Init+0x58>)
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	689a      	ldr	r2, [r3, #8]
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8008bd8 <TL_BLE_Init+0x5c>)
 8008ba8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	4a08      	ldr	r2, [pc, #32]	@ (8008bd0 <TL_BLE_Init+0x54>)
 8008bae:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008bb0:	f001 f9e8 	bl	8009f84 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a08      	ldr	r2, [pc, #32]	@ (8008bdc <TL_BLE_Init+0x60>)
 8008bba:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	4a07      	ldr	r2, [pc, #28]	@ (8008be0 <TL_BLE_Init+0x64>)
 8008bc2:	6013      	str	r3, [r2, #0]

  return 0;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	200300c8 	.word	0x200300c8
 8008bd4:	20030000 	.word	0x20030000
 8008bd8:	20030a58 	.word	0x20030a58
 8008bdc:	20000524 	.word	0x20000524
 8008be0:	20000528 	.word	0x20000528

08008be4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008bf0:	4b09      	ldr	r3, [pc, #36]	@ (8008c18 <TL_BLE_SendCmd+0x34>)
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008bfa:	4b07      	ldr	r3, [pc, #28]	@ (8008c18 <TL_BLE_SendCmd+0x34>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4619      	mov	r1, r3
 8008c02:	2001      	movs	r0, #1
 8008c04:	f000 f96c 	bl	8008ee0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008c08:	f001 f9c6 	bl	8009f98 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	20030000 	.word	0x20030000

08008c1c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008c22:	e01c      	b.n	8008c5e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008c24:	1d3b      	adds	r3, r7, #4
 8008c26:	4619      	mov	r1, r3
 8008c28:	4812      	ldr	r0, [pc, #72]	@ (8008c74 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008c2a:	f000 fa76 	bl	800911a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	7a5b      	ldrb	r3, [r3, #9]
 8008c32:	2b0f      	cmp	r3, #15
 8008c34:	d003      	beq.n	8008c3e <HW_IPCC_BLE_RxEvtNot+0x22>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	7a5b      	ldrb	r3, [r3, #9]
 8008c3a:	2b0e      	cmp	r3, #14
 8008c3c:	d105      	bne.n	8008c4a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4619      	mov	r1, r3
 8008c42:	2002      	movs	r0, #2
 8008c44:	f000 f94c 	bl	8008ee0 <OutputDbgTrace>
 8008c48:	e004      	b.n	8008c54 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	2003      	movs	r0, #3
 8008c50:	f000 f946 	bl	8008ee0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008c54:	4b08      	ldr	r3, [pc, #32]	@ (8008c78 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	4610      	mov	r0, r2
 8008c5c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008c5e:	4805      	ldr	r0, [pc, #20]	@ (8008c74 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008c60:	f000 f9cc 	bl	8008ffc <LST_is_empty>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d0dc      	beq.n	8008c24 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008c6a:	bf00      	nop
}
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	200300c8 	.word	0x200300c8
 8008c78:	20000524 	.word	0x20000524

08008c7c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008c80:	4b02      	ldr	r3, [pc, #8]	@ (8008c8c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4798      	blx	r3

  return;
 8008c86:	bf00      	nop
}
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	20000528 	.word	0x20000528

08008c90 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008c9c:	480d      	ldr	r0, [pc, #52]	@ (8008cd4 <TL_SYS_Init+0x44>)
 8008c9e:	f000 f99d 	bl	8008fdc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd8 <TL_SYS_Init+0x48>)
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	4a08      	ldr	r2, [pc, #32]	@ (8008cd4 <TL_SYS_Init+0x44>)
 8008cb4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008cb6:	f001 f991 	bl	8009fdc <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a07      	ldr	r2, [pc, #28]	@ (8008cdc <TL_SYS_Init+0x4c>)
 8008cc0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	4a06      	ldr	r2, [pc, #24]	@ (8008ce0 <TL_SYS_Init+0x50>)
 8008cc8:	6013      	str	r3, [r2, #0]

  return 0;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	200300d0 	.word	0x200300d0
 8008cd8:	20030000 	.word	0x20030000
 8008cdc:	2000052c 	.word	0x2000052c
 8008ce0:	20000530 	.word	0x20000530

08008ce4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	460b      	mov	r3, r1
 8008cee:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008cf0:	4b09      	ldr	r3, [pc, #36]	@ (8008d18 <TL_SYS_SendCmd+0x34>)
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2210      	movs	r2, #16
 8008cf8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008cfa:	4b07      	ldr	r3, [pc, #28]	@ (8008d18 <TL_SYS_SendCmd+0x34>)
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4619      	mov	r1, r3
 8008d02:	2004      	movs	r0, #4
 8008d04:	f000 f8ec 	bl	8008ee0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008d08:	f001 f972 	bl	8009ff0 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20030000 	.word	0x20030000

08008d1c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008d20:	4b07      	ldr	r3, [pc, #28]	@ (8008d40 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4619      	mov	r1, r3
 8008d28:	2005      	movs	r0, #5
 8008d2a:	f000 f8d9 	bl	8008ee0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008d2e:	4b05      	ldr	r3, [pc, #20]	@ (8008d44 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a03      	ldr	r2, [pc, #12]	@ (8008d40 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008d34:	68d2      	ldr	r2, [r2, #12]
 8008d36:	6812      	ldr	r2, [r2, #0]
 8008d38:	4610      	mov	r0, r2
 8008d3a:	4798      	blx	r3

  return;
 8008d3c:	bf00      	nop
}
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	20030000 	.word	0x20030000
 8008d44:	2000052c 	.word	0x2000052c

08008d48 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008d4e:	e00e      	b.n	8008d6e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008d50:	1d3b      	adds	r3, r7, #4
 8008d52:	4619      	mov	r1, r3
 8008d54:	480b      	ldr	r0, [pc, #44]	@ (8008d84 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008d56:	f000 f9e0 	bl	800911a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	2006      	movs	r0, #6
 8008d60:	f000 f8be 	bl	8008ee0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008d64:	4b08      	ldr	r3, [pc, #32]	@ (8008d88 <HW_IPCC_SYS_EvtNot+0x40>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008d6e:	4805      	ldr	r0, [pc, #20]	@ (8008d84 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008d70:	f000 f944 	bl	8008ffc <LST_is_empty>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d0ea      	beq.n	8008d50 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008d7a:	bf00      	nop
}
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	200300d0 	.word	0x200300d0
 8008d88:	20000530 	.word	0x20000530

08008d8c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008d94:	4817      	ldr	r0, [pc, #92]	@ (8008df4 <TL_MM_Init+0x68>)
 8008d96:	f000 f921 	bl	8008fdc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008d9a:	4817      	ldr	r0, [pc, #92]	@ (8008df8 <TL_MM_Init+0x6c>)
 8008d9c:	f000 f91e 	bl	8008fdc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008da0:	4b16      	ldr	r3, [pc, #88]	@ (8008dfc <TL_MM_Init+0x70>)
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	4a16      	ldr	r2, [pc, #88]	@ (8008e00 <TL_MM_Init+0x74>)
 8008da6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008da8:	4b15      	ldr	r3, [pc, #84]	@ (8008e00 <TL_MM_Init+0x74>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	6892      	ldr	r2, [r2, #8]
 8008db0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008db2:	4b13      	ldr	r3, [pc, #76]	@ (8008e00 <TL_MM_Init+0x74>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	68d2      	ldr	r2, [r2, #12]
 8008dba:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008dbc:	4b10      	ldr	r3, [pc, #64]	@ (8008e00 <TL_MM_Init+0x74>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8008df4 <TL_MM_Init+0x68>)
 8008dc2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8008e00 <TL_MM_Init+0x74>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	6812      	ldr	r2, [r2, #0]
 8008dcc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008dce:	4b0c      	ldr	r3, [pc, #48]	@ (8008e00 <TL_MM_Init+0x74>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	6852      	ldr	r2, [r2, #4]
 8008dd6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008dd8:	4b09      	ldr	r3, [pc, #36]	@ (8008e00 <TL_MM_Init+0x74>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	6912      	ldr	r2, [r2, #16]
 8008de0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008de2:	4b07      	ldr	r3, [pc, #28]	@ (8008e00 <TL_MM_Init+0x74>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	6952      	ldr	r2, [r2, #20]
 8008dea:	619a      	str	r2, [r3, #24]

  return;
 8008dec:	bf00      	nop
}
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	200300b8 	.word	0x200300b8
 8008df8:	2000051c 	.word	0x2000051c
 8008dfc:	20030000 	.word	0x20030000
 8008e00:	20000534 	.word	0x20000534

08008e04 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008e0c:	6879      	ldr	r1, [r7, #4]
 8008e0e:	4807      	ldr	r0, [pc, #28]	@ (8008e2c <TL_MM_EvtDone+0x28>)
 8008e10:	f000 f93c 	bl	800908c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008e14:	6879      	ldr	r1, [r7, #4]
 8008e16:	2000      	movs	r0, #0
 8008e18:	f000 f862 	bl	8008ee0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008e1c:	4804      	ldr	r0, [pc, #16]	@ (8008e30 <TL_MM_EvtDone+0x2c>)
 8008e1e:	f001 f90d 	bl	800a03c <HW_IPCC_MM_SendFreeBuf>

  return;
 8008e22:	bf00      	nop
}
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	2000051c 	.word	0x2000051c
 8008e30:	08008e35 	.word	0x08008e35

08008e34 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008e3a:	e00c      	b.n	8008e56 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008e3c:	1d3b      	adds	r3, r7, #4
 8008e3e:	4619      	mov	r1, r3
 8008e40:	480a      	ldr	r0, [pc, #40]	@ (8008e6c <SendFreeBuf+0x38>)
 8008e42:	f000 f96a 	bl	800911a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008e46:	4b0a      	ldr	r3, [pc, #40]	@ (8008e70 <SendFreeBuf+0x3c>)
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	4611      	mov	r1, r2
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 f91b 	bl	800908c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008e56:	4805      	ldr	r0, [pc, #20]	@ (8008e6c <SendFreeBuf+0x38>)
 8008e58:	f000 f8d0 	bl	8008ffc <LST_is_empty>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d0ec      	beq.n	8008e3c <SendFreeBuf+0x8>
  }

  return;
 8008e62:	bf00      	nop
}
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	2000051c 	.word	0x2000051c
 8008e70:	20030000 	.word	0x20030000

08008e74 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008e78:	4805      	ldr	r0, [pc, #20]	@ (8008e90 <TL_TRACES_Init+0x1c>)
 8008e7a:	f000 f8af 	bl	8008fdc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008e7e:	4b05      	ldr	r3, [pc, #20]	@ (8008e94 <TL_TRACES_Init+0x20>)
 8008e80:	695b      	ldr	r3, [r3, #20]
 8008e82:	4a03      	ldr	r2, [pc, #12]	@ (8008e90 <TL_TRACES_Init+0x1c>)
 8008e84:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008e86:	f001 f90f 	bl	800a0a8 <HW_IPCC_TRACES_Init>

  return;
 8008e8a:	bf00      	nop
}
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	200300c0 	.word	0x200300c0
 8008e94:	20030000 	.word	0x20030000

08008e98 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008e9e:	e008      	b.n	8008eb2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008ea0:	1d3b      	adds	r3, r7, #4
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	4808      	ldr	r0, [pc, #32]	@ (8008ec8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008ea6:	f000 f938 	bl	800911a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f000 f80d 	bl	8008ecc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008eb2:	4805      	ldr	r0, [pc, #20]	@ (8008ec8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008eb4:	f000 f8a2 	bl	8008ffc <LST_is_empty>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0f0      	beq.n	8008ea0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008ebe:	bf00      	nop
}
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	200300c0 	.word	0x200300c0

08008ecc <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	6039      	str	r1, [r7, #0]
 8008eea:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008eec:	79fb      	ldrb	r3, [r7, #7]
 8008eee:	2b06      	cmp	r3, #6
 8008ef0:	d845      	bhi.n	8008f7e <OutputDbgTrace+0x9e>
 8008ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef8 <OutputDbgTrace+0x18>)
 8008ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef8:	08008f15 	.word	0x08008f15
 8008efc:	08008f39 	.word	0x08008f39
 8008f00:	08008f3f 	.word	0x08008f3f
 8008f04:	08008f53 	.word	0x08008f53
 8008f08:	08008f5f 	.word	0x08008f5f
 8008f0c:	08008f65 	.word	0x08008f65
 8008f10:	08008f73 	.word	0x08008f73
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	7a5b      	ldrb	r3, [r3, #9]
 8008f1c:	2bff      	cmp	r3, #255	@ 0xff
 8008f1e:	d005      	beq.n	8008f2c <OutputDbgTrace+0x4c>
 8008f20:	2bff      	cmp	r3, #255	@ 0xff
 8008f22:	dc05      	bgt.n	8008f30 <OutputDbgTrace+0x50>
 8008f24:	2b0e      	cmp	r3, #14
 8008f26:	d005      	beq.n	8008f34 <OutputDbgTrace+0x54>
 8008f28:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008f2a:	e001      	b.n	8008f30 <OutputDbgTrace+0x50>
          break;
 8008f2c:	bf00      	nop
 8008f2e:	e027      	b.n	8008f80 <OutputDbgTrace+0xa0>
          break;
 8008f30:	bf00      	nop
 8008f32:	e025      	b.n	8008f80 <OutputDbgTrace+0xa0>
          break;
 8008f34:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008f36:	e023      	b.n	8008f80 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008f3c:	e020      	b.n	8008f80 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	7a5b      	ldrb	r3, [r3, #9]
 8008f46:	2b0e      	cmp	r3, #14
 8008f48:	d001      	beq.n	8008f4e <OutputDbgTrace+0x6e>
 8008f4a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008f4c:	e000      	b.n	8008f50 <OutputDbgTrace+0x70>
          break;
 8008f4e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008f50:	e016      	b.n	8008f80 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	7a5b      	ldrb	r3, [r3, #9]
 8008f5a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008f5c:	e010      	b.n	8008f80 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008f62:	e00d      	b.n	8008f80 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	7a5b      	ldrb	r3, [r3, #9]
 8008f6c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008f6e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008f70:	e006      	b.n	8008f80 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	7a5b      	ldrb	r3, [r3, #9]
 8008f7a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008f7c:	e000      	b.n	8008f80 <OutputDbgTrace+0xa0>

    default:
      break;
 8008f7e:	bf00      	nop
  }

  return;
 8008f80:	bf00      	nop
}
 8008f82:	3714      	adds	r7, #20
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008f96:	4b0f      	ldr	r3, [pc, #60]	@ (8008fd4 <OTP_Read+0x48>)
 8008f98:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008f9a:	e002      	b.n	8008fa2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	3b08      	subs	r3, #8
 8008fa0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3307      	adds	r3, #7
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	79fa      	ldrb	r2, [r7, #7]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d003      	beq.n	8008fb6 <OTP_Read+0x2a>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	4a09      	ldr	r2, [pc, #36]	@ (8008fd8 <OTP_Read+0x4c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d1f2      	bne.n	8008f9c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3307      	adds	r3, #7
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	79fa      	ldrb	r2, [r7, #7]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d001      	beq.n	8008fc6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3714      	adds	r7, #20
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	1fff73f8 	.word	0x1fff73f8
 8008fd8:	1fff7000 	.word	0x1fff7000

08008fdc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	605a      	str	r2, [r3, #4]
}
 8008ff0:	bf00      	nop
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009004:	f3ef 8310 	mrs	r3, PRIMASK
 8009008:	60fb      	str	r3, [r7, #12]
  return(result);
 800900a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800900c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800900e:	b672      	cpsid	i
}
 8009010:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	429a      	cmp	r2, r3
 800901a:	d102      	bne.n	8009022 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800901c:	2301      	movs	r3, #1
 800901e:	75fb      	strb	r3, [r7, #23]
 8009020:	e001      	b.n	8009026 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8009022:	2300      	movs	r3, #0
 8009024:	75fb      	strb	r3, [r7, #23]
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	f383 8810 	msr	PRIMASK, r3
}
 8009030:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009032:	7dfb      	ldrb	r3, [r7, #23]
}
 8009034:	4618      	mov	r0, r3
 8009036:	371c      	adds	r7, #28
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8009040:	b480      	push	{r7}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800904a:	f3ef 8310 	mrs	r3, PRIMASK
 800904e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009050:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009052:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009054:	b672      	cpsid	i
}
 8009056:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	605a      	str	r2, [r3, #4]
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	f383 8810 	msr	PRIMASK, r3
}
 800907e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009080:	bf00      	nop
 8009082:	371c      	adds	r7, #28
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800908c:	b480      	push	{r7}
 800908e:	b087      	sub	sp, #28
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009096:	f3ef 8310 	mrs	r3, PRIMASK
 800909a:	60fb      	str	r3, [r7, #12]
  return(result);
 800909c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800909e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80090a0:	b672      	cpsid	i
}
 80090a2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	683a      	ldr	r2, [r7, #0]
 80090b6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	683a      	ldr	r2, [r7, #0]
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f383 8810 	msr	PRIMASK, r3
}
 80090ca:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80090cc:	bf00      	nop
 80090ce:	371c      	adds	r7, #28
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80090d8:	b480      	push	{r7}
 80090da:	b087      	sub	sp, #28
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090e0:	f3ef 8310 	mrs	r3, PRIMASK
 80090e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80090e6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80090e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80090ea:	b672      	cpsid	i
}
 80090ec:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	6812      	ldr	r2, [r2, #0]
 80090f6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	6852      	ldr	r2, [r2, #4]
 8009100:	605a      	str	r2, [r3, #4]
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	f383 8810 	msr	PRIMASK, r3
}
 800910c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800910e:	bf00      	nop
 8009110:	371c      	adds	r7, #28
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b086      	sub	sp, #24
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009124:	f3ef 8310 	mrs	r3, PRIMASK
 8009128:	60fb      	str	r3, [r7, #12]
  return(result);
 800912a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800912c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800912e:	b672      	cpsid	i
}
 8009130:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff ffca 	bl	80090d8 <LST_remove_node>
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	f383 8810 	msr	PRIMASK, r3
}
 800914e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009150:	bf00      	nop
 8009152:	3718      	adds	r7, #24
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8009158:	b480      	push	{r7}
 800915a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800915c:	4b03      	ldr	r3, [pc, #12]	@ (800916c <LL_FLASH_GetUDN+0x14>)
 800915e:	681b      	ldr	r3, [r3, #0]
}
 8009160:	4618      	mov	r0, r3
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	1fff7580 	.word	0x1fff7580

08009170 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8009174:	4b03      	ldr	r3, [pc, #12]	@ (8009184 <LL_FLASH_GetDeviceID+0x14>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	b2db      	uxtb	r3, r3
}
 800917a:	4618      	mov	r0, r3
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr
 8009184:	1fff7584 	.word	0x1fff7584

08009188 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8009188:	b480      	push	{r7}
 800918a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800918c:	4b03      	ldr	r3, [pc, #12]	@ (800919c <LL_FLASH_GetSTCompanyID+0x14>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	0a1b      	lsrs	r3, r3, #8
}
 8009192:	4618      	mov	r0, r3
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	1fff7584 	.word	0x1fff7584

080091a0 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80091a0:	b5b0      	push	{r4, r5, r7, lr}
 80091a2:	b090      	sub	sp, #64	@ 0x40
 80091a4:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80091a6:	2392      	movs	r3, #146	@ 0x92
 80091a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 80091ac:	4a29      	ldr	r2, [pc, #164]	@ (8009254 <APP_BLE_Init+0xb4>)
 80091ae:	2100      	movs	r1, #0
 80091b0:	2004      	movs	r0, #4
 80091b2:	f001 f8cd 	bl	800a350 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 80091b6:	2100      	movs	r1, #0
 80091b8:	2004      	movs	r0, #4
 80091ba:	f001 f8eb 	bl	800a394 <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80091be:	4b26      	ldr	r3, [pc, #152]	@ (8009258 <APP_BLE_Init+0xb8>)
 80091c0:	1d3c      	adds	r4, r7, #4
 80091c2:	461d      	mov	r5, r3
 80091c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80091d4:	c403      	stmia	r4!, {r0, r1}
 80091d6:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80091d8:	f000 f914 	bl	8009404 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80091dc:	2101      	movs	r1, #1
 80091de:	2002      	movs	r0, #2
 80091e0:	f000 ff8a 	bl	800a0f8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80091e4:	4a1d      	ldr	r2, [pc, #116]	@ (800925c <APP_BLE_Init+0xbc>)
 80091e6:	2100      	movs	r1, #0
 80091e8:	2002      	movs	r0, #2
 80091ea:	f001 f8b1 	bl	800a350 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80091ee:	1d3b      	adds	r3, r7, #4
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7ff f8bd 	bl	8008370 <SHCI_C2_BLE_Init>
 80091f6:	4603      	mov	r3, r0
 80091f8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 80091fc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8009204:	f7f9 fc1c 	bl	8002a40 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8009208:	f000 f912 	bl	8009430 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800920c:	f7ff f80a 	bl	8008224 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009210:	4b13      	ldr	r3, [pc, #76]	@ (8009260 <APP_BLE_Init+0xc0>)
 8009212:	2200      	movs	r2, #0
 8009214:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8009218:	4b11      	ldr	r3, [pc, #68]	@ (8009260 <APP_BLE_Init+0xc0>)
 800921a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800921e:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8009220:	4a10      	ldr	r2, [pc, #64]	@ (8009264 <APP_BLE_Init+0xc4>)
 8009222:	2100      	movs	r1, #0
 8009224:	2001      	movs	r0, #1
 8009226:	f001 f893 	bl	800a350 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800922a:	2006      	movs	r0, #6
 800922c:	f7fe fe6d 	bl	8007f0a <aci_hal_set_radio_activity_mask>
 8009230:	4603      	mov	r3, r0
 8009232:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8009236:	f000 fadd 	bl	80097f4 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800923a:	4b09      	ldr	r3, [pc, #36]	@ (8009260 <APP_BLE_Init+0xc0>)
 800923c:	2200      	movs	r2, #0
 800923e:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8009240:	4b07      	ldr	r3, [pc, #28]	@ (8009260 <APP_BLE_Init+0xc0>)
 8009242:	2200      	movs	r2, #0
 8009244:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8009246:	2001      	movs	r0, #1
 8009248:	f000 f9a6 	bl	8009598 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800924c:	bf00      	nop
}
 800924e:	3740      	adds	r7, #64	@ 0x40
 8009250:	46bd      	mov	sp, r7
 8009252:	bdb0      	pop	{r4, r5, r7, pc}
 8009254:	08009769 	.word	0x08009769
 8009258:	08012734 	.word	0x08012734
 800925c:	0800858d 	.word	0x0800858d
 8009260:	20000540 	.word	0x20000540
 8009264:	08009681 	.word	0x08009681

08009268 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b08a      	sub	sp, #40	@ 0x28
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8009270:	2392      	movs	r3, #146	@ 0x92
 8009272:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	3301      	adds	r3, #1
 800927a:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	2bff      	cmp	r3, #255	@ 0xff
 8009282:	d053      	beq.n	800932c <SVCCTL_App_Notification+0xc4>
 8009284:	2bff      	cmp	r3, #255	@ 0xff
 8009286:	f300 80af 	bgt.w	80093e8 <SVCCTL_App_Notification+0x180>
 800928a:	2b05      	cmp	r3, #5
 800928c:	d002      	beq.n	8009294 <SVCCTL_App_Notification+0x2c>
 800928e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009290:	d020      	beq.n	80092d4 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8009292:	e0a9      	b.n	80093e8 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8009294:	6a3b      	ldr	r3, [r7, #32]
 8009296:	3302      	adds	r3, #2
 8009298:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	4b55      	ldr	r3, [pc, #340]	@ (80093f8 <SVCCTL_App_Notification+0x190>)
 80092a4:	8adb      	ldrh	r3, [r3, #22]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d106      	bne.n	80092b8 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80092aa:	4b53      	ldr	r3, [pc, #332]	@ (80093f8 <SVCCTL_App_Notification+0x190>)
 80092ac:	2200      	movs	r2, #0
 80092ae:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80092b0:	4b51      	ldr	r3, [pc, #324]	@ (80093f8 <SVCCTL_App_Notification+0x190>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80092b8:	2001      	movs	r0, #1
 80092ba:	f000 f96d 	bl	8009598 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80092be:	4b4f      	ldr	r3, [pc, #316]	@ (80093fc <SVCCTL_App_Notification+0x194>)
 80092c0:	2201      	movs	r2, #1
 80092c2:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80092c4:	4b4c      	ldr	r3, [pc, #304]	@ (80093f8 <SVCCTL_App_Notification+0x190>)
 80092c6:	8ada      	ldrh	r2, [r3, #22]
 80092c8:	4b4c      	ldr	r3, [pc, #304]	@ (80093fc <SVCCTL_App_Notification+0x194>)
 80092ca:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80092cc:	484b      	ldr	r0, [pc, #300]	@ (80093fc <SVCCTL_App_Notification+0x194>)
 80092ce:	f000 fa7d 	bl	80097cc <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80092d2:	e08c      	b.n	80093ee <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80092d4:	6a3b      	ldr	r3, [r7, #32]
 80092d6:	3302      	adds	r3, #2
 80092d8:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d001      	beq.n	80092e6 <SVCCTL_App_Notification+0x7e>
 80092e2:	2b03      	cmp	r3, #3
          break;
 80092e4:	e021      	b.n	800932a <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	3301      	adds	r3, #1
 80092ea:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80092ec:	4b42      	ldr	r3, [pc, #264]	@ (80093f8 <SVCCTL_App_Notification+0x190>)
 80092ee:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80092f2:	2b04      	cmp	r3, #4
 80092f4:	d104      	bne.n	8009300 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80092f6:	4b40      	ldr	r3, [pc, #256]	@ (80093f8 <SVCCTL_App_Notification+0x190>)
 80092f8:	2206      	movs	r2, #6
 80092fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80092fe:	e003      	b.n	8009308 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8009300:	4b3d      	ldr	r3, [pc, #244]	@ (80093f8 <SVCCTL_App_Notification+0x190>)
 8009302:	2205      	movs	r2, #5
 8009304:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800930e:	b29a      	uxth	r2, r3
 8009310:	4b39      	ldr	r3, [pc, #228]	@ (80093f8 <SVCCTL_App_Notification+0x190>)
 8009312:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8009314:	4b39      	ldr	r3, [pc, #228]	@ (80093fc <SVCCTL_App_Notification+0x194>)
 8009316:	2200      	movs	r2, #0
 8009318:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800931a:	4b37      	ldr	r3, [pc, #220]	@ (80093f8 <SVCCTL_App_Notification+0x190>)
 800931c:	8ada      	ldrh	r2, [r3, #22]
 800931e:	4b37      	ldr	r3, [pc, #220]	@ (80093fc <SVCCTL_App_Notification+0x194>)
 8009320:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8009322:	4836      	ldr	r0, [pc, #216]	@ (80093fc <SVCCTL_App_Notification+0x194>)
 8009324:	f000 fa52 	bl	80097cc <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8009328:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800932a:	e060      	b.n	80093ee <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	3302      	adds	r3, #2
 8009330:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	b29b      	uxth	r3, r3
 8009338:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800933c:	4293      	cmp	r3, r2
 800933e:	d047      	beq.n	80093d0 <SVCCTL_App_Notification+0x168>
 8009340:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8009344:	4293      	cmp	r3, r2
 8009346:	dc51      	bgt.n	80093ec <SVCCTL_App_Notification+0x184>
 8009348:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800934c:	d046      	beq.n	80093dc <SVCCTL_App_Notification+0x174>
 800934e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009352:	dc4b      	bgt.n	80093ec <SVCCTL_App_Notification+0x184>
 8009354:	2b04      	cmp	r3, #4
 8009356:	d043      	beq.n	80093e0 <SVCCTL_App_Notification+0x178>
 8009358:	2b04      	cmp	r3, #4
 800935a:	db47      	blt.n	80093ec <SVCCTL_App_Notification+0x184>
 800935c:	f240 420a 	movw	r2, #1034	@ 0x40a
 8009360:	4293      	cmp	r3, r2
 8009362:	dc43      	bgt.n	80093ec <SVCCTL_App_Notification+0x184>
 8009364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009368:	dd40      	ble.n	80093ec <SVCCTL_App_Notification+0x184>
 800936a:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800936e:	2b09      	cmp	r3, #9
 8009370:	d83c      	bhi.n	80093ec <SVCCTL_App_Notification+0x184>
 8009372:	a201      	add	r2, pc, #4	@ (adr r2, 8009378 <SVCCTL_App_Notification+0x110>)
 8009374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009378:	080093c9 	.word	0x080093c9
 800937c:	080093a1 	.word	0x080093a1
 8009380:	080093ed 	.word	0x080093ed
 8009384:	080093ed 	.word	0x080093ed
 8009388:	080093ed 	.word	0x080093ed
 800938c:	080093ed 	.word	0x080093ed
 8009390:	080093e5 	.word	0x080093e5
 8009394:	080093ed 	.word	0x080093ed
 8009398:	080093b5 	.word	0x080093b5
 800939c:	080093e5 	.word	0x080093e5
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80093a0:	4b15      	ldr	r3, [pc, #84]	@ (80093f8 <SVCCTL_App_Notification+0x190>)
 80093a2:	8adb      	ldrh	r3, [r3, #22]
 80093a4:	4916      	ldr	r1, [pc, #88]	@ (8009400 <SVCCTL_App_Notification+0x198>)
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fd feee 	bl	8007188 <aci_gap_pass_key_resp>
 80093ac:	4603      	mov	r3, r0
 80093ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 80093b2:	e018      	b.n	80093e6 <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80093b4:	4b10      	ldr	r3, [pc, #64]	@ (80093f8 <SVCCTL_App_Notification+0x190>)
 80093b6:	8adb      	ldrh	r3, [r3, #22]
 80093b8:	2101      	movs	r1, #1
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fe f88e 	bl	80074dc <aci_gap_numeric_comparison_value_confirm_yesno>
 80093c0:	4603      	mov	r3, r0
 80093c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 80093c6:	e00e      	b.n	80093e6 <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	3302      	adds	r3, #2
 80093cc:	61bb      	str	r3, [r7, #24]
          break;
 80093ce:	e00a      	b.n	80093e6 <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80093d0:	4b09      	ldr	r3, [pc, #36]	@ (80093f8 <SVCCTL_App_Notification+0x190>)
 80093d2:	8adb      	ldrh	r3, [r3, #22]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fe fb94 	bl	8007b02 <aci_gatt_confirm_indication>
        break;
 80093da:	e004      	b.n	80093e6 <SVCCTL_App_Notification+0x17e>
          break;
 80093dc:	bf00      	nop
 80093de:	e005      	b.n	80093ec <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80093e0:	bf00      	nop
 80093e2:	e003      	b.n	80093ec <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80093e4:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80093e6:	e001      	b.n	80093ec <SVCCTL_App_Notification+0x184>
      break;
 80093e8:	bf00      	nop
 80093ea:	e000      	b.n	80093ee <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80093ec:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80093ee:	2301      	movs	r3, #1
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3728      	adds	r7, #40	@ 0x28
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	20000540 	.word	0x20000540
 80093fc:	200005c4 	.word	0x200005c4
 8009400:	0001b207 	.word	0x0001b207

08009404 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800940a:	4b06      	ldr	r3, [pc, #24]	@ (8009424 <Ble_Tl_Init+0x20>)
 800940c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800940e:	4b06      	ldr	r3, [pc, #24]	@ (8009428 <Ble_Tl_Init+0x24>)
 8009410:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8009412:	463b      	mov	r3, r7
 8009414:	4619      	mov	r1, r3
 8009416:	4805      	ldr	r0, [pc, #20]	@ (800942c <Ble_Tl_Init+0x28>)
 8009418:	f7ff f89c 	bl	8008554 <hci_init>

  return;
 800941c:	bf00      	nop
}
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	200300d8 	.word	0x200300d8
 8009428:	08009731 	.word	0x08009731
 800942c:	080096f9 	.word	0x080096f9

08009430 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8009430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009432:	b08d      	sub	sp, #52	@ 0x34
 8009434:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8009436:	2300      	movs	r3, #0
 8009438:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800943a:	2392      	movs	r3, #146	@ 0x92
 800943c:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800943e:	f7fe fdb8 	bl	8007fb2 <hci_reset>
 8009442:	4603      	mov	r3, r0
 8009444:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8009446:	f000 f8d7 	bl	80095f8 <BleGetBdAddress>
 800944a:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	2106      	movs	r1, #6
 8009450:	2000      	movs	r0, #0
 8009452:	f7fe fc6e 	bl	8007d32 <aci_hal_write_config_data>
 8009456:	4603      	mov	r3, r0
 8009458:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800945a:	4a4a      	ldr	r2, [pc, #296]	@ (8009584 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800945c:	2110      	movs	r1, #16
 800945e:	2018      	movs	r0, #24
 8009460:	f7fe fc67 	bl	8007d32 <aci_hal_write_config_data>
 8009464:	4603      	mov	r3, r0
 8009466:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8009468:	4a47      	ldr	r2, [pc, #284]	@ (8009588 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800946a:	2110      	movs	r1, #16
 800946c:	2008      	movs	r0, #8
 800946e:	f7fe fc60 	bl	8007d32 <aci_hal_write_config_data>
 8009472:	4603      	mov	r3, r0
 8009474:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8009476:	2118      	movs	r1, #24
 8009478:	2001      	movs	r0, #1
 800947a:	f7fe fcdf 	bl	8007e3c <aci_hal_set_tx_power_level>
 800947e:	4603      	mov	r3, r0
 8009480:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8009482:	f7fe f892 	bl	80075aa <aci_gatt_init>
 8009486:	4603      	mov	r3, r0
 8009488:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800948e:	7bfb      	ldrb	r3, [r7, #15]
 8009490:	f043 0301 	orr.w	r3, r3, #1
 8009494:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8009496:	7bfb      	ldrb	r3, [r7, #15]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d01f      	beq.n	80094dc <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800949c:	4b3b      	ldr	r3, [pc, #236]	@ (800958c <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800949e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80094a0:	1dba      	adds	r2, r7, #6
 80094a2:	7bf8      	ldrb	r0, [r7, #15]
 80094a4:	1cbb      	adds	r3, r7, #2
 80094a6:	9301      	str	r3, [sp, #4]
 80094a8:	1d3b      	adds	r3, r7, #4
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	4613      	mov	r3, r2
 80094ae:	2208      	movs	r2, #8
 80094b0:	2100      	movs	r1, #0
 80094b2:	f7fd fed0 	bl	8007256 <aci_gap_init>
 80094b6:	4603      	mov	r3, r0
 80094b8:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80094ba:	88fc      	ldrh	r4, [r7, #6]
 80094bc:	88bd      	ldrh	r5, [r7, #4]
 80094be:	68b8      	ldr	r0, [r7, #8]
 80094c0:	f7f6 fe5e 	bl	8000180 <strlen>
 80094c4:	4603      	mov	r3, r0
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	4613      	mov	r3, r2
 80094ce:	2200      	movs	r2, #0
 80094d0:	4629      	mov	r1, r5
 80094d2:	4620      	mov	r0, r4
 80094d4:	f7fe fa6c 	bl	80079b0 <aci_gatt_update_char_value>
 80094d8:	4603      	mov	r3, r0
 80094da:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80094dc:	88f8      	ldrh	r0, [r7, #6]
 80094de:	8879      	ldrh	r1, [r7, #2]
 80094e0:	463b      	mov	r3, r7
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	2302      	movs	r3, #2
 80094e6:	2200      	movs	r2, #0
 80094e8:	f7fe fa62 	bl	80079b0 <aci_gatt_update_char_value>
 80094ec:	4603      	mov	r3, r0
 80094ee:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80094f0:	2202      	movs	r2, #2
 80094f2:	2102      	movs	r1, #2
 80094f4:	2000      	movs	r0, #0
 80094f6:	f7fe fd80 	bl	8007ffa <hci_le_set_default_phy>
 80094fa:	4603      	mov	r3, r0
 80094fc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80094fe:	4b24      	ldr	r3, [pc, #144]	@ (8009590 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009500:	2201      	movs	r2, #1
 8009502:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8009504:	4b22      	ldr	r3, [pc, #136]	@ (8009590 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	4618      	mov	r0, r3
 800950a:	f7fd fd25 	bl	8006f58 <aci_gap_set_io_capability>
 800950e:	4603      	mov	r3, r0
 8009510:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8009512:	4b1f      	ldr	r3, [pc, #124]	@ (8009590 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009514:	2201      	movs	r2, #1
 8009516:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8009518:	4b1d      	ldr	r3, [pc, #116]	@ (8009590 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800951a:	2208      	movs	r2, #8
 800951c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800951e:	4b1c      	ldr	r3, [pc, #112]	@ (8009590 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009520:	2210      	movs	r2, #16
 8009522:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8009524:	4b1a      	ldr	r3, [pc, #104]	@ (8009590 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009526:	2200      	movs	r2, #0
 8009528:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800952a:	4b19      	ldr	r3, [pc, #100]	@ (8009590 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800952c:	4a19      	ldr	r2, [pc, #100]	@ (8009594 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800952e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8009530:	4b17      	ldr	r3, [pc, #92]	@ (8009590 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009532:	2200      	movs	r2, #0
 8009534:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8009536:	4b16      	ldr	r3, [pc, #88]	@ (8009590 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009538:	789c      	ldrb	r4, [r3, #2]
 800953a:	4b15      	ldr	r3, [pc, #84]	@ (8009590 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800953c:	785d      	ldrb	r5, [r3, #1]
 800953e:	4b14      	ldr	r3, [pc, #80]	@ (8009590 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009540:	791b      	ldrb	r3, [r3, #4]
 8009542:	4a13      	ldr	r2, [pc, #76]	@ (8009590 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009544:	7952      	ldrb	r2, [r2, #5]
 8009546:	4912      	ldr	r1, [pc, #72]	@ (8009590 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009548:	78c9      	ldrb	r1, [r1, #3]
 800954a:	4811      	ldr	r0, [pc, #68]	@ (8009590 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800954c:	6880      	ldr	r0, [r0, #8]
 800954e:	2600      	movs	r6, #0
 8009550:	9604      	str	r6, [sp, #16]
 8009552:	9003      	str	r0, [sp, #12]
 8009554:	9102      	str	r1, [sp, #8]
 8009556:	9201      	str	r2, [sp, #4]
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	2300      	movs	r3, #0
 800955c:	2201      	movs	r2, #1
 800955e:	4629      	mov	r1, r5
 8009560:	4620      	mov	r0, r4
 8009562:	f7fd fd4d 	bl	8007000 <aci_gap_set_authentication_requirement>
 8009566:	4603      	mov	r3, r0
 8009568:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800956a:	4b09      	ldr	r3, [pc, #36]	@ (8009590 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800956c:	789b      	ldrb	r3, [r3, #2]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d003      	beq.n	800957a <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8009572:	f7fd ff8f 	bl	8007494 <aci_gap_configure_filter_accept_list>
 8009576:	4603      	mov	r3, r0
 8009578:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800957a:	bf00      	nop
 800957c:	371c      	adds	r7, #28
 800957e:	46bd      	mov	sp, r7
 8009580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009582:	bf00      	nop
 8009584:	08012a94 	.word	0x08012a94
 8009588:	08012aa4 	.word	0x08012aa4
 800958c:	08012770 	.word	0x08012770
 8009590:	20000540 	.word	0x20000540
 8009594:	0001b207 	.word	0x0001b207

08009598 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b08c      	sub	sp, #48	@ 0x30
 800959c:	af08      	add	r7, sp, #32
 800959e:	4603      	mov	r3, r0
 80095a0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80095a2:	2392      	movs	r3, #146	@ 0x92
 80095a4:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80095a6:	4a12      	ldr	r2, [pc, #72]	@ (80095f0 <Adv_Request+0x58>)
 80095a8:	79fb      	ldrb	r3, [r7, #7]
 80095aa:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80095ae:	2300      	movs	r3, #0
 80095b0:	9306      	str	r3, [sp, #24]
 80095b2:	2300      	movs	r3, #0
 80095b4:	9305      	str	r3, [sp, #20]
 80095b6:	2300      	movs	r3, #0
 80095b8:	9304      	str	r3, [sp, #16]
 80095ba:	2300      	movs	r3, #0
 80095bc:	9303      	str	r3, [sp, #12]
 80095be:	2300      	movs	r3, #0
 80095c0:	9302      	str	r3, [sp, #8]
 80095c2:	2300      	movs	r3, #0
 80095c4:	9301      	str	r3, [sp, #4]
 80095c6:	2300      	movs	r3, #0
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	2300      	movs	r3, #0
 80095cc:	22a0      	movs	r2, #160	@ 0xa0
 80095ce:	2180      	movs	r1, #128	@ 0x80
 80095d0:	2000      	movs	r0, #0
 80095d2:	f7fd fbc7 	bl	8006d64 <aci_gap_set_discoverable>
 80095d6:	4603      	mov	r3, r0
 80095d8:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80095da:	4906      	ldr	r1, [pc, #24]	@ (80095f4 <Adv_Request+0x5c>)
 80095dc:	200b      	movs	r0, #11
 80095de:	f7fd fee7 	bl	80073b0 <aci_gap_update_adv_data>
 80095e2:	4603      	mov	r3, r0
 80095e4:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80095e6:	bf00      	nop
}
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20000540 	.word	0x20000540
 80095f4:	20000014 	.word	0x20000014

080095f8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80095fe:	f7ff fdab 	bl	8009158 <LL_FLASH_GetUDN>
 8009602:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960a:	d023      	beq.n	8009654 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800960c:	f7ff fdbc 	bl	8009188 <LL_FLASH_GetSTCompanyID>
 8009610:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8009612:	f7ff fdad 	bl	8009170 <LL_FLASH_GetDeviceID>
 8009616:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	b2da      	uxtb	r2, r3
 800961c:	4b16      	ldr	r3, [pc, #88]	@ (8009678 <BleGetBdAddress+0x80>)
 800961e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	0a1b      	lsrs	r3, r3, #8
 8009624:	b2da      	uxtb	r2, r3
 8009626:	4b14      	ldr	r3, [pc, #80]	@ (8009678 <BleGetBdAddress+0x80>)
 8009628:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	b2da      	uxtb	r2, r3
 800962e:	4b12      	ldr	r3, [pc, #72]	@ (8009678 <BleGetBdAddress+0x80>)
 8009630:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	b2da      	uxtb	r2, r3
 8009636:	4b10      	ldr	r3, [pc, #64]	@ (8009678 <BleGetBdAddress+0x80>)
 8009638:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	0a1b      	lsrs	r3, r3, #8
 800963e:	b2da      	uxtb	r2, r3
 8009640:	4b0d      	ldr	r3, [pc, #52]	@ (8009678 <BleGetBdAddress+0x80>)
 8009642:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	0c1b      	lsrs	r3, r3, #16
 8009648:	b2da      	uxtb	r2, r3
 800964a:	4b0b      	ldr	r3, [pc, #44]	@ (8009678 <BleGetBdAddress+0x80>)
 800964c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800964e:	4b0a      	ldr	r3, [pc, #40]	@ (8009678 <BleGetBdAddress+0x80>)
 8009650:	617b      	str	r3, [r7, #20]
 8009652:	e00b      	b.n	800966c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8009654:	2000      	movs	r0, #0
 8009656:	f7ff fc99 	bl	8008f8c <OTP_Read>
 800965a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d002      	beq.n	8009668 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	617b      	str	r3, [r7, #20]
 8009666:	e001      	b.n	800966c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8009668:	4b04      	ldr	r3, [pc, #16]	@ (800967c <BleGetBdAddress+0x84>)
 800966a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800966c:	697b      	ldr	r3, [r7, #20]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20000538 	.word	0x20000538
 800967c:	08012a8c 	.word	0x08012a8c

08009680 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8009686:	4b0a      	ldr	r3, [pc, #40]	@ (80096b0 <Adv_Cancel+0x30>)
 8009688:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800968c:	2b05      	cmp	r3, #5
 800968e:	d00a      	beq.n	80096a6 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009690:	2392      	movs	r3, #146	@ 0x92
 8009692:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8009694:	f7fd fb42 	bl	8006d1c <aci_gap_set_non_discoverable>
 8009698:	4603      	mov	r3, r0
 800969a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800969c:	4b04      	ldr	r3, [pc, #16]	@ (80096b0 <Adv_Cancel+0x30>)
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80096a4:	bf00      	nop
 80096a6:	bf00      	nop
}
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	20000540 	.word	0x20000540

080096b4 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80096bc:	2100      	movs	r1, #0
 80096be:	2002      	movs	r0, #2
 80096c0:	f000 fe68 	bl	800a394 <UTIL_SEQ_SetTask>

  return;
 80096c4:	bf00      	nop
}
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80096d4:	2001      	movs	r0, #1
 80096d6:	f000 fec9 	bl	800a46c <UTIL_SEQ_SetEvt>

  return;
 80096da:	bf00      	nop
}
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b082      	sub	sp, #8
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80096ea:	2001      	movs	r0, #1
 80096ec:	f000 fede 	bl	800a4ac <UTIL_SEQ_WaitEvt>

  return;
 80096f0:	bf00      	nop
}
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	3308      	adds	r3, #8
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe fddc 	bl	80082c8 <SVCCTL_UserEvtRx>
 8009710:	4603      	mov	r3, r0
 8009712:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8009714:	7afb      	ldrb	r3, [r7, #11]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d003      	beq.n	8009722 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2201      	movs	r2, #1
 800971e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8009720:	e003      	b.n	800972a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	701a      	strb	r2, [r3, #0]
  return;
 8009728:	bf00      	nop
}
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800973a:	79fb      	ldrb	r3, [r7, #7]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d002      	beq.n	8009746 <BLE_StatusNot+0x16>
 8009740:	2b01      	cmp	r3, #1
 8009742:	d006      	beq.n	8009752 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8009744:	e00b      	b.n	800975e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8009746:	2307      	movs	r3, #7
 8009748:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f000 fe4e 	bl	800a3ec <UTIL_SEQ_PauseTask>
      break;
 8009750:	e005      	b.n	800975e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8009752:	2307      	movs	r3, #7
 8009754:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f000 fe68 	bl	800a42c <UTIL_SEQ_ResumeTask>
      break;
 800975c:	bf00      	nop
  }

  return;
 800975e:	bf00      	nop
}
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
	...

08009768 <myTask>:
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask(void)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	af00      	add	r7, sp, #0
  if(1)
   {
// 	  UpdateCharData[0] ^= 0x1;
	  if(acc_example_service(512,UpdateCharData)==EXIT_SUCCESS){
 800976c:	4907      	ldr	r1, [pc, #28]	@ (800978c <myTask+0x24>)
 800976e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009772:	f7f7 ff3f 	bl	80015f4 <acc_example_service>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d101      	bne.n	8009780 <myTask+0x18>
		  Custom_Mycharnotify_Update_Char();
 800977c:	f000 f842 	bl	8009804 <Custom_Mycharnotify_Update_Char>
// 	  tr=0;
// 	  for(int i=0;i<512;i++){
// 		 printf("%c\n",UpdateCharData[i]);
// 	  }
   }
   UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8009780:	2100      	movs	r1, #0
 8009782:	2004      	movs	r0, #4
 8009784:	f000 fe06 	bl	800a394 <UTIL_SEQ_SetTask>
}
 8009788:	bf00      	nop
 800978a:	bd80      	pop	{r7, pc}
 800978c:	200005c8 	.word	0x200005c8

08009790 <Custom_STM_App_Notification>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	2b04      	cmp	r3, #4
 800979e:	d80d      	bhi.n	80097bc <Custom_STM_App_Notification+0x2c>
 80097a0:	a201      	add	r2, pc, #4	@ (adr r2, 80097a8 <Custom_STM_App_Notification+0x18>)
 80097a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a6:	bf00      	nop
 80097a8:	080097bd 	.word	0x080097bd
 80097ac:	080097bd 	.word	0x080097bd
 80097b0:	080097bd 	.word	0x080097bd
 80097b4:	080097bd 	.word	0x080097bd
 80097b8:	080097bd 	.word	0x080097bd

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 80097bc:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80097be:	bf00      	nop
}
 80097c0:	370c      	adds	r7, #12
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop

080097cc <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d002      	beq.n	80097e2 <Custom_APP_Notification+0x16>
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d002      	beq.n	80097e6 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80097e0:	e002      	b.n	80097e8 <Custom_APP_Notification+0x1c>
      break;
 80097e2:	bf00      	nop
 80097e4:	e000      	b.n	80097e8 <Custom_APP_Notification+0x1c>
      break;
 80097e6:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80097e8:	bf00      	nop
}
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80097f4:	b480      	push	{r7}
 80097f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80097f8:	bf00      	nop
}
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
	...

08009804 <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

/* mySvc */
__USED void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800980a:	2300      	movs	r3, #0
 800980c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Mycharnotify_UC_1*/
  updateflag = 1;
 800980e:	2301      	movs	r3, #1
 8009810:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END Mycharnotify_UC_1*/

  if (updateflag != 0)
 8009812:	79fb      	ldrb	r3, [r7, #7]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d007      	beq.n	8009828 <Custom_Mycharnotify_Update_Char+0x24>
  {
	Custom_STM_App_Update_Char_Ext(Connection_Handle, CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 8009818:	4b05      	ldr	r3, [pc, #20]	@ (8009830 <Custom_Mycharnotify_Update_Char+0x2c>)
 800981a:	881b      	ldrh	r3, [r3, #0]
 800981c:	4a05      	ldr	r2, [pc, #20]	@ (8009834 <Custom_Mycharnotify_Update_Char+0x30>)
 800981e:	2101      	movs	r1, #1
 8009820:	4618      	mov	r0, r3
 8009822:	f000 f971 	bl	8009b08 <Custom_STM_App_Update_Char_Ext>
  }

  /* USER CODE BEGIN Mycharnotify_UC_Last*/

  /* USER CODE END Mycharnotify_UC_Last*/
  return;
 8009826:	bf00      	nop
 8009828:	bf00      	nop
}
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	200007c8 	.word	0x200007c8
 8009834:	200005c8 	.word	0x200005c8

08009838 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b08c      	sub	sp, #48	@ 0x30
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8009840:	2300      	movs	r3, #0
 8009842:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	3301      	adds	r3, #1
 800984a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800984c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	2bff      	cmp	r3, #255	@ 0xff
 8009852:	f040 809d 	bne.w	8009990 <Custom_STM_Event_Handler+0x158>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8009856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009858:	3302      	adds	r3, #2
 800985a:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800985c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985e:	881b      	ldrh	r3, [r3, #0]
 8009860:	b29b      	uxth	r3, r3
 8009862:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8009866:	2b1a      	cmp	r3, #26
 8009868:	f200 808e 	bhi.w	8009988 <Custom_STM_Event_Handler+0x150>
 800986c:	a201      	add	r2, pc, #4	@ (adr r2, 8009874 <Custom_STM_Event_Handler+0x3c>)
 800986e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009872:	bf00      	nop
 8009874:	080098e1 	.word	0x080098e1
 8009878:	08009989 	.word	0x08009989
 800987c:	08009989 	.word	0x08009989
 8009880:	08009989 	.word	0x08009989
 8009884:	08009989 	.word	0x08009989
 8009888:	08009989 	.word	0x08009989
 800988c:	08009989 	.word	0x08009989
 8009890:	08009989 	.word	0x08009989
 8009894:	08009989 	.word	0x08009989
 8009898:	08009989 	.word	0x08009989
 800989c:	08009989 	.word	0x08009989
 80098a0:	08009989 	.word	0x08009989
 80098a4:	08009989 	.word	0x08009989
 80098a8:	08009989 	.word	0x08009989
 80098ac:	08009989 	.word	0x08009989
 80098b0:	08009989 	.word	0x08009989
 80098b4:	08009989 	.word	0x08009989
 80098b8:	08009989 	.word	0x08009989
 80098bc:	08009989 	.word	0x08009989
 80098c0:	08009989 	.word	0x08009989
 80098c4:	08009989 	.word	0x08009989
 80098c8:	08009989 	.word	0x08009989
 80098cc:	08009989 	.word	0x08009989
 80098d0:	08009989 	.word	0x08009989
 80098d4:	08009989 	.word	0x08009989
 80098d8:	08009989 	.word	0x08009989
 80098dc:	0800996b 	.word	0x0800996b
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80098e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e2:	3302      	adds	r3, #2
 80098e4:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	885b      	ldrh	r3, [r3, #2]
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	461a      	mov	r2, r3
 80098ee:	4b2c      	ldr	r3, [pc, #176]	@ (80099a0 <Custom_STM_Event_Handler+0x168>)
 80098f0:	889b      	ldrh	r3, [r3, #4]
 80098f2:	3302      	adds	r3, #2
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d119      	bne.n	800992c <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80098f8:	2301      	movs	r3, #1
 80098fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	7a1b      	ldrb	r3, [r3, #8]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d002      	beq.n	800990c <Custom_STM_Event_Handler+0xd4>
 8009906:	2b01      	cmp	r3, #1
 8009908:	d008      	beq.n	800991c <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 800990a:	e02d      	b.n	8009968 <Custom_STM_Event_Handler+0x130>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 800990c:	2303      	movs	r3, #3
 800990e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8009910:	f107 0308 	add.w	r3, r7, #8
 8009914:	4618      	mov	r0, r3
 8009916:	f7ff ff3b 	bl	8009790 <Custom_STM_App_Notification>
                break;
 800991a:	e025      	b.n	8009968 <Custom_STM_Event_Handler+0x130>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 800991c:	2302      	movs	r3, #2
 800991e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8009920:	f107 0308 	add.w	r3, r7, #8
 8009924:	4618      	mov	r0, r3
 8009926:	f7ff ff33 	bl	8009790 <Custom_STM_App_Notification>
                break;
 800992a:	e01d      	b.n	8009968 <Custom_STM_Event_Handler+0x130>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	885b      	ldrh	r3, [r3, #2]
 8009930:	b29b      	uxth	r3, r3
 8009932:	461a      	mov	r2, r3
 8009934:	4b1a      	ldr	r3, [pc, #104]	@ (80099a0 <Custom_STM_Event_Handler+0x168>)
 8009936:	885b      	ldrh	r3, [r3, #2]
 8009938:	3301      	adds	r3, #1
 800993a:	429a      	cmp	r2, r3
 800993c:	d107      	bne.n	800994e <Custom_STM_Event_Handler+0x116>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800993e:	2301      	movs	r3, #1
 8009940:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8009944:	2120      	movs	r1, #32
 8009946:	4817      	ldr	r0, [pc, #92]	@ (80099a4 <Custom_STM_Event_Handler+0x16c>)
 8009948:	f7f9 ff06 	bl	8003758 <HAL_GPIO_TogglePin>
            /* USER CODE END CUSTOM_STM_Service_1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800994c:	e01e      	b.n	800998c <Custom_STM_Event_Handler+0x154>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	885b      	ldrh	r3, [r3, #2]
 8009952:	b29b      	uxth	r3, r3
 8009954:	461a      	mov	r2, r3
 8009956:	4b12      	ldr	r3, [pc, #72]	@ (80099a0 <Custom_STM_Event_Handler+0x168>)
 8009958:	889b      	ldrh	r3, [r3, #4]
 800995a:	3301      	adds	r3, #1
 800995c:	429a      	cmp	r2, r3
 800995e:	d115      	bne.n	800998c <Custom_STM_Event_Handler+0x154>
            return_value = SVCCTL_EvtAckFlowEnable;
 8009960:	2301      	movs	r3, #1
 8009962:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8009966:	e011      	b.n	800998c <Custom_STM_Event_Handler+0x154>
 8009968:	e010      	b.n	800998c <Custom_STM_Event_Handler+0x154>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800996a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996c:	3302      	adds	r3, #2
 800996e:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8009970:	2304      	movs	r3, #4
 8009972:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8009974:	6a3b      	ldr	r3, [r7, #32]
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	b29b      	uxth	r3, r3
 800997a:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 800997c:	f107 0308 	add.w	r3, r7, #8
 8009980:	4618      	mov	r0, r3
 8009982:	f7ff ff05 	bl	8009790 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8009986:	e002      	b.n	800998e <Custom_STM_Event_Handler+0x156>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8009988:	bf00      	nop
 800998a:	e002      	b.n	8009992 <Custom_STM_Event_Handler+0x15a>
          break;
 800998c:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800998e:	e000      	b.n	8009992 <Custom_STM_Event_Handler+0x15a>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8009990:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8009992:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8009996:	4618      	mov	r0, r3
 8009998:	3730      	adds	r7, #48	@ 0x30
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	200007cc 	.word	0x200007cc
 80099a4:	48000400 	.word	0x48000400

080099a8 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b08c      	sub	sp, #48	@ 0x30
 80099ac:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80099ae:	2392      	movs	r3, #146	@ 0x92
 80099b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 80099b2:	484f      	ldr	r0, [pc, #316]	@ (8009af0 <SVCCTL_InitCustomSvc+0x148>)
 80099b4:	f7fe fc6e 	bl	8008294 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 80099b8:	2306      	movs	r3, #6
 80099ba:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 80099bc:	238f      	movs	r3, #143	@ 0x8f
 80099be:	713b      	strb	r3, [r7, #4]
 80099c0:	23e5      	movs	r3, #229	@ 0xe5
 80099c2:	717b      	strb	r3, [r7, #5]
 80099c4:	23b3      	movs	r3, #179	@ 0xb3
 80099c6:	71bb      	strb	r3, [r7, #6]
 80099c8:	23d5      	movs	r3, #213	@ 0xd5
 80099ca:	71fb      	strb	r3, [r7, #7]
 80099cc:	232e      	movs	r3, #46	@ 0x2e
 80099ce:	723b      	strb	r3, [r7, #8]
 80099d0:	237f      	movs	r3, #127	@ 0x7f
 80099d2:	727b      	strb	r3, [r7, #9]
 80099d4:	234a      	movs	r3, #74	@ 0x4a
 80099d6:	72bb      	strb	r3, [r7, #10]
 80099d8:	2398      	movs	r3, #152	@ 0x98
 80099da:	72fb      	strb	r3, [r7, #11]
 80099dc:	232a      	movs	r3, #42	@ 0x2a
 80099de:	733b      	strb	r3, [r7, #12]
 80099e0:	2348      	movs	r3, #72	@ 0x48
 80099e2:	737b      	strb	r3, [r7, #13]
 80099e4:	237a      	movs	r3, #122	@ 0x7a
 80099e6:	73bb      	strb	r3, [r7, #14]
 80099e8:	23cc      	movs	r3, #204	@ 0xcc
 80099ea:	73fb      	strb	r3, [r7, #15]
 80099ec:	2300      	movs	r3, #0
 80099ee:	743b      	strb	r3, [r7, #16]
 80099f0:	2300      	movs	r3, #0
 80099f2:	747b      	strb	r3, [r7, #17]
 80099f4:	2300      	movs	r3, #0
 80099f6:	74bb      	strb	r3, [r7, #18]
 80099f8:	2300      	movs	r3, #0
 80099fa:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80099fc:	7dbb      	ldrb	r3, [r7, #22]
 80099fe:	1d39      	adds	r1, r7, #4
 8009a00:	4a3c      	ldr	r2, [pc, #240]	@ (8009af4 <SVCCTL_InitCustomSvc+0x14c>)
 8009a02:	9200      	str	r2, [sp, #0]
 8009a04:	2201      	movs	r2, #1
 8009a06:	2002      	movs	r0, #2
 8009a08:	f7fd fdf4 	bl	80075f4 <aci_gatt_add_service>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8009a10:	2319      	movs	r3, #25
 8009a12:	713b      	strb	r3, [r7, #4]
 8009a14:	23ed      	movs	r3, #237	@ 0xed
 8009a16:	717b      	strb	r3, [r7, #5]
 8009a18:	2382      	movs	r3, #130	@ 0x82
 8009a1a:	71bb      	strb	r3, [r7, #6]
 8009a1c:	23ae      	movs	r3, #174	@ 0xae
 8009a1e:	71fb      	strb	r3, [r7, #7]
 8009a20:	23ed      	movs	r3, #237	@ 0xed
 8009a22:	723b      	strb	r3, [r7, #8]
 8009a24:	2321      	movs	r3, #33	@ 0x21
 8009a26:	727b      	strb	r3, [r7, #9]
 8009a28:	234c      	movs	r3, #76	@ 0x4c
 8009a2a:	72bb      	strb	r3, [r7, #10]
 8009a2c:	239d      	movs	r3, #157	@ 0x9d
 8009a2e:	72fb      	strb	r3, [r7, #11]
 8009a30:	2341      	movs	r3, #65	@ 0x41
 8009a32:	733b      	strb	r3, [r7, #12]
 8009a34:	2345      	movs	r3, #69	@ 0x45
 8009a36:	737b      	strb	r3, [r7, #13]
 8009a38:	2322      	movs	r3, #34	@ 0x22
 8009a3a:	73bb      	strb	r3, [r7, #14]
 8009a3c:	238e      	movs	r3, #142	@ 0x8e
 8009a3e:	73fb      	strb	r3, [r7, #15]
 8009a40:	2300      	movs	r3, #0
 8009a42:	743b      	strb	r3, [r7, #16]
 8009a44:	2300      	movs	r3, #0
 8009a46:	747b      	strb	r3, [r7, #17]
 8009a48:	2300      	movs	r3, #0
 8009a4a:	74bb      	strb	r3, [r7, #18]
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8009a50:	4b28      	ldr	r3, [pc, #160]	@ (8009af4 <SVCCTL_InitCustomSvc+0x14c>)
 8009a52:	8818      	ldrh	r0, [r3, #0]
 8009a54:	4b28      	ldr	r3, [pc, #160]	@ (8009af8 <SVCCTL_InitCustomSvc+0x150>)
 8009a56:	881b      	ldrh	r3, [r3, #0]
 8009a58:	1d3a      	adds	r2, r7, #4
 8009a5a:	4928      	ldr	r1, [pc, #160]	@ (8009afc <SVCCTL_InitCustomSvc+0x154>)
 8009a5c:	9105      	str	r1, [sp, #20]
 8009a5e:	2100      	movs	r1, #0
 8009a60:	9104      	str	r1, [sp, #16]
 8009a62:	2110      	movs	r1, #16
 8009a64:	9103      	str	r1, [sp, #12]
 8009a66:	2101      	movs	r1, #1
 8009a68:	9102      	str	r1, [sp, #8]
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	9101      	str	r1, [sp, #4]
 8009a6e:	2108      	movs	r1, #8
 8009a70:	9100      	str	r1, [sp, #0]
 8009a72:	2102      	movs	r1, #2
 8009a74:	f7fd fe94 	bl	80077a0 <aci_gatt_add_char>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 8009a7c:	2319      	movs	r3, #25
 8009a7e:	713b      	strb	r3, [r7, #4]
 8009a80:	23ed      	movs	r3, #237	@ 0xed
 8009a82:	717b      	strb	r3, [r7, #5]
 8009a84:	2382      	movs	r3, #130	@ 0x82
 8009a86:	71bb      	strb	r3, [r7, #6]
 8009a88:	23ae      	movs	r3, #174	@ 0xae
 8009a8a:	71fb      	strb	r3, [r7, #7]
 8009a8c:	23ed      	movs	r3, #237	@ 0xed
 8009a8e:	723b      	strb	r3, [r7, #8]
 8009a90:	2321      	movs	r3, #33	@ 0x21
 8009a92:	727b      	strb	r3, [r7, #9]
 8009a94:	234c      	movs	r3, #76	@ 0x4c
 8009a96:	72bb      	strb	r3, [r7, #10]
 8009a98:	239d      	movs	r3, #157	@ 0x9d
 8009a9a:	72fb      	strb	r3, [r7, #11]
 8009a9c:	2341      	movs	r3, #65	@ 0x41
 8009a9e:	733b      	strb	r3, [r7, #12]
 8009aa0:	2345      	movs	r3, #69	@ 0x45
 8009aa2:	737b      	strb	r3, [r7, #13]
 8009aa4:	2322      	movs	r3, #34	@ 0x22
 8009aa6:	73bb      	strb	r3, [r7, #14]
 8009aa8:	238e      	movs	r3, #142	@ 0x8e
 8009aaa:	73fb      	strb	r3, [r7, #15]
 8009aac:	2301      	movs	r3, #1
 8009aae:	743b      	strb	r3, [r7, #16]
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	747b      	strb	r3, [r7, #17]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	74bb      	strb	r3, [r7, #18]
 8009ab8:	2300      	movs	r3, #0
 8009aba:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8009abc:	4b0d      	ldr	r3, [pc, #52]	@ (8009af4 <SVCCTL_InitCustomSvc+0x14c>)
 8009abe:	8818      	ldrh	r0, [r3, #0]
 8009ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8009b00 <SVCCTL_InitCustomSvc+0x158>)
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	1d3a      	adds	r2, r7, #4
 8009ac6:	490f      	ldr	r1, [pc, #60]	@ (8009b04 <SVCCTL_InitCustomSvc+0x15c>)
 8009ac8:	9105      	str	r1, [sp, #20]
 8009aca:	2100      	movs	r1, #0
 8009acc:	9104      	str	r1, [sp, #16]
 8009ace:	2110      	movs	r1, #16
 8009ad0:	9103      	str	r1, [sp, #12]
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	9102      	str	r1, [sp, #8]
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	9101      	str	r1, [sp, #4]
 8009ada:	2114      	movs	r1, #20
 8009adc:	9100      	str	r1, [sp, #0]
 8009ade:	2102      	movs	r1, #2
 8009ae0:	f7fd fe5e 	bl	80077a0 <aci_gatt_add_char>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8009ae8:	bf00      	nop
}
 8009aea:	3718      	adds	r7, #24
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	08009839 	.word	0x08009839
 8009af4:	200007cc 	.word	0x200007cc
 8009af8:	20000020 	.word	0x20000020
 8009afc:	200007ce 	.word	0x200007ce
 8009b00:	20000022 	.word	0x20000022
 8009b04:	200007d0 	.word	0x200007d0

08009b08 <Custom_STM_App_Update_Char_Ext>:
 * @param  CharOpcode: Characteristic identifier
 * @param  pPayload: Characteristic value
 *
 */
tBleStatus Custom_STM_App_Update_Char_Ext(uint16_t Connection_Handle, Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8009b08:	b590      	push	{r4, r7, lr}
 8009b0a:	b087      	sub	sp, #28
 8009b0c:	af02      	add	r7, sp, #8
 8009b0e:	4603      	mov	r3, r0
 8009b10:	603a      	str	r2, [r7, #0]
 8009b12:	80fb      	strh	r3, [r7, #6]
 8009b14:	460b      	mov	r3, r1
 8009b16:	717b      	strb	r3, [r7, #5]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009b18:	2392      	movs	r3, #146	@ 0x92
 8009b1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_Ext_1 */

  /* USER CODE END Custom_STM_App_Update_Char_Ext_1 */

  switch (CharOpcode)
 8009b1c:	797b      	ldrb	r3, [r7, #5]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d002      	beq.n	8009b28 <Custom_STM_App_Update_Char_Ext+0x20>
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d00d      	beq.n	8009b42 <Custom_STM_App_Update_Char_Ext+0x3a>
	  Generic_STM_App_Update_Char_Ext(Connection_Handle, CustomContext.CustomMysvcHdle, CustomContext.CustomMycharnotifyHdle, SizeMycharnotify, pPayload);

      break;

    default:
      break;
 8009b26:	e019      	b.n	8009b5c <Custom_STM_App_Update_Char_Ext+0x54>
	  Generic_STM_App_Update_Char_Ext(Connection_Handle, CustomContext.CustomMysvcHdle, CustomContext.CustomMycharwriteHdle, SizeMycharwrite, pPayload);
 8009b28:	4b0f      	ldr	r3, [pc, #60]	@ (8009b68 <Custom_STM_App_Update_Char_Ext+0x60>)
 8009b2a:	8819      	ldrh	r1, [r3, #0]
 8009b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8009b68 <Custom_STM_App_Update_Char_Ext+0x60>)
 8009b2e:	885a      	ldrh	r2, [r3, #2]
 8009b30:	4b0e      	ldr	r3, [pc, #56]	@ (8009b6c <Custom_STM_App_Update_Char_Ext+0x64>)
 8009b32:	881c      	ldrh	r4, [r3, #0]
 8009b34:	88f8      	ldrh	r0, [r7, #6]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	9300      	str	r3, [sp, #0]
 8009b3a:	4623      	mov	r3, r4
 8009b3c:	f000 f81a 	bl	8009b74 <Generic_STM_App_Update_Char_Ext>
      break;
 8009b40:	e00c      	b.n	8009b5c <Custom_STM_App_Update_Char_Ext+0x54>
	  Generic_STM_App_Update_Char_Ext(Connection_Handle, CustomContext.CustomMysvcHdle, CustomContext.CustomMycharnotifyHdle, SizeMycharnotify, pPayload);
 8009b42:	4b09      	ldr	r3, [pc, #36]	@ (8009b68 <Custom_STM_App_Update_Char_Ext+0x60>)
 8009b44:	8819      	ldrh	r1, [r3, #0]
 8009b46:	4b08      	ldr	r3, [pc, #32]	@ (8009b68 <Custom_STM_App_Update_Char_Ext+0x60>)
 8009b48:	889a      	ldrh	r2, [r3, #4]
 8009b4a:	4b09      	ldr	r3, [pc, #36]	@ (8009b70 <Custom_STM_App_Update_Char_Ext+0x68>)
 8009b4c:	881c      	ldrh	r4, [r3, #0]
 8009b4e:	88f8      	ldrh	r0, [r7, #6]
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	9300      	str	r3, [sp, #0]
 8009b54:	4623      	mov	r3, r4
 8009b56:	f000 f80d 	bl	8009b74 <Generic_STM_App_Update_Char_Ext>
      break;
 8009b5a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_Ext_2 */

  /* USER CODE END Custom_STM_App_Update_Char_Ext_2 */

  return ret;
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd90      	pop	{r4, r7, pc}
 8009b66:	bf00      	nop
 8009b68:	200007cc 	.word	0x200007cc
 8009b6c:	20000020 	.word	0x20000020
 8009b70:	20000022 	.word	0x20000022

08009b74 <Generic_STM_App_Update_Char_Ext>:

static tBleStatus Generic_STM_App_Update_Char_Ext(uint16_t ConnectionHandle, uint16_t ServiceHandle, uint16_t CharHandle, uint16_t CharValueLen, uint8_t *pPayload)
{
 8009b74:	b590      	push	{r4, r7, lr}
 8009b76:	b089      	sub	sp, #36	@ 0x24
 8009b78:	af04      	add	r7, sp, #16
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	4608      	mov	r0, r1
 8009b7e:	4611      	mov	r1, r2
 8009b80:	461a      	mov	r2, r3
 8009b82:	4623      	mov	r3, r4
 8009b84:	80fb      	strh	r3, [r7, #6]
 8009b86:	4603      	mov	r3, r0
 8009b88:	80bb      	strh	r3, [r7, #4]
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	807b      	strh	r3, [r7, #2]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009b92:	2392      	movs	r3, #146	@ 0x92
 8009b94:	73fb      	strb	r3, [r7, #15]

  ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 8009b96:	887a      	ldrh	r2, [r7, #2]
 8009b98:	88b9      	ldrh	r1, [r7, #4]
 8009b9a:	88f8      	ldrh	r0, [r7, #6]
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
 8009b9e:	9303      	str	r3, [sp, #12]
 8009ba0:	23f3      	movs	r3, #243	@ 0xf3
 8009ba2:	9302      	str	r3, [sp, #8]
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9301      	str	r3, [sp, #4]
 8009ba8:	883b      	ldrh	r3, [r7, #0]
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	2300      	movs	r3, #0
 8009bae:	f7fd fffd 	bl	8007bac <aci_gatt_update_char_value_ext>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("  Success: aci_gatt_update_char_value_ext command, part 1\n\r");
  }
  /* USER CODE BEGIN Custom_STM_App_Update_Char_Ext_Service_1_Char_1*/

  if (CharValueLen-243<=243)
 8009bb6:	883b      	ldrh	r3, [r7, #0]
 8009bb8:	f5b3 7ff3 	cmp.w	r3, #486	@ 0x1e6
 8009bbc:	d815      	bhi.n	8009bea <Generic_STM_App_Update_Char_Ext+0x76>
  {
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 8009bbe:	883b      	ldrh	r3, [r7, #0]
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	330d      	adds	r3, #13
 8009bc4:	b2db      	uxtb	r3, r3
                                         CharHandle,
                                         1, /* update type:0 do not notify, 1 notify, 2 indicate */
                                         CharValueLen, /* charValueLen */
                                         243, /* value offset */
                                         CharValueLen-243, /* value length */
                                         (uint8_t *)  ((pPayload)+243));
 8009bc6:	6a3a      	ldr	r2, [r7, #32]
 8009bc8:	32f3      	adds	r2, #243	@ 0xf3
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 8009bca:	887c      	ldrh	r4, [r7, #2]
 8009bcc:	88b9      	ldrh	r1, [r7, #4]
 8009bce:	88f8      	ldrh	r0, [r7, #6]
 8009bd0:	9203      	str	r2, [sp, #12]
 8009bd2:	9302      	str	r3, [sp, #8]
 8009bd4:	23f3      	movs	r3, #243	@ 0xf3
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	883b      	ldrh	r3, [r7, #0]
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	2301      	movs	r3, #1
 8009bde:	4622      	mov	r2, r4
 8009be0:	f7fd ffe4 	bl	8007bac <aci_gatt_update_char_value_ext>
 8009be4:	4603      	mov	r3, r0
 8009be6:	73fb      	strb	r3, [r7, #15]
 8009be8:	e027      	b.n	8009c3a <Generic_STM_App_Update_Char_Ext+0xc6>
                                         CharHandle,
                                         0, /* update type:0 do not notify, 1 notify, 2 indicate */
                                         CharValueLen, /* charValueLen */
                                         243, /* value offset */
                                         243, /* value length */
                                         (uint8_t *)  ((pPayload)+243));
 8009bea:	6a3b      	ldr	r3, [r7, #32]
 8009bec:	33f3      	adds	r3, #243	@ 0xf3
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 8009bee:	887a      	ldrh	r2, [r7, #2]
 8009bf0:	88b9      	ldrh	r1, [r7, #4]
 8009bf2:	88f8      	ldrh	r0, [r7, #6]
 8009bf4:	9303      	str	r3, [sp, #12]
 8009bf6:	23f3      	movs	r3, #243	@ 0xf3
 8009bf8:	9302      	str	r3, [sp, #8]
 8009bfa:	23f3      	movs	r3, #243	@ 0xf3
 8009bfc:	9301      	str	r3, [sp, #4]
 8009bfe:	883b      	ldrh	r3, [r7, #0]
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	2300      	movs	r3, #0
 8009c04:	f7fd ffd2 	bl	8007bac <aci_gatt_update_char_value_ext>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gatt_update_char_value_ext command, part 3\n\r");
    }
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 8009c0c:	883b      	ldrh	r3, [r7, #0]
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	331a      	adds	r3, #26
 8009c12:	b2db      	uxtb	r3, r3
                                         CharHandle,
                                         1, /* update type:0 do not notify, 1 notify, 2 indicate */
                                         CharValueLen, /* charValueLen */
                                         243+243, /* value offset */
                                         CharValueLen-243-243, /* value length */
                                         (uint8_t *)  ((pPayload)+243+243));
 8009c14:	6a3a      	ldr	r2, [r7, #32]
 8009c16:	f502 72f3 	add.w	r2, r2, #486	@ 0x1e6
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 8009c1a:	887c      	ldrh	r4, [r7, #2]
 8009c1c:	88b9      	ldrh	r1, [r7, #4]
 8009c1e:	88f8      	ldrh	r0, [r7, #6]
 8009c20:	9203      	str	r2, [sp, #12]
 8009c22:	9302      	str	r3, [sp, #8]
 8009c24:	f44f 73f3 	mov.w	r3, #486	@ 0x1e6
 8009c28:	9301      	str	r3, [sp, #4]
 8009c2a:	883b      	ldrh	r3, [r7, #0]
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	2301      	movs	r3, #1
 8009c30:	4622      	mov	r2, r4
 8009c32:	f7fd ffbb 	bl	8007bac <aci_gatt_update_char_value_ext>
 8009c36:	4603      	mov	r3, r0
 8009c38:	73fb      	strb	r3, [r7, #15]
    else
    {
      APP_DBG_MSG("  Success: aci_gatt_update_char_value_ext command, part 4\n\r");
    }
  }
  return ret;
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3714      	adds	r7, #20
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd90      	pop	{r4, r7, pc}

08009c44 <LL_PWR_EnableBootC2>:
{
 8009c44:	b480      	push	{r7}
 8009c46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8009c48:	4b05      	ldr	r3, [pc, #20]	@ (8009c60 <LL_PWR_EnableBootC2+0x1c>)
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	4a04      	ldr	r2, [pc, #16]	@ (8009c60 <LL_PWR_EnableBootC2+0x1c>)
 8009c4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c52:	60d3      	str	r3, [r2, #12]
}
 8009c54:	bf00      	nop
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	58000400 	.word	0x58000400

08009c64 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8009c6c:	4b06      	ldr	r3, [pc, #24]	@ (8009c88 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009c6e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8009c72:	4905      	ldr	r1, [pc, #20]	@ (8009c88 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8009c7c:	bf00      	nop
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr
 8009c88:	58000800 	.word	0x58000800

08009c8c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009c94:	4b05      	ldr	r3, [pc, #20]	@ (8009cac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009c96:	6a1a      	ldr	r2, [r3, #32]
 8009c98:	4904      	ldr	r1, [pc, #16]	@ (8009cac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	620b      	str	r3, [r1, #32]
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	58000800 	.word	0x58000800

08009cb0 <LL_AHB3_GRP1_EnableClock>:
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009cbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009cbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ccc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
}
 8009cd6:	bf00      	nop
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr

08009ce2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009ce2:	b480      	push	{r7}
 8009ce4:	b085      	sub	sp, #20
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8009cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009cee:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009cf2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d02:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4013      	ands	r3, r2
 8009d0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
}
 8009d0e:	bf00      	nop
 8009d10:	3714      	adds	r7, #20
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	601a      	str	r2, [r3, #0]
}
 8009d2e:	bf00      	nop
 8009d30:	370c      	adds	r7, #12
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b083      	sub	sp, #12
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f043 0201 	orr.w	r2, r3, #1
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	601a      	str	r2, [r3, #0]
}
 8009d4e:	bf00      	nop
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b083      	sub	sp, #12
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	041b      	lsls	r3, r3, #16
 8009d6c:	43db      	mvns	r3, r3
 8009d6e:	401a      	ands	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	605a      	str	r2, [r3, #4]
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	685a      	ldr	r2, [r3, #4]
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	041b      	lsls	r3, r3, #16
 8009d92:	431a      	orrs	r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	605a      	str	r2, [r3, #4]
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	685a      	ldr	r2, [r3, #4]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	43db      	mvns	r3, r3
 8009db6:	401a      	ands	r2, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	605a      	str	r2, [r3, #4]
}
 8009dbc:	bf00      	nop
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	683a      	ldr	r2, [r7, #0]
 8009dd6:	609a      	str	r2, [r3, #8]
}
 8009dd8:	bf00      	nop
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	041a      	lsls	r2, r3, #16
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	609a      	str	r2, [r3, #8]
}
 8009df6:	bf00      	nop
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009e02:	b480      	push	{r7}
 8009e04:	b083      	sub	sp, #12
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	68da      	ldr	r2, [r3, #12]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	4013      	ands	r3, r2
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d101      	bne.n	8009e1e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e000      	b.n	8009e20 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	69da      	ldr	r2, [r3, #28]
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d101      	bne.n	8009e48 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009e44:	2301      	movs	r3, #1
 8009e46:	e000      	b.n	8009e4a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	370c      	adds	r7, #12
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr
	...

08009e58 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8009e5c:	2102      	movs	r1, #2
 8009e5e:	4818      	ldr	r0, [pc, #96]	@ (8009ec0 <HW_IPCC_Rx_Handler+0x68>)
 8009e60:	f7ff ffe4 	bl	8009e2c <LL_C2_IPCC_IsActiveFlag_CHx>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d008      	beq.n	8009e7c <HW_IPCC_Rx_Handler+0x24>
 8009e6a:	4b15      	ldr	r3, [pc, #84]	@ (8009ec0 <HW_IPCC_Rx_Handler+0x68>)
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	f003 0302 	and.w	r3, r3, #2
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d102      	bne.n	8009e7c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8009e76:	f000 f8d5 	bl	800a024 <HW_IPCC_SYS_EvtHandler>
 8009e7a:	e01e      	b.n	8009eba <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009e7c:	2101      	movs	r1, #1
 8009e7e:	4810      	ldr	r0, [pc, #64]	@ (8009ec0 <HW_IPCC_Rx_Handler+0x68>)
 8009e80:	f7ff ffd4 	bl	8009e2c <LL_C2_IPCC_IsActiveFlag_CHx>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d008      	beq.n	8009e9c <HW_IPCC_Rx_Handler+0x44>
 8009e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ec0 <HW_IPCC_Rx_Handler+0x68>)
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d102      	bne.n	8009e9c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8009e96:	f000 f889 	bl	8009fac <HW_IPCC_BLE_EvtHandler>
 8009e9a:	e00e      	b.n	8009eba <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8009e9c:	2108      	movs	r1, #8
 8009e9e:	4808      	ldr	r0, [pc, #32]	@ (8009ec0 <HW_IPCC_Rx_Handler+0x68>)
 8009ea0:	f7ff ffc4 	bl	8009e2c <LL_C2_IPCC_IsActiveFlag_CHx>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d008      	beq.n	8009ebc <HW_IPCC_Rx_Handler+0x64>
 8009eaa:	4b05      	ldr	r3, [pc, #20]	@ (8009ec0 <HW_IPCC_Rx_Handler+0x68>)
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	f003 0308 	and.w	r3, r3, #8
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d102      	bne.n	8009ebc <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8009eb6:	f000 f901 	bl	800a0bc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8009eba:	bf00      	nop
 8009ebc:	bf00      	nop
}
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	58000c00 	.word	0x58000c00

08009ec4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009ec8:	2102      	movs	r1, #2
 8009eca:	4818      	ldr	r0, [pc, #96]	@ (8009f2c <HW_IPCC_Tx_Handler+0x68>)
 8009ecc:	f7ff ff99 	bl	8009e02 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d108      	bne.n	8009ee8 <HW_IPCC_Tx_Handler+0x24>
 8009ed6:	4b15      	ldr	r3, [pc, #84]	@ (8009f2c <HW_IPCC_Tx_Handler+0x68>)
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d102      	bne.n	8009ee8 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8009ee2:	f000 f893 	bl	800a00c <HW_IPCC_SYS_CmdEvtHandler>
 8009ee6:	e01e      	b.n	8009f26 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009ee8:	2108      	movs	r1, #8
 8009eea:	4810      	ldr	r0, [pc, #64]	@ (8009f2c <HW_IPCC_Tx_Handler+0x68>)
 8009eec:	f7ff ff89 	bl	8009e02 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d108      	bne.n	8009f08 <HW_IPCC_Tx_Handler+0x44>
 8009ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8009f2c <HW_IPCC_Tx_Handler+0x68>)
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d102      	bne.n	8009f08 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009f02:	f000 f8bd 	bl	800a080 <HW_IPCC_MM_FreeBufHandler>
 8009f06:	e00e      	b.n	8009f26 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009f08:	2120      	movs	r1, #32
 8009f0a:	4808      	ldr	r0, [pc, #32]	@ (8009f2c <HW_IPCC_Tx_Handler+0x68>)
 8009f0c:	f7ff ff79 	bl	8009e02 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d108      	bne.n	8009f28 <HW_IPCC_Tx_Handler+0x64>
 8009f16:	4b05      	ldr	r3, [pc, #20]	@ (8009f2c <HW_IPCC_Tx_Handler+0x68>)
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d102      	bne.n	8009f28 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009f22:	f000 f84f 	bl	8009fc4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009f26:	bf00      	nop
 8009f28:	bf00      	nop
}
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	58000c00 	.word	0x58000c00

08009f30 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009f34:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009f38:	f7ff fed3 	bl	8009ce2 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8009f3c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009f40:	f7ff fea4 	bl	8009c8c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009f44:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009f48:	f7ff fe8c 	bl	8009c64 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8009f4c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8009f4e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009f50:	f7ff fe78 	bl	8009c44 <LL_PWR_EnableBootC2>

  return;
 8009f54:	bf00      	nop
}
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8009f5c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009f60:	f7ff fea6 	bl	8009cb0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8009f64:	4806      	ldr	r0, [pc, #24]	@ (8009f80 <HW_IPCC_Init+0x28>)
 8009f66:	f7ff fee8 	bl	8009d3a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8009f6a:	4805      	ldr	r0, [pc, #20]	@ (8009f80 <HW_IPCC_Init+0x28>)
 8009f6c:	f7ff fed5 	bl	8009d1a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009f70:	202c      	movs	r0, #44	@ 0x2c
 8009f72:	f7f9 fa0c 	bl	800338e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009f76:	202d      	movs	r0, #45	@ 0x2d
 8009f78:	f7f9 fa09 	bl	800338e <HAL_NVIC_EnableIRQ>

  return;
 8009f7c:	bf00      	nop
}
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	58000c00 	.word	0x58000c00

08009f84 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009f88:	2101      	movs	r1, #1
 8009f8a:	4802      	ldr	r0, [pc, #8]	@ (8009f94 <HW_IPCC_BLE_Init+0x10>)
 8009f8c:	f7ff ff0a 	bl	8009da4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009f90:	bf00      	nop
}
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	58000c00 	.word	0x58000c00

08009f98 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8009f9c:	2101      	movs	r1, #1
 8009f9e:	4802      	ldr	r0, [pc, #8]	@ (8009fa8 <HW_IPCC_BLE_SendCmd+0x10>)
 8009fa0:	f7ff ff20 	bl	8009de4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009fa4:	bf00      	nop
}
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	58000c00 	.word	0x58000c00

08009fac <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009fb0:	f7fe fe34 	bl	8008c1c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009fb4:	2101      	movs	r1, #1
 8009fb6:	4802      	ldr	r0, [pc, #8]	@ (8009fc0 <HW_IPCC_BLE_EvtHandler+0x14>)
 8009fb8:	f7ff ff06 	bl	8009dc8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009fbc:	bf00      	nop
}
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	58000c00 	.word	0x58000c00

08009fc4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009fc8:	2120      	movs	r1, #32
 8009fca:	4803      	ldr	r0, [pc, #12]	@ (8009fd8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009fcc:	f7ff fed8 	bl	8009d80 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009fd0:	f7fe fe54 	bl	8008c7c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009fd4:	bf00      	nop
}
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	58000c00 	.word	0x58000c00

08009fdc <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009fe0:	2102      	movs	r1, #2
 8009fe2:	4802      	ldr	r0, [pc, #8]	@ (8009fec <HW_IPCC_SYS_Init+0x10>)
 8009fe4:	f7ff fede 	bl	8009da4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009fe8:	bf00      	nop
}
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	58000c00 	.word	0x58000c00

08009ff0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009ff4:	2102      	movs	r1, #2
 8009ff6:	4804      	ldr	r0, [pc, #16]	@ (800a008 <HW_IPCC_SYS_SendCmd+0x18>)
 8009ff8:	f7ff fef4 	bl	8009de4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009ffc:	2102      	movs	r1, #2
 8009ffe:	4802      	ldr	r0, [pc, #8]	@ (800a008 <HW_IPCC_SYS_SendCmd+0x18>)
 800a000:	f7ff feab 	bl	8009d5a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800a004:	bf00      	nop
}
 800a006:	bd80      	pop	{r7, pc}
 800a008:	58000c00 	.word	0x58000c00

0800a00c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a010:	2102      	movs	r1, #2
 800a012:	4803      	ldr	r0, [pc, #12]	@ (800a020 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800a014:	f7ff feb4 	bl	8009d80 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800a018:	f7fe fe80 	bl	8008d1c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800a01c:	bf00      	nop
}
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	58000c00 	.word	0x58000c00

0800a024 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800a028:	f7fe fe8e 	bl	8008d48 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a02c:	2102      	movs	r1, #2
 800a02e:	4802      	ldr	r0, [pc, #8]	@ (800a038 <HW_IPCC_SYS_EvtHandler+0x14>)
 800a030:	f7ff feca 	bl	8009dc8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a034:	bf00      	nop
}
 800a036:	bd80      	pop	{r7, pc}
 800a038:	58000c00 	.word	0x58000c00

0800a03c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800a044:	2108      	movs	r1, #8
 800a046:	480c      	ldr	r0, [pc, #48]	@ (800a078 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a048:	f7ff fedb 	bl	8009e02 <LL_C1_IPCC_IsActiveFlag_CHx>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d007      	beq.n	800a062 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800a052:	4a0a      	ldr	r2, [pc, #40]	@ (800a07c <HW_IPCC_MM_SendFreeBuf+0x40>)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a058:	2108      	movs	r1, #8
 800a05a:	4807      	ldr	r0, [pc, #28]	@ (800a078 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a05c:	f7ff fe7d 	bl	8009d5a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800a060:	e006      	b.n	800a070 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a066:	2108      	movs	r1, #8
 800a068:	4803      	ldr	r0, [pc, #12]	@ (800a078 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a06a:	f7ff febb 	bl	8009de4 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800a06e:	bf00      	nop
}
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	58000c00 	.word	0x58000c00
 800a07c:	200007d4 	.word	0x200007d4

0800a080 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a084:	2108      	movs	r1, #8
 800a086:	4806      	ldr	r0, [pc, #24]	@ (800a0a0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a088:	f7ff fe7a 	bl	8009d80 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800a08c:	4b05      	ldr	r3, [pc, #20]	@ (800a0a4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a092:	2108      	movs	r1, #8
 800a094:	4802      	ldr	r0, [pc, #8]	@ (800a0a0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a096:	f7ff fea5 	bl	8009de4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a09a:	bf00      	nop
}
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	58000c00 	.word	0x58000c00
 800a0a4:	200007d4 	.word	0x200007d4

0800a0a8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a0ac:	2108      	movs	r1, #8
 800a0ae:	4802      	ldr	r0, [pc, #8]	@ (800a0b8 <HW_IPCC_TRACES_Init+0x10>)
 800a0b0:	f7ff fe78 	bl	8009da4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a0b4:	bf00      	nop
}
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	58000c00 	.word	0x58000c00

0800a0bc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800a0c0:	f7fe feea 	bl	8008e98 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a0c4:	2108      	movs	r1, #8
 800a0c6:	4802      	ldr	r0, [pc, #8]	@ (800a0d0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800a0c8:	f7ff fe7e 	bl	8009dc8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a0cc:	bf00      	nop
}
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	58000c00 	.word	0x58000c00

0800a0d4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a0d8:	4b05      	ldr	r3, [pc, #20]	@ (800a0f0 <UTIL_LPM_Init+0x1c>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a0de:	4b05      	ldr	r3, [pc, #20]	@ (800a0f4 <UTIL_LPM_Init+0x20>)
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a0e4:	bf00      	nop
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	200007d8 	.word	0x200007d8
 800a0f4:	200007dc 	.word	0x200007dc

0800a0f8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b087      	sub	sp, #28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	460b      	mov	r3, r1
 800a102:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a104:	f3ef 8310 	mrs	r3, PRIMASK
 800a108:	613b      	str	r3, [r7, #16]
  return(result);
 800a10a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a10c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a10e:	b672      	cpsid	i
}
 800a110:	bf00      	nop
  
  switch(state)
 800a112:	78fb      	ldrb	r3, [r7, #3]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d008      	beq.n	800a12a <UTIL_LPM_SetOffMode+0x32>
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d10e      	bne.n	800a13a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a11c:	4b0d      	ldr	r3, [pc, #52]	@ (800a154 <UTIL_LPM_SetOffMode+0x5c>)
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4313      	orrs	r3, r2
 800a124:	4a0b      	ldr	r2, [pc, #44]	@ (800a154 <UTIL_LPM_SetOffMode+0x5c>)
 800a126:	6013      	str	r3, [r2, #0]
      break;
 800a128:	e008      	b.n	800a13c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	43da      	mvns	r2, r3
 800a12e:	4b09      	ldr	r3, [pc, #36]	@ (800a154 <UTIL_LPM_SetOffMode+0x5c>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4013      	ands	r3, r2
 800a134:	4a07      	ldr	r2, [pc, #28]	@ (800a154 <UTIL_LPM_SetOffMode+0x5c>)
 800a136:	6013      	str	r3, [r2, #0]
      break;
 800a138:	e000      	b.n	800a13c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a13a:	bf00      	nop
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f383 8810 	msr	PRIMASK, r3
}
 800a146:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a148:	bf00      	nop
 800a14a:	371c      	adds	r7, #28
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr
 800a154:	200007dc 	.word	0x200007dc

0800a158 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b090      	sub	sp, #64	@ 0x40
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a160:	4b73      	ldr	r3, [pc, #460]	@ (800a330 <UTIL_SEQ_Run+0x1d8>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800a166:	4b72      	ldr	r3, [pc, #456]	@ (800a330 <UTIL_SEQ_Run+0x1d8>)
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4013      	ands	r3, r2
 800a16e:	4a70      	ldr	r2, [pc, #448]	@ (800a330 <UTIL_SEQ_Run+0x1d8>)
 800a170:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800a172:	4b70      	ldr	r3, [pc, #448]	@ (800a334 <UTIL_SEQ_Run+0x1dc>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800a178:	4b6f      	ldr	r3, [pc, #444]	@ (800a338 <UTIL_SEQ_Run+0x1e0>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800a17e:	4b6f      	ldr	r3, [pc, #444]	@ (800a33c <UTIL_SEQ_Run+0x1e4>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800a184:	4b6e      	ldr	r3, [pc, #440]	@ (800a340 <UTIL_SEQ_Run+0x1e8>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a18a:	e08d      	b.n	800a2a8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a190:	e002      	b.n	800a198 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800a192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a194:	3301      	adds	r3, #1
 800a196:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a198:	4a6a      	ldr	r2, [pc, #424]	@ (800a344 <UTIL_SEQ_Run+0x1ec>)
 800a19a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a19c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a2:	401a      	ands	r2, r3
 800a1a4:	4b62      	ldr	r3, [pc, #392]	@ (800a330 <UTIL_SEQ_Run+0x1d8>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d0f1      	beq.n	800a192 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a1ae:	4a65      	ldr	r2, [pc, #404]	@ (800a344 <UTIL_SEQ_Run+0x1ec>)
 800a1b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1b2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b8:	401a      	ands	r2, r3
 800a1ba:	4b5d      	ldr	r3, [pc, #372]	@ (800a330 <UTIL_SEQ_Run+0x1d8>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4013      	ands	r3, r2
 800a1c0:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a1c2:	4a60      	ldr	r2, [pc, #384]	@ (800a344 <UTIL_SEQ_Run+0x1ec>)
 800a1c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1c6:	00db      	lsls	r3, r3, #3
 800a1c8:	4413      	add	r3, r2
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ce:	4013      	ands	r3, r2
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d106      	bne.n	800a1e2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a1d4:	4a5b      	ldr	r2, [pc, #364]	@ (800a344 <UTIL_SEQ_Run+0x1ec>)
 800a1d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1d8:	00db      	lsls	r3, r3, #3
 800a1da:	4413      	add	r3, r2
 800a1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a1e2:	4a58      	ldr	r2, [pc, #352]	@ (800a344 <UTIL_SEQ_Run+0x1ec>)
 800a1e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1e6:	00db      	lsls	r3, r3, #3
 800a1e8:	4413      	add	r3, r2
 800a1ea:	685a      	ldr	r2, [r3, #4]
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f000 f9b3 	bl	800a55c <SEQ_BitPosition>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	4b53      	ldr	r3, [pc, #332]	@ (800a348 <UTIL_SEQ_Run+0x1f0>)
 800a1fc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a1fe:	4a51      	ldr	r2, [pc, #324]	@ (800a344 <UTIL_SEQ_Run+0x1ec>)
 800a200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a202:	00db      	lsls	r3, r3, #3
 800a204:	4413      	add	r3, r2
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	4b4f      	ldr	r3, [pc, #316]	@ (800a348 <UTIL_SEQ_Run+0x1f0>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2101      	movs	r1, #1
 800a20e:	fa01 f303 	lsl.w	r3, r1, r3
 800a212:	43db      	mvns	r3, r3
 800a214:	401a      	ands	r2, r3
 800a216:	494b      	ldr	r1, [pc, #300]	@ (800a344 <UTIL_SEQ_Run+0x1ec>)
 800a218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a21a:	00db      	lsls	r3, r3, #3
 800a21c:	440b      	add	r3, r1
 800a21e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a220:	f3ef 8310 	mrs	r3, PRIMASK
 800a224:	61bb      	str	r3, [r7, #24]
  return(result);
 800a226:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a228:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a22a:	b672      	cpsid	i
}
 800a22c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a22e:	4b46      	ldr	r3, [pc, #280]	@ (800a348 <UTIL_SEQ_Run+0x1f0>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2201      	movs	r2, #1
 800a234:	fa02 f303 	lsl.w	r3, r2, r3
 800a238:	43da      	mvns	r2, r3
 800a23a:	4b3e      	ldr	r3, [pc, #248]	@ (800a334 <UTIL_SEQ_Run+0x1dc>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4013      	ands	r3, r2
 800a240:	4a3c      	ldr	r2, [pc, #240]	@ (800a334 <UTIL_SEQ_Run+0x1dc>)
 800a242:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a244:	2302      	movs	r3, #2
 800a246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a248:	e013      	b.n	800a272 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a24a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a24c:	3b01      	subs	r3, #1
 800a24e:	4a3d      	ldr	r2, [pc, #244]	@ (800a344 <UTIL_SEQ_Run+0x1ec>)
 800a250:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a254:	4b3c      	ldr	r3, [pc, #240]	@ (800a348 <UTIL_SEQ_Run+0x1f0>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2201      	movs	r2, #1
 800a25a:	fa02 f303 	lsl.w	r3, r2, r3
 800a25e:	43da      	mvns	r2, r3
 800a260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a262:	3b01      	subs	r3, #1
 800a264:	400a      	ands	r2, r1
 800a266:	4937      	ldr	r1, [pc, #220]	@ (800a344 <UTIL_SEQ_Run+0x1ec>)
 800a268:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a26c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a26e:	3b01      	subs	r3, #1
 800a270:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1e8      	bne.n	800a24a <UTIL_SEQ_Run+0xf2>
 800a278:	6a3b      	ldr	r3, [r7, #32]
 800a27a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	f383 8810 	msr	PRIMASK, r3
}
 800a282:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a284:	4b30      	ldr	r3, [pc, #192]	@ (800a348 <UTIL_SEQ_Run+0x1f0>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a30      	ldr	r2, [pc, #192]	@ (800a34c <UTIL_SEQ_Run+0x1f4>)
 800a28a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a28e:	4798      	blx	r3

    local_taskset = TaskSet;
 800a290:	4b28      	ldr	r3, [pc, #160]	@ (800a334 <UTIL_SEQ_Run+0x1dc>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800a296:	4b28      	ldr	r3, [pc, #160]	@ (800a338 <UTIL_SEQ_Run+0x1e0>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800a29c:	4b27      	ldr	r3, [pc, #156]	@ (800a33c <UTIL_SEQ_Run+0x1e4>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800a2a2:	4b27      	ldr	r3, [pc, #156]	@ (800a340 <UTIL_SEQ_Run+0x1e8>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a2a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ac:	401a      	ands	r2, r3
 800a2ae:	4b20      	ldr	r3, [pc, #128]	@ (800a330 <UTIL_SEQ_Run+0x1d8>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d005      	beq.n	800a2c4 <UTIL_SEQ_Run+0x16c>
 800a2b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2bc:	4013      	ands	r3, r2
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f43f af64 	beq.w	800a18c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a2c4:	4b20      	ldr	r3, [pc, #128]	@ (800a348 <UTIL_SEQ_Run+0x1f0>)
 800a2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ca:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a2cc:	f000 f938 	bl	800a540 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2d0:	f3ef 8310 	mrs	r3, PRIMASK
 800a2d4:	613b      	str	r3, [r7, #16]
  return(result);
 800a2d6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a2d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2da:	b672      	cpsid	i
}
 800a2dc:	bf00      	nop
  local_taskset = TaskSet;
 800a2de:	4b15      	ldr	r3, [pc, #84]	@ (800a334 <UTIL_SEQ_Run+0x1dc>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800a2e4:	4b14      	ldr	r3, [pc, #80]	@ (800a338 <UTIL_SEQ_Run+0x1e0>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800a2ea:	4b14      	ldr	r3, [pc, #80]	@ (800a33c <UTIL_SEQ_Run+0x1e4>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a2f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f4:	401a      	ands	r2, r3
 800a2f6:	4b0e      	ldr	r3, [pc, #56]	@ (800a330 <UTIL_SEQ_Run+0x1d8>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d107      	bne.n	800a310 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a300:	4b0f      	ldr	r3, [pc, #60]	@ (800a340 <UTIL_SEQ_Run+0x1e8>)
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a306:	4013      	ands	r3, r2
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d101      	bne.n	800a310 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a30c:	f7f7 f882 	bl	8001414 <UTIL_SEQ_Idle>
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f383 8810 	msr	PRIMASK, r3
}
 800a31a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a31c:	f000 f917 	bl	800a54e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a320:	4a03      	ldr	r2, [pc, #12]	@ (800a330 <UTIL_SEQ_Run+0x1d8>)
 800a322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a324:	6013      	str	r3, [r2, #0]

  return;
 800a326:	bf00      	nop
}
 800a328:	3740      	adds	r7, #64	@ 0x40
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	20000028 	.word	0x20000028
 800a334:	200007e0 	.word	0x200007e0
 800a338:	200007e4 	.word	0x200007e4
 800a33c:	20000024 	.word	0x20000024
 800a340:	200007e8 	.word	0x200007e8
 800a344:	20000870 	.word	0x20000870
 800a348:	200007ec 	.word	0x200007ec
 800a34c:	200007f0 	.word	0x200007f0

0800a350 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b088      	sub	sp, #32
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a35c:	f3ef 8310 	mrs	r3, PRIMASK
 800a360:	617b      	str	r3, [r7, #20]
  return(result);
 800a362:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a364:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a366:	b672      	cpsid	i
}
 800a368:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f000 f8f6 	bl	800a55c <SEQ_BitPosition>
 800a370:	4603      	mov	r3, r0
 800a372:	4619      	mov	r1, r3
 800a374:	4a06      	ldr	r2, [pc, #24]	@ (800a390 <UTIL_SEQ_RegTask+0x40>)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	f383 8810 	msr	PRIMASK, r3
}
 800a386:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a388:	bf00      	nop
}
 800a38a:	3720      	adds	r7, #32
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	200007f0 	.word	0x200007f0

0800a394 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a394:	b480      	push	{r7}
 800a396:	b087      	sub	sp, #28
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a39e:	f3ef 8310 	mrs	r3, PRIMASK
 800a3a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a3a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3a8:	b672      	cpsid	i
}
 800a3aa:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a3ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a3e4 <UTIL_SEQ_SetTask+0x50>)
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	4a0b      	ldr	r2, [pc, #44]	@ (800a3e4 <UTIL_SEQ_SetTask+0x50>)
 800a3b6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a3b8:	4a0b      	ldr	r2, [pc, #44]	@ (800a3e8 <UTIL_SEQ_SetTask+0x54>)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	431a      	orrs	r2, r3
 800a3c4:	4908      	ldr	r1, [pc, #32]	@ (800a3e8 <UTIL_SEQ_SetTask+0x54>)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f383 8810 	msr	PRIMASK, r3
}
 800a3d6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a3d8:	bf00      	nop
}
 800a3da:	371c      	adds	r7, #28
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	200007e0 	.word	0x200007e0
 800a3e8:	20000870 	.word	0x20000870

0800a3ec <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b087      	sub	sp, #28
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3f4:	f3ef 8310 	mrs	r3, PRIMASK
 800a3f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a3fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3fe:	b672      	cpsid	i
}
 800a400:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	43da      	mvns	r2, r3
 800a406:	4b08      	ldr	r3, [pc, #32]	@ (800a428 <UTIL_SEQ_PauseTask+0x3c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4013      	ands	r3, r2
 800a40c:	4a06      	ldr	r2, [pc, #24]	@ (800a428 <UTIL_SEQ_PauseTask+0x3c>)
 800a40e:	6013      	str	r3, [r2, #0]
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	f383 8810 	msr	PRIMASK, r3
}
 800a41a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a41c:	bf00      	nop
}
 800a41e:	371c      	adds	r7, #28
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr
 800a428:	20000024 	.word	0x20000024

0800a42c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a42c:	b480      	push	{r7}
 800a42e:	b087      	sub	sp, #28
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a434:	f3ef 8310 	mrs	r3, PRIMASK
 800a438:	60fb      	str	r3, [r7, #12]
  return(result);
 800a43a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a43c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a43e:	b672      	cpsid	i
}
 800a440:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a442:	4b09      	ldr	r3, [pc, #36]	@ (800a468 <UTIL_SEQ_ResumeTask+0x3c>)
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4313      	orrs	r3, r2
 800a44a:	4a07      	ldr	r2, [pc, #28]	@ (800a468 <UTIL_SEQ_ResumeTask+0x3c>)
 800a44c:	6013      	str	r3, [r2, #0]
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	f383 8810 	msr	PRIMASK, r3
}
 800a458:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a45a:	bf00      	nop
}
 800a45c:	371c      	adds	r7, #28
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	20000024 	.word	0x20000024

0800a46c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a46c:	b480      	push	{r7}
 800a46e:	b087      	sub	sp, #28
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a474:	f3ef 8310 	mrs	r3, PRIMASK
 800a478:	60fb      	str	r3, [r7, #12]
  return(result);
 800a47a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a47c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a47e:	b672      	cpsid	i
}
 800a480:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a482:	4b09      	ldr	r3, [pc, #36]	@ (800a4a8 <UTIL_SEQ_SetEvt+0x3c>)
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4313      	orrs	r3, r2
 800a48a:	4a07      	ldr	r2, [pc, #28]	@ (800a4a8 <UTIL_SEQ_SetEvt+0x3c>)
 800a48c:	6013      	str	r3, [r2, #0]
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	f383 8810 	msr	PRIMASK, r3
}
 800a498:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a49a:	bf00      	nop
}
 800a49c:	371c      	adds	r7, #28
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	200007e4 	.word	0x200007e4

0800a4ac <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b088      	sub	sp, #32
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a4b4:	4b1f      	ldr	r3, [pc, #124]	@ (800a534 <UTIL_SEQ_WaitEvt+0x88>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a4ba:	4b1e      	ldr	r3, [pc, #120]	@ (800a534 <UTIL_SEQ_WaitEvt+0x88>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c2:	d102      	bne.n	800a4ca <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	61fb      	str	r3, [r7, #28]
 800a4c8:	e005      	b.n	800a4d6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a4ca:	4b1a      	ldr	r3, [pc, #104]	@ (800a534 <UTIL_SEQ_WaitEvt+0x88>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4d4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a4d6:	4b18      	ldr	r3, [pc, #96]	@ (800a538 <UTIL_SEQ_WaitEvt+0x8c>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a4dc:	4a16      	ldr	r2, [pc, #88]	@ (800a538 <UTIL_SEQ_WaitEvt+0x8c>)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a4e2:	e003      	b.n	800a4ec <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a4e4:	6879      	ldr	r1, [r7, #4]
 800a4e6:	69f8      	ldr	r0, [r7, #28]
 800a4e8:	f7f6 ff9b 	bl	8001422 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800a4ec:	4b13      	ldr	r3, [pc, #76]	@ (800a53c <UTIL_SEQ_WaitEvt+0x90>)
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4013      	ands	r3, r2
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d0f5      	beq.n	800a4e4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a4f8:	4a0e      	ldr	r2, [pc, #56]	@ (800a534 <UTIL_SEQ_WaitEvt+0x88>)
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4fe:	f3ef 8310 	mrs	r3, PRIMASK
 800a502:	60bb      	str	r3, [r7, #8]
  return(result);
 800a504:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a506:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a508:	b672      	cpsid	i
}
 800a50a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	43da      	mvns	r2, r3
 800a510:	4b0a      	ldr	r3, [pc, #40]	@ (800a53c <UTIL_SEQ_WaitEvt+0x90>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4013      	ands	r3, r2
 800a516:	4a09      	ldr	r2, [pc, #36]	@ (800a53c <UTIL_SEQ_WaitEvt+0x90>)
 800a518:	6013      	str	r3, [r2, #0]
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f383 8810 	msr	PRIMASK, r3
}
 800a524:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a526:	4a04      	ldr	r2, [pc, #16]	@ (800a538 <UTIL_SEQ_WaitEvt+0x8c>)
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	6013      	str	r3, [r2, #0]
  return;
 800a52c:	bf00      	nop
}
 800a52e:	3720      	adds	r7, #32
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	200007ec 	.word	0x200007ec
 800a538:	200007e8 	.word	0x200007e8
 800a53c:	200007e4 	.word	0x200007e4

0800a540 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a540:	b480      	push	{r7}
 800a542:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a544:	bf00      	nop
}
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a54e:	b480      	push	{r7}
 800a550:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a552:	bf00      	nop
}
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800a564:	2300      	movs	r3, #0
 800a566:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a572:	d204      	bcs.n	800a57e <SEQ_BitPosition+0x22>
 800a574:	2310      	movs	r3, #16
 800a576:	73fb      	strb	r3, [r7, #15]
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	041b      	lsls	r3, r3, #16
 800a57c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a584:	d205      	bcs.n	800a592 <SEQ_BitPosition+0x36>
 800a586:	7bfb      	ldrb	r3, [r7, #15]
 800a588:	3308      	adds	r3, #8
 800a58a:	73fb      	strb	r3, [r7, #15]
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	021b      	lsls	r3, r3, #8
 800a590:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a598:	d205      	bcs.n	800a5a6 <SEQ_BitPosition+0x4a>
 800a59a:	7bfb      	ldrb	r3, [r7, #15]
 800a59c:	3304      	adds	r3, #4
 800a59e:	73fb      	strb	r3, [r7, #15]
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	011b      	lsls	r3, r3, #4
 800a5a4:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	0f1b      	lsrs	r3, r3, #28
 800a5aa:	4a07      	ldr	r2, [pc, #28]	@ (800a5c8 <SEQ_BitPosition+0x6c>)
 800a5ac:	5cd2      	ldrb	r2, [r2, r3]
 800a5ae:	7bfb      	ldrb	r3, [r7, #15]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	f1c3 031f 	rsb	r3, r3, #31
 800a5ba:	b2db      	uxtb	r3, r3
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3714      	adds	r7, #20
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	08012ab4 	.word	0x08012ab4

0800a5cc <acc_rss_hal_register>:
 800a5cc:	b108      	cbz	r0, 800a5d2 <acc_rss_hal_register+0x6>
 800a5ce:	f002 ba77 	b.w	800cac0 <acc_rss_integration_register_a121>
 800a5d2:	4770      	bx	lr

0800a5d4 <acc_rss_get_buffer_size>:
 800a5d4:	b510      	push	{r4, lr}
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	f000 fb4c 	bl	800ac74 <acc_config_get_settings>
 800a5dc:	b158      	cbz	r0, 800a5f6 <acc_rss_get_buffer_size+0x22>
 800a5de:	b124      	cbz	r4, 800a5ea <acc_rss_get_buffer_size+0x16>
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5e6:	f002 bb4d 	b.w	800cc84 <acc_pipeline_get_buffer_size>
 800a5ea:	4b04      	ldr	r3, [pc, #16]	@ (800a5fc <acc_rss_get_buffer_size+0x28>)
 800a5ec:	4a04      	ldr	r2, [pc, #16]	@ (800a600 <acc_rss_get_buffer_size+0x2c>)
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	4904      	ldr	r1, [pc, #16]	@ (800a604 <acc_rss_get_buffer_size+0x30>)
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	4798      	blx	r3
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	bd10      	pop	{r4, pc}
 800a5fa:	bf00      	nop
 800a5fc:	200009dc 	.word	0x200009dc
 800a600:	08012ac4 	.word	0x08012ac4
 800a604:	08012ae0 	.word	0x08012ae0

0800a608 <acc_config_subsweep_validate.part.0>:
 800a608:	b508      	push	{r3, lr}
 800a60a:	4b04      	ldr	r3, [pc, #16]	@ (800a61c <acc_config_subsweep_validate.part.0+0x14>)
 800a60c:	4a04      	ldr	r2, [pc, #16]	@ (800a620 <acc_config_subsweep_validate.part.0+0x18>)
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	4904      	ldr	r1, [pc, #16]	@ (800a624 <acc_config_subsweep_validate.part.0+0x1c>)
 800a612:	2000      	movs	r0, #0
 800a614:	4798      	blx	r3
 800a616:	2000      	movs	r0, #0
 800a618:	bd08      	pop	{r3, pc}
 800a61a:	bf00      	nop
 800a61c:	200009dc 	.word	0x200009dc
 800a620:	08012aec 	.word	0x08012aec
 800a624:	08012b04 	.word	0x08012b04

0800a628 <acc_config_log>:
 800a628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a62c:	b082      	sub	sp, #8
 800a62e:	b120      	cbz	r0, 800a63a <acc_config_log+0x12>
 800a630:	4bbf      	ldr	r3, [pc, #764]	@ (800a930 <acc_config_log+0x308>)
 800a632:	6802      	ldr	r2, [r0, #0]
 800a634:	429a      	cmp	r2, r3
 800a636:	4604      	mov	r4, r0
 800a638:	d008      	beq.n	800a64c <acc_config_log+0x24>
 800a63a:	4bbe      	ldr	r3, [pc, #760]	@ (800a934 <acc_config_log+0x30c>)
 800a63c:	4abe      	ldr	r2, [pc, #760]	@ (800a938 <acc_config_log+0x310>)
 800a63e:	691b      	ldr	r3, [r3, #16]
 800a640:	49be      	ldr	r1, [pc, #760]	@ (800a93c <acc_config_log+0x314>)
 800a642:	2000      	movs	r0, #0
 800a644:	b002      	add	sp, #8
 800a646:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a64a:	4718      	bx	r3
 800a64c:	f002 faf4 	bl	800cc38 <acc_rss_integration_log_level>
 800a650:	2801      	cmp	r0, #1
 800a652:	d935      	bls.n	800a6c0 <acc_config_log+0x98>
 800a654:	edd4 7a11 	vldr	s15, [r4, #68]	@ 0x44
 800a658:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 800a940 <acc_config_log+0x318>
 800a65c:	4bb5      	ldr	r3, [pc, #724]	@ (800a934 <acc_config_log+0x30c>)
 800a65e:	ed9f 6ab8 	vldr	s12, [pc, #736]	@ 800a940 <acc_config_log+0x318>
 800a662:	691d      	ldr	r5, [r3, #16]
 800a664:	eddf 6ab7 	vldr	s13, [pc, #732]	@ 800a944 <acc_config_log+0x31c>
 800a668:	49b4      	ldr	r1, [pc, #720]	@ (800a93c <acc_config_log+0x314>)
 800a66a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a672:	bf48      	it	mi
 800a674:	eef1 7a67 	vnegmi.f32	s15, s15
 800a678:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a67c:	bf4c      	ite	mi
 800a67e:	4bb2      	ldrmi	r3, [pc, #712]	@ (800a948 <acc_config_log+0x320>)
 800a680:	4bb2      	ldrpl	r3, [pc, #712]	@ (800a94c <acc_config_log+0x324>)
 800a682:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800a686:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a68e:	ee17 2a10 	vmov	r2, s14
 800a692:	bf4c      	ite	mi
 800a694:	eeb1 7a67 	vnegmi.f32	s14, s15
 800a698:	eeb0 7a67 	vmovpl.f32	s14, s15
 800a69c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a6a0:	9200      	str	r2, [sp, #0]
 800a6a2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a6a6:	4aaa      	ldr	r2, [pc, #680]	@ (800a950 <acc_config_log+0x328>)
 800a6a8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a6ac:	2002      	movs	r0, #2
 800a6ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a6b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6ba:	edcd 7a01 	vstr	s15, [sp, #4]
 800a6be:	47a8      	blx	r5
 800a6c0:	f002 faba 	bl	800cc38 <acc_rss_integration_log_level>
 800a6c4:	2801      	cmp	r0, #1
 800a6c6:	d935      	bls.n	800a734 <acc_config_log+0x10c>
 800a6c8:	edd4 7a12 	vldr	s15, [r4, #72]	@ 0x48
 800a6cc:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 800a940 <acc_config_log+0x318>
 800a6d0:	4b98      	ldr	r3, [pc, #608]	@ (800a934 <acc_config_log+0x30c>)
 800a6d2:	ed9f 6a9b 	vldr	s12, [pc, #620]	@ 800a940 <acc_config_log+0x318>
 800a6d6:	691d      	ldr	r5, [r3, #16]
 800a6d8:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 800a944 <acc_config_log+0x31c>
 800a6dc:	4997      	ldr	r1, [pc, #604]	@ (800a93c <acc_config_log+0x314>)
 800a6de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e6:	bf48      	it	mi
 800a6e8:	eef1 7a67 	vnegmi.f32	s15, s15
 800a6ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6f0:	bf4c      	ite	mi
 800a6f2:	4b95      	ldrmi	r3, [pc, #596]	@ (800a948 <acc_config_log+0x320>)
 800a6f4:	4b95      	ldrpl	r3, [pc, #596]	@ (800a94c <acc_config_log+0x324>)
 800a6f6:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800a6fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a702:	ee17 2a10 	vmov	r2, s14
 800a706:	bf4c      	ite	mi
 800a708:	eeb1 7a67 	vnegmi.f32	s14, s15
 800a70c:	eeb0 7a67 	vmovpl.f32	s14, s15
 800a710:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a714:	9200      	str	r2, [sp, #0]
 800a716:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a71a:	4a8e      	ldr	r2, [pc, #568]	@ (800a954 <acc_config_log+0x32c>)
 800a71c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a720:	2002      	movs	r0, #2
 800a722:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a726:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a72a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a72e:	edcd 7a01 	vstr	s15, [sp, #4]
 800a732:	47a8      	blx	r5
 800a734:	f002 fa80 	bl	800cc38 <acc_rss_integration_log_level>
 800a738:	2801      	cmp	r0, #1
 800a73a:	d907      	bls.n	800a74c <acc_config_log+0x124>
 800a73c:	4a7d      	ldr	r2, [pc, #500]	@ (800a934 <acc_config_log+0x30c>)
 800a73e:	f8b4 304c 	ldrh.w	r3, [r4, #76]	@ 0x4c
 800a742:	6915      	ldr	r5, [r2, #16]
 800a744:	497d      	ldr	r1, [pc, #500]	@ (800a93c <acc_config_log+0x314>)
 800a746:	4a84      	ldr	r2, [pc, #528]	@ (800a958 <acc_config_log+0x330>)
 800a748:	2002      	movs	r0, #2
 800a74a:	47a8      	blx	r5
 800a74c:	f002 fa74 	bl	800cc38 <acc_rss_integration_log_level>
 800a750:	2801      	cmp	r0, #1
 800a752:	f200 80e0 	bhi.w	800a916 <acc_config_log+0x2ee>
 800a756:	f002 fa6f 	bl	800cc38 <acc_rss_integration_log_level>
 800a75a:	2801      	cmp	r0, #1
 800a75c:	f200 80c3 	bhi.w	800a8e6 <acc_config_log+0x2be>
 800a760:	f002 fa6a 	bl	800cc38 <acc_rss_integration_log_level>
 800a764:	2801      	cmp	r0, #1
 800a766:	f200 80b2 	bhi.w	800a8ce <acc_config_log+0x2a6>
 800a76a:	f002 fa65 	bl	800cc38 <acc_rss_integration_log_level>
 800a76e:	2801      	cmp	r0, #1
 800a770:	f200 80c5 	bhi.w	800a8fe <acc_config_log+0x2d6>
 800a774:	f002 fa60 	bl	800cc38 <acc_rss_integration_log_level>
 800a778:	2801      	cmp	r0, #1
 800a77a:	d907      	bls.n	800a78c <acc_config_log+0x164>
 800a77c:	4a6d      	ldr	r2, [pc, #436]	@ (800a934 <acc_config_log+0x30c>)
 800a77e:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 800a782:	6915      	ldr	r5, [r2, #16]
 800a784:	496d      	ldr	r1, [pc, #436]	@ (800a93c <acc_config_log+0x314>)
 800a786:	4a75      	ldr	r2, [pc, #468]	@ (800a95c <acc_config_log+0x334>)
 800a788:	2002      	movs	r0, #2
 800a78a:	47a8      	blx	r5
 800a78c:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 800a790:	2b00      	cmp	r3, #0
 800a792:	f000 8099 	beq.w	800a8c8 <acc_config_log+0x2a0>
 800a796:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a934 <acc_config_log+0x30c>
 800a79a:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 800a998 <acc_config_log+0x370>
 800a79e:	4e67      	ldr	r6, [pc, #412]	@ (800a93c <acc_config_log+0x314>)
 800a7a0:	4625      	mov	r5, r4
 800a7a2:	f04f 0900 	mov.w	r9, #0
 800a7a6:	f002 fa47 	bl	800cc38 <acc_rss_integration_log_level>
 800a7aa:	2801      	cmp	r0, #1
 800a7ac:	d906      	bls.n	800a7bc <acc_config_log+0x194>
 800a7ae:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a7b2:	464b      	mov	r3, r9
 800a7b4:	4652      	mov	r2, sl
 800a7b6:	4631      	mov	r1, r6
 800a7b8:	2002      	movs	r0, #2
 800a7ba:	47b8      	blx	r7
 800a7bc:	f002 fa3c 	bl	800cc38 <acc_rss_integration_log_level>
 800a7c0:	2801      	cmp	r0, #1
 800a7c2:	d906      	bls.n	800a7d2 <acc_config_log+0x1aa>
 800a7c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a7c8:	686b      	ldr	r3, [r5, #4]
 800a7ca:	4a65      	ldr	r2, [pc, #404]	@ (800a960 <acc_config_log+0x338>)
 800a7cc:	4631      	mov	r1, r6
 800a7ce:	2002      	movs	r0, #2
 800a7d0:	47b8      	blx	r7
 800a7d2:	f002 fa31 	bl	800cc38 <acc_rss_integration_log_level>
 800a7d6:	2801      	cmp	r0, #1
 800a7d8:	d906      	bls.n	800a7e8 <acc_config_log+0x1c0>
 800a7da:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a7de:	892b      	ldrh	r3, [r5, #8]
 800a7e0:	4a60      	ldr	r2, [pc, #384]	@ (800a964 <acc_config_log+0x33c>)
 800a7e2:	4631      	mov	r1, r6
 800a7e4:	2002      	movs	r0, #2
 800a7e6:	47b8      	blx	r7
 800a7e8:	f002 fa26 	bl	800cc38 <acc_rss_integration_log_level>
 800a7ec:	2801      	cmp	r0, #1
 800a7ee:	d906      	bls.n	800a7fe <acc_config_log+0x1d6>
 800a7f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a7f4:	896b      	ldrh	r3, [r5, #10]
 800a7f6:	4a5c      	ldr	r2, [pc, #368]	@ (800a968 <acc_config_log+0x340>)
 800a7f8:	4631      	mov	r1, r6
 800a7fa:	2002      	movs	r0, #2
 800a7fc:	47b8      	blx	r7
 800a7fe:	f002 fa1b 	bl	800cc38 <acc_rss_integration_log_level>
 800a802:	2801      	cmp	r0, #1
 800a804:	d906      	bls.n	800a814 <acc_config_log+0x1ec>
 800a806:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a80a:	89ab      	ldrh	r3, [r5, #12]
 800a80c:	4a57      	ldr	r2, [pc, #348]	@ (800a96c <acc_config_log+0x344>)
 800a80e:	4631      	mov	r1, r6
 800a810:	2002      	movs	r0, #2
 800a812:	47b8      	blx	r7
 800a814:	f002 fa10 	bl	800cc38 <acc_rss_integration_log_level>
 800a818:	2801      	cmp	r0, #1
 800a81a:	d906      	bls.n	800a82a <acc_config_log+0x202>
 800a81c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a820:	7bab      	ldrb	r3, [r5, #14]
 800a822:	4a53      	ldr	r2, [pc, #332]	@ (800a970 <acc_config_log+0x348>)
 800a824:	4631      	mov	r1, r6
 800a826:	2002      	movs	r0, #2
 800a828:	47b8      	blx	r7
 800a82a:	f002 fa05 	bl	800cc38 <acc_rss_integration_log_level>
 800a82e:	2801      	cmp	r0, #1
 800a830:	d909      	bls.n	800a846 <acc_config_log+0x21e>
 800a832:	7be8      	ldrb	r0, [r5, #15]
 800a834:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a838:	f004 fcca 	bl	800f1d0 <acc_utils_bool_to_str>
 800a83c:	4a4d      	ldr	r2, [pc, #308]	@ (800a974 <acc_config_log+0x34c>)
 800a83e:	4603      	mov	r3, r0
 800a840:	4631      	mov	r1, r6
 800a842:	2002      	movs	r0, #2
 800a844:	47b8      	blx	r7
 800a846:	f002 f9f7 	bl	800cc38 <acc_rss_integration_log_level>
 800a84a:	2801      	cmp	r0, #1
 800a84c:	d909      	bls.n	800a862 <acc_config_log+0x23a>
 800a84e:	7c28      	ldrb	r0, [r5, #16]
 800a850:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a854:	f004 fcbc 	bl	800f1d0 <acc_utils_bool_to_str>
 800a858:	4a47      	ldr	r2, [pc, #284]	@ (800a978 <acc_config_log+0x350>)
 800a85a:	4603      	mov	r3, r0
 800a85c:	4631      	mov	r1, r6
 800a85e:	2002      	movs	r0, #2
 800a860:	47b8      	blx	r7
 800a862:	f002 f9e9 	bl	800cc38 <acc_rss_integration_log_level>
 800a866:	2801      	cmp	r0, #1
 800a868:	d909      	bls.n	800a87e <acc_config_log+0x256>
 800a86a:	7c68      	ldrb	r0, [r5, #17]
 800a86c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a870:	f004 fcae 	bl	800f1d0 <acc_utils_bool_to_str>
 800a874:	4a41      	ldr	r2, [pc, #260]	@ (800a97c <acc_config_log+0x354>)
 800a876:	4603      	mov	r3, r0
 800a878:	4631      	mov	r1, r6
 800a87a:	2002      	movs	r0, #2
 800a87c:	47b8      	blx	r7
 800a87e:	f002 f9db 	bl	800cc38 <acc_rss_integration_log_level>
 800a882:	2801      	cmp	r0, #1
 800a884:	d909      	bls.n	800a89a <acc_config_log+0x272>
 800a886:	7ce8      	ldrb	r0, [r5, #19]
 800a888:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a88c:	f004 fcb8 	bl	800f200 <acc_utils_profile_to_str>
 800a890:	4a3b      	ldr	r2, [pc, #236]	@ (800a980 <acc_config_log+0x358>)
 800a892:	4603      	mov	r3, r0
 800a894:	4631      	mov	r1, r6
 800a896:	2002      	movs	r0, #2
 800a898:	47b8      	blx	r7
 800a89a:	f002 f9cd 	bl	800cc38 <acc_rss_integration_log_level>
 800a89e:	2801      	cmp	r0, #1
 800a8a0:	d909      	bls.n	800a8b6 <acc_config_log+0x28e>
 800a8a2:	7ca8      	ldrb	r0, [r5, #18]
 800a8a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a8a8:	f004 fcb8 	bl	800f21c <acc_utils_prf_to_str>
 800a8ac:	4a35      	ldr	r2, [pc, #212]	@ (800a984 <acc_config_log+0x35c>)
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	4631      	mov	r1, r6
 800a8b2:	2002      	movs	r0, #2
 800a8b4:	47b8      	blx	r7
 800a8b6:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 800a8ba:	f109 0901 	add.w	r9, r9, #1
 800a8be:	454b      	cmp	r3, r9
 800a8c0:	f105 0510 	add.w	r5, r5, #16
 800a8c4:	f63f af6f 	bhi.w	800a7a6 <acc_config_log+0x17e>
 800a8c8:	b002      	add	sp, #8
 800a8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ce:	4b19      	ldr	r3, [pc, #100]	@ (800a934 <acc_config_log+0x30c>)
 800a8d0:	f894 0053 	ldrb.w	r0, [r4, #83]	@ 0x53
 800a8d4:	691d      	ldr	r5, [r3, #16]
 800a8d6:	f004 fc87 	bl	800f1e8 <acc_utils_idle_state_to_str>
 800a8da:	4a2b      	ldr	r2, [pc, #172]	@ (800a988 <acc_config_log+0x360>)
 800a8dc:	4917      	ldr	r1, [pc, #92]	@ (800a93c <acc_config_log+0x314>)
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2002      	movs	r0, #2
 800a8e2:	47a8      	blx	r5
 800a8e4:	e741      	b.n	800a76a <acc_config_log+0x142>
 800a8e6:	4b13      	ldr	r3, [pc, #76]	@ (800a934 <acc_config_log+0x30c>)
 800a8e8:	f894 004f 	ldrb.w	r0, [r4, #79]	@ 0x4f
 800a8ec:	691d      	ldr	r5, [r3, #16]
 800a8ee:	f004 fc6f 	bl	800f1d0 <acc_utils_bool_to_str>
 800a8f2:	4a26      	ldr	r2, [pc, #152]	@ (800a98c <acc_config_log+0x364>)
 800a8f4:	4911      	ldr	r1, [pc, #68]	@ (800a93c <acc_config_log+0x314>)
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2002      	movs	r0, #2
 800a8fa:	47a8      	blx	r5
 800a8fc:	e730      	b.n	800a760 <acc_config_log+0x138>
 800a8fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a934 <acc_config_log+0x30c>)
 800a900:	f894 0054 	ldrb.w	r0, [r4, #84]	@ 0x54
 800a904:	691d      	ldr	r5, [r3, #16]
 800a906:	f004 fc6f 	bl	800f1e8 <acc_utils_idle_state_to_str>
 800a90a:	4a21      	ldr	r2, [pc, #132]	@ (800a990 <acc_config_log+0x368>)
 800a90c:	490b      	ldr	r1, [pc, #44]	@ (800a93c <acc_config_log+0x314>)
 800a90e:	4603      	mov	r3, r0
 800a910:	2002      	movs	r0, #2
 800a912:	47a8      	blx	r5
 800a914:	e72e      	b.n	800a774 <acc_config_log+0x14c>
 800a916:	4b07      	ldr	r3, [pc, #28]	@ (800a934 <acc_config_log+0x30c>)
 800a918:	f894 004e 	ldrb.w	r0, [r4, #78]	@ 0x4e
 800a91c:	691d      	ldr	r5, [r3, #16]
 800a91e:	f004 fc57 	bl	800f1d0 <acc_utils_bool_to_str>
 800a922:	4a1c      	ldr	r2, [pc, #112]	@ (800a994 <acc_config_log+0x36c>)
 800a924:	4905      	ldr	r1, [pc, #20]	@ (800a93c <acc_config_log+0x314>)
 800a926:	4603      	mov	r3, r0
 800a928:	2002      	movs	r0, #2
 800a92a:	47a8      	blx	r5
 800a92c:	e713      	b.n	800a756 <acc_config_log+0x12e>
 800a92e:	bf00      	nop
 800a930:	1337b00f 	.word	0x1337b00f
 800a934:	200009dc 	.word	0x200009dc
 800a938:	08012b0c 	.word	0x08012b0c
 800a93c:	08012b04 	.word	0x08012b04
 800a940:	350637bd 	.word	0x350637bd
 800a944:	49742400 	.word	0x49742400
 800a948:	08013990 	.word	0x08013990
 800a94c:	08013588 	.word	0x08013588
 800a950:	08012b24 	.word	0x08012b24
 800a954:	08012b3c 	.word	0x08012b3c
 800a958:	08012b54 	.word	0x08012b54
 800a95c:	08012bd8 	.word	0x08012bd8
 800a960:	08012bfc 	.word	0x08012bfc
 800a964:	08012c18 	.word	0x08012c18
 800a968:	08012c34 	.word	0x08012c34
 800a96c:	08012c50 	.word	0x08012c50
 800a970:	08012c6c 	.word	0x08012c6c
 800a974:	08012c88 	.word	0x08012c88
 800a978:	08012ca4 	.word	0x08012ca4
 800a97c:	08012cc0 	.word	0x08012cc0
 800a980:	08012cdc 	.word	0x08012cdc
 800a984:	08012cf8 	.word	0x08012cf8
 800a988:	08012ba0 	.word	0x08012ba0
 800a98c:	08012b88 	.word	0x08012b88
 800a990:	08012bbc 	.word	0x08012bbc
 800a994:	08012b6c 	.word	0x08012b6c
 800a998:	08012bec 	.word	0x08012bec

0800a99c <acc_config_create>:
 800a99c:	b510      	push	{r4, lr}
 800a99e:	4a08      	ldr	r2, [pc, #32]	@ (800a9c0 <acc_config_create+0x24>)
 800a9a0:	2356      	movs	r3, #86	@ 0x56
 800a9a2:	215c      	movs	r1, #92	@ 0x5c
 800a9a4:	2001      	movs	r0, #1
 800a9a6:	f002 f917 	bl	800cbd8 <acc_rss_integration_mem_calloc_debug>
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	b130      	cbz	r0, 800a9bc <acc_config_create+0x20>
 800a9ae:	4b05      	ldr	r3, [pc, #20]	@ (800a9c4 <acc_config_create+0x28>)
 800a9b0:	f840 3b04 	str.w	r3, [r0], #4
 800a9b4:	4904      	ldr	r1, [pc, #16]	@ (800a9c8 <acc_config_create+0x2c>)
 800a9b6:	2258      	movs	r2, #88	@ 0x58
 800a9b8:	f006 fa05 	bl	8010dc6 <memcpy>
 800a9bc:	4620      	mov	r0, r4
 800a9be:	bd10      	pop	{r4, pc}
 800a9c0:	08012b04 	.word	0x08012b04
 800a9c4:	1337b00f 	.word	0x1337b00f
 800a9c8:	08012d14 	.word	0x08012d14

0800a9cc <acc_config_destroy>:
 800a9cc:	b118      	cbz	r0, 800a9d6 <acc_config_destroy+0xa>
 800a9ce:	4a07      	ldr	r2, [pc, #28]	@ (800a9ec <acc_config_destroy+0x20>)
 800a9d0:	6801      	ldr	r1, [r0, #0]
 800a9d2:	4291      	cmp	r1, r2
 800a9d4:	d005      	beq.n	800a9e2 <acc_config_destroy+0x16>
 800a9d6:	4b06      	ldr	r3, [pc, #24]	@ (800a9f0 <acc_config_destroy+0x24>)
 800a9d8:	4a06      	ldr	r2, [pc, #24]	@ (800a9f4 <acc_config_destroy+0x28>)
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	4906      	ldr	r1, [pc, #24]	@ (800a9f8 <acc_config_destroy+0x2c>)
 800a9de:	2000      	movs	r0, #0
 800a9e0:	4718      	bx	r3
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	6002      	str	r2, [r0, #0]
 800a9e6:	f002 b913 	b.w	800cc10 <acc_rss_integration_mem_free>
 800a9ea:	bf00      	nop
 800a9ec:	1337b00f 	.word	0x1337b00f
 800a9f0:	200009dc 	.word	0x200009dc
 800a9f4:	08012b0c 	.word	0x08012b0c
 800a9f8:	08012b04 	.word	0x08012b04

0800a9fc <acc_config_subsweep_start_point_set>:
 800a9fc:	b570      	push	{r4, r5, r6, lr}
 800a9fe:	b120      	cbz	r0, 800aa0a <acc_config_subsweep_start_point_set+0xe>
 800aa00:	4b0b      	ldr	r3, [pc, #44]	@ (800aa30 <acc_config_subsweep_start_point_set+0x34>)
 800aa02:	4604      	mov	r4, r0
 800aa04:	6800      	ldr	r0, [r0, #0]
 800aa06:	4298      	cmp	r0, r3
 800aa08:	d007      	beq.n	800aa1a <acc_config_subsweep_start_point_set+0x1e>
 800aa0a:	4b0a      	ldr	r3, [pc, #40]	@ (800aa34 <acc_config_subsweep_start_point_set+0x38>)
 800aa0c:	4a0a      	ldr	r2, [pc, #40]	@ (800aa38 <acc_config_subsweep_start_point_set+0x3c>)
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	490a      	ldr	r1, [pc, #40]	@ (800aa3c <acc_config_subsweep_start_point_set+0x40>)
 800aa12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa16:	2000      	movs	r0, #0
 800aa18:	4718      	bx	r3
 800aa1a:	2a03      	cmp	r2, #3
 800aa1c:	460d      	mov	r5, r1
 800aa1e:	4616      	mov	r6, r2
 800aa20:	d902      	bls.n	800aa28 <acc_config_subsweep_start_point_set+0x2c>
 800aa22:	f7ff fdf1 	bl	800a608 <acc_config_subsweep_validate.part.0>
 800aa26:	b110      	cbz	r0, 800aa2e <acc_config_subsweep_start_point_set+0x32>
 800aa28:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800aa2c:	6065      	str	r5, [r4, #4]
 800aa2e:	bd70      	pop	{r4, r5, r6, pc}
 800aa30:	1337b00f 	.word	0x1337b00f
 800aa34:	200009dc 	.word	0x200009dc
 800aa38:	08012b0c 	.word	0x08012b0c
 800aa3c:	08012b04 	.word	0x08012b04

0800aa40 <acc_config_subsweep_num_points_set>:
 800aa40:	b570      	push	{r4, r5, r6, lr}
 800aa42:	b120      	cbz	r0, 800aa4e <acc_config_subsweep_num_points_set+0xe>
 800aa44:	4b0b      	ldr	r3, [pc, #44]	@ (800aa74 <acc_config_subsweep_num_points_set+0x34>)
 800aa46:	4604      	mov	r4, r0
 800aa48:	6800      	ldr	r0, [r0, #0]
 800aa4a:	4298      	cmp	r0, r3
 800aa4c:	d007      	beq.n	800aa5e <acc_config_subsweep_num_points_set+0x1e>
 800aa4e:	4b0a      	ldr	r3, [pc, #40]	@ (800aa78 <acc_config_subsweep_num_points_set+0x38>)
 800aa50:	4a0a      	ldr	r2, [pc, #40]	@ (800aa7c <acc_config_subsweep_num_points_set+0x3c>)
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	490a      	ldr	r1, [pc, #40]	@ (800aa80 <acc_config_subsweep_num_points_set+0x40>)
 800aa56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa5a:	2000      	movs	r0, #0
 800aa5c:	4718      	bx	r3
 800aa5e:	2a03      	cmp	r2, #3
 800aa60:	460d      	mov	r5, r1
 800aa62:	4616      	mov	r6, r2
 800aa64:	d902      	bls.n	800aa6c <acc_config_subsweep_num_points_set+0x2c>
 800aa66:	f7ff fdcf 	bl	800a608 <acc_config_subsweep_validate.part.0>
 800aa6a:	b110      	cbz	r0, 800aa72 <acc_config_subsweep_num_points_set+0x32>
 800aa6c:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800aa70:	8125      	strh	r5, [r4, #8]
 800aa72:	bd70      	pop	{r4, r5, r6, pc}
 800aa74:	1337b00f 	.word	0x1337b00f
 800aa78:	200009dc 	.word	0x200009dc
 800aa7c:	08012b0c 	.word	0x08012b0c
 800aa80:	08012b04 	.word	0x08012b04

0800aa84 <acc_config_subsweep_step_length_set>:
 800aa84:	b570      	push	{r4, r5, r6, lr}
 800aa86:	b120      	cbz	r0, 800aa92 <acc_config_subsweep_step_length_set+0xe>
 800aa88:	4b0b      	ldr	r3, [pc, #44]	@ (800aab8 <acc_config_subsweep_step_length_set+0x34>)
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	6800      	ldr	r0, [r0, #0]
 800aa8e:	4298      	cmp	r0, r3
 800aa90:	d007      	beq.n	800aaa2 <acc_config_subsweep_step_length_set+0x1e>
 800aa92:	4b0a      	ldr	r3, [pc, #40]	@ (800aabc <acc_config_subsweep_step_length_set+0x38>)
 800aa94:	4a0a      	ldr	r2, [pc, #40]	@ (800aac0 <acc_config_subsweep_step_length_set+0x3c>)
 800aa96:	691b      	ldr	r3, [r3, #16]
 800aa98:	490a      	ldr	r1, [pc, #40]	@ (800aac4 <acc_config_subsweep_step_length_set+0x40>)
 800aa9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa9e:	2000      	movs	r0, #0
 800aaa0:	4718      	bx	r3
 800aaa2:	2a03      	cmp	r2, #3
 800aaa4:	460d      	mov	r5, r1
 800aaa6:	4616      	mov	r6, r2
 800aaa8:	d902      	bls.n	800aab0 <acc_config_subsweep_step_length_set+0x2c>
 800aaaa:	f7ff fdad 	bl	800a608 <acc_config_subsweep_validate.part.0>
 800aaae:	b110      	cbz	r0, 800aab6 <acc_config_subsweep_step_length_set+0x32>
 800aab0:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800aab4:	8165      	strh	r5, [r4, #10]
 800aab6:	bd70      	pop	{r4, r5, r6, pc}
 800aab8:	1337b00f 	.word	0x1337b00f
 800aabc:	200009dc 	.word	0x200009dc
 800aac0:	08012b0c 	.word	0x08012b0c
 800aac4:	08012b04 	.word	0x08012b04

0800aac8 <acc_config_subsweep_profile_set>:
 800aac8:	b570      	push	{r4, r5, r6, lr}
 800aaca:	b120      	cbz	r0, 800aad6 <acc_config_subsweep_profile_set+0xe>
 800aacc:	4b0b      	ldr	r3, [pc, #44]	@ (800aafc <acc_config_subsweep_profile_set+0x34>)
 800aace:	4604      	mov	r4, r0
 800aad0:	6800      	ldr	r0, [r0, #0]
 800aad2:	4298      	cmp	r0, r3
 800aad4:	d007      	beq.n	800aae6 <acc_config_subsweep_profile_set+0x1e>
 800aad6:	4b0a      	ldr	r3, [pc, #40]	@ (800ab00 <acc_config_subsweep_profile_set+0x38>)
 800aad8:	4a0a      	ldr	r2, [pc, #40]	@ (800ab04 <acc_config_subsweep_profile_set+0x3c>)
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	490a      	ldr	r1, [pc, #40]	@ (800ab08 <acc_config_subsweep_profile_set+0x40>)
 800aade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aae2:	2000      	movs	r0, #0
 800aae4:	4718      	bx	r3
 800aae6:	2a03      	cmp	r2, #3
 800aae8:	460d      	mov	r5, r1
 800aaea:	4616      	mov	r6, r2
 800aaec:	d902      	bls.n	800aaf4 <acc_config_subsweep_profile_set+0x2c>
 800aaee:	f7ff fd8b 	bl	800a608 <acc_config_subsweep_validate.part.0>
 800aaf2:	b110      	cbz	r0, 800aafa <acc_config_subsweep_profile_set+0x32>
 800aaf4:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800aaf8:	74e5      	strb	r5, [r4, #19]
 800aafa:	bd70      	pop	{r4, r5, r6, pc}
 800aafc:	1337b00f 	.word	0x1337b00f
 800ab00:	200009dc 	.word	0x200009dc
 800ab04:	08012b0c 	.word	0x08012b0c
 800ab08:	08012b04 	.word	0x08012b04

0800ab0c <acc_config_subsweep_hwaas_set>:
 800ab0c:	b570      	push	{r4, r5, r6, lr}
 800ab0e:	b120      	cbz	r0, 800ab1a <acc_config_subsweep_hwaas_set+0xe>
 800ab10:	4b0b      	ldr	r3, [pc, #44]	@ (800ab40 <acc_config_subsweep_hwaas_set+0x34>)
 800ab12:	4604      	mov	r4, r0
 800ab14:	6800      	ldr	r0, [r0, #0]
 800ab16:	4298      	cmp	r0, r3
 800ab18:	d007      	beq.n	800ab2a <acc_config_subsweep_hwaas_set+0x1e>
 800ab1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ab44 <acc_config_subsweep_hwaas_set+0x38>)
 800ab1c:	4a0a      	ldr	r2, [pc, #40]	@ (800ab48 <acc_config_subsweep_hwaas_set+0x3c>)
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	490a      	ldr	r1, [pc, #40]	@ (800ab4c <acc_config_subsweep_hwaas_set+0x40>)
 800ab22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab26:	2000      	movs	r0, #0
 800ab28:	4718      	bx	r3
 800ab2a:	2a03      	cmp	r2, #3
 800ab2c:	460d      	mov	r5, r1
 800ab2e:	4616      	mov	r6, r2
 800ab30:	d902      	bls.n	800ab38 <acc_config_subsweep_hwaas_set+0x2c>
 800ab32:	f7ff fd69 	bl	800a608 <acc_config_subsweep_validate.part.0>
 800ab36:	b110      	cbz	r0, 800ab3e <acc_config_subsweep_hwaas_set+0x32>
 800ab38:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800ab3c:	81a5      	strh	r5, [r4, #12]
 800ab3e:	bd70      	pop	{r4, r5, r6, pc}
 800ab40:	1337b00f 	.word	0x1337b00f
 800ab44:	200009dc 	.word	0x200009dc
 800ab48:	08012b0c 	.word	0x08012b0c
 800ab4c:	08012b04 	.word	0x08012b04

0800ab50 <acc_config_subsweep_receiver_gain_set>:
 800ab50:	b570      	push	{r4, r5, r6, lr}
 800ab52:	b120      	cbz	r0, 800ab5e <acc_config_subsweep_receiver_gain_set+0xe>
 800ab54:	4b0b      	ldr	r3, [pc, #44]	@ (800ab84 <acc_config_subsweep_receiver_gain_set+0x34>)
 800ab56:	4604      	mov	r4, r0
 800ab58:	6800      	ldr	r0, [r0, #0]
 800ab5a:	4298      	cmp	r0, r3
 800ab5c:	d007      	beq.n	800ab6e <acc_config_subsweep_receiver_gain_set+0x1e>
 800ab5e:	4b0a      	ldr	r3, [pc, #40]	@ (800ab88 <acc_config_subsweep_receiver_gain_set+0x38>)
 800ab60:	4a0a      	ldr	r2, [pc, #40]	@ (800ab8c <acc_config_subsweep_receiver_gain_set+0x3c>)
 800ab62:	691b      	ldr	r3, [r3, #16]
 800ab64:	490a      	ldr	r1, [pc, #40]	@ (800ab90 <acc_config_subsweep_receiver_gain_set+0x40>)
 800ab66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	4718      	bx	r3
 800ab6e:	2a03      	cmp	r2, #3
 800ab70:	460d      	mov	r5, r1
 800ab72:	4616      	mov	r6, r2
 800ab74:	d902      	bls.n	800ab7c <acc_config_subsweep_receiver_gain_set+0x2c>
 800ab76:	f7ff fd47 	bl	800a608 <acc_config_subsweep_validate.part.0>
 800ab7a:	b110      	cbz	r0, 800ab82 <acc_config_subsweep_receiver_gain_set+0x32>
 800ab7c:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800ab80:	73a5      	strb	r5, [r4, #14]
 800ab82:	bd70      	pop	{r4, r5, r6, pc}
 800ab84:	1337b00f 	.word	0x1337b00f
 800ab88:	200009dc 	.word	0x200009dc
 800ab8c:	08012b0c 	.word	0x08012b0c
 800ab90:	08012b04 	.word	0x08012b04

0800ab94 <acc_config_start_point_set>:
 800ab94:	2200      	movs	r2, #0
 800ab96:	f7ff bf31 	b.w	800a9fc <acc_config_subsweep_start_point_set>
 800ab9a:	bf00      	nop

0800ab9c <acc_config_num_points_set>:
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f7ff bf4f 	b.w	800aa40 <acc_config_subsweep_num_points_set>
 800aba2:	bf00      	nop

0800aba4 <acc_config_step_length_set>:
 800aba4:	2200      	movs	r2, #0
 800aba6:	f7ff bf6d 	b.w	800aa84 <acc_config_subsweep_step_length_set>
 800abaa:	bf00      	nop

0800abac <acc_config_profile_set>:
 800abac:	2200      	movs	r2, #0
 800abae:	f7ff bf8b 	b.w	800aac8 <acc_config_subsweep_profile_set>
 800abb2:	bf00      	nop

0800abb4 <acc_config_hwaas_set>:
 800abb4:	2200      	movs	r2, #0
 800abb6:	f7ff bfa9 	b.w	800ab0c <acc_config_subsweep_hwaas_set>
 800abba:	bf00      	nop

0800abbc <acc_config_receiver_gain_set>:
 800abbc:	2200      	movs	r2, #0
 800abbe:	f7ff bfc7 	b.w	800ab50 <acc_config_subsweep_receiver_gain_set>
 800abc2:	bf00      	nop

0800abc4 <acc_config_sweep_rate_set>:
 800abc4:	b118      	cbz	r0, 800abce <acc_config_sweep_rate_set+0xa>
 800abc6:	4b06      	ldr	r3, [pc, #24]	@ (800abe0 <acc_config_sweep_rate_set+0x1c>)
 800abc8:	6802      	ldr	r2, [r0, #0]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d005      	beq.n	800abda <acc_config_sweep_rate_set+0x16>
 800abce:	4b05      	ldr	r3, [pc, #20]	@ (800abe4 <acc_config_sweep_rate_set+0x20>)
 800abd0:	4a05      	ldr	r2, [pc, #20]	@ (800abe8 <acc_config_sweep_rate_set+0x24>)
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	4905      	ldr	r1, [pc, #20]	@ (800abec <acc_config_sweep_rate_set+0x28>)
 800abd6:	2000      	movs	r0, #0
 800abd8:	4718      	bx	r3
 800abda:	ed80 0a11 	vstr	s0, [r0, #68]	@ 0x44
 800abde:	4770      	bx	lr
 800abe0:	1337b00f 	.word	0x1337b00f
 800abe4:	200009dc 	.word	0x200009dc
 800abe8:	08012b0c 	.word	0x08012b0c
 800abec:	08012b04 	.word	0x08012b04

0800abf0 <acc_config_continuous_sweep_mode_set>:
 800abf0:	b118      	cbz	r0, 800abfa <acc_config_continuous_sweep_mode_set+0xa>
 800abf2:	4b06      	ldr	r3, [pc, #24]	@ (800ac0c <acc_config_continuous_sweep_mode_set+0x1c>)
 800abf4:	6802      	ldr	r2, [r0, #0]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d005      	beq.n	800ac06 <acc_config_continuous_sweep_mode_set+0x16>
 800abfa:	4b05      	ldr	r3, [pc, #20]	@ (800ac10 <acc_config_continuous_sweep_mode_set+0x20>)
 800abfc:	4a05      	ldr	r2, [pc, #20]	@ (800ac14 <acc_config_continuous_sweep_mode_set+0x24>)
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	4905      	ldr	r1, [pc, #20]	@ (800ac18 <acc_config_continuous_sweep_mode_set+0x28>)
 800ac02:	2000      	movs	r0, #0
 800ac04:	4718      	bx	r3
 800ac06:	f880 104e 	strb.w	r1, [r0, #78]	@ 0x4e
 800ac0a:	4770      	bx	lr
 800ac0c:	1337b00f 	.word	0x1337b00f
 800ac10:	200009dc 	.word	0x200009dc
 800ac14:	08012b0c 	.word	0x08012b0c
 800ac18:	08012b04 	.word	0x08012b04

0800ac1c <acc_config_inter_frame_idle_state_set>:
 800ac1c:	b118      	cbz	r0, 800ac26 <acc_config_inter_frame_idle_state_set+0xa>
 800ac1e:	4b06      	ldr	r3, [pc, #24]	@ (800ac38 <acc_config_inter_frame_idle_state_set+0x1c>)
 800ac20:	6802      	ldr	r2, [r0, #0]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d005      	beq.n	800ac32 <acc_config_inter_frame_idle_state_set+0x16>
 800ac26:	4b05      	ldr	r3, [pc, #20]	@ (800ac3c <acc_config_inter_frame_idle_state_set+0x20>)
 800ac28:	4a05      	ldr	r2, [pc, #20]	@ (800ac40 <acc_config_inter_frame_idle_state_set+0x24>)
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	4905      	ldr	r1, [pc, #20]	@ (800ac44 <acc_config_inter_frame_idle_state_set+0x28>)
 800ac2e:	2000      	movs	r0, #0
 800ac30:	4718      	bx	r3
 800ac32:	f880 1053 	strb.w	r1, [r0, #83]	@ 0x53
 800ac36:	4770      	bx	lr
 800ac38:	1337b00f 	.word	0x1337b00f
 800ac3c:	200009dc 	.word	0x200009dc
 800ac40:	08012b0c 	.word	0x08012b0c
 800ac44:	08012b04 	.word	0x08012b04

0800ac48 <acc_config_inter_sweep_idle_state_set>:
 800ac48:	b118      	cbz	r0, 800ac52 <acc_config_inter_sweep_idle_state_set+0xa>
 800ac4a:	4b06      	ldr	r3, [pc, #24]	@ (800ac64 <acc_config_inter_sweep_idle_state_set+0x1c>)
 800ac4c:	6802      	ldr	r2, [r0, #0]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d005      	beq.n	800ac5e <acc_config_inter_sweep_idle_state_set+0x16>
 800ac52:	4b05      	ldr	r3, [pc, #20]	@ (800ac68 <acc_config_inter_sweep_idle_state_set+0x20>)
 800ac54:	4a05      	ldr	r2, [pc, #20]	@ (800ac6c <acc_config_inter_sweep_idle_state_set+0x24>)
 800ac56:	691b      	ldr	r3, [r3, #16]
 800ac58:	4905      	ldr	r1, [pc, #20]	@ (800ac70 <acc_config_inter_sweep_idle_state_set+0x28>)
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	4718      	bx	r3
 800ac5e:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 800ac62:	4770      	bx	lr
 800ac64:	1337b00f 	.word	0x1337b00f
 800ac68:	200009dc 	.word	0x200009dc
 800ac6c:	08012b0c 	.word	0x08012b0c
 800ac70:	08012b04 	.word	0x08012b04

0800ac74 <acc_config_get_settings>:
 800ac74:	b508      	push	{r3, lr}
 800ac76:	b118      	cbz	r0, 800ac80 <acc_config_get_settings+0xc>
 800ac78:	4b06      	ldr	r3, [pc, #24]	@ (800ac94 <acc_config_get_settings+0x20>)
 800ac7a:	6802      	ldr	r2, [r0, #0]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d007      	beq.n	800ac90 <acc_config_get_settings+0x1c>
 800ac80:	4b05      	ldr	r3, [pc, #20]	@ (800ac98 <acc_config_get_settings+0x24>)
 800ac82:	4a06      	ldr	r2, [pc, #24]	@ (800ac9c <acc_config_get_settings+0x28>)
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	4906      	ldr	r1, [pc, #24]	@ (800aca0 <acc_config_get_settings+0x2c>)
 800ac88:	2000      	movs	r0, #0
 800ac8a:	4798      	blx	r3
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	bd08      	pop	{r3, pc}
 800ac90:	3004      	adds	r0, #4
 800ac92:	bd08      	pop	{r3, pc}
 800ac94:	1337b00f 	.word	0x1337b00f
 800ac98:	200009dc 	.word	0x200009dc
 800ac9c:	08012b0c 	.word	0x08012b0c
 800aca0:	08012b04 	.word	0x08012b04

0800aca4 <acc_config_subsweep_prf_set>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	b120      	cbz	r0, 800acb2 <acc_config_subsweep_prf_set+0xe>
 800aca8:	4b0b      	ldr	r3, [pc, #44]	@ (800acd8 <acc_config_subsweep_prf_set+0x34>)
 800acaa:	4604      	mov	r4, r0
 800acac:	6800      	ldr	r0, [r0, #0]
 800acae:	4298      	cmp	r0, r3
 800acb0:	d007      	beq.n	800acc2 <acc_config_subsweep_prf_set+0x1e>
 800acb2:	4b0a      	ldr	r3, [pc, #40]	@ (800acdc <acc_config_subsweep_prf_set+0x38>)
 800acb4:	4a0a      	ldr	r2, [pc, #40]	@ (800ace0 <acc_config_subsweep_prf_set+0x3c>)
 800acb6:	691b      	ldr	r3, [r3, #16]
 800acb8:	490a      	ldr	r1, [pc, #40]	@ (800ace4 <acc_config_subsweep_prf_set+0x40>)
 800acba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800acbe:	2000      	movs	r0, #0
 800acc0:	4718      	bx	r3
 800acc2:	2a03      	cmp	r2, #3
 800acc4:	460d      	mov	r5, r1
 800acc6:	4616      	mov	r6, r2
 800acc8:	d902      	bls.n	800acd0 <acc_config_subsweep_prf_set+0x2c>
 800acca:	f7ff fc9d 	bl	800a608 <acc_config_subsweep_validate.part.0>
 800acce:	b110      	cbz	r0, 800acd6 <acc_config_subsweep_prf_set+0x32>
 800acd0:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800acd4:	74a5      	strb	r5, [r4, #18]
 800acd6:	bd70      	pop	{r4, r5, r6, pc}
 800acd8:	1337b00f 	.word	0x1337b00f
 800acdc:	200009dc 	.word	0x200009dc
 800ace0:	08012b0c 	.word	0x08012b0c
 800ace4:	08012b04 	.word	0x08012b04

0800ace8 <acc_config_prf_set>:
 800ace8:	2200      	movs	r2, #0
 800acea:	f7ff bfdb 	b.w	800aca4 <acc_config_subsweep_prf_set>
 800acee:	bf00      	nop

0800acf0 <data_callback>:
 800acf0:	b470      	push	{r4, r5, r6}
 800acf2:	888c      	ldrh	r4, [r1, #4]
 800acf4:	6893      	ldr	r3, [r2, #8]
 800acf6:	890e      	ldrh	r6, [r1, #8]
 800acf8:	798d      	ldrb	r5, [r1, #6]
 800acfa:	79ca      	ldrb	r2, [r1, #7]
 800acfc:	709a      	strb	r2, [r3, #2]
 800acfe:	3c00      	subs	r4, #0
 800ad00:	bf18      	it	ne
 800ad02:	2401      	movne	r4, #1
 800ad04:	809e      	strh	r6, [r3, #4]
 800ad06:	701c      	strb	r4, [r3, #0]
 800ad08:	705d      	strb	r5, [r3, #1]
 800ad0a:	6098      	str	r0, [r3, #8]
 800ad0c:	bc70      	pop	{r4, r5, r6}
 800ad0e:	4770      	bx	lr

0800ad10 <acc_processing_execute>:
 800ad10:	b570      	push	{r4, r5, r6, lr}
 800ad12:	4615      	mov	r5, r2
 800ad14:	460e      	mov	r6, r1
 800ad16:	b120      	cbz	r0, 800ad22 <acc_processing_execute+0x12>
 800ad18:	4b15      	ldr	r3, [pc, #84]	@ (800ad70 <acc_processing_execute+0x60>)
 800ad1a:	6802      	ldr	r2, [r0, #0]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	4604      	mov	r4, r0
 800ad20:	d008      	beq.n	800ad34 <acc_processing_execute+0x24>
 800ad22:	4c14      	ldr	r4, [pc, #80]	@ (800ad74 <acc_processing_execute+0x64>)
 800ad24:	4a14      	ldr	r2, [pc, #80]	@ (800ad78 <acc_processing_execute+0x68>)
 800ad26:	6923      	ldr	r3, [r4, #16]
 800ad28:	4914      	ldr	r1, [pc, #80]	@ (800ad7c <acc_processing_execute+0x6c>)
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	4798      	blx	r3
 800ad2e:	b176      	cbz	r6, 800ad4e <acc_processing_execute+0x3e>
 800ad30:	b1a5      	cbz	r5, 800ad5c <acc_processing_execute+0x4c>
 800ad32:	bd70      	pop	{r4, r5, r6, pc}
 800ad34:	b151      	cbz	r1, 800ad4c <acc_processing_execute+0x3c>
 800ad36:	b1c5      	cbz	r5, 800ad6a <acc_processing_execute+0x5a>
 800ad38:	6085      	str	r5, [r0, #8]
 800ad3a:	6840      	ldr	r0, [r0, #4]
 800ad3c:	f002 f914 	bl	800cf68 <acc_pipeline_a121_prepare_memory>
 800ad40:	6863      	ldr	r3, [r4, #4]
 800ad42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad46:	e9d3 0200 	ldrd	r0, r2, [r3]
 800ad4a:	4710      	bx	r2
 800ad4c:	4c09      	ldr	r4, [pc, #36]	@ (800ad74 <acc_processing_execute+0x64>)
 800ad4e:	6923      	ldr	r3, [r4, #16]
 800ad50:	4a0b      	ldr	r2, [pc, #44]	@ (800ad80 <acc_processing_execute+0x70>)
 800ad52:	490a      	ldr	r1, [pc, #40]	@ (800ad7c <acc_processing_execute+0x6c>)
 800ad54:	2000      	movs	r0, #0
 800ad56:	4798      	blx	r3
 800ad58:	2d00      	cmp	r5, #0
 800ad5a:	d1ea      	bne.n	800ad32 <acc_processing_execute+0x22>
 800ad5c:	6923      	ldr	r3, [r4, #16]
 800ad5e:	4a09      	ldr	r2, [pc, #36]	@ (800ad84 <acc_processing_execute+0x74>)
 800ad60:	4906      	ldr	r1, [pc, #24]	@ (800ad7c <acc_processing_execute+0x6c>)
 800ad62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad66:	2000      	movs	r0, #0
 800ad68:	4718      	bx	r3
 800ad6a:	4c02      	ldr	r4, [pc, #8]	@ (800ad74 <acc_processing_execute+0x64>)
 800ad6c:	e7f6      	b.n	800ad5c <acc_processing_execute+0x4c>
 800ad6e:	bf00      	nop
 800ad70:	1337b00d 	.word	0x1337b00d
 800ad74:	200009dc 	.word	0x200009dc
 800ad78:	08012d90 	.word	0x08012d90
 800ad7c:	08012d84 	.word	0x08012d84
 800ad80:	08012dac 	.word	0x08012dac
 800ad84:	08012d6c 	.word	0x08012d6c

0800ad88 <acc_processing_destroy>:
 800ad88:	b510      	push	{r4, lr}
 800ad8a:	b120      	cbz	r0, 800ad96 <acc_processing_destroy+0xe>
 800ad8c:	4b0c      	ldr	r3, [pc, #48]	@ (800adc0 <acc_processing_destroy+0x38>)
 800ad8e:	6802      	ldr	r2, [r0, #0]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	4604      	mov	r4, r0
 800ad94:	d007      	beq.n	800ada6 <acc_processing_destroy+0x1e>
 800ad96:	4b0b      	ldr	r3, [pc, #44]	@ (800adc4 <acc_processing_destroy+0x3c>)
 800ad98:	4a0b      	ldr	r2, [pc, #44]	@ (800adc8 <acc_processing_destroy+0x40>)
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	490b      	ldr	r1, [pc, #44]	@ (800adcc <acc_processing_destroy+0x44>)
 800ad9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ada2:	2000      	movs	r0, #0
 800ada4:	4718      	bx	r3
 800ada6:	6840      	ldr	r0, [r0, #4]
 800ada8:	b118      	cbz	r0, 800adb2 <acc_processing_destroy+0x2a>
 800adaa:	68c3      	ldr	r3, [r0, #12]
 800adac:	4798      	blx	r3
 800adae:	2300      	movs	r3, #0
 800adb0:	6063      	str	r3, [r4, #4]
 800adb2:	2300      	movs	r3, #0
 800adb4:	6023      	str	r3, [r4, #0]
 800adb6:	4620      	mov	r0, r4
 800adb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adbc:	f001 bf28 	b.w	800cc10 <acc_rss_integration_mem_free>
 800adc0:	1337b00d 	.word	0x1337b00d
 800adc4:	200009dc 	.word	0x200009dc
 800adc8:	08012d90 	.word	0x08012d90
 800adcc:	08012d84 	.word	0x08012d84

0800add0 <acc_processing_create>:
 800add0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add4:	b088      	sub	sp, #32
 800add6:	460c      	mov	r4, r1
 800add8:	f7ff ff4c 	bl	800ac74 <acc_config_get_settings>
 800addc:	2800      	cmp	r0, #0
 800adde:	d050      	beq.n	800ae82 <acc_processing_create+0xb2>
 800ade0:	2c00      	cmp	r4, #0
 800ade2:	d043      	beq.n	800ae6c <acc_processing_create+0x9c>
 800ade4:	4a2e      	ldr	r2, [pc, #184]	@ (800aea0 <acc_processing_create+0xd0>)
 800ade6:	4606      	mov	r6, r0
 800ade8:	2367      	movs	r3, #103	@ 0x67
 800adea:	2110      	movs	r1, #16
 800adec:	2001      	movs	r0, #1
 800adee:	f001 fef3 	bl	800cbd8 <acc_rss_integration_mem_calloc_debug>
 800adf2:	4605      	mov	r5, r0
 800adf4:	2800      	cmp	r0, #0
 800adf6:	d044      	beq.n	800ae82 <acc_processing_create+0xb2>
 800adf8:	4b2a      	ldr	r3, [pc, #168]	@ (800aea4 <acc_processing_create+0xd4>)
 800adfa:	6003      	str	r3, [r0, #0]
 800adfc:	f10d 080c 	add.w	r8, sp, #12
 800ae00:	4b29      	ldr	r3, [pc, #164]	@ (800aea8 <acc_processing_create+0xd8>)
 800ae02:	9600      	str	r6, [sp, #0]
 800ae04:	4641      	mov	r1, r8
 800ae06:	4668      	mov	r0, sp
 800ae08:	e9cd 3501 	strd	r3, r5, [sp, #4]
 800ae0c:	f001 ff46 	bl	800cc9c <acc_pipeline_a121_assemble>
 800ae10:	4607      	mov	r7, r0
 800ae12:	6068      	str	r0, [r5, #4]
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d03e      	beq.n	800ae96 <acc_processing_create+0xc6>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	8063      	strh	r3, [r4, #2]
 800ae1c:	f896 104e 	ldrb.w	r1, [r6, #78]	@ 0x4e
 800ae20:	461a      	mov	r2, r3
 800ae22:	469c      	mov	ip, r3
 800ae24:	1d20      	adds	r0, r4, #4
 800ae26:	b2df      	uxtb	r7, r3
 800ae28:	42b9      	cmp	r1, r7
 800ae2a:	d92f      	bls.n	800ae8c <acc_processing_create+0xbc>
 800ae2c:	f838 7013 	ldrh.w	r7, [r8, r3, lsl #1]
 800ae30:	8002      	strh	r2, [r0, #0]
 800ae32:	443a      	add	r2, r7
 800ae34:	b292      	uxth	r2, r2
 800ae36:	8062      	strh	r2, [r4, #2]
 800ae38:	8107      	strh	r7, [r0, #8]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	2b04      	cmp	r3, #4
 800ae3e:	f100 0002 	add.w	r0, r0, #2
 800ae42:	d1f0      	bne.n	800ae26 <acc_processing_create+0x56>
 800ae44:	f8b6 3048 	ldrh.w	r3, [r6, #72]	@ 0x48
 800ae48:	9905      	ldr	r1, [sp, #20]
 800ae4a:	6161      	str	r1, [r4, #20]
 800ae4c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ae50:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800ae54:	7620      	strb	r0, [r4, #24]
 800ae56:	fb13 f202 	smulbb	r2, r3, r2
 800ae5a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800ae5e:	8022      	strh	r2, [r4, #0]
 800ae60:	81a9      	strh	r1, [r5, #12]
 800ae62:	81eb      	strh	r3, [r5, #14]
 800ae64:	4628      	mov	r0, r5
 800ae66:	b008      	add	sp, #32
 800ae68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae6c:	4b0f      	ldr	r3, [pc, #60]	@ (800aeac <acc_processing_create+0xdc>)
 800ae6e:	4a10      	ldr	r2, [pc, #64]	@ (800aeb0 <acc_processing_create+0xe0>)
 800ae70:	691b      	ldr	r3, [r3, #16]
 800ae72:	490b      	ldr	r1, [pc, #44]	@ (800aea0 <acc_processing_create+0xd0>)
 800ae74:	4620      	mov	r0, r4
 800ae76:	4798      	blx	r3
 800ae78:	4625      	mov	r5, r4
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	b008      	add	sp, #32
 800ae7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae82:	2500      	movs	r5, #0
 800ae84:	4628      	mov	r0, r5
 800ae86:	b008      	add	sp, #32
 800ae88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae8c:	f8a0 c000 	strh.w	ip, [r0]
 800ae90:	f8a0 c008 	strh.w	ip, [r0, #8]
 800ae94:	e7d1      	b.n	800ae3a <acc_processing_create+0x6a>
 800ae96:	4628      	mov	r0, r5
 800ae98:	f7ff ff76 	bl	800ad88 <acc_processing_destroy>
 800ae9c:	463d      	mov	r5, r7
 800ae9e:	e7e1      	b.n	800ae64 <acc_processing_create+0x94>
 800aea0:	08012d84 	.word	0x08012d84
 800aea4:	1337b00d 	.word	0x1337b00d
 800aea8:	0800acf1 	.word	0x0800acf1
 800aeac:	200009dc 	.word	0x200009dc
 800aeb0:	08012dc4 	.word	0x08012dc4

0800aeb4 <acc_sensor_destroy>:
 800aeb4:	b510      	push	{r4, lr}
 800aeb6:	b120      	cbz	r0, 800aec2 <acc_sensor_destroy+0xe>
 800aeb8:	4b0b      	ldr	r3, [pc, #44]	@ (800aee8 <acc_sensor_destroy+0x34>)
 800aeba:	6802      	ldr	r2, [r0, #0]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	4604      	mov	r4, r0
 800aec0:	d007      	beq.n	800aed2 <acc_sensor_destroy+0x1e>
 800aec2:	4b0a      	ldr	r3, [pc, #40]	@ (800aeec <acc_sensor_destroy+0x38>)
 800aec4:	4a0a      	ldr	r2, [pc, #40]	@ (800aef0 <acc_sensor_destroy+0x3c>)
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	490a      	ldr	r1, [pc, #40]	@ (800aef4 <acc_sensor_destroy+0x40>)
 800aeca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aece:	2000      	movs	r0, #0
 800aed0:	4718      	bx	r3
 800aed2:	2300      	movs	r3, #0
 800aed4:	6003      	str	r3, [r0, #0]
 800aed6:	6900      	ldr	r0, [r0, #16]
 800aed8:	f002 f87e 	bl	800cfd8 <acc_radar_engine_a121_context_destroy>
 800aedc:	4620      	mov	r0, r4
 800aede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aee2:	f001 be95 	b.w	800cc10 <acc_rss_integration_mem_free>
 800aee6:	bf00      	nop
 800aee8:	1337b00e 	.word	0x1337b00e
 800aeec:	200009dc 	.word	0x200009dc
 800aef0:	08012ddc 	.word	0x08012ddc
 800aef4:	08012df4 	.word	0x08012df4

0800aef8 <acc_sensor_create>:
 800aef8:	b570      	push	{r4, r5, r6, lr}
 800aefa:	4a20      	ldr	r2, [pc, #128]	@ (800af7c <acc_sensor_create+0x84>)
 800aefc:	4606      	mov	r6, r0
 800aefe:	233b      	movs	r3, #59	@ 0x3b
 800af00:	2114      	movs	r1, #20
 800af02:	2001      	movs	r0, #1
 800af04:	f001 fe68 	bl	800cbd8 <acc_rss_integration_mem_calloc_debug>
 800af08:	b378      	cbz	r0, 800af6a <acc_sensor_create+0x72>
 800af0a:	4604      	mov	r4, r0
 800af0c:	f002 f852 	bl	800cfb4 <acc_radar_engine_a121_context_create>
 800af10:	4605      	mov	r5, r0
 800af12:	6120      	str	r0, [r4, #16]
 800af14:	b360      	cbz	r0, 800af70 <acc_sensor_create+0x78>
 800af16:	4b1a      	ldr	r3, [pc, #104]	@ (800af80 <acc_sensor_create+0x88>)
 800af18:	60a6      	str	r6, [r4, #8]
 800af1a:	2100      	movs	r1, #0
 800af1c:	e9c4 3100 	strd	r3, r1, [r4]
 800af20:	7361      	strb	r1, [r4, #13]
 800af22:	4630      	mov	r0, r6
 800af24:	f002 f902 	bl	800d12c <acc_radar_engine_a121_check_asic_id>
 800af28:	4605      	mov	r5, r0
 800af2a:	b168      	cbz	r0, 800af48 <acc_sensor_create+0x50>
 800af2c:	4630      	mov	r0, r6
 800af2e:	f002 f8ff 	bl	800d130 <acc_radar_engine_a121_is_sensor_running>
 800af32:	4605      	mov	r5, r0
 800af34:	b980      	cbnz	r0, 800af58 <acc_sensor_create+0x60>
 800af36:	68a0      	ldr	r0, [r4, #8]
 800af38:	f002 faa2 	bl	800d480 <acc_radar_engine_a121_init_interrupts>
 800af3c:	68a0      	ldr	r0, [r4, #8]
 800af3e:	4629      	mov	r1, r5
 800af40:	f002 faa0 	bl	800d484 <acc_radar_engine_a121_hibernate_off>
 800af44:	4620      	mov	r0, r4
 800af46:	bd70      	pop	{r4, r5, r6, pc}
 800af48:	4620      	mov	r0, r4
 800af4a:	f7ff ffb3 	bl	800aeb4 <acc_sensor_destroy>
 800af4e:	4630      	mov	r0, r6
 800af50:	f002 f8ee 	bl	800d130 <acc_radar_engine_a121_is_sensor_running>
 800af54:	b148      	cbz	r0, 800af6a <acc_sensor_create+0x72>
 800af56:	462c      	mov	r4, r5
 800af58:	4b0a      	ldr	r3, [pc, #40]	@ (800af84 <acc_sensor_create+0x8c>)
 800af5a:	4a0b      	ldr	r2, [pc, #44]	@ (800af88 <acc_sensor_create+0x90>)
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	4907      	ldr	r1, [pc, #28]	@ (800af7c <acc_sensor_create+0x84>)
 800af60:	2000      	movs	r0, #0
 800af62:	4798      	blx	r3
 800af64:	4620      	mov	r0, r4
 800af66:	f7ff ffa5 	bl	800aeb4 <acc_sensor_destroy>
 800af6a:	2400      	movs	r4, #0
 800af6c:	4620      	mov	r0, r4
 800af6e:	bd70      	pop	{r4, r5, r6, pc}
 800af70:	4620      	mov	r0, r4
 800af72:	f001 fe4d 	bl	800cc10 <acc_rss_integration_mem_free>
 800af76:	462c      	mov	r4, r5
 800af78:	e7f8      	b.n	800af6c <acc_sensor_create+0x74>
 800af7a:	bf00      	nop
 800af7c:	08012df4 	.word	0x08012df4
 800af80:	1337b00e 	.word	0x1337b00e
 800af84:	200009dc 	.word	0x200009dc
 800af88:	08012dfc 	.word	0x08012dfc

0800af8c <acc_sensor_calibrate>:
 800af8c:	b530      	push	{r4, r5, lr}
 800af8e:	b083      	sub	sp, #12
 800af90:	b128      	cbz	r0, 800af9e <acc_sensor_calibrate+0x12>
 800af92:	460d      	mov	r5, r1
 800af94:	4604      	mov	r4, r0
 800af96:	4912      	ldr	r1, [pc, #72]	@ (800afe0 <acc_sensor_calibrate+0x54>)
 800af98:	6800      	ldr	r0, [r0, #0]
 800af9a:	4288      	cmp	r0, r1
 800af9c:	d008      	beq.n	800afb0 <acc_sensor_calibrate+0x24>
 800af9e:	4b11      	ldr	r3, [pc, #68]	@ (800afe4 <acc_sensor_calibrate+0x58>)
 800afa0:	4a11      	ldr	r2, [pc, #68]	@ (800afe8 <acc_sensor_calibrate+0x5c>)
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	4911      	ldr	r1, [pc, #68]	@ (800afec <acc_sensor_calibrate+0x60>)
 800afa6:	2000      	movs	r0, #0
 800afa8:	4798      	blx	r3
 800afaa:	2000      	movs	r0, #0
 800afac:	b003      	add	sp, #12
 800afae:	bd30      	pop	{r4, r5, pc}
 800afb0:	2d00      	cmp	r5, #0
 800afb2:	d0fa      	beq.n	800afaa <acc_sensor_calibrate+0x1e>
 800afb4:	2a00      	cmp	r2, #0
 800afb6:	d0f8      	beq.n	800afaa <acc_sensor_calibrate+0x1e>
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d0f6      	beq.n	800afaa <acc_sensor_calibrate+0x1e>
 800afbc:	9200      	str	r2, [sp, #0]
 800afbe:	4619      	mov	r1, r3
 800afc0:	9a06      	ldr	r2, [sp, #24]
 800afc2:	68a0      	ldr	r0, [r4, #8]
 800afc4:	f104 030d 	add.w	r3, r4, #13
 800afc8:	f000 f8d4 	bl	800b174 <acc_calibration_a121_calibrate>
 800afcc:	2800      	cmp	r0, #0
 800afce:	d0ec      	beq.n	800afaa <acc_sensor_calibrate+0x1e>
 800afd0:	7b63      	ldrb	r3, [r4, #13]
 800afd2:	2b0a      	cmp	r3, #10
 800afd4:	bf0c      	ite	eq
 800afd6:	2301      	moveq	r3, #1
 800afd8:	2300      	movne	r3, #0
 800afda:	702b      	strb	r3, [r5, #0]
 800afdc:	e7e6      	b.n	800afac <acc_sensor_calibrate+0x20>
 800afde:	bf00      	nop
 800afe0:	1337b00e 	.word	0x1337b00e
 800afe4:	200009dc 	.word	0x200009dc
 800afe8:	08012ddc 	.word	0x08012ddc
 800afec:	08012df4 	.word	0x08012df4

0800aff0 <acc_sensor_prepare>:
 800aff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aff2:	b085      	sub	sp, #20
 800aff4:	b130      	cbz	r0, 800b004 <acc_sensor_prepare+0x14>
 800aff6:	4616      	mov	r6, r2
 800aff8:	461f      	mov	r7, r3
 800affa:	6802      	ldr	r2, [r0, #0]
 800affc:	4b22      	ldr	r3, [pc, #136]	@ (800b088 <acc_sensor_prepare+0x98>)
 800affe:	429a      	cmp	r2, r3
 800b000:	4604      	mov	r4, r0
 800b002:	d008      	beq.n	800b016 <acc_sensor_prepare+0x26>
 800b004:	4b21      	ldr	r3, [pc, #132]	@ (800b08c <acc_sensor_prepare+0x9c>)
 800b006:	4a22      	ldr	r2, [pc, #136]	@ (800b090 <acc_sensor_prepare+0xa0>)
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	4922      	ldr	r1, [pc, #136]	@ (800b094 <acc_sensor_prepare+0xa4>)
 800b00c:	2000      	movs	r0, #0
 800b00e:	4798      	blx	r3
 800b010:	2000      	movs	r0, #0
 800b012:	b005      	add	sp, #20
 800b014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b016:	b1f6      	cbz	r6, 800b056 <acc_sensor_prepare+0x66>
 800b018:	4630      	mov	r0, r6
 800b01a:	460d      	mov	r5, r1
 800b01c:	f000 fc46 	bl	800b8ac <acc_calibration_a121_validate_calibration>
 800b020:	b1c8      	cbz	r0, 800b056 <acc_sensor_prepare+0x66>
 800b022:	4628      	mov	r0, r5
 800b024:	f7ff fe26 	bl	800ac74 <acc_config_get_settings>
 800b028:	4605      	mov	r5, r0
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d0f1      	beq.n	800b012 <acc_sensor_prepare+0x22>
 800b02e:	68a0      	ldr	r0, [r4, #8]
 800b030:	f002 f87e 	bl	800d130 <acc_radar_engine_a121_is_sensor_running>
 800b034:	7320      	strb	r0, [r4, #12]
 800b036:	b188      	cbz	r0, 800b05c <acc_sensor_prepare+0x6c>
 800b038:	9700      	str	r7, [sp, #0]
 800b03a:	6923      	ldr	r3, [r4, #16]
 800b03c:	1d20      	adds	r0, r4, #4
 800b03e:	e9cd 3001 	strd	r3, r0, [sp, #4]
 800b042:	1da2      	adds	r2, r4, #6
 800b044:	9203      	str	r2, [sp, #12]
 800b046:	68a0      	ldr	r0, [r4, #8]
 800b048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b04a:	4632      	mov	r2, r6
 800b04c:	4629      	mov	r1, r5
 800b04e:	f002 f95d 	bl	800d30c <acc_radar_engine_a121_reconfigure>
 800b052:	b005      	add	sp, #20
 800b054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b056:	4b0d      	ldr	r3, [pc, #52]	@ (800b08c <acc_sensor_prepare+0x9c>)
 800b058:	4a0f      	ldr	r2, [pc, #60]	@ (800b098 <acc_sensor_prepare+0xa8>)
 800b05a:	e7d5      	b.n	800b008 <acc_sensor_prepare+0x18>
 800b05c:	68a0      	ldr	r0, [r4, #8]
 800b05e:	f002 fa13 	bl	800d488 <acc_radar_engine_a121_is_hibernate>
 800b062:	7b23      	ldrb	r3, [r4, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1e7      	bne.n	800b038 <acc_sensor_prepare+0x48>
 800b068:	2800      	cmp	r0, #0
 800b06a:	d1e5      	bne.n	800b038 <acc_sensor_prepare+0x48>
 800b06c:	9700      	str	r7, [sp, #0]
 800b06e:	6923      	ldr	r3, [r4, #16]
 800b070:	1d20      	adds	r0, r4, #4
 800b072:	e9cd 3001 	strd	r3, r0, [sp, #4]
 800b076:	1da2      	adds	r2, r4, #6
 800b078:	9203      	str	r2, [sp, #12]
 800b07a:	68a0      	ldr	r0, [r4, #8]
 800b07c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b07e:	4632      	mov	r2, r6
 800b080:	4629      	mov	r1, r5
 800b082:	f002 f8a3 	bl	800d1cc <acc_radar_engine_a121_prepare>
 800b086:	e7c4      	b.n	800b012 <acc_sensor_prepare+0x22>
 800b088:	1337b00e 	.word	0x1337b00e
 800b08c:	200009dc 	.word	0x200009dc
 800b090:	08012ddc 	.word	0x08012ddc
 800b094:	08012df4 	.word	0x08012df4
 800b098:	08012e18 	.word	0x08012e18

0800b09c <acc_sensor_measure>:
 800b09c:	b510      	push	{r4, lr}
 800b09e:	b120      	cbz	r0, 800b0aa <acc_sensor_measure+0xe>
 800b0a0:	4b0e      	ldr	r3, [pc, #56]	@ (800b0dc <acc_sensor_measure+0x40>)
 800b0a2:	6802      	ldr	r2, [r0, #0]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	d007      	beq.n	800b0ba <acc_sensor_measure+0x1e>
 800b0aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b0e0 <acc_sensor_measure+0x44>)
 800b0ac:	4a0d      	ldr	r2, [pc, #52]	@ (800b0e4 <acc_sensor_measure+0x48>)
 800b0ae:	691b      	ldr	r3, [r3, #16]
 800b0b0:	490d      	ldr	r1, [pc, #52]	@ (800b0e8 <acc_sensor_measure+0x4c>)
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	4798      	blx	r3
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	bd10      	pop	{r4, pc}
 800b0ba:	7b03      	ldrb	r3, [r0, #12]
 800b0bc:	b93b      	cbnz	r3, 800b0ce <acc_sensor_measure+0x32>
 800b0be:	6880      	ldr	r0, [r0, #8]
 800b0c0:	f001 ff8e 	bl	800cfe0 <acc_radar_engine_a121_run_program>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	d0f7      	beq.n	800b0b8 <acc_sensor_measure+0x1c>
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	7323      	strb	r3, [r4, #12]
 800b0cc:	bd10      	pop	{r4, pc}
 800b0ce:	6901      	ldr	r1, [r0, #16]
 800b0d0:	6880      	ldr	r0, [r0, #8]
 800b0d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0d6:	f001 bf85 	b.w	800cfe4 <acc_radar_engine_a121_measure>
 800b0da:	bf00      	nop
 800b0dc:	1337b00e 	.word	0x1337b00e
 800b0e0:	200009dc 	.word	0x200009dc
 800b0e4:	08012ddc 	.word	0x08012ddc
 800b0e8:	08012df4 	.word	0x08012df4

0800b0ec <acc_sensor_read>:
 800b0ec:	b530      	push	{r4, r5, lr}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	b128      	cbz	r0, 800b0fe <acc_sensor_read+0x12>
 800b0f2:	4b19      	ldr	r3, [pc, #100]	@ (800b158 <acc_sensor_read+0x6c>)
 800b0f4:	460d      	mov	r5, r1
 800b0f6:	6801      	ldr	r1, [r0, #0]
 800b0f8:	4299      	cmp	r1, r3
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	d008      	beq.n	800b110 <acc_sensor_read+0x24>
 800b0fe:	4b17      	ldr	r3, [pc, #92]	@ (800b15c <acc_sensor_read+0x70>)
 800b100:	4a17      	ldr	r2, [pc, #92]	@ (800b160 <acc_sensor_read+0x74>)
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	4917      	ldr	r1, [pc, #92]	@ (800b164 <acc_sensor_read+0x78>)
 800b106:	2000      	movs	r0, #0
 800b108:	4798      	blx	r3
 800b10a:	2000      	movs	r0, #0
 800b10c:	b005      	add	sp, #20
 800b10e:	bd30      	pop	{r4, r5, pc}
 800b110:	8883      	ldrh	r3, [r0, #4]
 800b112:	88c1      	ldrh	r1, [r0, #6]
 800b114:	440b      	add	r3, r1
 800b116:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800b11a:	d319      	bcc.n	800b150 <acc_sensor_read+0x64>
 800b11c:	6901      	ldr	r1, [r0, #16]
 800b11e:	6880      	ldr	r0, [r0, #8]
 800b120:	2300      	movs	r3, #0
 800b122:	f10d 020f 	add.w	r2, sp, #15
 800b126:	f88d 300f 	strb.w	r3, [sp, #15]
 800b12a:	f001 ff95 	bl	800d058 <acc_radar_engine_a121_verify_radar_data_ready>
 800b12e:	2800      	cmp	r0, #0
 800b130:	d0ec      	beq.n	800b10c <acc_sensor_read+0x20>
 800b132:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800b136:	6920      	ldr	r0, [r4, #16]
 800b138:	462a      	mov	r2, r5
 800b13a:	f001 ffcd 	bl	800d0d8 <acc_radar_engine_a121_update_buffer_header>
 800b13e:	9500      	str	r5, [sp, #0]
 800b140:	88e3      	ldrh	r3, [r4, #6]
 800b142:	88a2      	ldrh	r2, [r4, #4]
 800b144:	6921      	ldr	r1, [r4, #16]
 800b146:	68a0      	ldr	r0, [r4, #8]
 800b148:	f001 ff64 	bl	800d014 <acc_radar_engine_a121_transfer_data>
 800b14c:	b005      	add	sp, #20
 800b14e:	bd30      	pop	{r4, r5, pc}
 800b150:	4b02      	ldr	r3, [pc, #8]	@ (800b15c <acc_sensor_read+0x70>)
 800b152:	4a05      	ldr	r2, [pc, #20]	@ (800b168 <acc_sensor_read+0x7c>)
 800b154:	e7d5      	b.n	800b102 <acc_sensor_read+0x16>
 800b156:	bf00      	nop
 800b158:	1337b00e 	.word	0x1337b00e
 800b15c:	200009dc 	.word	0x200009dc
 800b160:	08012ddc 	.word	0x08012ddc
 800b164:	08012df4 	.word	0x08012df4
 800b168:	08012e2c 	.word	0x08012e2c

0800b16c <acc_sensor_status>:
 800b16c:	6880      	ldr	r0, [r0, #8]
 800b16e:	f002 bded 	b.w	800dd4c <acc_sensor_status_a121>
 800b172:	bf00      	nop

0800b174 <acc_calibration_a121_calibrate>:
 800b174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b178:	461c      	mov	r4, r3
 800b17a:	b091      	sub	sp, #68	@ 0x44
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800b180:	4605      	mov	r5, r0
 800b182:	4688      	mov	r8, r1
 800b184:	4616      	mov	r6, r2
 800b186:	2b0a      	cmp	r3, #10
 800b188:	d859      	bhi.n	800b23e <acc_calibration_a121_calibrate+0xca>
 800b18a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b18e:	0065      	.short	0x0065
 800b190:	00f2009d 	.word	0x00f2009d
 800b194:	000b015d 	.word	0x000b015d
 800b198:	020701d3 	.word	0x020701d3
 800b19c:	029b0266 	.word	0x029b0266
 800b1a0:	006502d1 	.word	0x006502d1
 800b1a4:	f001 fc08 	bl	800c9b8 <acc_a121_cal_session_ack_program>
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	f000 808b 	beq.w	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b1ae:	aa08      	add	r2, sp, #32
 800b1b0:	4641      	mov	r1, r8
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	f001 fc52 	bl	800ca5c <acc_a121_cal_session_get_4_bba_vga_program_data>
 800b1b8:	48bd      	ldr	r0, [pc, #756]	@ (800b4b0 <acc_calibration_a121_calibrate+0x33c>)
 800b1ba:	f8df b300 	ldr.w	fp, [pc, #768]	@ 800b4bc <acc_calibration_a121_calibrate+0x348>
 800b1be:	4629      	mov	r1, r5
 800b1c0:	f004 fd06 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b1c4:	49bb      	ldr	r1, [pc, #748]	@ (800b4b4 <acc_calibration_a121_calibrate+0x340>)
 800b1c6:	48bc      	ldr	r0, [pc, #752]	@ (800b4b8 <acc_calibration_a121_calibrate+0x344>)
 800b1c8:	f004 fcfa 	bl	800fbc0 <acc_diagnostic_log_array>
 800b1cc:	9808      	ldr	r0, [sp, #32]
 800b1ce:	2150      	movs	r1, #80	@ 0x50
 800b1d0:	f004 fd0e 	bl	800fbf0 <acc_diagnostic_log_data_i16>
 800b1d4:	f107 0a0a 	add.w	sl, r7, #10
 800b1d8:	f04f 0900 	mov.w	r9, #0
 800b1dc:	9808      	ldr	r0, [sp, #32]
 800b1de:	a905      	add	r1, sp, #20
 800b1e0:	eb00 1009 	add.w	r0, r0, r9, lsl #4
 800b1e4:	f000 fcc8 	bl	800bb78 <acc_cal_algorithms_bba_cal_ctrl>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	f109 0230 	add.w	r2, r9, #48	@ 0x30
 800b1ee:	48b3      	ldr	r0, [pc, #716]	@ (800b4bc <acc_calibration_a121_calibrate+0x348>)
 800b1f0:	f109 0901 	add.w	r9, r9, #1
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d065      	beq.n	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b1f8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800b1fc:	f88b 200d 	strb.w	r2, [fp, #13]
 800b200:	f004 fce6 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b204:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800b208:	f82a 3f02 	strh.w	r3, [sl, #2]!
 800b20c:	f1b9 0f0a 	cmp.w	r9, #10
 800b210:	d1e4      	bne.n	800b1dc <acc_calibration_a121_calibrate+0x68>
 800b212:	48ab      	ldr	r0, [pc, #684]	@ (800b4c0 <acc_calibration_a121_calibrate+0x34c>)
 800b214:	f004 fccc 	bl	800fbb0 <acc_diagnostic_log_set_scope>
 800b218:	4baa      	ldr	r3, [pc, #680]	@ (800b4c4 <acc_calibration_a121_calibrate+0x350>)
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	2260      	movs	r2, #96	@ 0x60
 800b21e:	9201      	str	r2, [sp, #4]
 800b220:	4641      	mov	r1, r8
 800b222:	4632      	mov	r2, r6
 800b224:	2300      	movs	r3, #0
 800b226:	4628      	mov	r0, r5
 800b228:	f002 fae0 	bl	800d7ec <acc_sensor_protocol_a121_load_lut>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	f040 82f7 	bne.w	800b820 <acc_calibration_a121_calibrate+0x6ac>
 800b232:	4ba5      	ldr	r3, [pc, #660]	@ (800b4c8 <acc_calibration_a121_calibrate+0x354>)
 800b234:	4aa5      	ldr	r2, [pc, #660]	@ (800b4cc <acc_calibration_a121_calibrate+0x358>)
 800b236:	691b      	ldr	r3, [r3, #16]
 800b238:	49a5      	ldr	r1, [pc, #660]	@ (800b4d0 <acc_calibration_a121_calibrate+0x35c>)
 800b23a:	4798      	blx	r3
 800b23c:	7823      	ldrb	r3, [r4, #0]
 800b23e:	49a2      	ldr	r1, [pc, #648]	@ (800b4c8 <acc_calibration_a121_calibrate+0x354>)
 800b240:	4aa4      	ldr	r2, [pc, #656]	@ (800b4d4 <acc_calibration_a121_calibrate+0x360>)
 800b242:	690e      	ldr	r6, [r1, #16]
 800b244:	49a2      	ldr	r1, [pc, #648]	@ (800b4d0 <acc_calibration_a121_calibrate+0x35c>)
 800b246:	2000      	movs	r0, #0
 800b248:	4605      	mov	r5, r0
 800b24a:	47b0      	blx	r6
 800b24c:	462b      	mov	r3, r5
 800b24e:	4628      	mov	r0, r5
 800b250:	7023      	strb	r3, [r4, #0]
 800b252:	b011      	add	sp, #68	@ 0x44
 800b254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b258:	228c      	movs	r2, #140	@ 0x8c
 800b25a:	2100      	movs	r1, #0
 800b25c:	4638      	mov	r0, r7
 800b25e:	f005 fd27 	bl	8010cb0 <memset>
 800b262:	f001 fc63 	bl	800cb2c <acc_rss_integration_get_sensor_reference_frequency>
 800b266:	ee07 0a90 	vmov	s15, r0
 800b26a:	f107 0a80 	add.w	sl, r7, #128	@ 0x80
 800b26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b272:	4651      	mov	r1, sl
 800b274:	a808      	add	r0, sp, #32
 800b276:	edcd 7a08 	vstr	s15, [sp, #32]
 800b27a:	f004 fb53 	bl	800f924 <acc_cpd_pll_divisors_calculate>
 800b27e:	4681      	mov	r9, r0
 800b280:	4895      	ldr	r0, [pc, #596]	@ (800b4d8 <acc_calibration_a121_calibrate+0x364>)
 800b282:	f004 fc95 	bl	800fbb0 <acc_diagnostic_log_set_scope>
 800b286:	488a      	ldr	r0, [pc, #552]	@ (800b4b0 <acc_calibration_a121_calibrate+0x33c>)
 800b288:	4629      	mov	r1, r5
 800b28a:	f004 fca1 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b28e:	f8b7 1082 	ldrh.w	r1, [r7, #130]	@ 0x82
 800b292:	4892      	ldr	r0, [pc, #584]	@ (800b4dc <acc_calibration_a121_calibrate+0x368>)
 800b294:	f004 fc9c 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b298:	f8b7 1084 	ldrh.w	r1, [r7, #132]	@ 0x84
 800b29c:	4890      	ldr	r0, [pc, #576]	@ (800b4e0 <acc_calibration_a121_calibrate+0x36c>)
 800b29e:	f004 fc97 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b2a2:	f8b7 1086 	ldrh.w	r1, [r7, #134]	@ 0x86
 800b2a6:	488f      	ldr	r0, [pc, #572]	@ (800b4e4 <acc_calibration_a121_calibrate+0x370>)
 800b2a8:	f004 fc92 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b2ac:	488e      	ldr	r0, [pc, #568]	@ (800b4e8 <acc_calibration_a121_calibrate+0x374>)
 800b2ae:	f8b7 1080 	ldrh.w	r1, [r7, #128]	@ 0x80
 800b2b2:	f004 fc8d 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b2b6:	488d      	ldr	r0, [pc, #564]	@ (800b4ec <acc_calibration_a121_calibrate+0x378>)
 800b2b8:	f004 fc7a 	bl	800fbb0 <acc_diagnostic_log_set_scope>
 800b2bc:	f1b9 0f00 	cmp.w	r9, #0
 800b2c0:	f040 82a2 	bne.w	800b808 <acc_calibration_a121_calibrate+0x694>
 800b2c4:	7823      	ldrb	r3, [r4, #0]
 800b2c6:	e7ba      	b.n	800b23e <acc_calibration_a121_calibrate+0xca>
 800b2c8:	f001 fb76 	bl	800c9b8 <acc_a121_cal_session_ack_program>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d0f9      	beq.n	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b2d0:	aa08      	add	r2, sp, #32
 800b2d2:	ab05      	add	r3, sp, #20
 800b2d4:	e9cd 3200 	strd	r3, r2, [sp]
 800b2d8:	4641      	mov	r1, r8
 800b2da:	ab03      	add	r3, sp, #12
 800b2dc:	f10d 020e 	add.w	r2, sp, #14
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	f001 fb8b 	bl	800c9fc <acc_a121_cal_session_get_1_pll_cbank_temp_program_data>
 800b2e6:	4872      	ldr	r0, [pc, #456]	@ (800b4b0 <acc_calibration_a121_calibrate+0x33c>)
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	f004 fc71 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b2ee:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800b2f2:	487f      	ldr	r0, [pc, #508]	@ (800b4f0 <acc_calibration_a121_calibrate+0x37c>)
 800b2f4:	f004 fc6c 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b2f8:	496e      	ldr	r1, [pc, #440]	@ (800b4b4 <acc_calibration_a121_calibrate+0x340>)
 800b2fa:	487e      	ldr	r0, [pc, #504]	@ (800b4f4 <acc_calibration_a121_calibrate+0x380>)
 800b2fc:	f004 fc60 	bl	800fbc0 <acc_diagnostic_log_array>
 800b300:	9808      	ldr	r0, [sp, #32]
 800b302:	2110      	movs	r1, #16
 800b304:	f004 fc6c 	bl	800fbe0 <acc_diagnostic_log_data_u16>
 800b308:	9a08      	ldr	r2, [sp, #32]
 800b30a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800b30e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800b312:	ab04      	add	r3, sp, #16
 800b314:	f000 fad6 	bl	800b8c4 <acc_cal_algorithms_pll_cbank>
 800b318:	2800      	cmp	r0, #0
 800b31a:	d0d3      	beq.n	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b31c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800b320:	f000 fe4e 	bl	800bfc0 <acc_cal_algorithms_wavelet_duration_p1>
 800b324:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b328:	4606      	mov	r6, r0
 800b32a:	4873      	ldr	r0, [pc, #460]	@ (800b4f8 <acc_calibration_a121_calibrate+0x384>)
 800b32c:	f004 fc50 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b330:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800b334:	4871      	ldr	r0, [pc, #452]	@ (800b4fc <acc_calibration_a121_calibrate+0x388>)
 800b336:	f004 fc4b 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b33a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800b33e:	4870      	ldr	r0, [pc, #448]	@ (800b500 <acc_calibration_a121_calibrate+0x38c>)
 800b340:	f004 fc46 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b344:	486f      	ldr	r0, [pc, #444]	@ (800b504 <acc_calibration_a121_calibrate+0x390>)
 800b346:	4631      	mov	r1, r6
 800b348:	f004 fc42 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b34c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b350:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800b354:	803b      	strh	r3, [r7, #0]
 800b356:	4628      	mov	r0, r5
 800b358:	84be      	strh	r6, [r7, #36]	@ 0x24
 800b35a:	8079      	strh	r1, [r7, #2]
 800b35c:	f001 f99c 	bl	800c698 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program>
 800b360:	4605      	mov	r5, r0
 800b362:	2302      	movs	r3, #2
 800b364:	2d00      	cmp	r5, #0
 800b366:	d0ad      	beq.n	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b368:	4628      	mov	r0, r5
 800b36a:	7023      	strb	r3, [r4, #0]
 800b36c:	b011      	add	sp, #68	@ 0x44
 800b36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b372:	f001 fb21 	bl	800c9b8 <acc_a121_cal_session_ack_program>
 800b376:	2800      	cmp	r0, #0
 800b378:	d0a4      	beq.n	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b37a:	ab08      	add	r3, sp, #32
 800b37c:	aa05      	add	r2, sp, #20
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	4641      	mov	r1, r8
 800b382:	ab04      	add	r3, sp, #16
 800b384:	4628      	mov	r0, r5
 800b386:	f001 fb51 	bl	800ca2c <acc_a121_cal_session_get_2_pll_ibias_vfast2_ldo_program_data>
 800b38a:	494a      	ldr	r1, [pc, #296]	@ (800b4b4 <acc_calibration_a121_calibrate+0x340>)
 800b38c:	485e      	ldr	r0, [pc, #376]	@ (800b508 <acc_calibration_a121_calibrate+0x394>)
 800b38e:	f004 fc17 	bl	800fbc0 <acc_diagnostic_log_array>
 800b392:	9805      	ldr	r0, [sp, #20]
 800b394:	2110      	movs	r1, #16
 800b396:	f004 fc2b 	bl	800fbf0 <acc_diagnostic_log_data_i16>
 800b39a:	9805      	ldr	r0, [sp, #20]
 800b39c:	a903      	add	r1, sp, #12
 800b39e:	f000 facb 	bl	800b938 <acc_cal_algorithms_pll_ibias>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d08e      	beq.n	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b3a6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b3aa:	4858      	ldr	r0, [pc, #352]	@ (800b50c <acc_calibration_a121_calibrate+0x398>)
 800b3ac:	f004 fc10 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b3b0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b3b4:	80bb      	strh	r3, [r7, #4]
 800b3b6:	4856      	ldr	r0, [pc, #344]	@ (800b510 <acc_calibration_a121_calibrate+0x39c>)
 800b3b8:	f004 fbfa 	bl	800fbb0 <acc_diagnostic_log_set_scope>
 800b3bc:	483c      	ldr	r0, [pc, #240]	@ (800b4b0 <acc_calibration_a121_calibrate+0x33c>)
 800b3be:	4629      	mov	r1, r5
 800b3c0:	f004 fc06 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b3c4:	493b      	ldr	r1, [pc, #236]	@ (800b4b4 <acc_calibration_a121_calibrate+0x340>)
 800b3c6:	4853      	ldr	r0, [pc, #332]	@ (800b514 <acc_calibration_a121_calibrate+0x3a0>)
 800b3c8:	f004 fbfa 	bl	800fbc0 <acc_diagnostic_log_array>
 800b3cc:	9808      	ldr	r0, [sp, #32]
 800b3ce:	2130      	movs	r1, #48	@ 0x30
 800b3d0:	f004 fc06 	bl	800fbe0 <acc_diagnostic_log_data_u16>
 800b3d4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800b3d8:	484f      	ldr	r0, [pc, #316]	@ (800b518 <acc_calibration_a121_calibrate+0x3a4>)
 800b3da:	f004 fbf9 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b3de:	9908      	ldr	r1, [sp, #32]
 800b3e0:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800b3e4:	f10d 020e 	add.w	r2, sp, #14
 800b3e8:	f000 faf0 	bl	800b9cc <acc_cal_algorithms_vfast2_ldo>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	f43f af69 	beq.w	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b3f2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800b3f6:	4849      	ldr	r0, [pc, #292]	@ (800b51c <acc_calibration_a121_calibrate+0x3a8>)
 800b3f8:	f004 fbea 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b3fc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800b400:	4847      	ldr	r0, [pc, #284]	@ (800b520 <acc_calibration_a121_calibrate+0x3ac>)
 800b402:	817b      	strh	r3, [r7, #10]
 800b404:	f004 fbd4 	bl	800fbb0 <acc_diagnostic_log_set_scope>
 800b408:	2001      	movs	r0, #1
 800b40a:	ab02      	add	r3, sp, #8
 800b40c:	e9cd 3000 	strd	r3, r0, [sp]
 800b410:	4632      	mov	r2, r6
 800b412:	4641      	mov	r1, r8
 800b414:	f44f 567e 	mov.w	r6, #16256	@ 0x3f80
 800b418:	2300      	movs	r3, #0
 800b41a:	4628      	mov	r0, r5
 800b41c:	f8ad 6008 	strh.w	r6, [sp, #8]
 800b420:	f002 f9e4 	bl	800d7ec <acc_sensor_protocol_a121_load_lut>
 800b424:	b920      	cbnz	r0, 800b430 <acc_calibration_a121_calibrate+0x2bc>
 800b426:	4b28      	ldr	r3, [pc, #160]	@ (800b4c8 <acc_calibration_a121_calibrate+0x354>)
 800b428:	4a3e      	ldr	r2, [pc, #248]	@ (800b524 <acc_calibration_a121_calibrate+0x3b0>)
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	4928      	ldr	r1, [pc, #160]	@ (800b4d0 <acc_calibration_a121_calibrate+0x35c>)
 800b42e:	4798      	blx	r3
 800b430:	4628      	mov	r0, r5
 800b432:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800b436:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800b43a:	f001 f94b 	bl	800c6d4 <acc_a121_cal_session_start_3_delay_cbank_program>
 800b43e:	4605      	mov	r5, r0
 800b440:	2303      	movs	r3, #3
 800b442:	2d00      	cmp	r5, #0
 800b444:	d190      	bne.n	800b368 <acc_calibration_a121_calibrate+0x1f4>
 800b446:	e73d      	b.n	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b448:	2300      	movs	r3, #0
 800b44a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b44e:	f001 fab3 	bl	800c9b8 <acc_a121_cal_session_ack_program>
 800b452:	2800      	cmp	r0, #0
 800b454:	f43f af36 	beq.w	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b458:	aa08      	add	r2, sp, #32
 800b45a:	4641      	mov	r1, r8
 800b45c:	4628      	mov	r0, r5
 800b45e:	f001 faf5 	bl	800ca4c <acc_a121_cal_session_get_3_delay_cbank_program_data>
 800b462:	4813      	ldr	r0, [pc, #76]	@ (800b4b0 <acc_calibration_a121_calibrate+0x33c>)
 800b464:	4629      	mov	r1, r5
 800b466:	f004 fbb3 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b46a:	4912      	ldr	r1, [pc, #72]	@ (800b4b4 <acc_calibration_a121_calibrate+0x340>)
 800b46c:	482e      	ldr	r0, [pc, #184]	@ (800b528 <acc_calibration_a121_calibrate+0x3b4>)
 800b46e:	f004 fba7 	bl	800fbc0 <acc_diagnostic_log_array>
 800b472:	9808      	ldr	r0, [sp, #32]
 800b474:	2120      	movs	r1, #32
 800b476:	f004 fbbb 	bl	800fbf0 <acc_diagnostic_log_data_i16>
 800b47a:	9808      	ldr	r0, [sp, #32]
 800b47c:	a905      	add	r1, sp, #20
 800b47e:	f000 faf1 	bl	800ba64 <acc_cal_algorithms_delay_cbank>
 800b482:	2800      	cmp	r0, #0
 800b484:	f43f af1e 	beq.w	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b488:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800b48c:	4827      	ldr	r0, [pc, #156]	@ (800b52c <acc_calibration_a121_calibrate+0x3b8>)
 800b48e:	f004 fb9f 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b492:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800b496:	80fb      	strh	r3, [r7, #6]
 800b498:	4825      	ldr	r0, [pc, #148]	@ (800b530 <acc_calibration_a121_calibrate+0x3bc>)
 800b49a:	f004 fb89 	bl	800fbb0 <acc_diagnostic_log_set_scope>
 800b49e:	4628      	mov	r0, r5
 800b4a0:	f001 f946 	bl	800c730 <acc_a121_cal_session_start_4_bba_vga_program>
 800b4a4:	4605      	mov	r5, r0
 800b4a6:	2304      	movs	r3, #4
 800b4a8:	2d00      	cmp	r5, #0
 800b4aa:	f47f af5d 	bne.w	800b368 <acc_calibration_a121_calibrate+0x1f4>
 800b4ae:	e709      	b.n	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b4b0:	08012e44 	.word	0x08012e44
 800b4b4:	08013588 	.word	0x08013588
 800b4b8:	08012ff0 	.word	0x08012ff0
 800b4bc:	2000002c 	.word	0x2000002c
 800b4c0:	08013008 	.word	0x08013008
 800b4c4:	0801584c 	.word	0x0801584c
 800b4c8:	200009dc 	.word	0x200009dc
 800b4cc:	08013020 	.word	0x08013020
 800b4d0:	08012f98 	.word	0x08012f98
 800b4d4:	080132c0 	.word	0x080132c0
 800b4d8:	08013f84 	.word	0x08013f84
 800b4dc:	08012e50 	.word	0x08012e50
 800b4e0:	08012e60 	.word	0x08012e60
 800b4e4:	08012e6c 	.word	0x08012e6c
 800b4e8:	08012e78 	.word	0x08012e78
 800b4ec:	08012e88 	.word	0x08012e88
 800b4f0:	08012e98 	.word	0x08012e98
 800b4f4:	08012ea4 	.word	0x08012ea4
 800b4f8:	08012ec0 	.word	0x08012ec0
 800b4fc:	08012ecc 	.word	0x08012ecc
 800b500:	08012ed4 	.word	0x08012ed4
 800b504:	08012ee0 	.word	0x08012ee0
 800b508:	08012eec 	.word	0x08012eec
 800b50c:	08012f0c 	.word	0x08012f0c
 800b510:	08012f18 	.word	0x08012f18
 800b514:	08012f30 	.word	0x08012f30
 800b518:	08012f44 	.word	0x08012f44
 800b51c:	08012f50 	.word	0x08012f50
 800b520:	08012f5c 	.word	0x08012f5c
 800b524:	08012f74 	.word	0x08012f74
 800b528:	08012fac 	.word	0x08012fac
 800b52c:	08012fd0 	.word	0x08012fd0
 800b530:	08012fdc 	.word	0x08012fdc
 800b534:	f001 fa40 	bl	800c9b8 <acc_a121_cal_session_ack_program>
 800b538:	2800      	cmp	r0, #0
 800b53a:	f43f aec3 	beq.w	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b53e:	aa08      	add	r2, sp, #32
 800b540:	4641      	mov	r1, r8
 800b542:	4628      	mov	r0, r5
 800b544:	f001 fa92 	bl	800ca6c <acc_a121_cal_session_get_5_area_index_program_data>
 800b548:	49bb      	ldr	r1, [pc, #748]	@ (800b838 <acc_calibration_a121_calibrate+0x6c4>)
 800b54a:	48bc      	ldr	r0, [pc, #752]	@ (800b83c <acc_calibration_a121_calibrate+0x6c8>)
 800b54c:	f004 fb38 	bl	800fbc0 <acc_diagnostic_log_array>
 800b550:	9808      	ldr	r0, [sp, #32]
 800b552:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800b556:	f004 fb4b 	bl	800fbf0 <acc_diagnostic_log_data_i16>
 800b55a:	9808      	ldr	r0, [sp, #32]
 800b55c:	a905      	add	r1, sp, #20
 800b55e:	f000 fb7b 	bl	800bc58 <acc_cal_algorithms_area_index>
 800b562:	2800      	cmp	r0, #0
 800b564:	f43f aeae 	beq.w	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b568:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800b56c:	48b4      	ldr	r0, [pc, #720]	@ (800b840 <acc_calibration_a121_calibrate+0x6cc>)
 800b56e:	f004 fb2f 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b572:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800b576:	813b      	strh	r3, [r7, #8]
 800b578:	48b2      	ldr	r0, [pc, #712]	@ (800b844 <acc_calibration_a121_calibrate+0x6d0>)
 800b57a:	f004 fb19 	bl	800fbb0 <acc_diagnostic_log_set_scope>
 800b57e:	8938      	ldrh	r0, [r7, #8]
 800b580:	aa08      	add	r2, sp, #32
 800b582:	2160      	movs	r1, #96	@ 0x60
 800b584:	f004 fab4 	bl	800faf0 <acc_dll_calculate_area_settings>
 800b588:	4628      	mov	r0, r5
 800b58a:	a908      	add	r1, sp, #32
 800b58c:	f001 f924 	bl	800c7d8 <acc_a121_cal_session_start_6_tx_freq_program>
 800b590:	4605      	mov	r5, r0
 800b592:	2306      	movs	r3, #6
 800b594:	2d00      	cmp	r5, #0
 800b596:	f47f aee7 	bne.w	800b368 <acc_calibration_a121_calibrate+0x1f4>
 800b59a:	e693      	b.n	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b59c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b5a0:	f8ad 3010 	strh.w	r3, [sp, #16]
 800b5a4:	f001 fa08 	bl	800c9b8 <acc_a121_cal_session_ack_program>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	f43f ae8b 	beq.w	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b5ae:	f001 fabd 	bl	800cb2c <acc_rss_integration_get_sensor_reference_frequency>
 800b5b2:	4ea5      	ldr	r6, [pc, #660]	@ (800b848 <acc_calibration_a121_calibrate+0x6d4>)
 800b5b4:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800b5b8:	f8df 92ec 	ldr.w	r9, [pc, #748]	@ 800b8a8 <acc_calibration_a121_calibrate+0x734>
 800b5bc:	fba6 2600 	umull	r2, r6, r6, r0
 800b5c0:	4641      	mov	r1, r8
 800b5c2:	aa05      	add	r2, sp, #20
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	09b6      	lsrs	r6, r6, #6
 800b5c8:	fb06 f603 	mul.w	r6, r6, r3
 800b5cc:	f001 fa58 	bl	800ca80 <acc_a121_cal_session_get_6_tx_freq_program_data>
 800b5d0:	4999      	ldr	r1, [pc, #612]	@ (800b838 <acc_calibration_a121_calibrate+0x6c4>)
 800b5d2:	489e      	ldr	r0, [pc, #632]	@ (800b84c <acc_calibration_a121_calibrate+0x6d8>)
 800b5d4:	f004 faf4 	bl	800fbc0 <acc_diagnostic_log_array>
 800b5d8:	9805      	ldr	r0, [sp, #20]
 800b5da:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800b5de:	f004 fb07 	bl	800fbf0 <acc_diagnostic_log_data_i16>
 800b5e2:	ab04      	add	r3, sp, #16
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	9300      	str	r3, [sp, #0]
 800b5e8:	4a99      	ldr	r2, [pc, #612]	@ (800b850 <acc_calibration_a121_calibrate+0x6dc>)
 800b5ea:	9905      	ldr	r1, [sp, #20]
 800b5ec:	ab08      	add	r3, sp, #32
 800b5ee:	f000 fd27 	bl	800c040 <acc_cal_algorithms_tx_freq_ctrl>
 800b5f2:	46cb      	mov	fp, r9
 800b5f4:	4682      	mov	sl, r0
 800b5f6:	f10d 081c 	add.w	r8, sp, #28
 800b5fa:	2630      	movs	r6, #48	@ 0x30
 800b5fc:	f889 600c 	strb.w	r6, [r9, #12]
 800b600:	3601      	adds	r6, #1
 800b602:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800b606:	4658      	mov	r0, fp
 800b608:	b2f6      	uxtb	r6, r6
 800b60a:	f004 fae1 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b60e:	2e38      	cmp	r6, #56	@ 0x38
 800b610:	d1f4      	bne.n	800b5fc <acc_calibration_a121_calibrate+0x488>
 800b612:	f1ba 0f00 	cmp.w	sl, #0
 800b616:	f43f ae55 	beq.w	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b61a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800b61e:	488d      	ldr	r0, [pc, #564]	@ (800b854 <acc_calibration_a121_calibrate+0x6e0>)
 800b620:	f004 fad6 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b624:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800b628:	488b      	ldr	r0, [pc, #556]	@ (800b858 <acc_calibration_a121_calibrate+0x6e4>)
 800b62a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b62c:	f004 fac0 	bl	800fbb0 <acc_diagnostic_log_set_scope>
 800b630:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800b634:	4628      	mov	r0, r5
 800b636:	f001 f95f 	bl	800c8f8 <acc_a121_cal_session_start_7_rx_freq_program>
 800b63a:	2800      	cmp	r0, #0
 800b63c:	f43f ae42 	beq.w	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b640:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800b644:	9805      	ldr	r0, [sp, #20]
 800b646:	2201      	movs	r2, #1
 800b648:	2100      	movs	r1, #0
 800b64a:	f000 fbcd 	bl	800bde8 <acc_cal_algorithms_iq_imbalance>
 800b64e:	4605      	mov	r5, r0
 800b650:	2307      	movs	r3, #7
 800b652:	2d00      	cmp	r5, #0
 800b654:	f47f ae88 	bne.w	800b368 <acc_calibration_a121_calibrate+0x1f4>
 800b658:	e634      	b.n	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b65a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b65e:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b662:	f001 f9a9 	bl	800c9b8 <acc_a121_cal_session_ack_program>
 800b666:	2800      	cmp	r0, #0
 800b668:	f43f ae2c 	beq.w	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b66c:	aa08      	add	r2, sp, #32
 800b66e:	4641      	mov	r1, r8
 800b670:	4628      	mov	r0, r5
 800b672:	f001 fa07 	bl	800ca84 <acc_a121_cal_session_get_7_rx_freq_program_data>
 800b676:	4970      	ldr	r1, [pc, #448]	@ (800b838 <acc_calibration_a121_calibrate+0x6c4>)
 800b678:	4878      	ldr	r0, [pc, #480]	@ (800b85c <acc_calibration_a121_calibrate+0x6e8>)
 800b67a:	f004 faa1 	bl	800fbc0 <acc_diagnostic_log_array>
 800b67e:	9808      	ldr	r0, [sp, #32]
 800b680:	2110      	movs	r1, #16
 800b682:	f004 fab5 	bl	800fbf0 <acc_diagnostic_log_data_i16>
 800b686:	9808      	ldr	r0, [sp, #32]
 800b688:	aa05      	add	r2, sp, #20
 800b68a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800b68e:	f000 fc55 	bl	800bf3c <acc_cal_algorithms_rx_freq_ctrl>
 800b692:	2800      	cmp	r0, #0
 800b694:	f43f ae16 	beq.w	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b698:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800b69c:	4870      	ldr	r0, [pc, #448]	@ (800b860 <acc_calibration_a121_calibrate+0x6ec>)
 800b69e:	f004 fa97 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b6a2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800b6a6:	843b      	strh	r3, [r7, #32]
 800b6a8:	486e      	ldr	r0, [pc, #440]	@ (800b864 <acc_calibration_a121_calibrate+0x6f0>)
 800b6aa:	f004 fa81 	bl	800fbb0 <acc_diagnostic_log_set_scope>
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800b6b4:	f001 f93e 	bl	800c934 <acc_a121_cal_session_start_8_phase_enhancement_program>
 800b6b8:	4605      	mov	r5, r0
 800b6ba:	2308      	movs	r3, #8
 800b6bc:	2d00      	cmp	r5, #0
 800b6be:	f47f ae53 	bne.w	800b368 <acc_calibration_a121_calibrate+0x1f4>
 800b6c2:	e5ff      	b.n	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b6c4:	f001 f978 	bl	800c9b8 <acc_a121_cal_session_ack_program>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	f43f adfb 	beq.w	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b6ce:	aa08      	add	r2, sp, #32
 800b6d0:	4641      	mov	r1, r8
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	f001 f9de 	bl	800ca94 <acc_a121_cal_session_get_8_phase_enhancement_program_data>
 800b6d8:	4957      	ldr	r1, [pc, #348]	@ (800b838 <acc_calibration_a121_calibrate+0x6c4>)
 800b6da:	4863      	ldr	r0, [pc, #396]	@ (800b868 <acc_calibration_a121_calibrate+0x6f4>)
 800b6dc:	f004 fa70 	bl	800fbc0 <acc_diagnostic_log_array>
 800b6e0:	f107 0626 	add.w	r6, r7, #38	@ 0x26
 800b6e4:	9808      	ldr	r0, [sp, #32]
 800b6e6:	2160      	movs	r1, #96	@ 0x60
 800b6e8:	f004 fa82 	bl	800fbf0 <acc_diagnostic_log_data_i16>
 800b6ec:	9808      	ldr	r0, [sp, #32]
 800b6ee:	4631      	mov	r1, r6
 800b6f0:	f107 0256 	add.w	r2, r7, #86	@ 0x56
 800b6f4:	f000 fd34 	bl	800c160 <acc_cal_algorithms_phase_enhancement>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	f43f ade3 	beq.w	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b6fe:	494e      	ldr	r1, [pc, #312]	@ (800b838 <acc_calibration_a121_calibrate+0x6c4>)
 800b700:	485a      	ldr	r0, [pc, #360]	@ (800b86c <acc_calibration_a121_calibrate+0x6f8>)
 800b702:	f004 fa5d 	bl	800fbc0 <acc_diagnostic_log_array>
 800b706:	4630      	mov	r0, r6
 800b708:	2118      	movs	r1, #24
 800b70a:	f004 fa71 	bl	800fbf0 <acc_diagnostic_log_data_i16>
 800b70e:	f9b7 1056 	ldrsh.w	r1, [r7, #86]	@ 0x56
 800b712:	4857      	ldr	r0, [pc, #348]	@ (800b870 <acc_calibration_a121_calibrate+0x6fc>)
 800b714:	f004 fa5c 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b718:	4856      	ldr	r0, [pc, #344]	@ (800b874 <acc_calibration_a121_calibrate+0x700>)
 800b71a:	f004 fa49 	bl	800fbb0 <acc_diagnostic_log_set_scope>
 800b71e:	4628      	mov	r0, r5
 800b720:	f001 f946 	bl	800c9b0 <acc_a121_cal_session_start_9_pulseshaper_program>
 800b724:	4605      	mov	r5, r0
 800b726:	2309      	movs	r3, #9
 800b728:	2d00      	cmp	r5, #0
 800b72a:	f47f ae1d 	bne.w	800b368 <acc_calibration_a121_calibrate+0x1f4>
 800b72e:	e5c9      	b.n	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b730:	f001 f942 	bl	800c9b8 <acc_a121_cal_session_ack_program>
 800b734:	2800      	cmp	r0, #0
 800b736:	f43f adc5 	beq.w	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b73a:	aa08      	add	r2, sp, #32
 800b73c:	ab04      	add	r3, sp, #16
 800b73e:	4641      	mov	r1, r8
 800b740:	4628      	mov	r0, r5
 800b742:	f001 f9af 	bl	800caa4 <acc_a121_cal_session_get_9_pulseshaper_program_data>
 800b746:	493c      	ldr	r1, [pc, #240]	@ (800b838 <acc_calibration_a121_calibrate+0x6c4>)
 800b748:	484b      	ldr	r0, [pc, #300]	@ (800b878 <acc_calibration_a121_calibrate+0x704>)
 800b74a:	f004 fa39 	bl	800fbc0 <acc_diagnostic_log_array>
 800b74e:	9808      	ldr	r0, [sp, #32]
 800b750:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800b754:	f004 fa44 	bl	800fbe0 <acc_diagnostic_log_data_u16>
 800b758:	9808      	ldr	r0, [sp, #32]
 800b75a:	a905      	add	r1, sp, #20
 800b75c:	f000 fe58 	bl	800c410 <acc_cal_algorithms_pulseshaper_wavelet>
 800b760:	2800      	cmp	r0, #0
 800b762:	f43f adaf 	beq.w	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b766:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 800b76a:	9b07      	ldr	r3, [sp, #28]
 800b76c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b76e:	e9c7 2117 	strd	r2, r1, [r7, #92]	@ 0x5c
 800b772:	4842      	ldr	r0, [pc, #264]	@ (800b87c <acc_calibration_a121_calibrate+0x708>)
 800b774:	f004 fa2c 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b778:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800b77a:	4841      	ldr	r0, [pc, #260]	@ (800b880 <acc_calibration_a121_calibrate+0x70c>)
 800b77c:	f004 fa28 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b780:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b782:	4840      	ldr	r0, [pc, #256]	@ (800b884 <acc_calibration_a121_calibrate+0x710>)
 800b784:	f004 fa24 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b788:	483f      	ldr	r0, [pc, #252]	@ (800b888 <acc_calibration_a121_calibrate+0x714>)
 800b78a:	f004 fa11 	bl	800fbb0 <acc_diagnostic_log_set_scope>
 800b78e:	492a      	ldr	r1, [pc, #168]	@ (800b838 <acc_calibration_a121_calibrate+0x6c4>)
 800b790:	483e      	ldr	r0, [pc, #248]	@ (800b88c <acc_calibration_a121_calibrate+0x718>)
 800b792:	f004 fa15 	bl	800fbc0 <acc_diagnostic_log_array>
 800b796:	9804      	ldr	r0, [sp, #16]
 800b798:	f44f 7158 	mov.w	r1, #864	@ 0x360
 800b79c:	f004 fa20 	bl	800fbe0 <acc_diagnostic_log_data_u16>
 800b7a0:	9804      	ldr	r0, [sp, #16]
 800b7a2:	a908      	add	r1, sp, #32
 800b7a4:	f000 fe7c 	bl	800c4a0 <acc_cal_algorithms_pulseshaper_supply>
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	f43f ad8a 	beq.w	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b7b0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800b7b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7b6:	66b9      	str	r1, [r7, #104]	@ 0x68
 800b7b8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b7ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b7bc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b7be:	673b      	str	r3, [r7, #112]	@ 0x70
 800b7c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b7c4:	e9c7 121d 	strd	r1, r2, [r7, #116]	@ 0x74
 800b7c8:	4638      	mov	r0, r7
 800b7ca:	218c      	movs	r1, #140	@ 0x8c
 800b7cc:	f003 fda2 	bl	800f314 <acc_alg_basic_util_crc32>
 800b7d0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b7d2:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800b7d6:	482e      	ldr	r0, [pc, #184]	@ (800b890 <acc_calibration_a121_calibrate+0x71c>)
 800b7d8:	f004 f9fa 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b7dc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b7de:	482d      	ldr	r0, [pc, #180]	@ (800b894 <acc_calibration_a121_calibrate+0x720>)
 800b7e0:	f004 f9f6 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b7e4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800b7e6:	482c      	ldr	r0, [pc, #176]	@ (800b898 <acc_calibration_a121_calibrate+0x724>)
 800b7e8:	f004 f9f2 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b7ec:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800b7ee:	482b      	ldr	r0, [pc, #172]	@ (800b89c <acc_calibration_a121_calibrate+0x728>)
 800b7f0:	f004 f9ee 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b7f4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b7f6:	482a      	ldr	r0, [pc, #168]	@ (800b8a0 <acc_calibration_a121_calibrate+0x72c>)
 800b7f8:	f004 f9ea 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b7fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b7fe:	4829      	ldr	r0, [pc, #164]	@ (800b8a4 <acc_calibration_a121_calibrate+0x730>)
 800b800:	f004 f9e6 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800b804:	230a      	movs	r3, #10
 800b806:	e522      	b.n	800b24e <acc_calibration_a121_calibrate+0xda>
 800b808:	4653      	mov	r3, sl
 800b80a:	4628      	mov	r0, r5
 800b80c:	4632      	mov	r2, r6
 800b80e:	4641      	mov	r1, r8
 800b810:	f000 feca 	bl	800c5a8 <acc_a121_cal_session_start_1_pll_cbank_temp_program>
 800b814:	4605      	mov	r5, r0
 800b816:	2301      	movs	r3, #1
 800b818:	2d00      	cmp	r5, #0
 800b81a:	f47f ada5 	bne.w	800b368 <acc_calibration_a121_calibrate+0x1f4>
 800b81e:	e551      	b.n	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b820:	4628      	mov	r0, r5
 800b822:	88fa      	ldrh	r2, [r7, #6]
 800b824:	f107 010c 	add.w	r1, r7, #12
 800b828:	f000 ff86 	bl	800c738 <acc_a121_cal_session_start_5_area_index_program>
 800b82c:	4605      	mov	r5, r0
 800b82e:	2305      	movs	r3, #5
 800b830:	2d00      	cmp	r5, #0
 800b832:	f47f ad99 	bne.w	800b368 <acc_calibration_a121_calibrate+0x1f4>
 800b836:	e545      	b.n	800b2c4 <acc_calibration_a121_calibrate+0x150>
 800b838:	08013588 	.word	0x08013588
 800b83c:	0801304c 	.word	0x0801304c
 800b840:	08013070 	.word	0x08013070
 800b844:	0801307c 	.word	0x0801307c
 800b848:	10624dd3 	.word	0x10624dd3
 800b84c:	08013098 	.word	0x08013098
 800b850:	039b2820 	.word	0x039b2820
 800b854:	080130bc 	.word	0x080130bc
 800b858:	080130cc 	.word	0x080130cc
 800b85c:	080130e8 	.word	0x080130e8
 800b860:	0801310c 	.word	0x0801310c
 800b864:	0801311c 	.word	0x0801311c
 800b868:	0801313c 	.word	0x0801313c
 800b86c:	08013168 	.word	0x08013168
 800b870:	08013194 	.word	0x08013194
 800b874:	080131b0 	.word	0x080131b0
 800b878:	080131c8 	.word	0x080131c8
 800b87c:	080131dc 	.word	0x080131dc
 800b880:	080131f0 	.word	0x080131f0
 800b884:	08013204 	.word	0x08013204
 800b888:	08013214 	.word	0x08013214
 800b88c:	0801322c 	.word	0x0801322c
 800b890:	08013240 	.word	0x08013240
 800b894:	08013254 	.word	0x08013254
 800b898:	08013268 	.word	0x08013268
 800b89c:	0801327c 	.word	0x0801327c
 800b8a0:	08013290 	.word	0x08013290
 800b8a4:	080132a8 	.word	0x080132a8
 800b8a8:	2000003c 	.word	0x2000003c

0800b8ac <acc_calibration_a121_validate_calibration>:
 800b8ac:	b510      	push	{r4, lr}
 800b8ae:	218c      	movs	r1, #140	@ 0x8c
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	f003 fd2f 	bl	800f314 <acc_alg_basic_util_crc32>
 800b8b6:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800b8ba:	1a18      	subs	r0, r3, r0
 800b8bc:	fab0 f080 	clz	r0, r0
 800b8c0:	0940      	lsrs	r0, r0, #5
 800b8c2:	bd10      	pop	{r4, pc}

0800b8c4 <acc_cal_algorithms_pll_cbank>:
 800b8c4:	b4f0      	push	{r4, r5, r6, r7}
 800b8c6:	2400      	movs	r4, #0
 800b8c8:	46a4      	mov	ip, r4
 800b8ca:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800b8ce:	fa40 f504 	asr.w	r5, r0, r4
 800b8d2:	07ed      	lsls	r5, r5, #31
 800b8d4:	b2a6      	uxth	r6, r4
 800b8d6:	d50a      	bpl.n	800b8ee <acc_cal_algorithms_pll_cbank+0x2a>
 800b8d8:	f832 5014 	ldrh.w	r5, [r2, r4, lsl #1]
 800b8dc:	1a6d      	subs	r5, r5, r1
 800b8de:	2d00      	cmp	r5, #0
 800b8e0:	bfb8      	it	lt
 800b8e2:	426d      	neglt	r5, r5
 800b8e4:	b2ad      	uxth	r5, r5
 800b8e6:	42bd      	cmp	r5, r7
 800b8e8:	bf3c      	itt	cc
 800b8ea:	462f      	movcc	r7, r5
 800b8ec:	46b4      	movcc	ip, r6
 800b8ee:	3401      	adds	r4, #1
 800b8f0:	2c10      	cmp	r4, #16
 800b8f2:	d1ec      	bne.n	800b8ce <acc_cal_algorithms_pll_cbank+0xa>
 800b8f4:	f10c 31ff 	add.w	r1, ip, #4294967295
 800b8f8:	290d      	cmp	r1, #13
 800b8fa:	d80c      	bhi.n	800b916 <acc_cal_algorithms_pll_cbank+0x52>
 800b8fc:	f10c 4100 	add.w	r1, ip, #2147483648	@ 0x80000000
 800b900:	3901      	subs	r1, #1
 800b902:	eb02 0541 	add.w	r5, r2, r1, lsl #1
 800b906:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800b90a:	8869      	ldrh	r1, [r5, #2]
 800b90c:	f241 3487 	movw	r4, #4999	@ 0x1387
 800b910:	1a52      	subs	r2, r2, r1
 800b912:	42a2      	cmp	r2, r4
 800b914:	dc02      	bgt.n	800b91c <acc_cal_algorithms_pll_cbank+0x58>
 800b916:	2000      	movs	r0, #0
 800b918:	bcf0      	pop	{r4, r5, r6, r7}
 800b91a:	4770      	bx	lr
 800b91c:	88aa      	ldrh	r2, [r5, #4]
 800b91e:	1a89      	subs	r1, r1, r2
 800b920:	42a1      	cmp	r1, r4
 800b922:	ddf8      	ble.n	800b916 <acc_cal_algorithms_pll_cbank+0x52>
 800b924:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b928:	4290      	cmp	r0, r2
 800b92a:	d0f4      	beq.n	800b916 <acc_cal_algorithms_pll_cbank+0x52>
 800b92c:	2001      	movs	r0, #1
 800b92e:	bcf0      	pop	{r4, r5, r6, r7}
 800b930:	f8a3 c000 	strh.w	ip, [r3]
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop

0800b938 <acc_cal_algorithms_pll_ibias>:
 800b938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b93c:	2400      	movs	r4, #0
 800b93e:	f1a0 0c02 	sub.w	ip, r0, #2
 800b942:	4625      	mov	r5, r4
 800b944:	4627      	mov	r7, r4
 800b946:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800b94a:	e01b      	b.n	800b984 <acc_cal_algorithms_pll_ibias+0x4c>
 800b94c:	f930 8014 	ldrsh.w	r8, [r0, r4, lsl #1]
 800b950:	f93c a014 	ldrsh.w	sl, [ip, r4, lsl #1]
 800b954:	f508 727a 	add.w	r2, r8, #1000	@ 0x3e8
 800b958:	eba8 080a 	sub.w	r8, r8, sl
 800b95c:	4598      	cmp	r8, r3
 800b95e:	db30      	blt.n	800b9c2 <acc_cal_algorithms_pll_ibias+0x8a>
 800b960:	45c8      	cmp	r8, r9
 800b962:	dc2e      	bgt.n	800b9c2 <acc_cal_algorithms_pll_ibias+0x8a>
 800b964:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800b968:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	42b3      	cmp	r3, r6
 800b970:	d204      	bcs.n	800b97c <acc_cal_algorithms_pll_ibias+0x44>
 800b972:	ea4f 058e 	mov.w	r5, lr, lsl #2
 800b976:	461e      	mov	r6, r3
 800b978:	b2ad      	uxth	r5, r5
 800b97a:	2701      	movs	r7, #1
 800b97c:	f1be 0f0f 	cmp.w	lr, #15
 800b980:	d018      	beq.n	800b9b4 <acc_cal_algorithms_pll_ibias+0x7c>
 800b982:	3401      	adds	r4, #1
 800b984:	1e63      	subs	r3, r4, #1
 800b986:	fb03 f303 	mul.w	r3, r3, r3
 800b98a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b98e:	005a      	lsls	r2, r3, #1
 800b990:	f502 7916 	add.w	r9, r2, #600	@ 0x258
 800b994:	3bc8      	subs	r3, #200	@ 0xc8
 800b996:	fa1f fe84 	uxth.w	lr, r4
 800b99a:	2c00      	cmp	r4, #0
 800b99c:	d1d6      	bne.n	800b94c <acc_cal_algorithms_pll_ibias+0x14>
 800b99e:	f9b0 3000 	ldrsh.w	r3, [r0]
 800b9a2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	bfb8      	it	lt
 800b9aa:	425b      	neglt	r3, r3
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	42b3      	cmp	r3, r6
 800b9b0:	d3df      	bcc.n	800b972 <acc_cal_algorithms_pll_ibias+0x3a>
 800b9b2:	e7e6      	b.n	800b982 <acc_cal_algorithms_pll_ibias+0x4a>
 800b9b4:	b117      	cbz	r7, 800b9bc <acc_cal_algorithms_pll_ibias+0x84>
 800b9b6:	f085 0530 	eor.w	r5, r5, #48	@ 0x30
 800b9ba:	800d      	strh	r5, [r1, #0]
 800b9bc:	4638      	mov	r0, r7
 800b9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c2:	2700      	movs	r7, #0
 800b9c4:	4638      	mov	r0, r7
 800b9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9ca:	bf00      	nop

0800b9cc <acc_cal_algorithms_vfast2_ldo>:
 800b9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d0:	f8b1 305e 	ldrh.w	r3, [r1, #94]	@ 0x5e
 800b9d4:	880c      	ldrh	r4, [r1, #0]
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	1b1b      	subs	r3, r3, r4
 800b9da:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800b9de:	9201      	str	r2, [sp, #4]
 800b9e0:	db3a      	blt.n	800ba58 <acc_cal_algorithms_vfast2_ldo+0x8c>
 800b9e2:	4a1f      	ldr	r2, [pc, #124]	@ (800ba60 <acc_cal_algorithms_vfast2_ldo+0x94>)
 800b9e4:	ea4f 4803 	mov.w	r8, r3, lsl #16
 800b9e8:	fba2 3808 	umull	r3, r8, r2, r8
 800b9ec:	2500      	movs	r5, #0
 800b9ee:	4681      	mov	r9, r0
 800b9f0:	460e      	mov	r6, r1
 800b9f2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800b9f6:	46ab      	mov	fp, r5
 800b9f8:	46a2      	mov	sl, r4
 800b9fa:	2210      	movs	r2, #16
 800b9fc:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 800ba00:	2001      	movs	r0, #1
 800ba02:	e009      	b.n	800ba18 <acc_cal_algorithms_vfast2_ldo+0x4c>
 800ba04:	3201      	adds	r2, #1
 800ba06:	b292      	uxth	r2, r2
 800ba08:	458e      	cmp	lr, r1
 800ba0a:	bf38      	it	cc
 800ba0c:	2000      	movcc	r0, #0
 800ba0e:	2a40      	cmp	r2, #64	@ 0x40
 800ba10:	4445      	add	r5, r8
 800ba12:	d01a      	beq.n	800ba4a <acc_cal_algorithms_vfast2_ldo+0x7e>
 800ba14:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 800ba18:	eba4 0309 	sub.w	r3, r4, r9
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	bfb8      	it	lt
 800ba20:	425b      	neglt	r3, r3
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	eb0a 4115 	add.w	r1, sl, r5, lsr #16
 800ba28:	4563      	cmp	r3, ip
 800ba2a:	f501 7748 	add.w	r7, r1, #800	@ 0x320
 800ba2e:	bf3c      	itt	cc
 800ba30:	469c      	movcc	ip, r3
 800ba32:	4693      	movcc	fp, r2
 800ba34:	42bc      	cmp	r4, r7
 800ba36:	f504 7e48 	add.w	lr, r4, #800	@ 0x320
 800ba3a:	d9e3      	bls.n	800ba04 <acc_cal_algorithms_vfast2_ldo+0x38>
 800ba3c:	3201      	adds	r2, #1
 800ba3e:	b292      	uxth	r2, r2
 800ba40:	2a40      	cmp	r2, #64	@ 0x40
 800ba42:	f04f 0000 	mov.w	r0, #0
 800ba46:	4445      	add	r5, r8
 800ba48:	d1e4      	bne.n	800ba14 <acc_cal_algorithms_vfast2_ldo+0x48>
 800ba4a:	b130      	cbz	r0, 800ba5a <acc_cal_algorithms_vfast2_ldo+0x8e>
 800ba4c:	9b01      	ldr	r3, [sp, #4]
 800ba4e:	f8a3 b000 	strh.w	fp, [r3]
 800ba52:	b003      	add	sp, #12
 800ba54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba58:	2000      	movs	r0, #0
 800ba5a:	b003      	add	sp, #12
 800ba5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba60:	aaaaaaab 	.word	0xaaaaaaab

0800ba64 <acc_cal_algorithms_delay_cbank>:
 800ba64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba66:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ba6a:	460e      	mov	r6, r1
 800ba6c:	b0b1      	sub	sp, #196	@ 0xc4
 800ba6e:	4611      	mov	r1, r2
 800ba70:	4605      	mov	r5, r0
 800ba72:	2401      	movs	r4, #1
 800ba74:	2700      	movs	r7, #0
 800ba76:	e008      	b.n	800ba8a <acc_cal_algorithms_delay_cbank+0x26>
 800ba78:	428a      	cmp	r2, r1
 800ba7a:	bfa8      	it	ge
 800ba7c:	4627      	movge	r7, r4
 800ba7e:	f104 0401 	add.w	r4, r4, #1
 800ba82:	bfa8      	it	ge
 800ba84:	4611      	movge	r1, r2
 800ba86:	2c20      	cmp	r4, #32
 800ba88:	d00c      	beq.n	800baa4 <acc_cal_algorithms_delay_cbank+0x40>
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
 800ba90:	f5c3 7348 	rsb	r3, r3, #800	@ 0x320
 800ba94:	4413      	add	r3, r2
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ba9c:	d9ec      	bls.n	800ba78 <acc_cal_algorithms_delay_cbank+0x14>
 800ba9e:	2000      	movs	r0, #0
 800baa0:	b031      	add	sp, #196	@ 0xc4
 800baa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baa4:	2f07      	cmp	r7, #7
 800baa6:	d85f      	bhi.n	800bb68 <acc_cal_algorithms_delay_cbank+0x104>
 800baa8:	2300      	movs	r3, #0
 800baaa:	f107 0208 	add.w	r2, r7, #8
 800baae:	1ad2      	subs	r2, r2, r3
 800bab0:	af03      	add	r7, sp, #12
 800bab2:	b30a      	cbz	r2, 800baf8 <acc_cal_algorithms_delay_cbank+0x94>
 800bab4:	18d5      	adds	r5, r2, r3
 800bab6:	4639      	mov	r1, r7
 800bab8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800babc:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 800bac0:	f934 0b02 	ldrsh.w	r0, [r4], #2
 800bac4:	ee07 0a10 	vmov	s14, r0
 800bac8:	fb03 f003 	mul.w	r0, r3, r3
 800bacc:	ee06 3a90 	vmov	s13, r3
 800bad0:	ee07 0a90 	vmov	s15, r0
 800bad4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800badc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800bae0:	42a5      	cmp	r5, r4
 800bae2:	ed81 7a00 	vstr	s14, [r1]
 800bae6:	edc1 7a01 	vstr	s15, [r1, #4]
 800baea:	edc1 6a02 	vstr	s13, [r1, #8]
 800baee:	f103 0301 	add.w	r3, r3, #1
 800baf2:	f101 010c 	add.w	r1, r1, #12
 800baf6:	d1e3      	bne.n	800bac0 <acc_cal_algorithms_delay_cbank+0x5c>
 800baf8:	4638      	mov	r0, r7
 800bafa:	4669      	mov	r1, sp
 800bafc:	f003 fc26 	bl	800f34c <acc_alg_least_square_fit>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d0cc      	beq.n	800ba9e <acc_cal_algorithms_delay_cbank+0x3a>
 800bb04:	ed9d 6a00 	vldr	s12, [sp]
 800bb08:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800bb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb10:	d0c5      	beq.n	800ba9e <acc_cal_algorithms_delay_cbank+0x3a>
 800bb12:	eddd 6a01 	vldr	s13, [sp, #4]
 800bb16:	eef5 6a40 	vcmp.f32	s13, #0.0
 800bb1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb1e:	d0be      	beq.n	800ba9e <acc_cal_algorithms_delay_cbank+0x3a>
 800bb20:	eddd 7a02 	vldr	s15, [sp, #8]
 800bb24:	eef1 7a67 	vneg.f32	s15, s15
 800bb28:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bb2c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800bb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb34:	dbb3      	blt.n	800ba9e <acc_cal_algorithms_delay_cbank+0x3a>
 800bb36:	eef1 6a66 	vneg.f32	s13, s13
 800bb3a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800bb3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb46:	d5aa      	bpl.n	800ba9e <acc_cal_algorithms_delay_cbank+0x3a>
 800bb48:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bb4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb54:	ee17 3a90 	vmov	r3, s15
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	2b3f      	cmp	r3, #63	@ 0x3f
 800bb5c:	d89f      	bhi.n	800ba9e <acc_cal_algorithms_delay_cbank+0x3a>
 800bb5e:	085b      	lsrs	r3, r3, #1
 800bb60:	f083 0310 	eor.w	r3, r3, #16
 800bb64:	8033      	strh	r3, [r6, #0]
 800bb66:	e79b      	b.n	800baa0 <acc_cal_algorithms_delay_cbank+0x3c>
 800bb68:	1ffb      	subs	r3, r7, #7
 800bb6a:	2f17      	cmp	r7, #23
 800bb6c:	bf88      	it	hi
 800bb6e:	f1c3 0220 	rsbhi	r2, r3, #32
 800bb72:	d89d      	bhi.n	800bab0 <acc_cal_algorithms_delay_cbank+0x4c>
 800bb74:	e799      	b.n	800baaa <acc_cal_algorithms_delay_cbank+0x46>
 800bb76:	bf00      	nop

0800bb78 <acc_cal_algorithms_bba_cal_ctrl>:
 800bb78:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 800bc54 <acc_cal_algorithms_bba_cal_ctrl+0xdc>
 800bb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb80:	f04f 0e00 	mov.w	lr, #0
 800bb84:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 800bb88:	f9b0 4000 	ldrsh.w	r4, [r0]
 800bb8c:	4665      	mov	r5, ip
 800bb8e:	46f0      	mov	r8, lr
 800bb90:	463e      	mov	r6, r7
 800bb92:	f06f 021b 	mvn.w	r2, #27
 800bb96:	e014      	b.n	800bbc2 <acc_cal_algorithms_bba_cal_ctrl+0x4a>
 800bb98:	42a7      	cmp	r7, r4
 800bb9a:	bfc4      	itt	gt
 800bb9c:	4627      	movgt	r7, r4
 800bb9e:	4696      	movgt	lr, r2
 800bba0:	2a1c      	cmp	r2, #28
 800bba2:	4603      	mov	r3, r0
 800bba4:	d016      	beq.n	800bbd4 <acc_cal_algorithms_bba_cal_ctrl+0x5c>
 800bba6:	881b      	ldrh	r3, [r3, #0]
 800bba8:	f930 4f02 	ldrsh.w	r4, [r0, #2]!
 800bbac:	1ae3      	subs	r3, r4, r3
 800bbae:	b21b      	sxth	r3, r3
 800bbb0:	429e      	cmp	r6, r3
 800bbb2:	f102 0208 	add.w	r2, r2, #8
 800bbb6:	bfa8      	it	ge
 800bbb8:	461e      	movge	r6, r3
 800bbba:	429d      	cmp	r5, r3
 800bbbc:	b212      	sxth	r2, r2
 800bbbe:	bfb8      	it	lt
 800bbc0:	461d      	movlt	r5, r3
 800bbc2:	2c00      	cmp	r4, #0
 800bbc4:	dae8      	bge.n	800bb98 <acc_cal_algorithms_bba_cal_ctrl+0x20>
 800bbc6:	45a4      	cmp	ip, r4
 800bbc8:	daea      	bge.n	800bba0 <acc_cal_algorithms_bba_cal_ctrl+0x28>
 800bbca:	2a1c      	cmp	r2, #28
 800bbcc:	46a4      	mov	ip, r4
 800bbce:	4690      	mov	r8, r2
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	d1e8      	bne.n	800bba6 <acc_cal_algorithms_bba_cal_ctrl+0x2e>
 800bbd4:	f5a5 551c 	sub.w	r5, r5, #9984	@ 0x2700
 800bbd8:	3d10      	subs	r5, #16
 800bbda:	b2ad      	uxth	r5, r5
 800bbdc:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800bbe0:	429d      	cmp	r5, r3
 800bbe2:	d800      	bhi.n	800bbe6 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800bbe4:	b116      	cbz	r6, 800bbec <acc_cal_algorithms_bba_cal_ctrl+0x74>
 800bbe6:	2000      	movs	r0, #0
 800bbe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbec:	f51c 4f00 	cmn.w	ip, #32768	@ 0x8000
 800bbf0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800bbf4:	d011      	beq.n	800bc1a <acc_cal_algorithms_bba_cal_ctrl+0xa2>
 800bbf6:	429f      	cmp	r7, r3
 800bbf8:	d029      	beq.n	800bc4e <acc_cal_algorithms_bba_cal_ctrl+0xd6>
 800bbfa:	ebae 0e08 	sub.w	lr, lr, r8
 800bbfe:	f1be 0f08 	cmp.w	lr, #8
 800bc02:	d1f0      	bne.n	800bbe6 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800bc04:	eba7 070c 	sub.w	r7, r7, ip
 800bc08:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800bc0c:	fb9c f7f7 	sdiv	r7, ip, r7
 800bc10:	eba8 0e07 	sub.w	lr, r8, r7
 800bc14:	fa0f fe8e 	sxth.w	lr, lr
 800bc18:	e001      	b.n	800bc1e <acc_cal_algorithms_bba_cal_ctrl+0xa6>
 800bc1a:	429f      	cmp	r7, r3
 800bc1c:	d0e3      	beq.n	800bbe6 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800bc1e:	f1be 0f00 	cmp.w	lr, #0
 800bc22:	db07      	blt.n	800bc34 <acc_cal_algorithms_bba_cal_ctrl+0xbc>
 800bc24:	f1be 0f1f 	cmp.w	lr, #31
 800bc28:	dcdd      	bgt.n	800bbe6 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800bc2a:	f8a1 e000 	strh.w	lr, [r1]
 800bc2e:	2001      	movs	r0, #1
 800bc30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc34:	f1ce 0e00 	rsb	lr, lr, #0
 800bc38:	fa1f fe8e 	uxth.w	lr, lr
 800bc3c:	f1be 0f1f 	cmp.w	lr, #31
 800bc40:	d8d1      	bhi.n	800bbe6 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800bc42:	f04e 0e20 	orr.w	lr, lr, #32
 800bc46:	f8a1 e000 	strh.w	lr, [r1]
 800bc4a:	2001      	movs	r0, #1
 800bc4c:	e7cc      	b.n	800bbe8 <acc_cal_algorithms_bba_cal_ctrl+0x70>
 800bc4e:	46c6      	mov	lr, r8
 800bc50:	e7e5      	b.n	800bc1e <acc_cal_algorithms_bba_cal_ctrl+0xa6>
 800bc52:	bf00      	nop
 800bc54:	ffff8000 	.word	0xffff8000

0800bc58 <acc_cal_algorithms_area_index>:
 800bc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5c:	f5ad 7d7f 	sub.w	sp, sp, #1020	@ 0x3fc
 800bc60:	ab05      	add	r3, sp, #20
 800bc62:	f500 62c0 	add.w	r2, r0, #1536	@ 0x600
 800bc66:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800bc6a:	9304      	str	r3, [sp, #16]
 800bc6c:	4c5c      	ldr	r4, [pc, #368]	@ (800bde0 <acc_cal_algorithms_area_index+0x188>)
 800bc6e:	4d5d      	ldr	r5, [pc, #372]	@ (800bde4 <acc_cal_algorithms_area_index+0x18c>)
 800bc70:	9105      	str	r1, [sp, #20]
 800bc72:	2300      	movs	r3, #0
 800bc74:	4681      	mov	r9, r0
 800bc76:	9301      	str	r3, [sp, #4]
 800bc78:	f10d 0898 	add.w	r8, sp, #152	@ 0x98
 800bc7c:	af3d      	add	r7, sp, #244	@ 0xf4
 800bc7e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800bc82:	464e      	mov	r6, r9
 800bc84:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 800bc88:	f936 0b04 	ldrsh.w	r0, [r6], #4
 800bc8c:	f003 fad2 	bl	800f234 <acc_alg_atan2_q16>
 800bc90:	f84a 0b04 	str.w	r0, [sl], #4
 800bc94:	45c2      	cmp	sl, r8
 800bc96:	d1f5      	bne.n	800bc84 <acc_cal_algorithms_area_index+0x2c>
 800bc98:	f10d 0b94 	add.w	fp, sp, #148	@ 0x94
 800bc9c:	46da      	mov	sl, fp
 800bc9e:	464e      	mov	r6, r9
 800bca0:	f9b6 1062 	ldrsh.w	r1, [r6, #98]	@ 0x62
 800bca4:	f9b6 0060 	ldrsh.w	r0, [r6, #96]	@ 0x60
 800bca8:	f003 fac4 	bl	800f234 <acc_alg_atan2_q16>
 800bcac:	f84a 0f04 	str.w	r0, [sl, #4]!
 800bcb0:	4557      	cmp	r7, sl
 800bcb2:	f106 0604 	add.w	r6, r6, #4
 800bcb6:	d1f3      	bne.n	800bca0 <acc_cal_algorithms_area_index+0x48>
 800bcb8:	9a01      	ldr	r2, [sp, #4]
 800bcba:	ab3e      	add	r3, sp, #248	@ 0xf8
 800bcbc:	ae0d      	add	r6, sp, #52	@ 0x34
 800bcbe:	1898      	adds	r0, r3, r2
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	f85b 3f04 	ldr.w	r3, [fp, #4]!
 800bcc6:	f856 2f04 	ldr.w	r2, [r6, #4]!
 800bcca:	1a9b      	subs	r3, r3, r2
 800bccc:	42a3      	cmp	r3, r4
 800bcce:	dd61      	ble.n	800bd94 <acc_cal_algorithms_area_index+0x13c>
 800bcd0:	f5a3 23c9 	sub.w	r3, r3, #411648	@ 0x64800
 800bcd4:	3b7e      	subs	r3, #126	@ 0x7e
 800bcd6:	42a3      	cmp	r3, r4
 800bcd8:	dcfa      	bgt.n	800bcd0 <acc_cal_algorithms_area_index+0x78>
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	bfb8      	it	lt
 800bcde:	425b      	neglt	r3, r3
 800bce0:	4299      	cmp	r1, r3
 800bce2:	bfb8      	it	lt
 800bce4:	4619      	movlt	r1, r3
 800bce6:	45bb      	cmp	fp, r7
 800bce8:	f840 3b04 	str.w	r3, [r0], #4
 800bcec:	d1e9      	bne.n	800bcc2 <acc_cal_algorithms_area_index+0x6a>
 800bcee:	9b02      	ldr	r3, [sp, #8]
 800bcf0:	1049      	asrs	r1, r1, #1
 800bcf2:	f843 1f04 	str.w	r1, [r3, #4]!
 800bcf6:	9302      	str	r3, [sp, #8]
 800bcf8:	9b01      	ldr	r3, [sp, #4]
 800bcfa:	3360      	adds	r3, #96	@ 0x60
 800bcfc:	9301      	str	r3, [sp, #4]
 800bcfe:	9b03      	ldr	r3, [sp, #12]
 800bd00:	f109 09c0 	add.w	r9, r9, #192	@ 0xc0
 800bd04:	4599      	cmp	r9, r3
 800bd06:	d1ba      	bne.n	800bc7e <acc_cal_algorithms_area_index+0x26>
 800bd08:	2300      	movs	r3, #0
 800bd0a:	9c04      	ldr	r4, [sp, #16]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	4619      	mov	r1, r3
 800bd10:	f854 2f04 	ldr.w	r2, [r4, #4]!
 800bd14:	428a      	cmp	r2, r1
 800bd16:	bfc8      	it	gt
 800bd18:	4618      	movgt	r0, r3
 800bd1a:	f103 0301 	add.w	r3, r3, #1
 800bd1e:	bfc8      	it	gt
 800bd20:	4611      	movgt	r1, r2
 800bd22:	2b08      	cmp	r3, #8
 800bd24:	d1f4      	bne.n	800bd10 <acc_cal_algorithms_area_index+0xb8>
 800bd26:	ab06      	add	r3, sp, #24
 800bd28:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800bd2c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800bd30:	ab3e      	add	r3, sp, #248	@ 0xf8
 800bd32:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800bd36:	f10d 0297 	add.w	r2, sp, #151	@ 0x97
 800bd3a:	f10d 00af 	add.w	r0, sp, #175	@ 0xaf
 800bd3e:	f851 3b04 	ldr.w	r3, [r1], #4
 800bd42:	42a3      	cmp	r3, r4
 800bd44:	bfac      	ite	ge
 800bd46:	2300      	movge	r3, #0
 800bd48:	2301      	movlt	r3, #1
 800bd4a:	f802 3f01 	strb.w	r3, [r2, #1]!
 800bd4e:	4290      	cmp	r0, r2
 800bd50:	7613      	strb	r3, [r2, #24]
 800bd52:	d1f4      	bne.n	800bd3e <acc_cal_algorithms_area_index+0xe6>
 800bd54:	2200      	movs	r2, #0
 800bd56:	4611      	mov	r1, r2
 800bd58:	2301      	movs	r3, #1
 800bd5a:	b321      	cbz	r1, 800bda6 <acc_cal_algorithms_area_index+0x14e>
 800bd5c:	f818 0003 	ldrb.w	r0, [r8, r3]
 800bd60:	b1d8      	cbz	r0, 800bd9a <acc_cal_algorithms_area_index+0x142>
 800bd62:	3201      	adds	r2, #1
 800bd64:	3301      	adds	r3, #1
 800bd66:	2b30      	cmp	r3, #48	@ 0x30
 800bd68:	d1f7      	bne.n	800bd5a <acc_cal_algorithms_area_index+0x102>
 800bd6a:	f1a2 030c 	sub.w	r3, r2, #12
 800bd6e:	2b08      	cmp	r3, #8
 800bd70:	d82e      	bhi.n	800bdd0 <acc_cal_algorithms_area_index+0x178>
 800bd72:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 800bd76:	2a17      	cmp	r2, #23
 800bd78:	d902      	bls.n	800bd80 <acc_cal_algorithms_area_index+0x128>
 800bd7a:	3a18      	subs	r2, #24
 800bd7c:	2a17      	cmp	r2, #23
 800bd7e:	d8fc      	bhi.n	800bd7a <acc_cal_algorithms_area_index+0x122>
 800bd80:	9b05      	ldr	r3, [sp, #20]
 800bd82:	2001      	movs	r0, #1
 800bd84:	801a      	strh	r2, [r3, #0]
 800bd86:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 800bd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd8e:	f503 23c9 	add.w	r3, r3, #411648	@ 0x64800
 800bd92:	337e      	adds	r3, #126	@ 0x7e
 800bd94:	42ab      	cmp	r3, r5
 800bd96:	dbfa      	blt.n	800bd8e <acc_cal_algorithms_area_index+0x136>
 800bd98:	e79f      	b.n	800bcda <acc_cal_algorithms_area_index+0x82>
 800bd9a:	2a0b      	cmp	r2, #11
 800bd9c:	d8e5      	bhi.n	800bd6a <acc_cal_algorithms_area_index+0x112>
 800bd9e:	3301      	adds	r3, #1
 800bda0:	2b30      	cmp	r3, #48	@ 0x30
 800bda2:	d0f0      	beq.n	800bd86 <acc_cal_algorithms_area_index+0x12e>
 800bda4:	4602      	mov	r2, r0
 800bda6:	1e58      	subs	r0, r3, #1
 800bda8:	4440      	add	r0, r8
 800bdaa:	1c59      	adds	r1, r3, #1
 800bdac:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800bdb0:	1e4b      	subs	r3, r1, #1
 800bdb2:	b12c      	cbz	r4, 800bdc0 <acc_cal_algorithms_area_index+0x168>
 800bdb4:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 800bdb8:	b914      	cbnz	r4, 800bdc0 <acc_cal_algorithms_area_index+0x168>
 800bdba:	4619      	mov	r1, r3
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	e7d1      	b.n	800bd64 <acc_cal_algorithms_area_index+0x10c>
 800bdc0:	2930      	cmp	r1, #48	@ 0x30
 800bdc2:	d001      	beq.n	800bdc8 <acc_cal_algorithms_area_index+0x170>
 800bdc4:	3101      	adds	r1, #1
 800bdc6:	e7f1      	b.n	800bdac <acc_cal_algorithms_area_index+0x154>
 800bdc8:	f1a2 030c 	sub.w	r3, r2, #12
 800bdcc:	2b08      	cmp	r3, #8
 800bdce:	d904      	bls.n	800bdda <acc_cal_algorithms_area_index+0x182>
 800bdd0:	2000      	movs	r0, #0
 800bdd2:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 800bdd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdda:	0852      	lsrs	r2, r2, #1
 800bddc:	e7d0      	b.n	800bd80 <acc_cal_algorithms_area_index+0x128>
 800bdde:	bf00      	nop
 800bde0:	0003243f 	.word	0x0003243f
 800bde4:	fffcdbc1 	.word	0xfffcdbc1

0800bde8 <acc_cal_algorithms_iq_imbalance>:
 800bde8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdec:	ed2d 8b02 	vpush	{d8}
 800bdf0:	eddf 5a51 	vldr	s11, [pc, #324]	@ 800bf38 <acc_cal_algorithms_iq_imbalance+0x150>
 800bdf4:	b0bd      	sub	sp, #244	@ 0xf4
 800bdf6:	4680      	mov	r8, r0
 800bdf8:	4689      	mov	r9, r1
 800bdfa:	f500 6cd8 	add.w	ip, r0, #1728	@ 0x6c0
 800bdfe:	f100 01c0 	add.w	r1, r0, #192	@ 0xc0
 800be02:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800be06:	a804      	add	r0, sp, #16
 800be08:	f1a1 04c0 	sub.w	r4, r1, #192	@ 0xc0
 800be0c:	2700      	movs	r7, #0
 800be0e:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 800be12:	f9b4 5000 	ldrsh.w	r5, [r4]
 800be16:	fb06 f606 	mul.w	r6, r6, r6
 800be1a:	3404      	adds	r4, #4
 800be1c:	fb05 6505 	mla	r5, r5, r5, r6
 800be20:	42a1      	cmp	r1, r4
 800be22:	442f      	add	r7, r5
 800be24:	d1f3      	bne.n	800be0e <acc_cal_algorithms_iq_imbalance+0x26>
 800be26:	ee07 7a90 	vmov	s15, r7
 800be2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be2e:	31c0      	adds	r1, #192	@ 0xc0
 800be30:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 800be34:	458c      	cmp	ip, r1
 800be36:	eeb1 7ae6 	vsqrt.f32	s14, s13
 800be3a:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800be3e:	ece0 7a01 	vstmia	r0!, {s15}
 800be42:	d1e1      	bne.n	800be08 <acc_cal_algorithms_iq_imbalance+0x20>
 800be44:	2a00      	cmp	r2, #0
 800be46:	d070      	beq.n	800bf2a <acc_cal_algorithms_iq_imbalance+0x142>
 800be48:	461c      	mov	r4, r3
 800be4a:	eb02 0509 	add.w	r5, r2, r9
 800be4e:	ae24      	add	r6, sp, #144	@ 0x90
 800be50:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 800be54:	eeb1 8a00 	vmov.f32	s16, #16	@ 0x40800000  4.0
 800be58:	eb08 0289 	add.w	r2, r8, r9, lsl #2
 800be5c:	ab0c      	add	r3, sp, #48	@ 0x30
 800be5e:	a904      	add	r1, sp, #16
 800be60:	f9b2 0000 	ldrsh.w	r0, [r2]
 800be64:	ecf1 5a01 	vldmia	r1!, {s11}
 800be68:	ee06 0a10 	vmov	s12, r0
 800be6c:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800be70:	ee06 0a90 	vmov	s13, r0
 800be74:	f9b2 0060 	ldrsh.w	r0, [r2, #96]	@ 0x60
 800be78:	ee07 0a10 	vmov	s14, r0
 800be7c:	f9b2 0062 	ldrsh.w	r0, [r2, #98]	@ 0x62
 800be80:	ee07 0a90 	vmov	s15, r0
 800be84:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800be88:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800be8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800be90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be94:	ee26 6a25 	vmul.f32	s12, s12, s11
 800be98:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800be9c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bea0:	ee27 7a25 	vmul.f32	s14, s14, s11
 800bea4:	ee26 5a06 	vmul.f32	s10, s12, s12
 800bea8:	ee67 5a07 	vmul.f32	s11, s14, s14
 800beac:	ee26 6a26 	vmul.f32	s12, s12, s13
 800beb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800beb4:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800beb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bebc:	ed83 5a00 	vstr	s10, [r3]
 800bec0:	ed83 6a01 	vstr	s12, [r3, #4]
 800bec4:	edc3 6a02 	vstr	s13, [r3, #8]
 800bec8:	edc3 5a18 	vstr	s11, [r3, #96]	@ 0x60
 800becc:	ed83 7a19 	vstr	s14, [r3, #100]	@ 0x64
 800bed0:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
 800bed4:	330c      	adds	r3, #12
 800bed6:	429e      	cmp	r6, r3
 800bed8:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 800bedc:	d1c0      	bne.n	800be60 <acc_cal_algorithms_iq_imbalance+0x78>
 800bede:	2210      	movs	r2, #16
 800bee0:	a901      	add	r1, sp, #4
 800bee2:	a80c      	add	r0, sp, #48	@ 0x30
 800bee4:	f003 fa32 	bl	800f34c <acc_alg_least_square_fit>
 800bee8:	b300      	cbz	r0, 800bf2c <acc_cal_algorithms_iq_imbalance+0x144>
 800beea:	eddd 7a01 	vldr	s15, [sp, #4]
 800beee:	ed9d 7a03 	vldr	s14, [sp, #12]
 800bef2:	eddd 0a02 	vldr	s1, [sp, #8]
 800bef6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800befa:	4620      	mov	r0, r4
 800befc:	f109 0901 	add.w	r9, r9, #1
 800bf00:	3402      	adds	r4, #2
 800bf02:	ee67 7a88 	vmul.f32	s15, s15, s16
 800bf06:	ee60 6aa0 	vmul.f32	s13, s1, s1
 800bf0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bf0e:	ee88 7a80 	vdiv.f32	s14, s17, s0
 800bf12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bf16:	ee67 0a20 	vmul.f32	s1, s14, s1
 800bf1a:	eeb1 1ae7 	vsqrt.f32	s2, s15
 800bf1e:	ee27 1a01 	vmul.f32	s2, s14, s2
 800bf22:	f003 fe99 	bl	800fc58 <acc_alg_iq_imb_comp_to_fix_point>
 800bf26:	454d      	cmp	r5, r9
 800bf28:	d196      	bne.n	800be58 <acc_cal_algorithms_iq_imbalance+0x70>
 800bf2a:	2001      	movs	r0, #1
 800bf2c:	b03d      	add	sp, #244	@ 0xf4
 800bf2e:	ecbd 8b02 	vpop	{d8}
 800bf32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf36:	bf00      	nop
 800bf38:	42400000 	.word	0x42400000

0800bf3c <acc_cal_algorithms_rx_freq_ctrl>:
 800bf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf40:	b087      	sub	sp, #28
 800bf42:	2400      	movs	r4, #0
 800bf44:	4606      	mov	r6, r0
 800bf46:	468b      	mov	fp, r1
 800bf48:	9203      	str	r2, [sp, #12]
 800bf4a:	f100 0902 	add.w	r9, r0, #2
 800bf4e:	9402      	str	r4, [sp, #8]
 800bf50:	4625      	mov	r5, r4
 800bf52:	46a0      	mov	r8, r4
 800bf54:	46a2      	mov	sl, r4
 800bf56:	f10d 0716 	add.w	r7, sp, #22
 800bf5a:	e006      	b.n	800bf6a <acc_cal_algorithms_rx_freq_ctrl+0x2e>
 800bf5c:	4553      	cmp	r3, sl
 800bf5e:	d82a      	bhi.n	800bfb6 <acc_cal_algorithms_rx_freq_ctrl+0x7a>
 800bf60:	4645      	mov	r5, r8
 800bf62:	4698      	mov	r8, r3
 800bf64:	3401      	adds	r4, #1
 800bf66:	2c08      	cmp	r4, #8
 800bf68:	d019      	beq.n	800bf9e <acc_cal_algorithms_rx_freq_ctrl+0x62>
 800bf6a:	9700      	str	r7, [sp, #0]
 800bf6c:	ab05      	add	r3, sp, #20
 800bf6e:	465a      	mov	r2, fp
 800bf70:	f939 1024 	ldrsh.w	r1, [r9, r4, lsl #2]
 800bf74:	f936 0024 	ldrsh.w	r0, [r6, r4, lsl #2]
 800bf78:	f003 fe4a 	bl	800fc10 <acc_alg_comp_iq_imb>
 800bf7c:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 800bf80:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800bf84:	fb02 f202 	mul.w	r2, r2, r2
 800bf88:	fb03 2303 	mla	r3, r3, r3, r2
 800bf8c:	42ab      	cmp	r3, r5
 800bf8e:	b2a2      	uxth	r2, r4
 800bf90:	d9e8      	bls.n	800bf64 <acc_cal_algorithms_rx_freq_ctrl+0x28>
 800bf92:	4543      	cmp	r3, r8
 800bf94:	d8e2      	bhi.n	800bf5c <acc_cal_algorithms_rx_freq_ctrl+0x20>
 800bf96:	3401      	adds	r4, #1
 800bf98:	2c08      	cmp	r4, #8
 800bf9a:	461d      	mov	r5, r3
 800bf9c:	d1e5      	bne.n	800bf6a <acc_cal_algorithms_rx_freq_ctrl+0x2e>
 800bf9e:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 800bfa2:	45aa      	cmp	sl, r5
 800bfa4:	bf85      	ittet	hi
 800bfa6:	e9dd 2302 	ldrdhi	r2, r3, [sp, #8]
 800bfaa:	2001      	movhi	r0, #1
 800bfac:	2000      	movls	r0, #0
 800bfae:	801a      	strhhi	r2, [r3, #0]
 800bfb0:	b007      	add	sp, #28
 800bfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb6:	4645      	mov	r5, r8
 800bfb8:	9202      	str	r2, [sp, #8]
 800bfba:	46d0      	mov	r8, sl
 800bfbc:	469a      	mov	sl, r3
 800bfbe:	e7d1      	b.n	800bf64 <acc_cal_algorithms_rx_freq_ctrl+0x28>

0800bfc0 <acc_cal_algorithms_wavelet_duration_p1>:
 800bfc0:	b508      	push	{r3, lr}
 800bfc2:	f003 fded 	bl	800fba0 <acc_alg_temp>
 800bfc6:	f110 0f14 	cmn.w	r0, #20
 800bfca:	db06      	blt.n	800bfda <acc_cal_algorithms_wavelet_duration_p1+0x1a>
 800bfcc:	282c      	cmp	r0, #44	@ 0x2c
 800bfce:	dd06      	ble.n	800bfde <acc_cal_algorithms_wavelet_duration_p1+0x1e>
 800bfd0:	2850      	cmp	r0, #80	@ 0x50
 800bfd2:	bfb4      	ite	lt
 800bfd4:	2003      	movlt	r0, #3
 800bfd6:	2004      	movge	r0, #4
 800bfd8:	bd08      	pop	{r3, pc}
 800bfda:	2001      	movs	r0, #1
 800bfdc:	bd08      	pop	{r3, pc}
 800bfde:	2002      	movs	r0, #2
 800bfe0:	bd08      	pop	{r3, pc}
 800bfe2:	bf00      	nop

0800bfe4 <acc_cal_algorithms_phase_unwrap>:
 800bfe4:	2901      	cmp	r1, #1
 800bfe6:	d926      	bls.n	800c036 <acc_cal_algorithms_phase_unwrap+0x52>
 800bfe8:	b470      	push	{r4, r5, r6}
 800bfea:	1f03      	subs	r3, r0, #4
 800bfec:	4e12      	ldr	r6, [pc, #72]	@ (800c038 <acc_cal_algorithms_phase_unwrap+0x54>)
 800bfee:	4d13      	ldr	r5, [pc, #76]	@ (800c03c <acc_cal_algorithms_phase_unwrap+0x58>)
 800bff0:	eb03 0481 	add.w	r4, r3, r1, lsl #2
 800bff4:	2100      	movs	r1, #0
 800bff6:	6843      	ldr	r3, [r0, #4]
 800bff8:	440b      	add	r3, r1
 800bffa:	4602      	mov	r2, r0
 800bffc:	f840 3f04 	str.w	r3, [r0, #4]!
 800c000:	6812      	ldr	r2, [r2, #0]
 800c002:	1a9a      	subs	r2, r3, r2
 800c004:	42b2      	cmp	r2, r6
 800c006:	dd09      	ble.n	800c01c <acc_cal_algorithms_phase_unwrap+0x38>
 800c008:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c00c:	f5a3 23c9 	sub.w	r3, r3, #411648	@ 0x64800
 800c010:	3b7e      	subs	r3, #126	@ 0x7e
 800c012:	f5a1 21c9 	sub.w	r1, r1, #411648	@ 0x64800
 800c016:	6003      	str	r3, [r0, #0]
 800c018:	397e      	subs	r1, #126	@ 0x7e
 800c01a:	1a9a      	subs	r2, r3, r2
 800c01c:	42aa      	cmp	r2, r5
 800c01e:	da06      	bge.n	800c02e <acc_cal_algorithms_phase_unwrap+0x4a>
 800c020:	f503 23c9 	add.w	r3, r3, #411648	@ 0x64800
 800c024:	337e      	adds	r3, #126	@ 0x7e
 800c026:	f501 21c9 	add.w	r1, r1, #411648	@ 0x64800
 800c02a:	6003      	str	r3, [r0, #0]
 800c02c:	317e      	adds	r1, #126	@ 0x7e
 800c02e:	4284      	cmp	r4, r0
 800c030:	d1e1      	bne.n	800bff6 <acc_cal_algorithms_phase_unwrap+0x12>
 800c032:	bc70      	pop	{r4, r5, r6}
 800c034:	4770      	bx	lr
 800c036:	4770      	bx	lr
 800c038:	0003243f 	.word	0x0003243f
 800c03c:	fffcdbc1 	.word	0xfffcdbc1

0800c040 <acc_cal_algorithms_tx_freq_ctrl>:
 800c040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c044:	f2ad 6d0c 	subw	sp, sp, #1548	@ 0x60c
 800c048:	4606      	mov	r6, r0
 800c04a:	1c8c      	adds	r4, r1, #2
 800c04c:	4690      	mov	r8, r2
 800c04e:	4699      	mov	r9, r3
 800c050:	ad01      	add	r5, sp, #4
 800c052:	f20d 6704 	addw	r7, sp, #1540	@ 0x604
 800c056:	f9b4 1000 	ldrsh.w	r1, [r4]
 800c05a:	f934 0c02 	ldrsh.w	r0, [r4, #-2]
 800c05e:	f003 f8e9 	bl	800f234 <acc_alg_atan2_q16>
 800c062:	f845 0f04 	str.w	r0, [r5, #4]!
 800c066:	42bd      	cmp	r5, r7
 800c068:	f104 0404 	add.w	r4, r4, #4
 800c06c:	d1f3      	bne.n	800c056 <acc_cal_algorithms_tx_freq_ctrl+0x16>
 800c06e:	46ca      	mov	sl, r9
 800c070:	f1a9 0304 	sub.w	r3, r9, #4
 800c074:	f109 001c 	add.w	r0, r9, #28
 800c078:	2100      	movs	r1, #0
 800c07a:	f843 1f04 	str.w	r1, [r3, #4]!
 800c07e:	4298      	cmp	r0, r3
 800c080:	d1fb      	bne.n	800c07a <acc_cal_algorithms_tx_freq_ctrl+0x3a>
 800c082:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 800c086:	f04f 0b00 	mov.w	fp, #0
 800c08a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c08e:	4f33      	ldr	r7, [pc, #204]	@ (800c15c <acc_cal_algorithms_tx_freq_ctrl+0x11c>)
 800c090:	f8cd b000 	str.w	fp, [sp]
 800c094:	ac19      	add	r4, sp, #100	@ 0x64
 800c096:	00ed      	lsls	r5, r5, #3
 800c098:	9301      	str	r3, [sp, #4]
 800c09a:	f640 5994 	movw	r9, #3476	@ 0xd94
 800c09e:	2130      	movs	r1, #48	@ 0x30
 800c0a0:	f1a4 005c 	sub.w	r0, r4, #92	@ 0x5c
 800c0a4:	f7ff ff9e 	bl	800bfe4 <acc_cal_algorithms_phase_unwrap>
 800c0a8:	f1a4 0160 	sub.w	r1, r4, #96	@ 0x60
 800c0ac:	f04f 0c00 	mov.w	ip, #0
 800c0b0:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800c0b4:	6e08      	ldr	r0, [r1, #96]	@ 0x60
 800c0b6:	428c      	cmp	r4, r1
 800c0b8:	eba3 0000 	sub.w	r0, r3, r0
 800c0bc:	4484      	add	ip, r0
 800c0be:	d1f7      	bne.n	800c0b0 <acc_cal_algorithms_tx_freq_ctrl+0x70>
 800c0c0:	f1bc 0f00 	cmp.w	ip, #0
 800c0c4:	db35      	blt.n	800c132 <acc_cal_algorithms_tx_freq_ctrl+0xf2>
 800c0c6:	ea4f 119c 	mov.w	r1, ip, lsr #6
 800c0ca:	fb09 f101 	mul.w	r1, r9, r1
 800c0ce:	0d49      	lsrs	r1, r1, #21
 800c0d0:	fb06 f101 	mul.w	r1, r6, r1
 800c0d4:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 800c0d8:	f8ca 1000 	str.w	r1, [sl]
 800c0dc:	f1bb 0f00 	cmp.w	fp, #0
 800c0e0:	d003      	beq.n	800c0ea <acc_cal_algorithms_tx_freq_ctrl+0xaa>
 800c0e2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c0e6:	4288      	cmp	r0, r1
 800c0e8:	d930      	bls.n	800c14c <acc_cal_algorithms_tx_freq_ctrl+0x10c>
 800c0ea:	f8da 1000 	ldr.w	r1, [sl]
 800c0ee:	eba1 0108 	sub.w	r1, r1, r8
 800c0f2:	2900      	cmp	r1, #0
 800c0f4:	bfb8      	it	lt
 800c0f6:	4249      	neglt	r1, r1
 800c0f8:	42b9      	cmp	r1, r7
 800c0fa:	d204      	bcs.n	800c106 <acc_cal_algorithms_tx_freq_ctrl+0xc6>
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	460f      	mov	r7, r1
 800c100:	f8cd b004 	str.w	fp, [sp, #4]
 800c104:	9300      	str	r3, [sp, #0]
 800c106:	f10b 0301 	add.w	r3, fp, #1
 800c10a:	fa1f fb83 	uxth.w	fp, r3
 800c10e:	f1bb 0f08 	cmp.w	fp, #8
 800c112:	f10a 0a04 	add.w	sl, sl, #4
 800c116:	f104 04c0 	add.w	r4, r4, #192	@ 0xc0
 800c11a:	d1c0      	bne.n	800c09e <acc_cal_algorithms_tx_freq_ctrl+0x5e>
 800c11c:	9b00      	ldr	r3, [sp, #0]
 800c11e:	b11b      	cbz	r3, 800c128 <acc_cal_algorithms_tx_freq_ctrl+0xe8>
 800c120:	f8dd 3630 	ldr.w	r3, [sp, #1584]	@ 0x630
 800c124:	9a01      	ldr	r2, [sp, #4]
 800c126:	801a      	strh	r2, [r3, #0]
 800c128:	9800      	ldr	r0, [sp, #0]
 800c12a:	f20d 6d0c 	addw	sp, sp, #1548	@ 0x60c
 800c12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c132:	f1cc 0100 	rsb	r1, ip, #0
 800c136:	0989      	lsrs	r1, r1, #6
 800c138:	fb09 f101 	mul.w	r1, r9, r1
 800c13c:	0d49      	lsrs	r1, r1, #21
 800c13e:	fb06 f101 	mul.w	r1, r6, r1
 800c142:	eba5 2111 	sub.w	r1, r5, r1, lsr #8
 800c146:	f8ca 1000 	str.w	r1, [sl]
 800c14a:	e7c7      	b.n	800c0dc <acc_cal_algorithms_tx_freq_ctrl+0x9c>
 800c14c:	2300      	movs	r3, #0
 800c14e:	9300      	str	r3, [sp, #0]
 800c150:	9800      	ldr	r0, [sp, #0]
 800c152:	f20d 6d0c 	addw	sp, sp, #1548	@ 0x60c
 800c156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c15a:	bf00      	nop
 800c15c:	000f4240 	.word	0x000f4240

0800c160 <acc_cal_algorithms_phase_enhancement>:
 800c160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c164:	b0bc      	sub	sp, #240	@ 0xf0
 800c166:	4606      	mov	r6, r0
 800c168:	460d      	mov	r5, r1
 800c16a:	4617      	mov	r7, r2
 800c16c:	f100 0902 	add.w	r9, r0, #2
 800c170:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 800c174:	2400      	movs	r4, #0
 800c176:	f640 38b7 	movw	r8, #2999	@ 0xbb7
 800c17a:	e005      	b.n	800c188 <acc_cal_algorithms_phase_enhancement+0x28>
 800c17c:	f003 f85a 	bl	800f234 <acc_alg_atan2_q16>
 800c180:	2c30      	cmp	r4, #48	@ 0x30
 800c182:	f84a 0b04 	str.w	r0, [sl], #4
 800c186:	d00f      	beq.n	800c1a8 <acc_cal_algorithms_phase_enhancement+0x48>
 800c188:	f939 1024 	ldrsh.w	r1, [r9, r4, lsl #2]
 800c18c:	f936 0024 	ldrsh.w	r0, [r6, r4, lsl #2]
 800c190:	fb01 f301 	mul.w	r3, r1, r1
 800c194:	fb00 3300 	mla	r3, r0, r0, r3
 800c198:	4543      	cmp	r3, r8
 800c19a:	f104 0401 	add.w	r4, r4, #1
 800c19e:	dced      	bgt.n	800c17c <acc_cal_algorithms_phase_enhancement+0x1c>
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	b03c      	add	sp, #240	@ 0xf0
 800c1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1a8:	ac0b      	add	r4, sp, #44	@ 0x2c
 800c1aa:	f1ad 0602 	sub.w	r6, sp, #2
 800c1ae:	4621      	mov	r1, r4
 800c1b0:	4632      	mov	r2, r6
 800c1b2:	f10d 088c 	add.w	r8, sp, #140	@ 0x8c
 800c1b6:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	bfb8      	it	lt
 800c1be:	330f      	addlt	r3, #15
 800c1c0:	3202      	adds	r2, #2
 800c1c2:	111b      	asrs	r3, r3, #4
 800c1c4:	4541      	cmp	r1, r8
 800c1c6:	8013      	strh	r3, [r2, #0]
 800c1c8:	d1f5      	bne.n	800c1b6 <acc_cal_algorithms_phase_enhancement+0x56>
 800c1ca:	a80c      	add	r0, sp, #48	@ 0x30
 800c1cc:	2130      	movs	r1, #48	@ 0x30
 800c1ce:	f7ff ff09 	bl	800bfe4 <acc_cal_algorithms_phase_unwrap>
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800c1d8:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800c1da:	4544      	cmp	r4, r8
 800c1dc:	eba3 0301 	sub.w	r3, r3, r1
 800c1e0:	441a      	add	r2, r3
 800c1e2:	d1f7      	bne.n	800c1d4 <acc_cal_algorithms_phase_enhancement+0x74>
 800c1e4:	490d      	ldr	r1, [pc, #52]	@ (800c21c <acc_cal_algorithms_phase_enhancement+0xbc>)
 800c1e6:	17d3      	asrs	r3, r2, #31
 800c1e8:	fb81 1202 	smull	r1, r2, r1, r2
 800c1ec:	ebc3 12a2 	rsb	r2, r3, r2, asr #6
 800c1f0:	f502 4399 	add.w	r3, r2, #19584	@ 0x4c80
 800c1f4:	3330      	adds	r3, #48	@ 0x30
 800c1f6:	f64c 1162 	movw	r1, #51554	@ 0xc962
 800c1fa:	428b      	cmp	r3, r1
 800c1fc:	d8d0      	bhi.n	800c1a0 <acc_cal_algorithms_phase_enhancement+0x40>
 800c1fe:	3d02      	subs	r5, #2
 800c200:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800c204:	f836 3f02 	ldrh.w	r3, [r6, #2]!
 800c208:	f825 3f02 	strh.w	r3, [r5, #2]!
 800c20c:	42b1      	cmp	r1, r6
 800c20e:	d1f9      	bne.n	800c204 <acc_cal_algorithms_phase_enhancement+0xa4>
 800c210:	2001      	movs	r0, #1
 800c212:	803a      	strh	r2, [r7, #0]
 800c214:	b03c      	add	sp, #240	@ 0xf0
 800c216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c21a:	bf00      	nop
 800c21c:	2aaaaaab 	.word	0x2aaaaaab

0800c220 <acc_cal_algorithms_calc_pulse_params>:
 800c220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c224:	b085      	sub	sp, #20
 800c226:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
 800c22a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800c22e:	9203      	str	r2, [sp, #12]
 800c230:	d349      	bcc.n	800c2c6 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800c232:	9b02      	ldr	r3, [sp, #8]
 800c234:	2b08      	cmp	r3, #8
 800c236:	d046      	beq.n	800c2c6 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800c238:	9a01      	ldr	r2, [sp, #4]
 800c23a:	9c03      	ldr	r4, [sp, #12]
 800c23c:	f1a2 0c12 	sub.w	ip, r2, #18
 800c240:	2000      	movs	r0, #0
 800c242:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
 800c246:	f8cd c000 	str.w	ip, [sp]
 800c24a:	4680      	mov	r8, r0
 800c24c:	4682      	mov	sl, r0
 800c24e:	4683      	mov	fp, r0
 800c250:	3a02      	subs	r2, #2
 800c252:	2701      	movs	r7, #1
 800c254:	f240 29ee 	movw	r9, #750	@ 0x2ee
 800c258:	4684      	mov	ip, r0
 800c25a:	e014      	b.n	800c286 <acc_cal_algorithms_calc_pulse_params+0x66>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	d136      	bne.n	800c2ce <acc_cal_algorithms_calc_pulse_params+0xae>
 800c260:	459b      	cmp	fp, r3
 800c262:	da3a      	bge.n	800c2da <acc_cal_algorithms_calc_pulse_params+0xba>
 800c264:	469b      	mov	fp, r3
 800c266:	f04f 0801 	mov.w	r8, #1
 800c26a:	f1cc 0600 	rsb	r6, ip, #0
 800c26e:	429e      	cmp	r6, r3
 800c270:	9b00      	ldr	r3, [sp, #0]
 800c272:	bfc8      	it	gt
 800c274:	ebae 0c05 	subgt.w	ip, lr, r5
 800c278:	458a      	cmp	sl, r1
 800c27a:	bf38      	it	cc
 800c27c:	468a      	movcc	sl, r1
 800c27e:	4293      	cmp	r3, r2
 800c280:	f104 0402 	add.w	r4, r4, #2
 800c284:	d01c      	beq.n	800c2c0 <acc_cal_algorithms_calc_pulse_params+0xa0>
 800c286:	8a55      	ldrh	r5, [r2, #18]
 800c288:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800c28c:	1a6b      	subs	r3, r5, r1
 800c28e:	f503 4600 	add.w	r6, r3, #32768	@ 0x8000
 800c292:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 800c296:	bf38      	it	cc
 800c298:	8023      	strhcc	r3, [r4, #0]
 800c29a:	468e      	mov	lr, r1
 800c29c:	bf2c      	ite	cs
 800c29e:	2700      	movcs	r7, #0
 800c2a0:	8811      	ldrhcc	r1, [r2, #0]
 800c2a2:	454b      	cmp	r3, r9
 800c2a4:	dcda      	bgt.n	800c25c <acc_cal_algorithms_calc_pulse_params+0x3c>
 800c2a6:	4e58      	ldr	r6, [pc, #352]	@ (800c408 <acc_cal_algorithms_calc_pulse_params+0x1e8>)
 800c2a8:	459b      	cmp	fp, r3
 800c2aa:	bfb8      	it	lt
 800c2ac:	469b      	movlt	fp, r3
 800c2ae:	42b3      	cmp	r3, r6
 800c2b0:	dadb      	bge.n	800c26a <acc_cal_algorithms_calc_pulse_params+0x4a>
 800c2b2:	f1b8 0f00 	cmp.w	r8, #0
 800c2b6:	bf0a      	itet	eq
 800c2b8:	2700      	moveq	r7, #0
 800c2ba:	4640      	movne	r0, r8
 800c2bc:	2001      	moveq	r0, #1
 800c2be:	e7d4      	b.n	800c26a <acc_cal_algorithms_calc_pulse_params+0x4a>
 800c2c0:	f8cd c000 	str.w	ip, [sp]
 800c2c4:	b977      	cbnz	r7, 800c2e4 <acc_cal_algorithms_calc_pulse_params+0xc4>
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	b005      	add	sp, #20
 800c2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ce:	459b      	cmp	fp, r3
 800c2d0:	4680      	mov	r8, r0
 800c2d2:	da05      	bge.n	800c2e0 <acc_cal_algorithms_calc_pulse_params+0xc0>
 800c2d4:	469b      	mov	fp, r3
 800c2d6:	2700      	movs	r7, #0
 800c2d8:	e7c7      	b.n	800c26a <acc_cal_algorithms_calc_pulse_params+0x4a>
 800c2da:	f04f 0801 	mov.w	r8, #1
 800c2de:	e7c4      	b.n	800c26a <acc_cal_algorithms_calc_pulse_params+0x4a>
 800c2e0:	2700      	movs	r7, #0
 800c2e2:	e7c2      	b.n	800c26a <acc_cal_algorithms_calc_pulse_params+0x4a>
 800c2e4:	f1b8 0f00 	cmp.w	r8, #0
 800c2e8:	d0ed      	beq.n	800c2c6 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	d0eb      	beq.n	800c2c6 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800c2ee:	9b02      	ldr	r3, [sp, #8]
 800c2f0:	f1b3 0e1c 	subs.w	lr, r3, #28
 800c2f4:	d0e7      	beq.n	800c2c6 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800c2f6:	9f03      	ldr	r7, [sp, #12]
 800c2f8:	f8cd a008 	str.w	sl, [sp, #8]
 800c2fc:	f04f 0c00 	mov.w	ip, #0
 800c300:	9003      	str	r0, [sp, #12]
 800c302:	3712      	adds	r7, #18
 800c304:	46e1      	mov	r9, ip
 800c306:	46e0      	mov	r8, ip
 800c308:	46e2      	mov	sl, ip
 800c30a:	4660      	mov	r0, ip
 800c30c:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
 800c310:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800c314:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800c318:	463d      	mov	r5, r7
 800c31a:	463c      	mov	r4, r7
 800c31c:	210a      	movs	r1, #10
 800c31e:	f934 6d02 	ldrsh.w	r6, [r4, #-2]!
 800c322:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
 800c326:	fb01 3306 	mla	r3, r1, r6, r3
 800c32a:	fb01 3302 	mla	r3, r1, r2, r3
 800c32e:	3901      	subs	r1, #1
 800c330:	d1f5      	bne.n	800c31e <acc_cal_algorithms_calc_pulse_params+0xfe>
 800c332:	4543      	cmp	r3, r8
 800c334:	dc64      	bgt.n	800c400 <acc_cal_algorithms_calc_pulse_params+0x1e0>
 800c336:	454b      	cmp	r3, r9
 800c338:	bfa8      	it	ge
 800c33a:	4643      	movge	r3, r8
 800c33c:	da61      	bge.n	800c402 <acc_cal_algorithms_calc_pulse_params+0x1e2>
 800c33e:	4699      	mov	r9, r3
 800c340:	46e2      	mov	sl, ip
 800c342:	f10c 0c01 	add.w	ip, ip, #1
 800c346:	45f4      	cmp	ip, lr
 800c348:	d1e0      	bne.n	800c30c <acc_cal_algorithms_calc_pulse_params+0xec>
 800c34a:	f24c 3350 	movw	r3, #50000	@ 0xc350
 800c34e:	4598      	cmp	r8, r3
 800c350:	4605      	mov	r5, r0
 800c352:	4656      	mov	r6, sl
 800c354:	e9dd a002 	ldrd	sl, r0, [sp, #8]
 800c358:	ddb5      	ble.n	800c2c6 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800c35a:	4b2c      	ldr	r3, [pc, #176]	@ (800c40c <acc_cal_algorithms_calc_pulse_params+0x1ec>)
 800c35c:	4599      	cmp	r9, r3
 800c35e:	dab2      	bge.n	800c2c6 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800c360:	f1bb 0f00 	cmp.w	fp, #0
 800c364:	d0af      	beq.n	800c2c6 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800c366:	9b00      	ldr	r3, [sp, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d0ac      	beq.n	800c2c6 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800c36c:	9b01      	ldr	r3, [sp, #4]
 800c36e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800c370:	881b      	ldrh	r3, [r3, #0]
 800c372:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c376:	00db      	lsls	r3, r3, #3
 800c378:	b144      	cbz	r4, 800c38c <acc_cal_algorithms_calc_pulse_params+0x16c>
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d204      	bcs.n	800c388 <acc_cal_algorithms_calc_pulse_params+0x168>
 800c37e:	43d9      	mvns	r1, r3
 800c380:	4459      	add	r1, fp
 800c382:	4411      	add	r1, r2
 800c384:	fbb1 f1fb 	udiv	r1, r1, fp
 800c388:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800c38a:	6021      	str	r1, [r4, #0]
 800c38c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c38e:	2900      	cmp	r1, #0
 800c390:	d09a      	beq.n	800c2c8 <acc_cal_algorithms_calc_pulse_params+0xa8>
 800c392:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c394:	2900      	cmp	r1, #0
 800c396:	d097      	beq.n	800c2c8 <acc_cal_algorithms_calc_pulse_params+0xa8>
 800c398:	4629      	mov	r1, r5
 800c39a:	9c01      	ldr	r4, [sp, #4]
 800c39c:	310e      	adds	r1, #14
 800c39e:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 800c3a2:	ebb3 0fc4 	cmp.w	r3, r4, lsl #3
 800c3a6:	ea4f 05c4 	mov.w	r5, r4, lsl #3
 800c3aa:	d205      	bcs.n	800c3b8 <acc_cal_algorithms_calc_pulse_params+0x198>
 800c3ac:	43db      	mvns	r3, r3
 800c3ae:	445b      	add	r3, fp
 800c3b0:	442b      	add	r3, r5
 800c3b2:	fbb3 f3fb 	udiv	r3, r3, fp
 800c3b6:	1ac9      	subs	r1, r1, r3
 800c3b8:	9b01      	ldr	r3, [sp, #4]
 800c3ba:	f106 0b0e 	add.w	fp, r6, #14
 800c3be:	f833 301b 	ldrh.w	r3, [r3, fp, lsl #1]
 800c3c2:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
 800c3c6:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 800c3ca:	d907      	bls.n	800c3dc <acc_cal_algorithms_calc_pulse_params+0x1bc>
 800c3cc:	9d00      	ldr	r5, [sp, #0]
 800c3ce:	1e6b      	subs	r3, r5, #1
 800c3d0:	4413      	add	r3, r2
 800c3d2:	1b1b      	subs	r3, r3, r4
 800c3d4:	fbb3 f3f5 	udiv	r3, r3, r5
 800c3d8:	ebab 0b03 	sub.w	fp, fp, r3
 800c3dc:	2900      	cmp	r1, #0
 800c3de:	f6ff af72 	blt.w	800c2c6 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800c3e2:	f1bb 0f00 	cmp.w	fp, #0
 800c3e6:	f6ff af6e 	blt.w	800c2c6 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800c3ea:	4559      	cmp	r1, fp
 800c3ec:	f73f af6b 	bgt.w	800c2c6 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800c3f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3f2:	ebab 0b01 	sub.w	fp, fp, r1
 800c3f6:	f8c3 b000 	str.w	fp, [r3]
 800c3fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3fc:	6019      	str	r1, [r3, #0]
 800c3fe:	e763      	b.n	800c2c8 <acc_cal_algorithms_calc_pulse_params+0xa8>
 800c400:	4660      	mov	r0, ip
 800c402:	4698      	mov	r8, r3
 800c404:	e79d      	b.n	800c342 <acc_cal_algorithms_calc_pulse_params+0x122>
 800c406:	bf00      	nop
 800c408:	fffffd12 	.word	0xfffffd12
 800c40c:	ffff3cb0 	.word	0xffff3cb0

0800c410 <acc_cal_algorithms_pulseshaper_wavelet>:
 800c410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c414:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 800c418:	ae04      	add	r6, sp, #16
 800c41a:	af05      	add	r7, sp, #20
 800c41c:	2400      	movs	r4, #0
 800c41e:	e9cd 7401 	strd	r7, r4, [sp, #4]
 800c422:	9600      	str	r6, [sp, #0]
 800c424:	460d      	mov	r5, r1
 800c426:	aa08      	add	r2, sp, #32
 800c428:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800c42c:	2190      	movs	r1, #144	@ 0x90
 800c42e:	6034      	str	r4, [r6, #0]
 800c430:	603c      	str	r4, [r7, #0]
 800c432:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800c436:	4680      	mov	r8, r0
 800c438:	f7ff fef2 	bl	800c220 <acc_cal_algorithms_calc_pulse_params>
 800c43c:	b920      	cbnz	r0, 800c448 <acc_cal_algorithms_pulseshaper_wavelet+0x38>
 800c43e:	2000      	movs	r0, #0
 800c440:	f50d 7d44 	add.w	sp, sp, #784	@ 0x310
 800c444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c448:	ab07      	add	r3, sp, #28
 800c44a:	9301      	str	r3, [sp, #4]
 800c44c:	ab06      	add	r3, sp, #24
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	9402      	str	r4, [sp, #8]
 800c452:	aa08      	add	r2, sp, #32
 800c454:	f508 7090 	add.w	r0, r8, #288	@ 0x120
 800c458:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800c45c:	21f0      	movs	r1, #240	@ 0xf0
 800c45e:	f7ff fedf 	bl	800c220 <acc_cal_algorithms_calc_pulse_params>
 800c462:	2800      	cmp	r0, #0
 800c464:	d0eb      	beq.n	800c43e <acc_cal_algorithms_pulseshaper_wavelet+0x2e>
 800c466:	683f      	ldr	r7, [r7, #0]
 800c468:	9c07      	ldr	r4, [sp, #28]
 800c46a:	4b0b      	ldr	r3, [pc, #44]	@ (800c498 <acc_cal_algorithms_pulseshaper_wavelet+0x88>)
 800c46c:	490b      	ldr	r1, [pc, #44]	@ (800c49c <acc_cal_algorithms_pulseshaper_wavelet+0x8c>)
 800c46e:	6832      	ldr	r2, [r6, #0]
 800c470:	1be4      	subs	r4, r4, r7
 800c472:	fb03 f304 	mul.w	r3, r3, r4
 800c476:	fb01 f707 	mul.w	r7, r1, r7
 800c47a:	fb01 f202 	mul.w	r2, r1, r2
 800c47e:	0c1b      	lsrs	r3, r3, #16
 800c480:	ebc3 3357 	rsb	r3, r3, r7, lsr #13
 800c484:	fb01 f104 	mul.w	r1, r1, r4
 800c488:	0b52      	lsrs	r2, r2, #13
 800c48a:	e9c5 3100 	strd	r3, r1, [r5]
 800c48e:	60aa      	str	r2, [r5, #8]
 800c490:	f50d 7d44 	add.w	sp, sp, #784	@ 0x310
 800c494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c498:	00042aa8 	.word	0x00042aa8
 800c49c:	00010aaa 	.word	0x00010aaa

0800c4a0 <acc_cal_algorithms_pulseshaper_supply>:
 800c4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a4:	f5ad 7d47 	sub.w	sp, sp, #796	@ 0x31c
 800c4a8:	2600      	movs	r6, #0
 800c4aa:	af06      	add	r7, sp, #24
 800c4ac:	f10d 0814 	add.w	r8, sp, #20
 800c4b0:	4605      	mov	r5, r0
 800c4b2:	460c      	mov	r4, r1
 800c4b4:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800c4b8:	3002      	adds	r0, #2
 800c4ba:	aa0a      	add	r2, sp, #40	@ 0x28
 800c4bc:	f8cd 8000 	str.w	r8, [sp]
 800c4c0:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800c4c4:	f240 111f 	movw	r1, #287	@ 0x11f
 800c4c8:	f7ff feaa 	bl	800c220 <acc_cal_algorithms_calc_pulse_params>
 800c4cc:	b920      	cbnz	r0, 800c4d8 <acc_cal_algorithms_pulseshaper_supply+0x38>
 800c4ce:	2000      	movs	r0, #0
 800c4d0:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 800c4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d8:	ab08      	add	r3, sp, #32
 800c4da:	f10d 0a1c 	add.w	sl, sp, #28
 800c4de:	f10d 0b10 	add.w	fp, sp, #16
 800c4e2:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c4e6:	f8cd b000 	str.w	fp, [sp]
 800c4ea:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800c4ee:	aa0a      	add	r2, sp, #40	@ 0x28
 800c4f0:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800c4f4:	f505 7010 	add.w	r0, r5, #576	@ 0x240
 800c4f8:	f7ff fe92 	bl	800c220 <acc_cal_algorithms_calc_pulse_params>
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	d0e6      	beq.n	800c4ce <acc_cal_algorithms_pulseshaper_supply+0x2e>
 800c500:	f10d 0924 	add.w	r9, sp, #36	@ 0x24
 800c504:	e9cd 6600 	strd	r6, r6, [sp]
 800c508:	aa0a      	add	r2, sp, #40	@ 0x28
 800c50a:	f505 6090 	add.w	r0, r5, #1152	@ 0x480
 800c50e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c512:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800c516:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800c51a:	f7ff fe81 	bl	800c220 <acc_cal_algorithms_calc_pulse_params>
 800c51e:	2800      	cmp	r0, #0
 800c520:	d0d5      	beq.n	800c4ce <acc_cal_algorithms_pulseshaper_supply+0x2e>
 800c522:	f8db c000 	ldr.w	ip, [fp]
 800c526:	f8d8 6000 	ldr.w	r6, [r8]
 800c52a:	f8dd e020 	ldr.w	lr, [sp, #32]
 800c52e:	f8d7 8000 	ldr.w	r8, [r7]
 800c532:	f8da 2000 	ldr.w	r2, [sl]
 800c536:	f8d9 9000 	ldr.w	r9, [r9]
 800c53a:	4f17      	ldr	r7, [pc, #92]	@ (800c598 <acc_cal_algorithms_pulseshaper_supply+0xf8>)
 800c53c:	4d17      	ldr	r5, [pc, #92]	@ (800c59c <acc_cal_algorithms_pulseshaper_supply+0xfc>)
 800c53e:	4918      	ldr	r1, [pc, #96]	@ (800c5a0 <acc_cal_algorithms_pulseshaper_supply+0x100>)
 800c540:	4b18      	ldr	r3, [pc, #96]	@ (800c5a4 <acc_cal_algorithms_pulseshaper_supply+0x104>)
 800c542:	eba9 090e 	sub.w	r9, r9, lr
 800c546:	eba6 060c 	sub.w	r6, r6, ip
 800c54a:	eba2 0208 	sub.w	r2, r2, r8
 800c54e:	fb07 f706 	mul.w	r7, r7, r6
 800c552:	fb05 f502 	mul.w	r5, r5, r2
 800c556:	fb01 f109 	mul.w	r1, r1, r9
 800c55a:	fb03 fc0c 	mul.w	ip, r3, ip
 800c55e:	fb03 f808 	mul.w	r8, r3, r8
 800c562:	fb03 fe0e 	mul.w	lr, r3, lr
 800c566:	0c3f      	lsrs	r7, r7, #16
 800c568:	0c2d      	lsrs	r5, r5, #16
 800c56a:	0c09      	lsrs	r1, r1, #16
 800c56c:	fb03 f606 	mul.w	r6, r3, r6
 800c570:	fb03 f202 	mul.w	r2, r3, r2
 800c574:	ebc7 375c 	rsb	r7, r7, ip, lsr #13
 800c578:	ebc5 3558 	rsb	r5, r5, r8, lsr #13
 800c57c:	fb03 f309 	mul.w	r3, r3, r9
 800c580:	ebc1 315e 	rsb	r1, r1, lr, lsr #13
 800c584:	e9c4 7600 	strd	r7, r6, [r4]
 800c588:	e9c4 5202 	strd	r5, r2, [r4, #8]
 800c58c:	e9c4 1304 	strd	r1, r3, [r4, #16]
 800c590:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 800c594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c598:	00021554 	.word	0x00021554
 800c59c:	00074aa6 	.word	0x00074aa6
 800c5a0:	000b754e 	.word	0x000b754e
 800c5a4:	00010aaa 	.word	0x00010aaa

0800c5a8 <acc_a121_cal_session_start_1_pll_cbank_temp_program>:
 800c5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ac:	468a      	mov	sl, r1
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	4681      	mov	r9, r0
 800c5b2:	4611      	mov	r1, r2
 800c5b4:	4650      	mov	r0, sl
 800c5b6:	461f      	mov	r7, r3
 800c5b8:	2500      	movs	r5, #0
 800c5ba:	ab03      	add	r3, sp, #12
 800c5bc:	aa02      	add	r2, sp, #8
 800c5be:	e9cd 5502 	strd	r5, r5, [sp, #8]
 800c5c2:	f000 ffd5 	bl	800d570 <acc_sensor_a121_prepare_load_confmem>
 800c5c6:	4648      	mov	r0, r9
 800c5c8:	f001 f87c 	bl	800d6c4 <acc_sensor_protocol_a121_prepare_load>
 800c5cc:	b300      	cbz	r0, 800c610 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800c5ce:	9b03      	ldr	r3, [sp, #12]
 800c5d0:	f640 3b4a 	movw	fp, #2890	@ 0xb4a
 800c5d4:	ebab 0405 	sub.w	r4, fp, r5
 800c5d8:	429c      	cmp	r4, r3
 800c5da:	bf2c      	ite	cs
 800c5dc:	b29c      	uxthcs	r4, r3
 800c5de:	b2a4      	uxthcc	r4, r4
 800c5e0:	9e02      	ldr	r6, [sp, #8]
 800c5e2:	f003 fb0d 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c5e6:	ea4f 0855 	mov.w	r8, r5, lsr #1
 800c5ea:	0862      	lsrs	r2, r4, #1
 800c5ec:	4631      	mov	r1, r6
 800c5ee:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 800c5f2:	f003 f8cd 	bl	800f790 <acc_confprogram_copy>
 800c5f6:	f003 fb07 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c5fa:	887a      	ldrh	r2, [r7, #2]
 800c5fc:	211c      	movs	r1, #28
 800c5fe:	e9cd 1200 	strd	r1, r2, [sp]
 800c602:	4603      	mov	r3, r0
 800c604:	4622      	mov	r2, r4
 800c606:	4629      	mov	r1, r5
 800c608:	4630      	mov	r0, r6
 800c60a:	f002 fff7 	bl	800f5fc <acc_confprogram_patch_offset>
 800c60e:	b918      	cbnz	r0, 800c618 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x70>
 800c610:	2000      	movs	r0, #0
 800c612:	b005      	add	sp, #20
 800c614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c618:	f003 faf6 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c61c:	88ba      	ldrh	r2, [r7, #4]
 800c61e:	211a      	movs	r1, #26
 800c620:	e9cd 1200 	strd	r1, r2, [sp]
 800c624:	4603      	mov	r3, r0
 800c626:	4622      	mov	r2, r4
 800c628:	4629      	mov	r1, r5
 800c62a:	4630      	mov	r0, r6
 800c62c:	f002 ffe6 	bl	800f5fc <acc_confprogram_patch_offset>
 800c630:	2800      	cmp	r0, #0
 800c632:	d0ed      	beq.n	800c610 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800c634:	f003 fae8 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c638:	88fa      	ldrh	r2, [r7, #6]
 800c63a:	9201      	str	r2, [sp, #4]
 800c63c:	221b      	movs	r2, #27
 800c63e:	4603      	mov	r3, r0
 800c640:	9200      	str	r2, [sp, #0]
 800c642:	4629      	mov	r1, r5
 800c644:	4622      	mov	r2, r4
 800c646:	4630      	mov	r0, r6
 800c648:	f002 ffd8 	bl	800f5fc <acc_confprogram_patch_offset>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	d0df      	beq.n	800c610 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800c650:	f003 fada 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c654:	893a      	ldrh	r2, [r7, #8]
 800c656:	9201      	str	r2, [sp, #4]
 800c658:	2219      	movs	r2, #25
 800c65a:	4603      	mov	r3, r0
 800c65c:	9200      	str	r2, [sp, #0]
 800c65e:	4630      	mov	r0, r6
 800c660:	4622      	mov	r2, r4
 800c662:	4629      	mov	r1, r5
 800c664:	f002 ffca 	bl	800f5fc <acc_confprogram_patch_offset>
 800c668:	4606      	mov	r6, r0
 800c66a:	4623      	mov	r3, r4
 800c66c:	4652      	mov	r2, sl
 800c66e:	4641      	mov	r1, r8
 800c670:	4648      	mov	r0, r9
 800c672:	2e00      	cmp	r6, #0
 800c674:	d0cc      	beq.n	800c610 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800c676:	f000 ff93 	bl	800d5a0 <acc_sensor_a121_load_confmem>
 800c67a:	9b03      	ldr	r3, [sp, #12]
 800c67c:	441d      	add	r5, r3
 800c67e:	b2ad      	uxth	r5, r5
 800c680:	f640 3249 	movw	r2, #2889	@ 0xb49
 800c684:	4295      	cmp	r5, r2
 800c686:	d9a5      	bls.n	800c5d4 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x2c>
 800c688:	4648      	mov	r0, r9
 800c68a:	f240 115b 	movw	r1, #347	@ 0x15b
 800c68e:	f001 f86f 	bl	800d770 <acc_sensor_protocol_a121_run_program>
 800c692:	b005      	add	sp, #20
 800c694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c698 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program>:
 800c698:	b570      	push	{r4, r5, r6, lr}
 800c69a:	b086      	sub	sp, #24
 800c69c:	460d      	mov	r5, r1
 800c69e:	4604      	mov	r4, r0
 800c6a0:	f003 faae 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c6a4:	9005      	str	r0, [sp, #20]
 800c6a6:	f003 faaf 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c6aa:	4e09      	ldr	r6, [pc, #36]	@ (800c6d0 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program+0x38>)
 800c6ac:	9905      	ldr	r1, [sp, #20]
 800c6ae:	9501      	str	r5, [sp, #4]
 800c6b0:	2225      	movs	r2, #37	@ 0x25
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	9200      	str	r2, [sp, #0]
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	9602      	str	r6, [sp, #8]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f003 f800 	bl	800f6c0 <acc_confprogram_live_patch>
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	f240 2132 	movw	r1, #562	@ 0x232
 800c6c6:	b006      	add	sp, #24
 800c6c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c6cc:	f001 b850 	b.w	800d770 <acc_sensor_protocol_a121_run_program>
 800c6d0:	0800d53d 	.word	0x0800d53d

0800c6d4 <acc_a121_cal_session_start_3_delay_cbank_program>:
 800c6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6d6:	b087      	sub	sp, #28
 800c6d8:	4604      	mov	r4, r0
 800c6da:	460e      	mov	r6, r1
 800c6dc:	4615      	mov	r5, r2
 800c6de:	f003 fa8f 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c6e2:	9005      	str	r0, [sp, #20]
 800c6e4:	f003 fa90 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c6e8:	4f10      	ldr	r7, [pc, #64]	@ (800c72c <acc_a121_cal_session_start_3_delay_cbank_program+0x58>)
 800c6ea:	9905      	ldr	r1, [sp, #20]
 800c6ec:	9601      	str	r6, [sp, #4]
 800c6ee:	2226      	movs	r2, #38	@ 0x26
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	9200      	str	r2, [sp, #0]
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	9702      	str	r7, [sp, #8]
 800c6fa:	f002 ffe1 	bl	800f6c0 <acc_confprogram_live_patch>
 800c6fe:	f003 fa7f 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c702:	9005      	str	r0, [sp, #20]
 800c704:	f003 fa80 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c708:	2224      	movs	r2, #36	@ 0x24
 800c70a:	9905      	ldr	r1, [sp, #20]
 800c70c:	9200      	str	r2, [sp, #0]
 800c70e:	4603      	mov	r3, r0
 800c710:	9501      	str	r5, [sp, #4]
 800c712:	9702      	str	r7, [sp, #8]
 800c714:	4620      	mov	r0, r4
 800c716:	2200      	movs	r2, #0
 800c718:	f002 ffd2 	bl	800f6c0 <acc_confprogram_live_patch>
 800c71c:	4620      	mov	r0, r4
 800c71e:	f240 21c5 	movw	r1, #709	@ 0x2c5
 800c722:	b007      	add	sp, #28
 800c724:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c728:	f001 b822 	b.w	800d770 <acc_sensor_protocol_a121_run_program>
 800c72c:	0800d53d 	.word	0x0800d53d

0800c730 <acc_a121_cal_session_start_4_bba_vga_program>:
 800c730:	f44f 7145 	mov.w	r1, #788	@ 0x314
 800c734:	f001 b81c 	b.w	800d770 <acc_sensor_protocol_a121_run_program>

0800c738 <acc_a121_cal_session_start_5_area_index_program>:
 800c738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c73a:	b087      	sub	sp, #28
 800c73c:	4604      	mov	r4, r0
 800c73e:	460f      	mov	r7, r1
 800c740:	4616      	mov	r6, r2
 800c742:	f003 fa5d 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c746:	9005      	str	r0, [sp, #20]
 800c748:	f003 fa5e 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c74c:	883a      	ldrh	r2, [r7, #0]
 800c74e:	4d21      	ldr	r5, [pc, #132]	@ (800c7d4 <acc_a121_cal_session_start_5_area_index_program+0x9c>)
 800c750:	9201      	str	r2, [sp, #4]
 800c752:	2207      	movs	r2, #7
 800c754:	9905      	ldr	r1, [sp, #20]
 800c756:	9200      	str	r2, [sp, #0]
 800c758:	4603      	mov	r3, r0
 800c75a:	2200      	movs	r2, #0
 800c75c:	4620      	mov	r0, r4
 800c75e:	9502      	str	r5, [sp, #8]
 800c760:	f002 ffae 	bl	800f6c0 <acc_confprogram_live_patch>
 800c764:	f003 fa4c 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c768:	9005      	str	r0, [sp, #20]
 800c76a:	f003 fa4d 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c76e:	2208      	movs	r2, #8
 800c770:	9905      	ldr	r1, [sp, #20]
 800c772:	9601      	str	r6, [sp, #4]
 800c774:	4603      	mov	r3, r0
 800c776:	9200      	str	r2, [sp, #0]
 800c778:	9502      	str	r5, [sp, #8]
 800c77a:	2200      	movs	r2, #0
 800c77c:	4620      	mov	r0, r4
 800c77e:	f002 ff9f 	bl	800f6c0 <acc_confprogram_live_patch>
 800c782:	f003 fa3d 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c786:	9005      	str	r0, [sp, #20]
 800c788:	f003 fa3e 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c78c:	2603      	movs	r6, #3
 800c78e:	2209      	movs	r2, #9
 800c790:	9905      	ldr	r1, [sp, #20]
 800c792:	9502      	str	r5, [sp, #8]
 800c794:	4603      	mov	r3, r0
 800c796:	e9cd 2600 	strd	r2, r6, [sp]
 800c79a:	4620      	mov	r0, r4
 800c79c:	2200      	movs	r2, #0
 800c79e:	f002 ff8f 	bl	800f6c0 <acc_confprogram_live_patch>
 800c7a2:	f003 fa2d 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c7a6:	9005      	str	r0, [sp, #20]
 800c7a8:	f003 fa2e 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c7ac:	2606      	movs	r6, #6
 800c7ae:	220a      	movs	r2, #10
 800c7b0:	e9cd 2600 	strd	r2, r6, [sp]
 800c7b4:	9905      	ldr	r1, [sp, #20]
 800c7b6:	9502      	str	r5, [sp, #8]
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	4620      	mov	r0, r4
 800c7be:	f002 ff7f 	bl	800f6c0 <acc_confprogram_live_patch>
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f240 31d5 	movw	r1, #981	@ 0x3d5
 800c7c8:	b007      	add	sp, #28
 800c7ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c7ce:	f000 bfcf 	b.w	800d770 <acc_sensor_protocol_a121_run_program>
 800c7d2:	bf00      	nop
 800c7d4:	0800d53d 	.word	0x0800d53d

0800c7d8 <acc_a121_cal_session_start_6_tx_freq_program>:
 800c7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7da:	b087      	sub	sp, #28
 800c7dc:	460d      	mov	r5, r1
 800c7de:	4604      	mov	r4, r0
 800c7e0:	f003 fa0e 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c7e4:	9005      	str	r0, [sp, #20]
 800c7e6:	f003 fa0f 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c7ea:	882a      	ldrh	r2, [r5, #0]
 800c7ec:	4e41      	ldr	r6, [pc, #260]	@ (800c8f4 <acc_a121_cal_session_start_6_tx_freq_program+0x11c>)
 800c7ee:	9201      	str	r2, [sp, #4]
 800c7f0:	2221      	movs	r2, #33	@ 0x21
 800c7f2:	9905      	ldr	r1, [sp, #20]
 800c7f4:	9200      	str	r2, [sp, #0]
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	9602      	str	r6, [sp, #8]
 800c7fe:	f002 ff5f 	bl	800f6c0 <acc_confprogram_live_patch>
 800c802:	f003 f9fd 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c806:	9005      	str	r0, [sp, #20]
 800c808:	f003 f9fe 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c80c:	886f      	ldrh	r7, [r5, #2]
 800c80e:	9905      	ldr	r1, [sp, #20]
 800c810:	9701      	str	r7, [sp, #4]
 800c812:	2222      	movs	r2, #34	@ 0x22
 800c814:	4603      	mov	r3, r0
 800c816:	9200      	str	r2, [sp, #0]
 800c818:	9602      	str	r6, [sp, #8]
 800c81a:	2200      	movs	r2, #0
 800c81c:	4620      	mov	r0, r4
 800c81e:	f002 ff4f 	bl	800f6c0 <acc_confprogram_live_patch>
 800c822:	f003 f9ed 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c826:	9005      	str	r0, [sp, #20]
 800c828:	f003 f9ee 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c82c:	88ef      	ldrh	r7, [r5, #6]
 800c82e:	9905      	ldr	r1, [sp, #20]
 800c830:	9701      	str	r7, [sp, #4]
 800c832:	2201      	movs	r2, #1
 800c834:	4603      	mov	r3, r0
 800c836:	9200      	str	r2, [sp, #0]
 800c838:	9602      	str	r6, [sp, #8]
 800c83a:	2200      	movs	r2, #0
 800c83c:	4620      	mov	r0, r4
 800c83e:	f002 ff3f 	bl	800f6c0 <acc_confprogram_live_patch>
 800c842:	f003 f9dd 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c846:	9005      	str	r0, [sp, #20]
 800c848:	f003 f9de 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c84c:	892f      	ldrh	r7, [r5, #8]
 800c84e:	9905      	ldr	r1, [sp, #20]
 800c850:	9701      	str	r7, [sp, #4]
 800c852:	2202      	movs	r2, #2
 800c854:	4603      	mov	r3, r0
 800c856:	9200      	str	r2, [sp, #0]
 800c858:	9602      	str	r6, [sp, #8]
 800c85a:	2200      	movs	r2, #0
 800c85c:	4620      	mov	r0, r4
 800c85e:	f002 ff2f 	bl	800f6c0 <acc_confprogram_live_patch>
 800c862:	f003 f9cd 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c866:	9005      	str	r0, [sp, #20]
 800c868:	f003 f9ce 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c86c:	89af      	ldrh	r7, [r5, #12]
 800c86e:	9905      	ldr	r1, [sp, #20]
 800c870:	9701      	str	r7, [sp, #4]
 800c872:	2203      	movs	r2, #3
 800c874:	4603      	mov	r3, r0
 800c876:	9200      	str	r2, [sp, #0]
 800c878:	9602      	str	r6, [sp, #8]
 800c87a:	2200      	movs	r2, #0
 800c87c:	4620      	mov	r0, r4
 800c87e:	f002 ff1f 	bl	800f6c0 <acc_confprogram_live_patch>
 800c882:	f003 f9bd 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c886:	9005      	str	r0, [sp, #20]
 800c888:	f003 f9be 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c88c:	89ef      	ldrh	r7, [r5, #14]
 800c88e:	9905      	ldr	r1, [sp, #20]
 800c890:	9701      	str	r7, [sp, #4]
 800c892:	2204      	movs	r2, #4
 800c894:	4603      	mov	r3, r0
 800c896:	9200      	str	r2, [sp, #0]
 800c898:	9602      	str	r6, [sp, #8]
 800c89a:	2200      	movs	r2, #0
 800c89c:	4620      	mov	r0, r4
 800c89e:	f002 ff0f 	bl	800f6c0 <acc_confprogram_live_patch>
 800c8a2:	f003 f9ad 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c8a6:	9005      	str	r0, [sp, #20]
 800c8a8:	f003 f9ae 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c8ac:	8a6f      	ldrh	r7, [r5, #18]
 800c8ae:	9905      	ldr	r1, [sp, #20]
 800c8b0:	9602      	str	r6, [sp, #8]
 800c8b2:	2205      	movs	r2, #5
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	9200      	str	r2, [sp, #0]
 800c8b8:	9701      	str	r7, [sp, #4]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	4620      	mov	r0, r4
 800c8be:	f002 feff 	bl	800f6c0 <acc_confprogram_live_patch>
 800c8c2:	f003 f99d 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c8c6:	9005      	str	r0, [sp, #20]
 800c8c8:	f003 f99e 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c8cc:	2206      	movs	r2, #6
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	8aa8      	ldrh	r0, [r5, #20]
 800c8d2:	9905      	ldr	r1, [sp, #20]
 800c8d4:	9001      	str	r0, [sp, #4]
 800c8d6:	9200      	str	r2, [sp, #0]
 800c8d8:	9602      	str	r6, [sp, #8]
 800c8da:	4620      	mov	r0, r4
 800c8dc:	2200      	movs	r2, #0
 800c8de:	f002 feef 	bl	800f6c0 <acc_confprogram_live_patch>
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	f44f 717b 	mov.w	r1, #1004	@ 0x3ec
 800c8e8:	b007      	add	sp, #28
 800c8ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c8ee:	f000 bf3f 	b.w	800d770 <acc_sensor_protocol_a121_run_program>
 800c8f2:	bf00      	nop
 800c8f4:	0800d53d 	.word	0x0800d53d

0800c8f8 <acc_a121_cal_session_start_7_rx_freq_program>:
 800c8f8:	b570      	push	{r4, r5, r6, lr}
 800c8fa:	b086      	sub	sp, #24
 800c8fc:	460d      	mov	r5, r1
 800c8fe:	4604      	mov	r4, r0
 800c900:	f003 f97e 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c904:	9005      	str	r0, [sp, #20]
 800c906:	f003 f97f 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c90a:	4e09      	ldr	r6, [pc, #36]	@ (800c930 <acc_a121_cal_session_start_7_rx_freq_program+0x38>)
 800c90c:	9905      	ldr	r1, [sp, #20]
 800c90e:	9501      	str	r5, [sp, #4]
 800c910:	220c      	movs	r2, #12
 800c912:	4603      	mov	r3, r0
 800c914:	9200      	str	r2, [sp, #0]
 800c916:	4620      	mov	r0, r4
 800c918:	9602      	str	r6, [sp, #8]
 800c91a:	2200      	movs	r2, #0
 800c91c:	f002 fed0 	bl	800f6c0 <acc_confprogram_live_patch>
 800c920:	4620      	mov	r0, r4
 800c922:	f240 4116 	movw	r1, #1046	@ 0x416
 800c926:	b006      	add	sp, #24
 800c928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c92c:	f000 bf20 	b.w	800d770 <acc_sensor_protocol_a121_run_program>
 800c930:	0800d53d 	.word	0x0800d53d

0800c934 <acc_a121_cal_session_start_8_phase_enhancement_program>:
 800c934:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c936:	b087      	sub	sp, #28
 800c938:	4604      	mov	r4, r0
 800c93a:	460e      	mov	r6, r1
 800c93c:	f003 f960 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c940:	9005      	str	r0, [sp, #20]
 800c942:	f003 f961 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c946:	4d19      	ldr	r5, [pc, #100]	@ (800c9ac <acc_a121_cal_session_start_8_phase_enhancement_program+0x78>)
 800c948:	9905      	ldr	r1, [sp, #20]
 800c94a:	9601      	str	r6, [sp, #4]
 800c94c:	220b      	movs	r2, #11
 800c94e:	4603      	mov	r3, r0
 800c950:	9200      	str	r2, [sp, #0]
 800c952:	4620      	mov	r0, r4
 800c954:	2200      	movs	r2, #0
 800c956:	9502      	str	r5, [sp, #8]
 800c958:	f002 feb2 	bl	800f6c0 <acc_confprogram_live_patch>
 800c95c:	f003 f950 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c960:	9005      	str	r0, [sp, #20]
 800c962:	f003 f951 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c966:	2609      	movs	r6, #9
 800c968:	2200      	movs	r2, #0
 800c96a:	e9cd 6200 	strd	r6, r2, [sp]
 800c96e:	9905      	ldr	r1, [sp, #20]
 800c970:	9502      	str	r5, [sp, #8]
 800c972:	4603      	mov	r3, r0
 800c974:	4620      	mov	r0, r4
 800c976:	f002 fea3 	bl	800f6c0 <acc_confprogram_live_patch>
 800c97a:	f003 f941 	bl	800fc00 <acc_image_a121_r1a_cal_session_get>
 800c97e:	9005      	str	r0, [sp, #20]
 800c980:	f003 f942 	bl	800fc08 <acc_image_a121_r1a_cal_session_param_table_get>
 800c984:	277e      	movs	r7, #126	@ 0x7e
 800c986:	260a      	movs	r6, #10
 800c988:	9905      	ldr	r1, [sp, #20]
 800c98a:	9502      	str	r5, [sp, #8]
 800c98c:	4603      	mov	r3, r0
 800c98e:	e9cd 6700 	strd	r6, r7, [sp]
 800c992:	2200      	movs	r2, #0
 800c994:	4620      	mov	r0, r4
 800c996:	f002 fe93 	bl	800f6c0 <acc_confprogram_live_patch>
 800c99a:	4620      	mov	r0, r4
 800c99c:	f240 4152 	movw	r1, #1106	@ 0x452
 800c9a0:	b007      	add	sp, #28
 800c9a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c9a6:	f000 bee3 	b.w	800d770 <acc_sensor_protocol_a121_run_program>
 800c9aa:	bf00      	nop
 800c9ac:	0800d53d 	.word	0x0800d53d

0800c9b0 <acc_a121_cal_session_start_9_pulseshaper_program>:
 800c9b0:	f240 417b 	movw	r1, #1147	@ 0x47b
 800c9b4:	f000 bedc 	b.w	800d770 <acc_sensor_protocol_a121_run_program>

0800c9b8 <acc_a121_cal_session_ack_program>:
 800c9b8:	b530      	push	{r4, r5, lr}
 800c9ba:	b083      	sub	sp, #12
 800c9bc:	4604      	mov	r4, r0
 800c9be:	aa01      	add	r2, sp, #4
 800c9c0:	2101      	movs	r1, #1
 800c9c2:	f000 ff9f 	bl	800d904 <acc_sensor_protocol_a121_get_event>
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	2101      	movs	r1, #1
 800c9cc:	f000 ff52 	bl	800d874 <acc_sensor_protocol_a121_ack_event>
 800c9d0:	a801      	add	r0, sp, #4
 800c9d2:	f001 f809 	bl	800d9e8 <acc_sensor_protocol_a121_is_done>
 800c9d6:	4604      	mov	r4, r0
 800c9d8:	b930      	cbnz	r0, 800c9e8 <acc_a121_cal_session_ack_program+0x30>
 800c9da:	4a05      	ldr	r2, [pc, #20]	@ (800c9f0 <acc_a121_cal_session_ack_program+0x38>)
 800c9dc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800c9e0:	6915      	ldr	r5, [r2, #16]
 800c9e2:	4904      	ldr	r1, [pc, #16]	@ (800c9f4 <acc_a121_cal_session_ack_program+0x3c>)
 800c9e4:	4a04      	ldr	r2, [pc, #16]	@ (800c9f8 <acc_a121_cal_session_ack_program+0x40>)
 800c9e6:	47a8      	blx	r5
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	b003      	add	sp, #12
 800c9ec:	bd30      	pop	{r4, r5, pc}
 800c9ee:	bf00      	nop
 800c9f0:	200009dc 	.word	0x200009dc
 800c9f4:	0801332c 	.word	0x0801332c
 800c9f8:	080132e4 	.word	0x080132e4

0800c9fc <acc_a121_cal_session_get_1_pll_cbank_temp_program_data>:
 800c9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca00:	4688      	mov	r8, r1
 800ca02:	4607      	mov	r7, r0
 800ca04:	2132      	movs	r1, #50	@ 0x32
 800ca06:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800ca0a:	461e      	mov	r6, r3
 800ca0c:	f002 ff1a 	bl	800f844 <acc_sensor_reg_read>
 800ca10:	2312      	movs	r3, #18
 800ca12:	2200      	movs	r2, #0
 800ca14:	4641      	mov	r1, r8
 800ca16:	4638      	mov	r0, r7
 800ca18:	f000 fdec 	bl	800d5f4 <acc_sensor_a121_buffer_processed_read>
 800ca1c:	8802      	ldrh	r2, [r0, #0]
 800ca1e:	8032      	strh	r2, [r6, #0]
 800ca20:	8842      	ldrh	r2, [r0, #2]
 800ca22:	802a      	strh	r2, [r5, #0]
 800ca24:	1d03      	adds	r3, r0, #4
 800ca26:	6023      	str	r3, [r4, #0]
 800ca28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ca2c <acc_a121_cal_session_get_2_pll_ibias_vfast2_ldo_program_data>:
 800ca2c:	b570      	push	{r4, r5, r6, lr}
 800ca2e:	4616      	mov	r6, r2
 800ca30:	461c      	mov	r4, r3
 800ca32:	2200      	movs	r2, #0
 800ca34:	2341      	movs	r3, #65	@ 0x41
 800ca36:	9d04      	ldr	r5, [sp, #16]
 800ca38:	f000 fddc 	bl	800d5f4 <acc_sensor_a121_buffer_processed_read>
 800ca3c:	8c02      	ldrh	r2, [r0, #32]
 800ca3e:	6030      	str	r0, [r6, #0]
 800ca40:	f100 0322 	add.w	r3, r0, #34	@ 0x22
 800ca44:	8022      	strh	r2, [r4, #0]
 800ca46:	602b      	str	r3, [r5, #0]
 800ca48:	bd70      	pop	{r4, r5, r6, pc}
 800ca4a:	bf00      	nop

0800ca4c <acc_a121_cal_session_get_3_delay_cbank_program_data>:
 800ca4c:	b510      	push	{r4, lr}
 800ca4e:	2320      	movs	r3, #32
 800ca50:	4614      	mov	r4, r2
 800ca52:	2200      	movs	r2, #0
 800ca54:	f000 fdce 	bl	800d5f4 <acc_sensor_a121_buffer_processed_read>
 800ca58:	6020      	str	r0, [r4, #0]
 800ca5a:	bd10      	pop	{r4, pc}

0800ca5c <acc_a121_cal_session_get_4_bba_vga_program_data>:
 800ca5c:	b510      	push	{r4, lr}
 800ca5e:	2350      	movs	r3, #80	@ 0x50
 800ca60:	4614      	mov	r4, r2
 800ca62:	2200      	movs	r2, #0
 800ca64:	f000 fdc6 	bl	800d5f4 <acc_sensor_a121_buffer_processed_read>
 800ca68:	6020      	str	r0, [r4, #0]
 800ca6a:	bd10      	pop	{r4, pc}

0800ca6c <acc_a121_cal_session_get_5_area_index_program_data>:
 800ca6c:	b510      	push	{r4, lr}
 800ca6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ca72:	4614      	mov	r4, r2
 800ca74:	2200      	movs	r2, #0
 800ca76:	f000 fdbd 	bl	800d5f4 <acc_sensor_a121_buffer_processed_read>
 800ca7a:	6020      	str	r0, [r4, #0]
 800ca7c:	bd10      	pop	{r4, pc}
 800ca7e:	bf00      	nop

0800ca80 <acc_a121_cal_session_get_6_tx_freq_program_data>:
 800ca80:	f7ff bff4 	b.w	800ca6c <acc_a121_cal_session_get_5_area_index_program_data>

0800ca84 <acc_a121_cal_session_get_7_rx_freq_program_data>:
 800ca84:	b510      	push	{r4, lr}
 800ca86:	2310      	movs	r3, #16
 800ca88:	4614      	mov	r4, r2
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f000 fdb2 	bl	800d5f4 <acc_sensor_a121_buffer_processed_read>
 800ca90:	6020      	str	r0, [r4, #0]
 800ca92:	bd10      	pop	{r4, pc}

0800ca94 <acc_a121_cal_session_get_8_phase_enhancement_program_data>:
 800ca94:	b510      	push	{r4, lr}
 800ca96:	2360      	movs	r3, #96	@ 0x60
 800ca98:	4614      	mov	r4, r2
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f000 fdaa 	bl	800d5f4 <acc_sensor_a121_buffer_processed_read>
 800caa0:	6020      	str	r0, [r4, #0]
 800caa2:	bd10      	pop	{r4, pc}

0800caa4 <acc_a121_cal_session_get_9_pulseshaper_program_data>:
 800caa4:	b538      	push	{r3, r4, r5, lr}
 800caa6:	4615      	mov	r5, r2
 800caa8:	461c      	mov	r4, r3
 800caaa:	2200      	movs	r2, #0
 800caac:	f44f 639c 	mov.w	r3, #1248	@ 0x4e0
 800cab0:	f000 fda0 	bl	800d5f4 <acc_sensor_a121_buffer_processed_read>
 800cab4:	f500 7340 	add.w	r3, r0, #768	@ 0x300
 800cab8:	6028      	str	r0, [r5, #0]
 800caba:	6023      	str	r3, [r4, #0]
 800cabc:	bd38      	pop	{r3, r4, r5, pc}
 800cabe:	bf00      	nop

0800cac0 <acc_rss_integration_register_a121>:
 800cac0:	68c3      	ldr	r3, [r0, #12]
 800cac2:	b570      	push	{r4, r5, r6, lr}
 800cac4:	b1c3      	cbz	r3, 800caf8 <acc_rss_integration_register_a121+0x38>
 800cac6:	6843      	ldr	r3, [r0, #4]
 800cac8:	b1cb      	cbz	r3, 800cafe <acc_rss_integration_register_a121+0x3e>
 800caca:	6883      	ldr	r3, [r0, #8]
 800cacc:	b1bb      	cbz	r3, 800cafe <acc_rss_integration_register_a121+0x3e>
 800cace:	6903      	ldr	r3, [r0, #16]
 800cad0:	b1eb      	cbz	r3, 800cb0e <acc_rss_integration_register_a121+0x4e>
 800cad2:	8802      	ldrh	r2, [r0, #0]
 800cad4:	2a0f      	cmp	r2, #15
 800cad6:	d914      	bls.n	800cb02 <acc_rss_integration_register_a121+0x42>
 800cad8:	4604      	mov	r4, r0
 800cada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cadc:	4d0d      	ldr	r5, [pc, #52]	@ (800cb14 <acc_rss_integration_register_a121+0x54>)
 800cade:	4e0e      	ldr	r6, [pc, #56]	@ (800cb18 <acc_rss_integration_register_a121+0x58>)
 800cae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cae2:	4b0e      	ldr	r3, [pc, #56]	@ (800cb1c <acc_rss_integration_register_a121+0x5c>)
 800cae4:	4a0e      	ldr	r2, [pc, #56]	@ (800cb20 <acc_rss_integration_register_a121+0x60>)
 800cae6:	601a      	str	r2, [r3, #0]
 800cae8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800caec:	2302      	movs	r3, #2
 800caee:	e885 0003 	stmia.w	r5, {r0, r1}
 800caf2:	7033      	strb	r3, [r6, #0]
 800caf4:	2001      	movs	r0, #1
 800caf6:	bd70      	pop	{r4, r5, r6, pc}
 800caf8:	6943      	ldr	r3, [r0, #20]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d1e3      	bne.n	800cac6 <acc_rss_integration_register_a121+0x6>
 800cafe:	6903      	ldr	r3, [r0, #16]
 800cb00:	b12b      	cbz	r3, 800cb0e <acc_rss_integration_register_a121+0x4e>
 800cb02:	4a08      	ldr	r2, [pc, #32]	@ (800cb24 <acc_rss_integration_register_a121+0x64>)
 800cb04:	4908      	ldr	r1, [pc, #32]	@ (800cb28 <acc_rss_integration_register_a121+0x68>)
 800cb06:	2000      	movs	r0, #0
 800cb08:	4798      	blx	r3
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	bd70      	pop	{r4, r5, r6, pc}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	bd70      	pop	{r4, r5, r6, pc}
 800cb12:	bf00      	nop
 800cb14:	200009dc 	.word	0x200009dc
 800cb18:	20000884 	.word	0x20000884
 800cb1c:	20000888 	.word	0x20000888
 800cb20:	016e3600 	.word	0x016e3600
 800cb24:	0801334c 	.word	0x0801334c
 800cb28:	08013360 	.word	0x08013360

0800cb2c <acc_rss_integration_get_sensor_reference_frequency>:
 800cb2c:	4b01      	ldr	r3, [pc, #4]	@ (800cb34 <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 800cb2e:	6818      	ldr	r0, [r3, #0]
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop
 800cb34:	20000888 	.word	0x20000888

0800cb38 <acc_rss_integration_get_max_spi_transfer_size>:
 800cb38:	4b01      	ldr	r3, [pc, #4]	@ (800cb40 <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 800cb3a:	8818      	ldrh	r0, [r3, #0]
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	200009dc 	.word	0x200009dc

0800cb44 <acc_rss_integration_sensor_device_transfer>:
 800cb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb48:	4f10      	ldr	r7, [pc, #64]	@ (800cb8c <acc_rss_integration_sensor_device_transfer+0x48>)
 800cb4a:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800cb4e:	f1be 0f00 	cmp.w	lr, #0
 800cb52:	d003      	beq.n	800cb5c <acc_rss_integration_sensor_device_transfer+0x18>
 800cb54:	4673      	mov	r3, lr
 800cb56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb5a:	4718      	bx	r3
 800cb5c:	460c      	mov	r4, r1
 800cb5e:	4606      	mov	r6, r0
 800cb60:	4611      	mov	r1, r2
 800cb62:	4615      	mov	r5, r2
 800cb64:	4620      	mov	r0, r4
 800cb66:	4698      	mov	r8, r3
 800cb68:	f002 ffee 	bl	800fb48 <acc_utils_swap16_array>
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	4630      	mov	r0, r6
 800cb70:	006a      	lsls	r2, r5, #1
 800cb72:	4621      	mov	r1, r4
 800cb74:	4798      	blx	r3
 800cb76:	f1b8 0f00 	cmp.w	r8, #0
 800cb7a:	d101      	bne.n	800cb80 <acc_rss_integration_sensor_device_transfer+0x3c>
 800cb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb80:	4629      	mov	r1, r5
 800cb82:	4620      	mov	r0, r4
 800cb84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb88:	f002 bfde 	b.w	800fb48 <acc_utils_swap16_array>
 800cb8c:	200009dc 	.word	0x200009dc

0800cb90 <acc_rss_integration_mem_alloc_debug>:
 800cb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb94:	4f0c      	ldr	r7, [pc, #48]	@ (800cbc8 <acc_rss_integration_mem_alloc_debug+0x38>)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4688      	mov	r8, r1
 800cb9a:	4616      	mov	r6, r2
 800cb9c:	4605      	mov	r5, r0
 800cb9e:	4798      	blx	r3
 800cba0:	4604      	mov	r4, r0
 800cba2:	b150      	cbz	r0, 800cbba <acc_rss_integration_mem_alloc_debug+0x2a>
 800cba4:	4b09      	ldr	r3, [pc, #36]	@ (800cbcc <acc_rss_integration_mem_alloc_debug+0x3c>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	b123      	cbz	r3, 800cbb4 <acc_rss_integration_mem_alloc_debug+0x24>
 800cbaa:	689f      	ldr	r7, [r3, #8]
 800cbac:	4642      	mov	r2, r8
 800cbae:	4633      	mov	r3, r6
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	47b8      	blx	r7
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	4a04      	ldr	r2, [pc, #16]	@ (800cbd0 <acc_rss_integration_mem_alloc_debug+0x40>)
 800cbbe:	4905      	ldr	r1, [pc, #20]	@ (800cbd4 <acc_rss_integration_mem_alloc_debug+0x44>)
 800cbc0:	4798      	blx	r3
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbc8:	200009dc 	.word	0x200009dc
 800cbcc:	20000880 	.word	0x20000880
 800cbd0:	08013370 	.word	0x08013370
 800cbd4:	08013360 	.word	0x08013360

0800cbd8 <acc_rss_integration_mem_calloc_debug>:
 800cbd8:	b538      	push	{r3, r4, r5, lr}
 800cbda:	b1a8      	cbz	r0, 800cc08 <acc_rss_integration_mem_calloc_debug+0x30>
 800cbdc:	4614      	mov	r4, r2
 800cbde:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800cbe2:	fbb2 f2f0 	udiv	r2, r2, r0
 800cbe6:	428a      	cmp	r2, r1
 800cbe8:	d90e      	bls.n	800cc08 <acc_rss_integration_mem_calloc_debug+0x30>
 800cbea:	fb01 f500 	mul.w	r5, r1, r0
 800cbee:	461a      	mov	r2, r3
 800cbf0:	4621      	mov	r1, r4
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	f7ff ffcc 	bl	800cb90 <acc_rss_integration_mem_alloc_debug>
 800cbf8:	4604      	mov	r4, r0
 800cbfa:	b130      	cbz	r0, 800cc0a <acc_rss_integration_mem_calloc_debug+0x32>
 800cbfc:	462a      	mov	r2, r5
 800cbfe:	2100      	movs	r1, #0
 800cc00:	f004 f856 	bl	8010cb0 <memset>
 800cc04:	4620      	mov	r0, r4
 800cc06:	bd38      	pop	{r3, r4, r5, pc}
 800cc08:	2400      	movs	r4, #0
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	bd38      	pop	{r3, r4, r5, pc}
 800cc0e:	bf00      	nop

0800cc10 <acc_rss_integration_mem_free>:
 800cc10:	4b07      	ldr	r3, [pc, #28]	@ (800cc30 <acc_rss_integration_mem_free+0x20>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	b510      	push	{r4, lr}
 800cc16:	4604      	mov	r4, r0
 800cc18:	b10b      	cbz	r3, 800cc1e <acc_rss_integration_mem_free+0xe>
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	4798      	blx	r3
 800cc1e:	b12c      	cbz	r4, 800cc2c <acc_rss_integration_mem_free+0x1c>
 800cc20:	4b04      	ldr	r3, [pc, #16]	@ (800cc34 <acc_rss_integration_mem_free+0x24>)
 800cc22:	4620      	mov	r0, r4
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc2a:	4718      	bx	r3
 800cc2c:	bd10      	pop	{r4, pc}
 800cc2e:	bf00      	nop
 800cc30:	20000880 	.word	0x20000880
 800cc34:	200009dc 	.word	0x200009dc

0800cc38 <acc_rss_integration_log_level>:
 800cc38:	4b01      	ldr	r3, [pc, #4]	@ (800cc40 <acc_rss_integration_log_level+0x8>)
 800cc3a:	7818      	ldrb	r0, [r3, #0]
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	20000884 	.word	0x20000884

0800cc44 <pipeline_a121_produce>:
 800cc44:	6803      	ldr	r3, [r0, #0]
 800cc46:	f8d0 20e8 	ldr.w	r2, [r0, #232]	@ 0xe8
 800cc4a:	f8c0 20f0 	str.w	r2, [r0, #240]	@ 0xf0
 800cc4e:	685a      	ldr	r2, [r3, #4]
 800cc50:	4618      	mov	r0, r3
 800cc52:	4710      	bx	r2

0800cc54 <pipeline_a121_disassemble>:
 800cc54:	b538      	push	{r3, r4, r5, lr}
 800cc56:	6805      	ldr	r5, [r0, #0]
 800cc58:	4604      	mov	r4, r0
 800cc5a:	b175      	cbz	r5, 800cc7a <pipeline_a121_disassemble+0x26>
 800cc5c:	f8d5 0098 	ldr.w	r0, [r5, #152]	@ 0x98
 800cc60:	f003 f95a 	bl	800ff18 <acc_element_frame_release>
 800cc64:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 800cc68:	f003 f9da 	bl	8010020 <acc_element_frame_aux_release>
 800cc6c:	f8d5 0098 	ldr.w	r0, [r5, #152]	@ 0x98
 800cc70:	f7ff ffce 	bl	800cc10 <acc_rss_integration_mem_free>
 800cc74:	4628      	mov	r0, r5
 800cc76:	f7ff ffcb 	bl	800cc10 <acc_rss_integration_mem_free>
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc80:	f7ff bfc6 	b.w	800cc10 <acc_rss_integration_mem_free>

0800cc84 <acc_pipeline_get_buffer_size>:
 800cc84:	b510      	push	{r4, lr}
 800cc86:	b08e      	sub	sp, #56	@ 0x38
 800cc88:	460c      	mov	r4, r1
 800cc8a:	4669      	mov	r1, sp
 800cc8c:	f000 fbda 	bl	800d444 <acc_radar_engine_a121_get_metadata>
 800cc90:	b110      	cbz	r0, 800cc98 <acc_pipeline_get_buffer_size+0x14>
 800cc92:	f8bd 3000 	ldrh.w	r3, [sp]
 800cc96:	6023      	str	r3, [r4, #0]
 800cc98:	b00e      	add	sp, #56	@ 0x38
 800cc9a:	bd10      	pop	{r4, pc}

0800cc9c <acc_pipeline_a121_assemble>:
 800cc9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cca0:	6803      	ldr	r3, [r0, #0]
 800cca2:	f893 204e 	ldrb.w	r2, [r3, #78]	@ 0x4e
 800cca6:	b09b      	sub	sp, #108	@ 0x6c
 800cca8:	4606      	mov	r6, r0
 800ccaa:	460f      	mov	r7, r1
 800ccac:	b122      	cbz	r2, 800ccb8 <acc_pipeline_a121_assemble+0x1c>
 800ccae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	f040 810d 	bne.w	800ced2 <acc_pipeline_a121_assemble+0x236>
 800ccb8:	4aa5      	ldr	r2, [pc, #660]	@ (800cf50 <acc_pipeline_a121_assemble+0x2b4>)
 800ccba:	233d      	movs	r3, #61	@ 0x3d
 800ccbc:	2110      	movs	r1, #16
 800ccbe:	2001      	movs	r0, #1
 800ccc0:	f7ff ff8a 	bl	800cbd8 <acc_rss_integration_mem_calloc_debug>
 800ccc4:	4aa2      	ldr	r2, [pc, #648]	@ (800cf50 <acc_pipeline_a121_assemble+0x2b4>)
 800ccc6:	4605      	mov	r5, r0
 800ccc8:	233e      	movs	r3, #62	@ 0x3e
 800ccca:	21fc      	movs	r1, #252	@ 0xfc
 800cccc:	2001      	movs	r0, #1
 800ccce:	f7ff ff83 	bl	800cbd8 <acc_rss_integration_mem_calloc_debug>
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	2d00      	cmp	r5, #0
 800ccd6:	f000 8134 	beq.w	800cf42 <acc_pipeline_a121_assemble+0x2a6>
 800ccda:	2c00      	cmp	r4, #0
 800ccdc:	f000 812f 	beq.w	800cf3e <acc_pipeline_a121_assemble+0x2a2>
 800cce0:	f04f 0800 	mov.w	r8, #0
 800cce4:	f8d6 9000 	ldr.w	r9, [r6]
 800cce8:	f8c4 8098 	str.w	r8, [r4, #152]	@ 0x98
 800ccec:	4648      	mov	r0, r9
 800ccee:	602c      	str	r4, [r5, #0]
 800ccf0:	a90c      	add	r1, sp, #48	@ 0x30
 800ccf2:	f000 fba7 	bl	800d444 <acc_radar_engine_a121_get_metadata>
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	f000 80de 	beq.w	800ceb8 <acc_pipeline_a121_assemble+0x21c>
 800ccfc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800cd00:	f8d6 c008 	ldr.w	ip, [r6, #8]
 800cd04:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800cd08:	f8bd 004a 	ldrh.w	r0, [sp, #74]	@ 0x4a
 800cd0c:	8723      	strh	r3, [r4, #56]	@ 0x38
 800cd0e:	0049      	lsls	r1, r1, #1
 800cd10:	f8c4 10e8 	str.w	r1, [r4, #232]	@ 0xe8
 800cd14:	2100      	movs	r1, #0
 800cd16:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94
 800cd1a:	f8a4 109c 	strh.w	r1, [r4, #156]	@ 0x9c
 800cd1e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800cd22:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 800cd26:	f104 01f4 	add.w	r1, r4, #244	@ 0xf4
 800cd2a:	4403      	add	r3, r0
 800cd2c:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
 800cd30:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800cd34:	f104 01f6 	add.w	r1, r4, #246	@ 0xf6
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 800cd3e:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
 800cd42:	f104 01f7 	add.w	r1, r4, #247	@ 0xf7
 800cd46:	f8a4 309e 	strh.w	r3, [r4, #158]	@ 0x9e
 800cd4a:	6260      	str	r0, [r4, #36]	@ 0x24
 800cd4c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
 800cd50:	b13a      	cbz	r2, 800cd62 <acc_pipeline_a121_assemble+0xc6>
 800cd52:	f104 0eec 	add.w	lr, r4, #236	@ 0xec
 800cd56:	f104 01f5 	add.w	r1, r4, #245	@ 0xf5
 800cd5a:	6250      	str	r0, [r2, #36]	@ 0x24
 800cd5c:	f8c2 e018 	str.w	lr, [r2, #24]
 800cd60:	65d1      	str	r1, [r2, #92]	@ 0x5c
 800cd62:	e9c4 0c36 	strd	r0, ip, [r4, #216]	@ 0xd8
 800cd66:	f8a4 30e4 	strh.w	r3, [r4, #228]	@ 0xe4
 800cd6a:	2008      	movs	r0, #8
 800cd6c:	f002 fd44 	bl	800f7f8 <acc_element_sizeof>
 800cd70:	f899 304e 	ldrb.w	r3, [r9, #78]	@ 0x4e
 800cd74:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800cd78:	b183      	cbz	r3, 800cd9c <acc_pipeline_a121_assemble+0x100>
 800cd7a:	f103 3cff 	add.w	ip, r3, #4294967295
 800cd7e:	fa5f fc8c 	uxtb.w	ip, ip
 800cd82:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
 800cd86:	f10d 0156 	add.w	r1, sp, #86	@ 0x56
 800cd8a:	1eba      	subs	r2, r7, #2
 800cd8c:	f831 3b02 	ldrh.w	r3, [r1], #2
 800cd90:	fbb3 f3f0 	udiv	r3, r3, r0
 800cd94:	f822 3f02 	strh.w	r3, [r2, #2]!
 800cd98:	4562      	cmp	r2, ip
 800cd9a:	d1f7      	bne.n	800cd8c <acc_pipeline_a121_assemble+0xf0>
 800cd9c:	f8d6 8000 	ldr.w	r8, [r6]
 800cda0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800cda4:	f8bd 2046 	ldrh.w	r2, [sp, #70]	@ 0x46
 800cda8:	f8b8 9048 	ldrh.w	r9, [r8, #72]	@ 0x48
 800cdac:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800cdae:	f89d 1064 	ldrb.w	r1, [sp, #100]	@ 0x64
 800cdb2:	60b8      	str	r0, [r7, #8]
 800cdb4:	441a      	add	r2, r3
 800cdb6:	81fa      	strh	r2, [r7, #14]
 800cdb8:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 800cdbc:	7339      	strb	r1, [r7, #12]
 800cdbe:	823a      	strh	r2, [r7, #16]
 800cdc0:	f1b9 0f00 	cmp.w	r9, #0
 800cdc4:	d003      	beq.n	800cdce <acc_pipeline_a121_assemble+0x132>
 800cdc6:	f8bd 204c 	ldrh.w	r2, [sp, #76]	@ 0x4c
 800cdca:	fbb2 f9f9 	udiv	r9, r2, r9
 800cdce:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 800cdd2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800cdd6:	f8bd 0032 	ldrh.w	r0, [sp, #50]	@ 0x32
 800cdda:	f8ad 0000 	strh.w	r0, [sp]
 800cdde:	441a      	add	r2, r3
 800cde0:	440b      	add	r3, r1
 800cde2:	f8ad 2006 	strh.w	r2, [sp, #6]
 800cde6:	f8ad 3008 	strh.w	r3, [sp, #8]
 800cdea:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800cdee:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800cdf2:	f8ad 2002 	strh.w	r2, [sp, #2]
 800cdf6:	f104 073c 	add.w	r7, r4, #60	@ 0x3c
 800cdfa:	220f      	movs	r2, #15
 800cdfc:	f8ad 3004 	strh.w	r3, [sp, #4]
 800ce00:	4638      	mov	r0, r7
 800ce02:	2303      	movs	r3, #3
 800ce04:	4669      	mov	r1, sp
 800ce06:	f8ad 200a 	strh.w	r2, [sp, #10]
 800ce0a:	f88d 300c 	strb.w	r3, [sp, #12]
 800ce0e:	f003 f8e5 	bl	800ffdc <acc_element_frame_aux_init>
 800ce12:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800ce16:	b370      	cbz	r0, 800ce76 <acc_pipeline_a121_assemble+0x1da>
 800ce18:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 800ce1c:	f8bd 103e 	ldrh.w	r1, [sp, #62]	@ 0x3e
 800ce20:	f8b8 c048 	ldrh.w	ip, [r8, #72]	@ 0x48
 800ce24:	f8ad 901a 	strh.w	r9, [sp, #26]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	4419      	add	r1, r3
 800ce2c:	f898 304e 	ldrb.w	r3, [r8, #78]	@ 0x4e
 800ce30:	9205      	str	r2, [sp, #20]
 800ce32:	e9cd 2208 	strd	r2, r2, [sp, #32]
 800ce36:	9207      	str	r2, [sp, #28]
 800ce38:	920a      	str	r2, [sp, #40]	@ 0x28
 800ce3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce3c:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 800ce40:	f8ad 1014 	strh.w	r1, [sp, #20]
 800ce44:	f88d 3016 	strb.w	r3, [sp, #22]
 800ce48:	f8ad c018 	strh.w	ip, [sp, #24]
 800ce4c:	9204      	str	r2, [sp, #16]
 800ce4e:	b17b      	cbz	r3, 800ce70 <acc_pipeline_a121_assemble+0x1d4>
 800ce50:	3b01      	subs	r3, #1
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	aa14      	add	r2, sp, #80	@ 0x50
 800ce56:	eb02 0c43 	add.w	ip, r2, r3, lsl #1
 800ce5a:	f10d 034e 	add.w	r3, sp, #78	@ 0x4e
 800ce5e:	aa07      	add	r2, sp, #28
 800ce60:	f833 1b02 	ldrh.w	r1, [r3], #2
 800ce64:	f822 1b02 	strh.w	r1, [r2], #2
 800ce68:	459c      	cmp	ip, r3
 800ce6a:	88d9      	ldrh	r1, [r3, #6]
 800ce6c:	80d1      	strh	r1, [r2, #6]
 800ce6e:	d1f7      	bne.n	800ce60 <acc_pipeline_a121_assemble+0x1c4>
 800ce70:	a904      	add	r1, sp, #16
 800ce72:	f002 ffd9 	bl	800fe28 <acc_element_frame_init>
 800ce76:	f104 08a0 	add.w	r8, r4, #160	@ 0xa0
 800ce7a:	6871      	ldr	r1, [r6, #4]
 800ce7c:	4640      	mov	r0, r8
 800ce7e:	f003 f901 	bl	8010084 <acc_element_sink_a121_callback_init>
 800ce82:	4639      	mov	r1, r7
 800ce84:	4620      	mov	r0, r4
 800ce86:	f002 fcc3 	bl	800f810 <acc_element_connect>
 800ce8a:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 800ce8e:	2900      	cmp	r1, #0
 800ce90:	d059      	beq.n	800cf46 <acc_pipeline_a121_assemble+0x2aa>
 800ce92:	4638      	mov	r0, r7
 800ce94:	f002 fcbc 	bl	800f810 <acc_element_connect>
 800ce98:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800ce9c:	4641      	mov	r1, r8
 800ce9e:	f002 fcb7 	bl	800f810 <acc_element_connect>
 800cea2:	6820      	ldr	r0, [r4, #0]
 800cea4:	6883      	ldr	r3, [r0, #8]
 800cea6:	4798      	blx	r3
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d13b      	bne.n	800cf24 <acc_pipeline_a121_assemble+0x288>
 800ceac:	4b29      	ldr	r3, [pc, #164]	@ (800cf54 <acc_pipeline_a121_assemble+0x2b8>)
 800ceae:	4a2a      	ldr	r2, [pc, #168]	@ (800cf58 <acc_pipeline_a121_assemble+0x2bc>)
 800ceb0:	691b      	ldr	r3, [r3, #16]
 800ceb2:	4927      	ldr	r1, [pc, #156]	@ (800cf50 <acc_pipeline_a121_assemble+0x2b4>)
 800ceb4:	4798      	blx	r3
 800ceb6:	e004      	b.n	800cec2 <acc_pipeline_a121_assemble+0x226>
 800ceb8:	4b26      	ldr	r3, [pc, #152]	@ (800cf54 <acc_pipeline_a121_assemble+0x2b8>)
 800ceba:	4a28      	ldr	r2, [pc, #160]	@ (800cf5c <acc_pipeline_a121_assemble+0x2c0>)
 800cebc:	691b      	ldr	r3, [r3, #16]
 800cebe:	4924      	ldr	r1, [pc, #144]	@ (800cf50 <acc_pipeline_a121_assemble+0x2b4>)
 800cec0:	4798      	blx	r3
 800cec2:	4628      	mov	r0, r5
 800cec4:	f7ff fec6 	bl	800cc54 <pipeline_a121_disassemble>
 800cec8:	2500      	movs	r5, #0
 800ceca:	4628      	mov	r0, r5
 800cecc:	b01b      	add	sp, #108	@ 0x6c
 800cece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ced2:	4a1f      	ldr	r2, [pc, #124]	@ (800cf50 <acc_pipeline_a121_assemble+0x2b4>)
 800ced4:	233d      	movs	r3, #61	@ 0x3d
 800ced6:	2110      	movs	r1, #16
 800ced8:	2001      	movs	r0, #1
 800ceda:	f7ff fe7d 	bl	800cbd8 <acc_rss_integration_mem_calloc_debug>
 800cede:	4a1c      	ldr	r2, [pc, #112]	@ (800cf50 <acc_pipeline_a121_assemble+0x2b4>)
 800cee0:	233e      	movs	r3, #62	@ 0x3e
 800cee2:	21fc      	movs	r1, #252	@ 0xfc
 800cee4:	4605      	mov	r5, r0
 800cee6:	2001      	movs	r0, #1
 800cee8:	f7ff fe76 	bl	800cbd8 <acc_rss_integration_mem_calloc_debug>
 800ceec:	4a18      	ldr	r2, [pc, #96]	@ (800cf50 <acc_pipeline_a121_assemble+0x2b4>)
 800ceee:	4604      	mov	r4, r0
 800cef0:	2343      	movs	r3, #67	@ 0x43
 800cef2:	2160      	movs	r1, #96	@ 0x60
 800cef4:	2001      	movs	r0, #1
 800cef6:	f7ff fe6f 	bl	800cbd8 <acc_rss_integration_mem_calloc_debug>
 800cefa:	4680      	mov	r8, r0
 800cefc:	b125      	cbz	r5, 800cf08 <acc_pipeline_a121_assemble+0x26c>
 800cefe:	b11c      	cbz	r4, 800cf08 <acc_pipeline_a121_assemble+0x26c>
 800cf00:	f1b8 0f00 	cmp.w	r8, #0
 800cf04:	f47f aeee 	bne.w	800cce4 <acc_pipeline_a121_assemble+0x48>
 800cf08:	4628      	mov	r0, r5
 800cf0a:	f7ff fe81 	bl	800cc10 <acc_rss_integration_mem_free>
 800cf0e:	4620      	mov	r0, r4
 800cf10:	f7ff fe7e 	bl	800cc10 <acc_rss_integration_mem_free>
 800cf14:	4640      	mov	r0, r8
 800cf16:	f7ff fe7b 	bl	800cc10 <acc_rss_integration_mem_free>
 800cf1a:	2500      	movs	r5, #0
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	b01b      	add	sp, #108	@ 0x6c
 800cf20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf24:	6820      	ldr	r0, [r4, #0]
 800cf26:	68c3      	ldr	r3, [r0, #12]
 800cf28:	4798      	blx	r3
 800cf2a:	4b0d      	ldr	r3, [pc, #52]	@ (800cf60 <acc_pipeline_a121_assemble+0x2c4>)
 800cf2c:	4a0d      	ldr	r2, [pc, #52]	@ (800cf64 <acc_pipeline_a121_assemble+0x2c8>)
 800cf2e:	606b      	str	r3, [r5, #4]
 800cf30:	4628      	mov	r0, r5
 800cf32:	2300      	movs	r3, #0
 800cf34:	e9c5 3202 	strd	r3, r2, [r5, #8]
 800cf38:	b01b      	add	sp, #108	@ 0x6c
 800cf3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf3e:	46a0      	mov	r8, r4
 800cf40:	e7e2      	b.n	800cf08 <acc_pipeline_a121_assemble+0x26c>
 800cf42:	46a8      	mov	r8, r5
 800cf44:	e7e0      	b.n	800cf08 <acc_pipeline_a121_assemble+0x26c>
 800cf46:	4641      	mov	r1, r8
 800cf48:	4638      	mov	r0, r7
 800cf4a:	f002 fc61 	bl	800f810 <acc_element_connect>
 800cf4e:	e7a8      	b.n	800cea2 <acc_pipeline_a121_assemble+0x206>
 800cf50:	080133a4 	.word	0x080133a4
 800cf54:	200009dc 	.word	0x200009dc
 800cf58:	080133b4 	.word	0x080133b4
 800cf5c:	08013380 	.word	0x08013380
 800cf60:	0800cc45 	.word	0x0800cc45
 800cf64:	0800cc55 	.word	0x0800cc55

0800cf68 <acc_pipeline_a121_prepare_memory>:
 800cf68:	6803      	ldr	r3, [r0, #0]
 800cf6a:	b430      	push	{r4, r5}
 800cf6c:	f8b3 0094 	ldrh.w	r0, [r3, #148]	@ 0x94
 800cf70:	8f1c      	ldrh	r4, [r3, #56]	@ 0x38
 800cf72:	f8b3 2096 	ldrh.w	r2, [r3, #150]	@ 0x96
 800cf76:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
 800cf7a:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 800cf7e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800cf82:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800cf86:	e9c3 0213 	strd	r0, r2, [r3, #76]	@ 0x4c
 800cf8a:	615c      	str	r4, [r3, #20]
 800cf8c:	b14d      	cbz	r5, 800cfa2 <acc_pipeline_a121_prepare_memory+0x3a>
 800cf8e:	f8b3 009c 	ldrh.w	r0, [r3, #156]	@ 0x9c
 800cf92:	f8b3 209e 	ldrh.w	r2, [r3, #158]	@ 0x9e
 800cf96:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800cf9a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800cf9e:	e9c5 0204 	strd	r0, r2, [r5, #16]
 800cfa2:	f8b3 20e4 	ldrh.w	r2, [r3, #228]	@ 0xe4
 800cfa6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800cfaa:	bc30      	pop	{r4, r5}
 800cfac:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
 800cfb0:	4770      	bx	lr
 800cfb2:	bf00      	nop

0800cfb4 <acc_radar_engine_a121_context_create>:
 800cfb4:	b508      	push	{r3, lr}
 800cfb6:	4a07      	ldr	r2, [pc, #28]	@ (800cfd4 <acc_radar_engine_a121_context_create+0x20>)
 800cfb8:	2373      	movs	r3, #115	@ 0x73
 800cfba:	f44f 71fe 	mov.w	r1, #508	@ 0x1fc
 800cfbe:	2001      	movs	r0, #1
 800cfc0:	f7ff fe0a 	bl	800cbd8 <acc_rss_integration_mem_calloc_debug>
 800cfc4:	b120      	cbz	r0, 800cfd0 <acc_radar_engine_a121_context_create+0x1c>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	f8a0 31c4 	strh.w	r3, [r0, #452]	@ 0x1c4
 800cfcc:	f880 31c6 	strb.w	r3, [r0, #454]	@ 0x1c6
 800cfd0:	bd08      	pop	{r3, pc}
 800cfd2:	bf00      	nop
 800cfd4:	080133d4 	.word	0x080133d4

0800cfd8 <acc_radar_engine_a121_context_destroy>:
 800cfd8:	b108      	cbz	r0, 800cfde <acc_radar_engine_a121_context_destroy+0x6>
 800cfda:	f7ff be19 	b.w	800cc10 <acc_rss_integration_mem_free>
 800cfde:	4770      	bx	lr

0800cfe0 <acc_radar_engine_a121_run_program>:
 800cfe0:	f003 b902 	b.w	80101e8 <acc_cpd_a121_meas_session_run_program>

0800cfe4 <acc_radar_engine_a121_measure>:
 800cfe4:	b510      	push	{r4, lr}
 800cfe6:	460c      	mov	r4, r1
 800cfe8:	2201      	movs	r2, #1
 800cfea:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800cfee:	f000 fc41 	bl	800d874 <acc_sensor_protocol_a121_ack_event>
 800cff2:	f894 31c5 	ldrb.w	r3, [r4, #453]	@ 0x1c5
 800cff6:	b143      	cbz	r3, 800d00a <acc_radar_engine_a121_measure+0x26>
 800cff8:	f894 31c6 	ldrb.w	r3, [r4, #454]	@ 0x1c6
 800cffc:	2b02      	cmp	r3, #2
 800cffe:	bf0c      	ite	eq
 800d000:	2301      	moveq	r3, #1
 800d002:	2302      	movne	r3, #2
 800d004:	f884 31c6 	strb.w	r3, [r4, #454]	@ 0x1c6
 800d008:	bd10      	pop	{r4, pc}
 800d00a:	2301      	movs	r3, #1
 800d00c:	f884 31c6 	strb.w	r3, [r4, #454]	@ 0x1c6
 800d010:	bd10      	pop	{r4, pc}
 800d012:	bf00      	nop

0800d014 <acc_radar_engine_a121_transfer_data>:
 800d014:	b538      	push	{r3, r4, r5, lr}
 800d016:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800d01a:	9c04      	ldr	r4, [sp, #16]
 800d01c:	2901      	cmp	r1, #1
 800d01e:	bf14      	ite	ne
 800d020:	f44f 5180 	movne.w	r1, #4096	@ 0x1000
 800d024:	2100      	moveq	r1, #0
 800d026:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800d02a:	461d      	mov	r5, r3
 800d02c:	f003 f954 	bl	80102d8 <acc_cpd_a121_meas_session_transfer_data>
 800d030:	b118      	cbz	r0, 800d03a <acc_radar_engine_a121_transfer_data+0x26>
 800d032:	1e28      	subs	r0, r5, #0
 800d034:	bf18      	it	ne
 800d036:	2001      	movne	r0, #1
 800d038:	bd38      	pop	{r3, r4, r5, pc}
 800d03a:	4b04      	ldr	r3, [pc, #16]	@ (800d04c <acc_radar_engine_a121_transfer_data+0x38>)
 800d03c:	4a04      	ldr	r2, [pc, #16]	@ (800d050 <acc_radar_engine_a121_transfer_data+0x3c>)
 800d03e:	691b      	ldr	r3, [r3, #16]
 800d040:	4904      	ldr	r1, [pc, #16]	@ (800d054 <acc_radar_engine_a121_transfer_data+0x40>)
 800d042:	4604      	mov	r4, r0
 800d044:	4798      	blx	r3
 800d046:	4620      	mov	r0, r4
 800d048:	bd38      	pop	{r3, r4, r5, pc}
 800d04a:	bf00      	nop
 800d04c:	200009dc 	.word	0x200009dc
 800d050:	080133e8 	.word	0x080133e8
 800d054:	080133d4 	.word	0x080133d4

0800d058 <acc_radar_engine_a121_verify_radar_data_ready>:
 800d058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d05c:	b084      	sub	sp, #16
 800d05e:	460d      	mov	r5, r1
 800d060:	2400      	movs	r4, #0
 800d062:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800d066:	9403      	str	r4, [sp, #12]
 800d068:	4690      	mov	r8, r2
 800d06a:	4607      	mov	r7, r0
 800d06c:	f000 fbe6 	bl	800d83c <acc_sensor_protocol_a121_is_event_pending>
 800d070:	b980      	cbnz	r0, 800d094 <acc_radar_engine_a121_verify_radar_data_ready+0x3c>
 800d072:	4b15      	ldr	r3, [pc, #84]	@ (800d0c8 <acc_radar_engine_a121_verify_radar_data_ready+0x70>)
 800d074:	4a15      	ldr	r2, [pc, #84]	@ (800d0cc <acc_radar_engine_a121_verify_radar_data_ready+0x74>)
 800d076:	691d      	ldr	r5, [r3, #16]
 800d078:	4915      	ldr	r1, [pc, #84]	@ (800d0d0 <acc_radar_engine_a121_verify_radar_data_ready+0x78>)
 800d07a:	463b      	mov	r3, r7
 800d07c:	4604      	mov	r4, r0
 800d07e:	47a8      	blx	r5
 800d080:	ae03      	add	r6, sp, #12
 800d082:	4630      	mov	r0, r6
 800d084:	f000 fcb8 	bl	800d9f8 <acc_sensor_protocol_a121_get_frame_delayed_flag>
 800d088:	f888 0000 	strb.w	r0, [r8]
 800d08c:	4620      	mov	r0, r4
 800d08e:	b004      	add	sp, #16
 800d090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d094:	ae03      	add	r6, sp, #12
 800d096:	f895 11c6 	ldrb.w	r1, [r5, #454]	@ 0x1c6
 800d09a:	4632      	mov	r2, r6
 800d09c:	4638      	mov	r0, r7
 800d09e:	f000 fc31 	bl	800d904 <acc_sensor_protocol_a121_get_event>
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	d0ec      	beq.n	800d082 <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	f000 fc95 	bl	800d9d8 <acc_sensor_protocol_a121_is_handshake>
 800d0ae:	4604      	mov	r4, r0
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	d1e6      	bne.n	800d082 <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 800d0b4:	4a04      	ldr	r2, [pc, #16]	@ (800d0c8 <acc_radar_engine_a121_verify_radar_data_ready+0x70>)
 800d0b6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d0ba:	6915      	ldr	r5, [r2, #16]
 800d0bc:	4904      	ldr	r1, [pc, #16]	@ (800d0d0 <acc_radar_engine_a121_verify_radar_data_ready+0x78>)
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	4a04      	ldr	r2, [pc, #16]	@ (800d0d4 <acc_radar_engine_a121_verify_radar_data_ready+0x7c>)
 800d0c2:	463b      	mov	r3, r7
 800d0c4:	47a8      	blx	r5
 800d0c6:	e7dc      	b.n	800d082 <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 800d0c8:	200009dc 	.word	0x200009dc
 800d0cc:	08013414 	.word	0x08013414
 800d0d0:	080133d4 	.word	0x080133d4
 800d0d4:	08013434 	.word	0x08013434

0800d0d8 <acc_radar_engine_a121_update_buffer_header>:
 800d0d8:	f890 31c4 	ldrb.w	r3, [r0, #452]	@ 0x1c4
 800d0dc:	8011      	strh	r1, [r2, #0]
 800d0de:	b4f0      	push	{r4, r5, r6, r7}
 800d0e0:	b133      	cbz	r3, 800d0f0 <acc_radar_engine_a121_update_buffer_header+0x18>
 800d0e2:	f890 31c6 	ldrb.w	r3, [r0, #454]	@ 0x1c6
 800d0e6:	f1a3 0301 	sub.w	r3, r3, #1
 800d0ea:	fab3 f383 	clz	r3, r3
 800d0ee:	095b      	lsrs	r3, r3, #5
 800d0f0:	8053      	strh	r3, [r2, #2]
 800d0f2:	f8b0 31c8 	ldrh.w	r3, [r0, #456]	@ 0x1c8
 800d0f6:	8093      	strh	r3, [r2, #4]
 800d0f8:	1d91      	adds	r1, r2, #6
 800d0fa:	f500 73e5 	add.w	r3, r0, #458	@ 0x1ca
 800d0fe:	f500 74fd 	add.w	r4, r0, #506	@ 0x1fa
 800d102:	681f      	ldr	r7, [r3, #0]
 800d104:	685e      	ldr	r6, [r3, #4]
 800d106:	689d      	ldr	r5, [r3, #8]
 800d108:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800d10c:	f8c1 c00c 	str.w	ip, [r1, #12]
 800d110:	3310      	adds	r3, #16
 800d112:	42a3      	cmp	r3, r4
 800d114:	600f      	str	r7, [r1, #0]
 800d116:	604e      	str	r6, [r1, #4]
 800d118:	608d      	str	r5, [r1, #8]
 800d11a:	f101 0110 	add.w	r1, r1, #16
 800d11e:	d1f0      	bne.n	800d102 <acc_radar_engine_a121_update_buffer_header+0x2a>
 800d120:	f8b0 31fa 	ldrh.w	r3, [r0, #506]	@ 0x1fa
 800d124:	86d3      	strh	r3, [r2, #54]	@ 0x36
 800d126:	bcf0      	pop	{r4, r5, r6, r7}
 800d128:	4770      	bx	lr
 800d12a:	bf00      	nop

0800d12c <acc_radar_engine_a121_check_asic_id>:
 800d12c:	f000 bc68 	b.w	800da00 <acc_sensor_protocol_a121_check_asic_id>

0800d130 <acc_radar_engine_a121_is_sensor_running>:
 800d130:	f000 bb72 	b.w	800d818 <acc_sensor_protocol_a121_is_sensor_running>

0800d134 <acc_radar_engine_121_populate_metadata>:
 800d134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d138:	8804      	ldrh	r4, [r0, #0]
 800d13a:	2a00      	cmp	r2, #0
 800d13c:	bf14      	ite	ne
 800d13e:	f44f 5280 	movne.w	r2, #4096	@ 0x1000
 800d142:	f44f 5200 	moveq.w	r2, #8192	@ 0x2000
 800d146:	f5b4 6f9c 	cmp.w	r4, #1248	@ 0x4e0
 800d14a:	bf38      	it	cc
 800d14c:	f44f 649c 	movcc.w	r4, #1248	@ 0x4e0
 800d150:	42a2      	cmp	r2, r4
 800d152:	4606      	mov	r6, r0
 800d154:	4688      	mov	r8, r1
 800d156:	461d      	mov	r5, r3
 800d158:	d22b      	bcs.n	800d1b2 <acc_radar_engine_121_populate_metadata+0x7e>
 800d15a:	4b17      	ldr	r3, [pc, #92]	@ (800d1b8 <acc_radar_engine_121_populate_metadata+0x84>)
 800d15c:	4a17      	ldr	r2, [pc, #92]	@ (800d1bc <acc_radar_engine_121_populate_metadata+0x88>)
 800d15e:	691b      	ldr	r3, [r3, #16]
 800d160:	4917      	ldr	r1, [pc, #92]	@ (800d1c0 <acc_radar_engine_121_populate_metadata+0x8c>)
 800d162:	2000      	movs	r0, #0
 800d164:	4798      	blx	r3
 800d166:	2700      	movs	r7, #0
 800d168:	4916      	ldr	r1, [pc, #88]	@ (800d1c4 <acc_radar_engine_121_populate_metadata+0x90>)
 800d16a:	4a17      	ldr	r2, [pc, #92]	@ (800d1c8 <acc_radar_engine_121_populate_metadata+0x94>)
 800d16c:	2300      	movs	r3, #0
 800d16e:	806b      	strh	r3, [r5, #2]
 800d170:	231c      	movs	r3, #28
 800d172:	81ab      	strh	r3, [r5, #12]
 800d174:	e9c5 1201 	strd	r1, r2, [r5, #4]
 800d178:	f000 f9de 	bl	800d538 <acc_sensor_a121_get_max_header_length>
 800d17c:	301c      	adds	r0, #28
 800d17e:	b280      	uxth	r0, r0
 800d180:	1903      	adds	r3, r0, r4
 800d182:	462c      	mov	r4, r5
 800d184:	005b      	lsls	r3, r3, #1
 800d186:	81e8      	strh	r0, [r5, #14]
 800d188:	6871      	ldr	r1, [r6, #4]
 800d18a:	6830      	ldr	r0, [r6, #0]
 800d18c:	68b2      	ldr	r2, [r6, #8]
 800d18e:	f824 3b10 	strh.w	r3, [r4], #16
 800d192:	68f3      	ldr	r3, [r6, #12]
 800d194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d196:	6930      	ldr	r0, [r6, #16]
 800d198:	6971      	ldr	r1, [r6, #20]
 800d19a:	69b2      	ldr	r2, [r6, #24]
 800d19c:	c407      	stmia	r4!, {r0, r1, r2}
 800d19e:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d1a2:	8bb3      	ldrh	r3, [r6, #28]
 800d1a4:	8023      	strh	r3, [r4, #0]
 800d1a6:	3530      	adds	r5, #48	@ 0x30
 800d1a8:	e885 0003 	stmia.w	r5, {r0, r1}
 800d1ac:	4638      	mov	r0, r7
 800d1ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1b2:	2701      	movs	r7, #1
 800d1b4:	e7d8      	b.n	800d168 <acc_radar_engine_121_populate_metadata+0x34>
 800d1b6:	bf00      	nop
 800d1b8:	200009dc 	.word	0x200009dc
 800d1bc:	08013460 	.word	0x08013460
 800d1c0:	080133d4 	.word	0x080133d4
 800d1c4:	00020001 	.word	0x00020001
 800d1c8:	001b0003 	.word	0x001b0003

0800d1cc <acc_radar_engine_a121_prepare>:
 800d1cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1d0:	f5ad 7d0d 	sub.w	sp, sp, #564	@ 0x234
 800d1d4:	460c      	mov	r4, r1
 800d1d6:	4615      	mov	r5, r2
 800d1d8:	2100      	movs	r1, #0
 800d1da:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800d1de:	4606      	mov	r6, r0
 800d1e0:	a81b      	add	r0, sp, #108	@ 0x6c
 800d1e2:	4699      	mov	r9, r3
 800d1e4:	9f95      	ldr	r7, [sp, #596]	@ 0x254
 800d1e6:	f10d 080c 	add.w	r8, sp, #12
 800d1ea:	f003 fd61 	bl	8010cb0 <memset>
 800d1ee:	2238      	movs	r2, #56	@ 0x38
 800d1f0:	2100      	movs	r1, #0
 800d1f2:	a80d      	add	r0, sp, #52	@ 0x34
 800d1f4:	f003 fd5c 	bl	8010cb0 <memset>
 800d1f8:	4629      	mov	r1, r5
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	aa1b      	add	r2, sp, #108	@ 0x6c
 800d1fe:	ab05      	add	r3, sp, #20
 800d200:	f8cd 8000 	str.w	r8, [sp]
 800d204:	f001 fb44 	bl	800e890 <acc_translation_a121_translate>
 800d208:	b930      	cbnz	r0, 800d218 <acc_radar_engine_a121_prepare+0x4c>
 800d20a:	f04f 0800 	mov.w	r8, #0
 800d20e:	4640      	mov	r0, r8
 800d210:	f50d 7d0d 	add.w	sp, sp, #564	@ 0x234
 800d214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d218:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800d21c:	4641      	mov	r1, r8
 800d21e:	a805      	add	r0, sp, #20
 800d220:	ab0d      	add	r3, sp, #52	@ 0x34
 800d222:	f7ff ff87 	bl	800d134 <acc_radar_engine_121_populate_metadata>
 800d226:	2800      	cmp	r0, #0
 800d228:	d0ef      	beq.n	800d20a <acc_radar_engine_a121_prepare+0x3e>
 800d22a:	9996      	ldr	r1, [sp, #600]	@ 0x258
 800d22c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800d230:	800b      	strh	r3, [r1, #0]
 800d232:	9997      	ldr	r1, [sp, #604]	@ 0x25c
 800d234:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 800d238:	800a      	strh	r2, [r1, #0]
 800d23a:	2304      	movs	r3, #4
 800d23c:	aa1b      	add	r2, sp, #108	@ 0x6c
 800d23e:	4631      	mov	r1, r6
 800d240:	2014      	movs	r0, #20
 800d242:	f002 fae7 	bl	800f814 <acc_probes_execute_struct>
 800d246:	2800      	cmp	r0, #0
 800d248:	d0df      	beq.n	800d20a <acc_radar_engine_a121_prepare+0x3e>
 800d24a:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800d24c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d24e:	464a      	mov	r2, r9
 800d250:	4630      	mov	r0, r6
 800d252:	f002 ff95 	bl	8010180 <acc_cpd_a121_meas_session_load_program>
 800d256:	4680      	mov	r8, r0
 800d258:	b928      	cbnz	r0, 800d266 <acc_radar_engine_a121_prepare+0x9a>
 800d25a:	4b27      	ldr	r3, [pc, #156]	@ (800d2f8 <acc_radar_engine_a121_prepare+0x12c>)
 800d25c:	4a27      	ldr	r2, [pc, #156]	@ (800d2fc <acc_radar_engine_a121_prepare+0x130>)
 800d25e:	691b      	ldr	r3, [r3, #16]
 800d260:	4927      	ldr	r1, [pc, #156]	@ (800d300 <acc_radar_engine_a121_prepare+0x134>)
 800d262:	4798      	blx	r3
 800d264:	e7d3      	b.n	800d20e <acc_radar_engine_a121_prepare+0x42>
 800d266:	4b27      	ldr	r3, [pc, #156]	@ (800d304 <acc_radar_engine_a121_prepare+0x138>)
 800d268:	9300      	str	r3, [sp, #0]
 800d26a:	2260      	movs	r2, #96	@ 0x60
 800d26c:	9201      	str	r2, [sp, #4]
 800d26e:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800d270:	464a      	mov	r2, r9
 800d272:	4630      	mov	r0, r6
 800d274:	2300      	movs	r3, #0
 800d276:	f000 fab9 	bl	800d7ec <acc_sensor_protocol_a121_load_lut>
 800d27a:	4680      	mov	r8, r0
 800d27c:	b3a8      	cbz	r0, 800d2ea <acc_radar_engine_a121_prepare+0x11e>
 800d27e:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800d282:	a91b      	add	r1, sp, #108	@ 0x6c
 800d284:	4638      	mov	r0, r7
 800d286:	f003 fd9e 	bl	8010dc6 <memcpy>
 800d28a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 800d28e:	b122      	cbz	r2, 800d29a <acc_radar_engine_a121_prepare+0xce>
 800d290:	f894 304e 	ldrb.w	r3, [r4, #78]	@ 0x4e
 800d294:	1e1a      	subs	r2, r3, #0
 800d296:	bf18      	it	ne
 800d298:	2201      	movne	r2, #1
 800d29a:	2101      	movs	r1, #1
 800d29c:	462b      	mov	r3, r5
 800d29e:	f894 004b 	ldrb.w	r0, [r4, #75]	@ 0x4b
 800d2a2:	f887 11c6 	strb.w	r1, [r7, #454]	@ 0x1c6
 800d2a6:	f833 1b26 	ldrh.w	r1, [r3], #38
 800d2aa:	f8a7 11c8 	strh.w	r1, [r7, #456]	@ 0x1c8
 800d2ae:	f887 01c5 	strb.w	r0, [r7, #453]	@ 0x1c5
 800d2b2:	f887 21c4 	strb.w	r2, [r7, #452]	@ 0x1c4
 800d2b6:	f507 71e5 	add.w	r1, r7, #458	@ 0x1ca
 800d2ba:	f105 0c56 	add.w	ip, r5, #86	@ 0x56
 800d2be:	681c      	ldr	r4, [r3, #0]
 800d2c0:	6858      	ldr	r0, [r3, #4]
 800d2c2:	689a      	ldr	r2, [r3, #8]
 800d2c4:	68de      	ldr	r6, [r3, #12]
 800d2c6:	60ce      	str	r6, [r1, #12]
 800d2c8:	3310      	adds	r3, #16
 800d2ca:	4563      	cmp	r3, ip
 800d2cc:	600c      	str	r4, [r1, #0]
 800d2ce:	6048      	str	r0, [r1, #4]
 800d2d0:	608a      	str	r2, [r1, #8]
 800d2d2:	f101 0110 	add.w	r1, r1, #16
 800d2d6:	d1f2      	bne.n	800d2be <acc_radar_engine_a121_prepare+0xf2>
 800d2d8:	f8b5 3056 	ldrh.w	r3, [r5, #86]	@ 0x56
 800d2dc:	f8a7 31fa 	strh.w	r3, [r7, #506]	@ 0x1fa
 800d2e0:	4640      	mov	r0, r8
 800d2e2:	f50d 7d0d 	add.w	sp, sp, #564	@ 0x234
 800d2e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2ea:	4b03      	ldr	r3, [pc, #12]	@ (800d2f8 <acc_radar_engine_a121_prepare+0x12c>)
 800d2ec:	4a06      	ldr	r2, [pc, #24]	@ (800d308 <acc_radar_engine_a121_prepare+0x13c>)
 800d2ee:	691b      	ldr	r3, [r3, #16]
 800d2f0:	4903      	ldr	r1, [pc, #12]	@ (800d300 <acc_radar_engine_a121_prepare+0x134>)
 800d2f2:	4798      	blx	r3
 800d2f4:	e78b      	b.n	800d20e <acc_radar_engine_a121_prepare+0x42>
 800d2f6:	bf00      	nop
 800d2f8:	200009dc 	.word	0x200009dc
 800d2fc:	08013480 	.word	0x08013480
 800d300:	080133d4 	.word	0x080133d4
 800d304:	0801584c 	.word	0x0801584c
 800d308:	08013494 	.word	0x08013494

0800d30c <acc_radar_engine_a121_reconfigure>:
 800d30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d310:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800d314:	4607      	mov	r7, r0
 800d316:	9c95      	ldr	r4, [sp, #596]	@ 0x254
 800d318:	460d      	mov	r5, r1
 800d31a:	4616      	mov	r6, r2
 800d31c:	2100      	movs	r1, #0
 800d31e:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800d322:	a81b      	add	r0, sp, #108	@ 0x6c
 800d324:	4699      	mov	r9, r3
 800d326:	f003 fcc3 	bl	8010cb0 <memset>
 800d32a:	a80d      	add	r0, sp, #52	@ 0x34
 800d32c:	2238      	movs	r2, #56	@ 0x38
 800d32e:	2100      	movs	r1, #0
 800d330:	f003 fcbe 	bl	8010cb0 <memset>
 800d334:	f894 a1c5 	ldrb.w	sl, [r4, #453]	@ 0x1c5
 800d338:	f1ba 0f00 	cmp.w	sl, #0
 800d33c:	d00c      	beq.n	800d358 <acc_radar_engine_a121_reconfigure+0x4c>
 800d33e:	4b3e      	ldr	r3, [pc, #248]	@ (800d438 <acc_radar_engine_a121_reconfigure+0x12c>)
 800d340:	4a3e      	ldr	r2, [pc, #248]	@ (800d43c <acc_radar_engine_a121_reconfigure+0x130>)
 800d342:	691b      	ldr	r3, [r3, #16]
 800d344:	493e      	ldr	r1, [pc, #248]	@ (800d440 <acc_radar_engine_a121_reconfigure+0x134>)
 800d346:	2000      	movs	r0, #0
 800d348:	4798      	blx	r3
 800d34a:	f04f 0800 	mov.w	r8, #0
 800d34e:	4640      	mov	r0, r8
 800d350:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 800d354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d358:	f10d 080c 	add.w	r8, sp, #12
 800d35c:	ab05      	add	r3, sp, #20
 800d35e:	f8cd 8000 	str.w	r8, [sp]
 800d362:	aa1b      	add	r2, sp, #108	@ 0x6c
 800d364:	4631      	mov	r1, r6
 800d366:	4628      	mov	r0, r5
 800d368:	f001 fa92 	bl	800e890 <acc_translation_a121_translate>
 800d36c:	2800      	cmp	r0, #0
 800d36e:	d0ec      	beq.n	800d34a <acc_radar_engine_a121_reconfigure+0x3e>
 800d370:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 800d374:	4641      	mov	r1, r8
 800d376:	a805      	add	r0, sp, #20
 800d378:	ab0d      	add	r3, sp, #52	@ 0x34
 800d37a:	f7ff fedb 	bl	800d134 <acc_radar_engine_121_populate_metadata>
 800d37e:	2800      	cmp	r0, #0
 800d380:	d0e3      	beq.n	800d34a <acc_radar_engine_a121_reconfigure+0x3e>
 800d382:	9996      	ldr	r1, [sp, #600]	@ 0x258
 800d384:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800d388:	800b      	strh	r3, [r1, #0]
 800d38a:	9997      	ldr	r1, [sp, #604]	@ 0x25c
 800d38c:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 800d390:	800a      	strh	r2, [r1, #0]
 800d392:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 800d396:	aa1b      	add	r2, sp, #108	@ 0x6c
 800d398:	4639      	mov	r1, r7
 800d39a:	2014      	movs	r0, #20
 800d39c:	f002 fa3a 	bl	800f814 <acc_probes_execute_struct>
 800d3a0:	4680      	mov	r8, r0
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	d0d1      	beq.n	800d34a <acc_radar_engine_a121_reconfigure+0x3e>
 800d3a6:	a91b      	add	r1, sp, #108	@ 0x6c
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	f002 ff21 	bl	80101f0 <acc_cpd_a121_meas_session_is_patch_needed>
 800d3ae:	bbc0      	cbnz	r0, 800d422 <acc_radar_engine_a121_reconfigure+0x116>
 800d3b0:	a91b      	add	r1, sp, #108	@ 0x6c
 800d3b2:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	f003 fd05 	bl	8010dc6 <memcpy>
 800d3bc:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 800d3c0:	bb3b      	cbnz	r3, 800d412 <acc_radar_engine_a121_reconfigure+0x106>
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	4633      	mov	r3, r6
 800d3c6:	f895 104b 	ldrb.w	r1, [r5, #75]	@ 0x4b
 800d3ca:	f884 21c6 	strb.w	r2, [r4, #454]	@ 0x1c6
 800d3ce:	f833 2b26 	ldrh.w	r2, [r3], #38
 800d3d2:	f8a4 21c8 	strh.w	r2, [r4, #456]	@ 0x1c8
 800d3d6:	f884 11c5 	strb.w	r1, [r4, #453]	@ 0x1c5
 800d3da:	f884 a1c4 	strb.w	sl, [r4, #452]	@ 0x1c4
 800d3de:	f504 71e5 	add.w	r1, r4, #458	@ 0x1ca
 800d3e2:	f106 0c56 	add.w	ip, r6, #86	@ 0x56
 800d3e6:	681d      	ldr	r5, [r3, #0]
 800d3e8:	6858      	ldr	r0, [r3, #4]
 800d3ea:	689a      	ldr	r2, [r3, #8]
 800d3ec:	68df      	ldr	r7, [r3, #12]
 800d3ee:	60cf      	str	r7, [r1, #12]
 800d3f0:	3310      	adds	r3, #16
 800d3f2:	4563      	cmp	r3, ip
 800d3f4:	600d      	str	r5, [r1, #0]
 800d3f6:	6048      	str	r0, [r1, #4]
 800d3f8:	608a      	str	r2, [r1, #8]
 800d3fa:	f101 0110 	add.w	r1, r1, #16
 800d3fe:	d1f2      	bne.n	800d3e6 <acc_radar_engine_a121_reconfigure+0xda>
 800d400:	f8b6 3056 	ldrh.w	r3, [r6, #86]	@ 0x56
 800d404:	f8a4 31fa 	strh.w	r3, [r4, #506]	@ 0x1fa
 800d408:	4640      	mov	r0, r8
 800d40a:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 800d40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d412:	f895 a04e 	ldrb.w	sl, [r5, #78]	@ 0x4e
 800d416:	f1ba 0a00 	subs.w	sl, sl, #0
 800d41a:	bf18      	it	ne
 800d41c:	f04f 0a01 	movne.w	sl, #1
 800d420:	e7cf      	b.n	800d3c2 <acc_radar_engine_a121_reconfigure+0xb6>
 800d422:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d424:	9300      	str	r3, [sp, #0]
 800d426:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800d428:	464a      	mov	r2, r9
 800d42a:	4638      	mov	r0, r7
 800d42c:	4623      	mov	r3, r4
 800d42e:	f002 fef1 	bl	8010214 <acc_cpd_a121_meas_session_update_program>
 800d432:	2800      	cmp	r0, #0
 800d434:	d089      	beq.n	800d34a <acc_radar_engine_a121_reconfigure+0x3e>
 800d436:	e7bb      	b.n	800d3b0 <acc_radar_engine_a121_reconfigure+0xa4>
 800d438:	200009dc 	.word	0x200009dc
 800d43c:	080134a4 	.word	0x080134a4
 800d440:	080133d4 	.word	0x080133d4

0800d444 <acc_radar_engine_a121_get_metadata>:
 800d444:	b570      	push	{r4, r5, r6, lr}
 800d446:	b0fe      	sub	sp, #504	@ 0x1f8
 800d448:	4604      	mov	r4, r0
 800d44a:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800d44e:	460d      	mov	r5, r1
 800d450:	a80d      	add	r0, sp, #52	@ 0x34
 800d452:	2100      	movs	r1, #0
 800d454:	ae03      	add	r6, sp, #12
 800d456:	f003 fc2b 	bl	8010cb0 <memset>
 800d45a:	aa0d      	add	r2, sp, #52	@ 0x34
 800d45c:	4620      	mov	r0, r4
 800d45e:	ab05      	add	r3, sp, #20
 800d460:	9600      	str	r6, [sp, #0]
 800d462:	2100      	movs	r1, #0
 800d464:	f001 fa14 	bl	800e890 <acc_translation_a121_translate>
 800d468:	b908      	cbnz	r0, 800d46e <acc_radar_engine_a121_get_metadata+0x2a>
 800d46a:	b07e      	add	sp, #504	@ 0x1f8
 800d46c:	bd70      	pop	{r4, r5, r6, pc}
 800d46e:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800d472:	462b      	mov	r3, r5
 800d474:	4631      	mov	r1, r6
 800d476:	a805      	add	r0, sp, #20
 800d478:	f7ff fe5c 	bl	800d134 <acc_radar_engine_121_populate_metadata>
 800d47c:	b07e      	add	sp, #504	@ 0x1f8
 800d47e:	bd70      	pop	{r4, r5, r6, pc}

0800d480 <acc_radar_engine_a121_init_interrupts>:
 800d480:	f000 b906 	b.w	800d690 <acc_sensor_protocol_a121_init_interrupts>

0800d484 <acc_radar_engine_a121_hibernate_off>:
 800d484:	f000 baf2 	b.w	800da6c <acc_sensor_protocol_a121_hibernate_off>

0800d488 <acc_radar_engine_a121_is_hibernate>:
 800d488:	f000 bb2a 	b.w	800dae0 <acc_sensor_protocol_a121_is_hibernate>

0800d48c <internal_buffer_processed_read.part.0>:
 800d48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d490:	b085      	sub	sp, #20
 800d492:	469a      	mov	sl, r3
 800d494:	2600      	movs	r6, #0
 800d496:	f89d 4038 	ldrb.w	r4, [sp, #56]	@ 0x38
 800d49a:	9200      	str	r2, [sp, #0]
 800d49c:	4683      	mov	fp, r0
 800d49e:	4689      	mov	r9, r1
 800d4a0:	f7ff fb4a 	bl	800cb38 <acc_rss_integration_get_max_spi_transfer_size>
 800d4a4:	e9cd 6602 	strd	r6, r6, [sp, #8]
 800d4a8:	f1ba 0f00 	cmp.w	sl, #0
 800d4ac:	d03e      	beq.n	800d52c <internal_buffer_processed_read.part.0+0xa0>
 800d4ae:	42b4      	cmp	r4, r6
 800d4b0:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800d4b4:	bf14      	ite	ne
 800d4b6:	f44f 43e0 	movne.w	r3, #28672	@ 0x7000
 800d4ba:	f44f 4300 	moveq.w	r3, #32768	@ 0x8000
 800d4be:	f1a0 0804 	sub.w	r8, r0, #4
 800d4c2:	9301      	str	r3, [sp, #4]
 800d4c4:	464d      	mov	r5, r9
 800d4c6:	4657      	mov	r7, sl
 800d4c8:	e025      	b.n	800d516 <internal_buffer_processed_read.part.0+0x8a>
 800d4ca:	9b00      	ldr	r3, [sp, #0]
 800d4cc:	9901      	ldr	r1, [sp, #4]
 800d4ce:	8029      	strh	r1, [r5, #0]
 800d4d0:	199a      	adds	r2, r3, r6
 800d4d2:	f04f 0100 	mov.w	r1, #0
 800d4d6:	1e63      	subs	r3, r4, #1
 800d4d8:	80e9      	strh	r1, [r5, #6]
 800d4da:	806a      	strh	r2, [r5, #2]
 800d4dc:	80ab      	strh	r3, [r5, #4]
 800d4de:	0062      	lsls	r2, r4, #1
 800d4e0:	2100      	movs	r1, #0
 800d4e2:	f105 0008 	add.w	r0, r5, #8
 800d4e6:	f003 fbe3 	bl	8010cb0 <memset>
 800d4ea:	4629      	mov	r1, r5
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	4658      	mov	r0, fp
 800d4f0:	1d22      	adds	r2, r4, #4
 800d4f2:	f7ff fb27 	bl	800cb44 <acc_rss_integration_sensor_device_transfer>
 800d4f6:	ab02      	add	r3, sp, #8
 800d4f8:	cb03      	ldmia	r3!, {r0, r1}
 800d4fa:	4426      	add	r6, r4
 800d4fc:	6069      	str	r1, [r5, #4]
 800d4fe:	6028      	str	r0, [r5, #0]
 800d500:	eb09 0546 	add.w	r5, r9, r6, lsl #1
 800d504:	f859 0016 	ldr.w	r0, [r9, r6, lsl #1]
 800d508:	6869      	ldr	r1, [r5, #4]
 800d50a:	ab02      	add	r3, sp, #8
 800d50c:	4556      	cmp	r6, sl
 800d50e:	c303      	stmia	r3!, {r0, r1}
 800d510:	eba7 0704 	sub.w	r7, r7, r4
 800d514:	d20a      	bcs.n	800d52c <internal_buffer_processed_read.part.0+0xa0>
 800d516:	45b8      	cmp	r8, r7
 800d518:	4644      	mov	r4, r8
 800d51a:	bf28      	it	cs
 800d51c:	463c      	movcs	r4, r7
 800d51e:	45b8      	cmp	r8, r7
 800d520:	d2d3      	bcs.n	800d4ca <internal_buffer_processed_read.part.0+0x3e>
 800d522:	e000      	b.n	800d526 <internal_buffer_processed_read.part.0+0x9a>
 800d524:	3c01      	subs	r4, #1
 800d526:	07e3      	lsls	r3, r4, #31
 800d528:	d4fc      	bmi.n	800d524 <internal_buffer_processed_read.part.0+0x98>
 800d52a:	e7ce      	b.n	800d4ca <internal_buffer_processed_read.part.0+0x3e>
 800d52c:	f109 0008 	add.w	r0, r9, #8
 800d530:	b005      	add	sp, #20
 800d532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d536:	bf00      	nop

0800d538 <acc_sensor_a121_get_max_header_length>:
 800d538:	2004      	movs	r0, #4
 800d53a:	4770      	bx	lr

0800d53c <acc_sensor_a121_conf_write_instr>:
 800d53c:	b570      	push	{r4, r5, r6, lr}
 800d53e:	2501      	movs	r5, #1
 800d540:	b084      	sub	sp, #16
 800d542:	f441 43a0 	orr.w	r3, r1, #20480	@ 0x5000
 800d546:	4604      	mov	r4, r0
 800d548:	4616      	mov	r6, r2
 800d54a:	a903      	add	r1, sp, #12
 800d54c:	462a      	mov	r2, r5
 800d54e:	a801      	add	r0, sp, #4
 800d550:	f8ad 3008 	strh.w	r3, [sp, #8]
 800d554:	9601      	str	r6, [sp, #4]
 800d556:	f8ad 500a 	strh.w	r5, [sp, #10]
 800d55a:	f002 fb01 	bl	800fb60 <acc_utils_uint32_to_transfer_buffer>
 800d55e:	4620      	mov	r0, r4
 800d560:	a902      	add	r1, sp, #8
 800d562:	2300      	movs	r3, #0
 800d564:	2204      	movs	r2, #4
 800d566:	f7ff faed 	bl	800cb44 <acc_rss_integration_sensor_device_transfer>
 800d56a:	b004      	add	sp, #16
 800d56c:	bd70      	pop	{r4, r5, r6, pc}
 800d56e:	bf00      	nop

0800d570 <acc_sensor_a121_prepare_load_confmem>:
 800d570:	0849      	lsrs	r1, r1, #1
 800d572:	b570      	push	{r4, r5, r6, lr}
 800d574:	6019      	str	r1, [r3, #0]
 800d576:	461c      	mov	r4, r3
 800d578:	4605      	mov	r5, r0
 800d57a:	4616      	mov	r6, r2
 800d57c:	f7ff fadc 	bl	800cb38 <acc_rss_integration_get_max_spi_transfer_size>
 800d580:	6821      	ldr	r1, [r4, #0]
 800d582:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 800d586:	d806      	bhi.n	800d596 <acc_sensor_a121_prepare_load_confmem+0x26>
 800d588:	3902      	subs	r1, #2
 800d58a:	f021 0101 	bic.w	r1, r1, #1
 800d58e:	3504      	adds	r5, #4
 800d590:	6035      	str	r5, [r6, #0]
 800d592:	6021      	str	r1, [r4, #0]
 800d594:	bd70      	pop	{r4, r5, r6, pc}
 800d596:	f7ff facf 	bl	800cb38 <acc_rss_integration_get_max_spi_transfer_size>
 800d59a:	0841      	lsrs	r1, r0, #1
 800d59c:	e7f4      	b.n	800d588 <acc_sensor_a121_prepare_load_confmem+0x18>
 800d59e:	bf00      	nop

0800d5a0 <acc_sensor_a121_load_confmem>:
 800d5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a4:	f103 0802 	add.w	r8, r3, #2
 800d5a8:	461c      	mov	r4, r3
 800d5aa:	4607      	mov	r7, r0
 800d5ac:	460e      	mov	r6, r1
 800d5ae:	4615      	mov	r5, r2
 800d5b0:	f7ff fac2 	bl	800cb38 <acc_rss_integration_get_max_spi_transfer_size>
 800d5b4:	ebb0 0f48 	cmp.w	r0, r8, lsl #1
 800d5b8:	d207      	bcs.n	800d5ca <acc_sensor_a121_load_confmem+0x2a>
 800d5ba:	4b0b      	ldr	r3, [pc, #44]	@ (800d5e8 <acc_sensor_a121_load_confmem+0x48>)
 800d5bc:	4a0b      	ldr	r2, [pc, #44]	@ (800d5ec <acc_sensor_a121_load_confmem+0x4c>)
 800d5be:	691b      	ldr	r3, [r3, #16]
 800d5c0:	490b      	ldr	r1, [pc, #44]	@ (800d5f0 <acc_sensor_a121_load_confmem+0x50>)
 800d5c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c6:	2000      	movs	r0, #0
 800d5c8:	4718      	bx	r3
 800d5ca:	f446 41a0 	orr.w	r1, r6, #20480	@ 0x5000
 800d5ce:	3c01      	subs	r4, #1
 800d5d0:	8029      	strh	r1, [r5, #0]
 800d5d2:	806c      	strh	r4, [r5, #2]
 800d5d4:	f028 4200 	bic.w	r2, r8, #2147483648	@ 0x80000000
 800d5d8:	4629      	mov	r1, r5
 800d5da:	4638      	mov	r0, r7
 800d5dc:	2300      	movs	r3, #0
 800d5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e2:	f7ff baaf 	b.w	800cb44 <acc_rss_integration_sensor_device_transfer>
 800d5e6:	bf00      	nop
 800d5e8:	200009dc 	.word	0x200009dc
 800d5ec:	08013510 	.word	0x08013510
 800d5f0:	080134fc 	.word	0x080134fc

0800d5f4 <acc_sensor_a121_buffer_processed_read>:
 800d5f4:	b510      	push	{r4, lr}
 800d5f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	d805      	bhi.n	800d60a <acc_sensor_a121_buffer_processed_read+0x16>
 800d5fe:	2400      	movs	r4, #0
 800d600:	9400      	str	r4, [sp, #0]
 800d602:	f7ff ff43 	bl	800d48c <internal_buffer_processed_read.part.0>
 800d606:	b002      	add	sp, #8
 800d608:	bd10      	pop	{r4, pc}
 800d60a:	4b04      	ldr	r3, [pc, #16]	@ (800d61c <acc_sensor_a121_buffer_processed_read+0x28>)
 800d60c:	4a04      	ldr	r2, [pc, #16]	@ (800d620 <acc_sensor_a121_buffer_processed_read+0x2c>)
 800d60e:	691b      	ldr	r3, [r3, #16]
 800d610:	4904      	ldr	r1, [pc, #16]	@ (800d624 <acc_sensor_a121_buffer_processed_read+0x30>)
 800d612:	2000      	movs	r0, #0
 800d614:	4798      	blx	r3
 800d616:	2000      	movs	r0, #0
 800d618:	b002      	add	sp, #8
 800d61a:	bd10      	pop	{r4, pc}
 800d61c:	200009dc 	.word	0x200009dc
 800d620:	08013530 	.word	0x08013530
 800d624:	080134fc 	.word	0x080134fc

0800d628 <acc_sensor_a121_lut_buffer_write>:
 800d628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d62c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d62e:	460d      	mov	r5, r1
 800d630:	4614      	mov	r4, r2
 800d632:	4681      	mov	r9, r0
 800d634:	4698      	mov	r8, r3
 800d636:	f7ff fa7f 	bl	800cb38 <acc_rss_integration_get_max_spi_transfer_size>
 800d63a:	3c04      	subs	r4, #4
 800d63c:	1f07      	subs	r7, r0, #4
 800d63e:	0864      	lsrs	r4, r4, #1
 800d640:	087f      	lsrs	r7, r7, #1
 800d642:	42a7      	cmp	r7, r4
 800d644:	bf28      	it	cs
 800d646:	4627      	movcs	r7, r4
 800d648:	f105 0a04 	add.w	sl, r5, #4
 800d64c:	2400      	movs	r4, #0
 800d64e:	1b33      	subs	r3, r6, r4
 800d650:	42bb      	cmp	r3, r7
 800d652:	bf28      	it	cs
 800d654:	463b      	movcs	r3, r7
 800d656:	1e5a      	subs	r2, r3, #1
 800d658:	eb08 0104 	add.w	r1, r8, r4
 800d65c:	469b      	mov	fp, r3
 800d65e:	806a      	strh	r2, [r5, #2]
 800d660:	ea6f 4181 	mvn.w	r1, r1, lsl #18
 800d664:	005a      	lsls	r2, r3, #1
 800d666:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d668:	ea6f 4191 	mvn.w	r1, r1, lsr #18
 800d66c:	8029      	strh	r1, [r5, #0]
 800d66e:	4650      	mov	r0, sl
 800d670:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800d674:	f003 fba7 	bl	8010dc6 <memcpy>
 800d678:	445c      	add	r4, fp
 800d67a:	f10b 0202 	add.w	r2, fp, #2
 800d67e:	2300      	movs	r3, #0
 800d680:	4629      	mov	r1, r5
 800d682:	4648      	mov	r0, r9
 800d684:	f7ff fa5e 	bl	800cb44 <acc_rss_integration_sensor_device_transfer>
 800d688:	42a6      	cmp	r6, r4
 800d68a:	d8e0      	bhi.n	800d64e <acc_sensor_a121_lut_buffer_write+0x26>
 800d68c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d690 <acc_sensor_protocol_a121_init_interrupts>:
 800d690:	b530      	push	{r4, r5, lr}
 800d692:	b083      	sub	sp, #12
 800d694:	2500      	movs	r5, #0
 800d696:	4629      	mov	r1, r5
 800d698:	9500      	str	r5, [sp, #0]
 800d69a:	237b      	movs	r3, #123	@ 0x7b
 800d69c:	22ff      	movs	r2, #255	@ 0xff
 800d69e:	4604      	mov	r4, r0
 800d6a0:	f002 f8f6 	bl	800f890 <acc_sensor_reg_field_write>
 800d6a4:	2101      	movs	r1, #1
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	9100      	str	r1, [sp, #0]
 800d6aa:	238b      	movs	r3, #139	@ 0x8b
 800d6ac:	2202      	movs	r2, #2
 800d6ae:	f002 f8ef 	bl	800f890 <acc_sensor_reg_field_write>
 800d6b2:	9500      	str	r5, [sp, #0]
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	238b      	movs	r3, #139	@ 0x8b
 800d6b8:	2280      	movs	r2, #128	@ 0x80
 800d6ba:	2107      	movs	r1, #7
 800d6bc:	f002 f8e8 	bl	800f890 <acc_sensor_reg_field_write>
 800d6c0:	b003      	add	sp, #12
 800d6c2:	bd30      	pop	{r4, r5, pc}

0800d6c4 <acc_sensor_protocol_a121_prepare_load>:
 800d6c4:	b570      	push	{r4, r5, r6, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	f10d 0206 	add.w	r2, sp, #6
 800d6cc:	2400      	movs	r4, #0
 800d6ce:	2137      	movs	r1, #55	@ 0x37
 800d6d0:	4605      	mov	r5, r0
 800d6d2:	f8ad 4006 	strh.w	r4, [sp, #6]
 800d6d6:	f002 f8b5 	bl	800f844 <acc_sensor_reg_read>
 800d6da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d6de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d6e2:	b9b3      	cbnz	r3, 800d712 <acc_sensor_protocol_a121_prepare_load+0x4e>
 800d6e4:	f10d 0206 	add.w	r2, sp, #6
 800d6e8:	2400      	movs	r4, #0
 800d6ea:	211c      	movs	r1, #28
 800d6ec:	4628      	mov	r0, r5
 800d6ee:	f8ad 4006 	strh.w	r4, [sp, #6]
 800d6f2:	f002 f8a7 	bl	800f844 <acc_sensor_reg_read>
 800d6f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d6fa:	051b      	lsls	r3, r3, #20
 800d6fc:	d515      	bpl.n	800d72a <acc_sensor_protocol_a121_prepare_load+0x66>
 800d6fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d738 <acc_sensor_protocol_a121_prepare_load+0x74>)
 800d700:	4a0e      	ldr	r2, [pc, #56]	@ (800d73c <acc_sensor_protocol_a121_prepare_load+0x78>)
 800d702:	691e      	ldr	r6, [r3, #16]
 800d704:	490e      	ldr	r1, [pc, #56]	@ (800d740 <acc_sensor_protocol_a121_prepare_load+0x7c>)
 800d706:	4620      	mov	r0, r4
 800d708:	462b      	mov	r3, r5
 800d70a:	47b0      	blx	r6
 800d70c:	4620      	mov	r0, r4
 800d70e:	b002      	add	sp, #8
 800d710:	bd70      	pop	{r4, r5, r6, pc}
 800d712:	f7ff fa91 	bl	800cc38 <acc_rss_integration_log_level>
 800d716:	2800      	cmp	r0, #0
 800d718:	d0e4      	beq.n	800d6e4 <acc_sensor_protocol_a121_prepare_load+0x20>
 800d71a:	4b07      	ldr	r3, [pc, #28]	@ (800d738 <acc_sensor_protocol_a121_prepare_load+0x74>)
 800d71c:	4a09      	ldr	r2, [pc, #36]	@ (800d744 <acc_sensor_protocol_a121_prepare_load+0x80>)
 800d71e:	691c      	ldr	r4, [r3, #16]
 800d720:	4907      	ldr	r1, [pc, #28]	@ (800d740 <acc_sensor_protocol_a121_prepare_load+0x7c>)
 800d722:	462b      	mov	r3, r5
 800d724:	2001      	movs	r0, #1
 800d726:	47a0      	blx	r4
 800d728:	e7dc      	b.n	800d6e4 <acc_sensor_protocol_a121_prepare_load+0x20>
 800d72a:	4628      	mov	r0, r5
 800d72c:	f7ff ffb0 	bl	800d690 <acc_sensor_protocol_a121_init_interrupts>
 800d730:	2001      	movs	r0, #1
 800d732:	b002      	add	sp, #8
 800d734:	bd70      	pop	{r4, r5, r6, pc}
 800d736:	bf00      	nop
 800d738:	200009dc 	.word	0x200009dc
 800d73c:	0801358c 	.word	0x0801358c
 800d740:	08013574 	.word	0x08013574
 800d744:	08013548 	.word	0x08013548

0800d748 <acc_sensor_protocol_a121_is_ready_to_update>:
 800d748:	b500      	push	{lr}
 800d74a:	b083      	sub	sp, #12
 800d74c:	2300      	movs	r3, #0
 800d74e:	f10d 0206 	add.w	r2, sp, #6
 800d752:	2137      	movs	r1, #55	@ 0x37
 800d754:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d758:	f002 f874 	bl	800f844 <acc_sensor_reg_read>
 800d75c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800d760:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 800d764:	3800      	subs	r0, #0
 800d766:	bf18      	it	ne
 800d768:	2001      	movne	r0, #1
 800d76a:	b003      	add	sp, #12
 800d76c:	f85d fb04 	ldr.w	pc, [sp], #4

0800d770 <acc_sensor_protocol_a121_run_program>:
 800d770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d772:	b083      	sub	sp, #12
 800d774:	f10d 0206 	add.w	r2, sp, #6
 800d778:	460e      	mov	r6, r1
 800d77a:	2400      	movs	r4, #0
 800d77c:	211c      	movs	r1, #28
 800d77e:	4607      	mov	r7, r0
 800d780:	f8ad 4006 	strh.w	r4, [sp, #6]
 800d784:	f002 f85e 	bl	800f844 <acc_sensor_reg_read>
 800d788:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d78c:	f412 6500 	ands.w	r5, r2, #2048	@ 0x800
 800d790:	d10c      	bne.n	800d7ac <acc_sensor_protocol_a121_run_program+0x3c>
 800d792:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 800d796:	d313      	bcc.n	800d7c0 <acc_sensor_protocol_a121_run_program+0x50>
 800d798:	4b10      	ldr	r3, [pc, #64]	@ (800d7dc <acc_sensor_protocol_a121_run_program+0x6c>)
 800d79a:	4a11      	ldr	r2, [pc, #68]	@ (800d7e0 <acc_sensor_protocol_a121_run_program+0x70>)
 800d79c:	691c      	ldr	r4, [r3, #16]
 800d79e:	4911      	ldr	r1, [pc, #68]	@ (800d7e4 <acc_sensor_protocol_a121_run_program+0x74>)
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	4633      	mov	r3, r6
 800d7a4:	47a0      	blx	r4
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	b003      	add	sp, #12
 800d7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7ac:	4b0b      	ldr	r3, [pc, #44]	@ (800d7dc <acc_sensor_protocol_a121_run_program+0x6c>)
 800d7ae:	4a0e      	ldr	r2, [pc, #56]	@ (800d7e8 <acc_sensor_protocol_a121_run_program+0x78>)
 800d7b0:	691d      	ldr	r5, [r3, #16]
 800d7b2:	490c      	ldr	r1, [pc, #48]	@ (800d7e4 <acc_sensor_protocol_a121_run_program+0x74>)
 800d7b4:	4620      	mov	r0, r4
 800d7b6:	463b      	mov	r3, r7
 800d7b8:	47a8      	blx	r5
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	b003      	add	sp, #12
 800d7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7c0:	462a      	mov	r2, r5
 800d7c2:	4638      	mov	r0, r7
 800d7c4:	211b      	movs	r1, #27
 800d7c6:	f002 f853 	bl	800f870 <acc_sensor_reg_write>
 800d7ca:	4638      	mov	r0, r7
 800d7cc:	f446 6200 	orr.w	r2, r6, #2048	@ 0x800
 800d7d0:	211b      	movs	r1, #27
 800d7d2:	f002 f84d 	bl	800f870 <acc_sensor_reg_write>
 800d7d6:	2001      	movs	r0, #1
 800d7d8:	b003      	add	sp, #12
 800d7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7dc:	200009dc 	.word	0x200009dc
 800d7e0:	080135ec 	.word	0x080135ec
 800d7e4:	08013574 	.word	0x08013574
 800d7e8:	080135bc 	.word	0x080135bc

0800d7ec <acc_sensor_protocol_a121_load_lut>:
 800d7ec:	2b7f      	cmp	r3, #127	@ 0x7f
 800d7ee:	d809      	bhi.n	800d804 <acc_sensor_protocol_a121_load_lut+0x18>
 800d7f0:	b530      	push	{r4, r5, lr}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	461c      	mov	r4, r3
 800d7f6:	9d07      	ldr	r5, [sp, #28]
 800d7f8:	442c      	add	r4, r5
 800d7fa:	2c80      	cmp	r4, #128	@ 0x80
 800d7fc:	d904      	bls.n	800d808 <acc_sensor_protocol_a121_load_lut+0x1c>
 800d7fe:	2000      	movs	r0, #0
 800d800:	b003      	add	sp, #12
 800d802:	bd30      	pop	{r4, r5, pc}
 800d804:	2000      	movs	r0, #0
 800d806:	4770      	bx	lr
 800d808:	9c06      	ldr	r4, [sp, #24]
 800d80a:	9501      	str	r5, [sp, #4]
 800d80c:	9400      	str	r4, [sp, #0]
 800d80e:	f7ff ff0b 	bl	800d628 <acc_sensor_a121_lut_buffer_write>
 800d812:	2001      	movs	r0, #1
 800d814:	b003      	add	sp, #12
 800d816:	bd30      	pop	{r4, r5, pc}

0800d818 <acc_sensor_protocol_a121_is_sensor_running>:
 800d818:	b500      	push	{lr}
 800d81a:	b083      	sub	sp, #12
 800d81c:	2300      	movs	r3, #0
 800d81e:	f10d 0206 	add.w	r2, sp, #6
 800d822:	211c      	movs	r1, #28
 800d824:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d828:	f002 f80c 	bl	800f844 <acc_sensor_reg_read>
 800d82c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800d830:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 800d834:	b003      	add	sp, #12
 800d836:	f85d fb04 	ldr.w	pc, [sp], #4
 800d83a:	bf00      	nop

0800d83c <acc_sensor_protocol_a121_is_event_pending>:
 800d83c:	b510      	push	{r4, lr}
 800d83e:	b082      	sub	sp, #8
 800d840:	460c      	mov	r4, r1
 800d842:	2300      	movs	r3, #0
 800d844:	f10d 0206 	add.w	r2, sp, #6
 800d848:	2137      	movs	r1, #55	@ 0x37
 800d84a:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d84e:	f001 fff9 	bl	800f844 <acc_sensor_reg_read>
 800d852:	2c01      	cmp	r4, #1
 800d854:	d00b      	beq.n	800d86e <acc_sensor_protocol_a121_is_event_pending+0x32>
 800d856:	2c02      	cmp	r4, #2
 800d858:	bf14      	ite	ne
 800d85a:	23c0      	movne	r3, #192	@ 0xc0
 800d85c:	2380      	moveq	r3, #128	@ 0x80
 800d85e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d862:	4213      	tst	r3, r2
 800d864:	bf14      	ite	ne
 800d866:	2001      	movne	r0, #1
 800d868:	2000      	moveq	r0, #0
 800d86a:	b002      	add	sp, #8
 800d86c:	bd10      	pop	{r4, pc}
 800d86e:	2340      	movs	r3, #64	@ 0x40
 800d870:	e7f5      	b.n	800d85e <acc_sensor_protocol_a121_is_event_pending+0x22>
 800d872:	bf00      	nop

0800d874 <acc_sensor_protocol_a121_ack_event>:
 800d874:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d876:	b083      	sub	sp, #12
 800d878:	2400      	movs	r4, #0
 800d87a:	2901      	cmp	r1, #1
 800d87c:	4607      	mov	r7, r0
 800d87e:	4616      	mov	r6, r2
 800d880:	f8ad 4006 	strh.w	r4, [sp, #6]
 800d884:	d019      	beq.n	800d8ba <acc_sensor_protocol_a121_ack_event+0x46>
 800d886:	2902      	cmp	r1, #2
 800d888:	d009      	beq.n	800d89e <acc_sensor_protocol_a121_ack_event+0x2a>
 800d88a:	4b1a      	ldr	r3, [pc, #104]	@ (800d8f4 <acc_sensor_protocol_a121_ack_event+0x80>)
 800d88c:	4a1a      	ldr	r2, [pc, #104]	@ (800d8f8 <acc_sensor_protocol_a121_ack_event+0x84>)
 800d88e:	691d      	ldr	r5, [r3, #16]
 800d890:	491a      	ldr	r1, [pc, #104]	@ (800d8fc <acc_sensor_protocol_a121_ack_event+0x88>)
 800d892:	4603      	mov	r3, r0
 800d894:	4620      	mov	r0, r4
 800d896:	47a8      	blx	r5
 800d898:	4620      	mov	r0, r4
 800d89a:	b003      	add	sp, #12
 800d89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d89e:	2146      	movs	r1, #70	@ 0x46
 800d8a0:	f10d 0206 	add.w	r2, sp, #6
 800d8a4:	4638      	mov	r0, r7
 800d8a6:	f001 ffcd 	bl	800f844 <acc_sensor_reg_read>
 800d8aa:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800d8ae:	2484      	movs	r4, #132	@ 0x84
 800d8b0:	b175      	cbz	r5, 800d8d0 <acc_sensor_protocol_a121_ack_event+0x5c>
 800d8b2:	b9be      	cbnz	r6, 800d8e4 <acc_sensor_protocol_a121_ack_event+0x70>
 800d8b4:	2001      	movs	r0, #1
 800d8b6:	b003      	add	sp, #12
 800d8b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8ba:	2145      	movs	r1, #69	@ 0x45
 800d8bc:	f10d 0206 	add.w	r2, sp, #6
 800d8c0:	4638      	mov	r0, r7
 800d8c2:	f001 ffbf 	bl	800f844 <acc_sensor_reg_read>
 800d8c6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800d8ca:	2483      	movs	r4, #131	@ 0x83
 800d8cc:	2d00      	cmp	r5, #0
 800d8ce:	d1f0      	bne.n	800d8b2 <acc_sensor_protocol_a121_ack_event+0x3e>
 800d8d0:	4b08      	ldr	r3, [pc, #32]	@ (800d8f4 <acc_sensor_protocol_a121_ack_event+0x80>)
 800d8d2:	4a0b      	ldr	r2, [pc, #44]	@ (800d900 <acc_sensor_protocol_a121_ack_event+0x8c>)
 800d8d4:	691c      	ldr	r4, [r3, #16]
 800d8d6:	4909      	ldr	r1, [pc, #36]	@ (800d8fc <acc_sensor_protocol_a121_ack_event+0x88>)
 800d8d8:	4628      	mov	r0, r5
 800d8da:	463b      	mov	r3, r7
 800d8dc:	47a0      	blx	r4
 800d8de:	4628      	mov	r0, r5
 800d8e0:	b003      	add	sp, #12
 800d8e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8e4:	4638      	mov	r0, r7
 800d8e6:	4621      	mov	r1, r4
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	f001 ffc1 	bl	800f870 <acc_sensor_reg_write>
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	e7d3      	b.n	800d89a <acc_sensor_protocol_a121_ack_event+0x26>
 800d8f2:	bf00      	nop
 800d8f4:	200009dc 	.word	0x200009dc
 800d8f8:	08013608 	.word	0x08013608
 800d8fc:	08013574 	.word	0x08013574
 800d900:	08013624 	.word	0x08013624

0800d904 <acc_sensor_protocol_a121_get_event>:
 800d904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d906:	b085      	sub	sp, #20
 800d908:	2400      	movs	r4, #0
 800d90a:	4615      	mov	r5, r2
 800d90c:	f8ad 400e 	strh.w	r4, [sp, #14]
 800d910:	2a00      	cmp	r2, #0
 800d912:	d03d      	beq.n	800d990 <acc_sensor_protocol_a121_get_event+0x8c>
 800d914:	2901      	cmp	r1, #1
 800d916:	4607      	mov	r7, r0
 800d918:	d028      	beq.n	800d96c <acc_sensor_protocol_a121_get_event+0x68>
 800d91a:	2902      	cmp	r1, #2
 800d91c:	d11d      	bne.n	800d95a <acc_sensor_protocol_a121_get_event+0x56>
 800d91e:	2132      	movs	r1, #50	@ 0x32
 800d920:	2401      	movs	r4, #1
 800d922:	f10d 020e 	add.w	r2, sp, #14
 800d926:	4638      	mov	r0, r7
 800d928:	f001 ff8c 	bl	800f844 <acc_sensor_reg_read>
 800d92c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d930:	806b      	strh	r3, [r5, #2]
 800d932:	f003 0607 	and.w	r6, r3, #7
 800d936:	2e01      	cmp	r6, #1
 800d938:	802e      	strh	r6, [r5, #0]
 800d93a:	d033      	beq.n	800d9a4 <acc_sensor_protocol_a121_get_event+0xa0>
 800d93c:	f013 0f06 	tst.w	r3, #6
 800d940:	d117      	bne.n	800d972 <acc_sensor_protocol_a121_get_event+0x6e>
 800d942:	b9ce      	cbnz	r6, 800d978 <acc_sensor_protocol_a121_get_event+0x74>
 800d944:	4a1d      	ldr	r2, [pc, #116]	@ (800d9bc <acc_sensor_protocol_a121_get_event+0xb8>)
 800d946:	9700      	str	r7, [sp, #0]
 800d948:	6914      	ldr	r4, [r2, #16]
 800d94a:	491d      	ldr	r1, [pc, #116]	@ (800d9c0 <acc_sensor_protocol_a121_get_event+0xbc>)
 800d94c:	4a1d      	ldr	r2, [pc, #116]	@ (800d9c4 <acc_sensor_protocol_a121_get_event+0xc0>)
 800d94e:	4630      	mov	r0, r6
 800d950:	47a0      	blx	r4
 800d952:	4634      	mov	r4, r6
 800d954:	4620      	mov	r0, r4
 800d956:	b005      	add	sp, #20
 800d958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d95a:	4b18      	ldr	r3, [pc, #96]	@ (800d9bc <acc_sensor_protocol_a121_get_event+0xb8>)
 800d95c:	4918      	ldr	r1, [pc, #96]	@ (800d9c0 <acc_sensor_protocol_a121_get_event+0xbc>)
 800d95e:	691e      	ldr	r6, [r3, #16]
 800d960:	4a19      	ldr	r2, [pc, #100]	@ (800d9c8 <acc_sensor_protocol_a121_get_event+0xc4>)
 800d962:	4603      	mov	r3, r0
 800d964:	4620      	mov	r0, r4
 800d966:	47b0      	blx	r6
 800d968:	4621      	mov	r1, r4
 800d96a:	e7da      	b.n	800d922 <acc_sensor_protocol_a121_get_event+0x1e>
 800d96c:	460c      	mov	r4, r1
 800d96e:	2133      	movs	r1, #51	@ 0x33
 800d970:	e7d7      	b.n	800d922 <acc_sensor_protocol_a121_get_event+0x1e>
 800d972:	3e02      	subs	r6, #2
 800d974:	2e01      	cmp	r6, #1
 800d976:	d9ed      	bls.n	800d954 <acc_sensor_protocol_a121_get_event+0x50>
 800d978:	4a10      	ldr	r2, [pc, #64]	@ (800d9bc <acc_sensor_protocol_a121_get_event+0xb8>)
 800d97a:	9700      	str	r7, [sp, #0]
 800d97c:	6914      	ldr	r4, [r2, #16]
 800d97e:	4910      	ldr	r1, [pc, #64]	@ (800d9c0 <acc_sensor_protocol_a121_get_event+0xbc>)
 800d980:	4a12      	ldr	r2, [pc, #72]	@ (800d9cc <acc_sensor_protocol_a121_get_event+0xc8>)
 800d982:	2000      	movs	r0, #0
 800d984:	47a0      	blx	r4
 800d986:	2400      	movs	r4, #0
 800d988:	4620      	mov	r0, r4
 800d98a:	802c      	strh	r4, [r5, #0]
 800d98c:	b005      	add	sp, #20
 800d98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d990:	4b0a      	ldr	r3, [pc, #40]	@ (800d9bc <acc_sensor_protocol_a121_get_event+0xb8>)
 800d992:	4a0f      	ldr	r2, [pc, #60]	@ (800d9d0 <acc_sensor_protocol_a121_get_event+0xcc>)
 800d994:	691b      	ldr	r3, [r3, #16]
 800d996:	490a      	ldr	r1, [pc, #40]	@ (800d9c0 <acc_sensor_protocol_a121_get_event+0xbc>)
 800d998:	4628      	mov	r0, r5
 800d99a:	4798      	blx	r3
 800d99c:	462c      	mov	r4, r5
 800d99e:	4620      	mov	r0, r4
 800d9a0:	b005      	add	sp, #20
 800d9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9a4:	4a05      	ldr	r2, [pc, #20]	@ (800d9bc <acc_sensor_protocol_a121_get_event+0xb8>)
 800d9a6:	9700      	str	r7, [sp, #0]
 800d9a8:	6914      	ldr	r4, [r2, #16]
 800d9aa:	4905      	ldr	r1, [pc, #20]	@ (800d9c0 <acc_sensor_protocol_a121_get_event+0xbc>)
 800d9ac:	4a09      	ldr	r2, [pc, #36]	@ (800d9d4 <acc_sensor_protocol_a121_get_event+0xd0>)
 800d9ae:	2000      	movs	r0, #0
 800d9b0:	47a0      	blx	r4
 800d9b2:	2400      	movs	r4, #0
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	b005      	add	sp, #20
 800d9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	200009dc 	.word	0x200009dc
 800d9c0:	08013574 	.word	0x08013574
 800d9c4:	0801366c 	.word	0x0801366c
 800d9c8:	08013608 	.word	0x08013608
 800d9cc:	080136d0 	.word	0x080136d0
 800d9d0:	08013658 	.word	0x08013658
 800d9d4:	0801369c 	.word	0x0801369c

0800d9d8 <acc_sensor_protocol_a121_is_handshake>:
 800d9d8:	8800      	ldrh	r0, [r0, #0]
 800d9da:	f1a0 0003 	sub.w	r0, r0, #3
 800d9de:	fab0 f080 	clz	r0, r0
 800d9e2:	0940      	lsrs	r0, r0, #5
 800d9e4:	4770      	bx	lr
 800d9e6:	bf00      	nop

0800d9e8 <acc_sensor_protocol_a121_is_done>:
 800d9e8:	8800      	ldrh	r0, [r0, #0]
 800d9ea:	f1a0 0002 	sub.w	r0, r0, #2
 800d9ee:	fab0 f080 	clz	r0, r0
 800d9f2:	0940      	lsrs	r0, r0, #5
 800d9f4:	4770      	bx	lr
 800d9f6:	bf00      	nop

0800d9f8 <acc_sensor_protocol_a121_get_frame_delayed_flag>:
 800d9f8:	8840      	ldrh	r0, [r0, #2]
 800d9fa:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800d9fe:	4770      	bx	lr

0800da00 <acc_sensor_protocol_a121_check_asic_id>:
 800da00:	b570      	push	{r4, r5, r6, lr}
 800da02:	2300      	movs	r3, #0
 800da04:	b082      	sub	sp, #8
 800da06:	f10d 0206 	add.w	r2, sp, #6
 800da0a:	460d      	mov	r5, r1
 800da0c:	4619      	mov	r1, r3
 800da0e:	f8ad 3006 	strh.w	r3, [sp, #6]
 800da12:	4604      	mov	r4, r0
 800da14:	f001 ff16 	bl	800f844 <acc_sensor_reg_read>
 800da18:	480f      	ldr	r0, [pc, #60]	@ (800da58 <acc_sensor_protocol_a121_check_asic_id+0x58>)
 800da1a:	f002 f8c9 	bl	800fbb0 <acc_diagnostic_log_set_scope>
 800da1e:	4621      	mov	r1, r4
 800da20:	480e      	ldr	r0, [pc, #56]	@ (800da5c <acc_sensor_protocol_a121_check_asic_id+0x5c>)
 800da22:	f002 f8d5 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800da26:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800da2a:	480b      	ldr	r0, [pc, #44]	@ (800da58 <acc_sensor_protocol_a121_check_asic_id+0x58>)
 800da2c:	f002 f8d0 	bl	800fbd0 <acc_diagnostic_log_scalar>
 800da30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800da34:	f241 2210 	movw	r2, #4624	@ 0x1210
 800da38:	4293      	cmp	r3, r2
 800da3a:	bf0c      	ite	eq
 800da3c:	2401      	moveq	r4, #1
 800da3e:	2400      	movne	r4, #0
 800da40:	d006      	beq.n	800da50 <acc_sensor_protocol_a121_check_asic_id+0x50>
 800da42:	b92d      	cbnz	r5, 800da50 <acc_sensor_protocol_a121_check_asic_id+0x50>
 800da44:	4906      	ldr	r1, [pc, #24]	@ (800da60 <acc_sensor_protocol_a121_check_asic_id+0x60>)
 800da46:	4a07      	ldr	r2, [pc, #28]	@ (800da64 <acc_sensor_protocol_a121_check_asic_id+0x64>)
 800da48:	690e      	ldr	r6, [r1, #16]
 800da4a:	4907      	ldr	r1, [pc, #28]	@ (800da68 <acc_sensor_protocol_a121_check_asic_id+0x68>)
 800da4c:	4628      	mov	r0, r5
 800da4e:	47b0      	blx	r6
 800da50:	4620      	mov	r0, r4
 800da52:	b002      	add	sp, #8
 800da54:	bd70      	pop	{r4, r5, r6, pc}
 800da56:	bf00      	nop
 800da58:	08013704 	.word	0x08013704
 800da5c:	08012e44 	.word	0x08012e44
 800da60:	200009dc 	.word	0x200009dc
 800da64:	0801370c 	.word	0x0801370c
 800da68:	08013574 	.word	0x08013574

0800da6c <acc_sensor_protocol_a121_hibernate_off>:
 800da6c:	b570      	push	{r4, r5, r6, lr}
 800da6e:	b082      	sub	sp, #8
 800da70:	2203      	movs	r2, #3
 800da72:	460e      	mov	r6, r1
 800da74:	2100      	movs	r1, #0
 800da76:	460d      	mov	r5, r1
 800da78:	4604      	mov	r4, r0
 800da7a:	9200      	str	r2, [sp, #0]
 800da7c:	f240 1349 	movw	r3, #329	@ 0x149
 800da80:	f001 ff06 	bl	800f890 <acc_sensor_reg_field_write>
 800da84:	4620      	mov	r0, r4
 800da86:	f240 1349 	movw	r3, #329	@ 0x149
 800da8a:	2204      	movs	r2, #4
 800da8c:	2102      	movs	r1, #2
 800da8e:	9500      	str	r5, [sp, #0]
 800da90:	f001 fefe 	bl	800f890 <acc_sensor_reg_field_write>
 800da94:	4620      	mov	r0, r4
 800da96:	f240 1349 	movw	r3, #329	@ 0x149
 800da9a:	2210      	movs	r2, #16
 800da9c:	2104      	movs	r1, #4
 800da9e:	9500      	str	r5, [sp, #0]
 800daa0:	f001 fef6 	bl	800f890 <acc_sensor_reg_field_write>
 800daa4:	4620      	mov	r0, r4
 800daa6:	f240 1349 	movw	r3, #329	@ 0x149
 800daaa:	2220      	movs	r2, #32
 800daac:	2105      	movs	r1, #5
 800daae:	9500      	str	r5, [sp, #0]
 800dab0:	f001 feee 	bl	800f890 <acc_sensor_reg_field_write>
 800dab4:	9500      	str	r5, [sp, #0]
 800dab6:	4620      	mov	r0, r4
 800dab8:	f240 1349 	movw	r3, #329	@ 0x149
 800dabc:	f44f 527f 	mov.w	r2, #16320	@ 0x3fc0
 800dac0:	2106      	movs	r1, #6
 800dac2:	f001 fee5 	bl	800f890 <acc_sensor_reg_field_write>
 800dac6:	b90e      	cbnz	r6, 800dacc <acc_sensor_protocol_a121_hibernate_off+0x60>
 800dac8:	b002      	add	sp, #8
 800daca:	bd70      	pop	{r4, r5, r6, pc}
 800dacc:	4620      	mov	r0, r4
 800dace:	f64a 42c0 	movw	r2, #44224	@ 0xacc0
 800dad2:	2131      	movs	r1, #49	@ 0x31
 800dad4:	b002      	add	sp, #8
 800dad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dada:	f001 bec9 	b.w	800f870 <acc_sensor_reg_write>
 800dade:	bf00      	nop

0800dae0 <acc_sensor_protocol_a121_is_hibernate>:
 800dae0:	b500      	push	{lr}
 800dae2:	b083      	sub	sp, #12
 800dae4:	2300      	movs	r3, #0
 800dae6:	f10d 0206 	add.w	r2, sp, #6
 800daea:	2131      	movs	r1, #49	@ 0x31
 800daec:	f8ad 3006 	strh.w	r3, [sp, #6]
 800daf0:	f001 fea8 	bl	800f844 <acc_sensor_reg_read>
 800daf4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800daf8:	f64a 43c0 	movw	r3, #44224	@ 0xacc0
 800dafc:	1ac0      	subs	r0, r0, r3
 800dafe:	fab0 f080 	clz	r0, r0
 800db02:	0940      	lsrs	r0, r0, #5
 800db04:	b003      	add	sp, #12
 800db06:	f85d fb04 	ldr.w	pc, [sp], #4
 800db0a:	bf00      	nop

0800db0c <acc_sensor_protocol_a121_reconfigure>:
 800db0c:	b508      	push	{r3, lr}
 800db0e:	2201      	movs	r2, #1
 800db10:	2180      	movs	r1, #128	@ 0x80
 800db12:	f001 fead 	bl	800f870 <acc_sensor_reg_write>
 800db16:	2001      	movs	r0, #1
 800db18:	bd08      	pop	{r3, pc}
 800db1a:	bf00      	nop

0800db1c <a121_diagnostics_decode_stack_level>:
 800db1c:	b570      	push	{r4, r5, r6, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	4605      	mov	r5, r0
 800db22:	460c      	mov	r4, r1
 800db24:	4616      	mov	r6, r2
 800db26:	f7ff f887 	bl	800cc38 <acc_rss_integration_log_level>
 800db2a:	2801      	cmp	r0, #1
 800db2c:	d90c      	bls.n	800db48 <a121_diagnostics_decode_stack_level+0x2c>
 800db2e:	f5a4 738c 	sub.w	r3, r4, #280	@ 0x118
 800db32:	b29b      	uxth	r3, r3
 800db34:	e9cd 3400 	strd	r3, r4, [sp]
 800db38:	4a04      	ldr	r2, [pc, #16]	@ (800db4c <a121_diagnostics_decode_stack_level+0x30>)
 800db3a:	9602      	str	r6, [sp, #8]
 800db3c:	6914      	ldr	r4, [r2, #16]
 800db3e:	4904      	ldr	r1, [pc, #16]	@ (800db50 <a121_diagnostics_decode_stack_level+0x34>)
 800db40:	4a04      	ldr	r2, [pc, #16]	@ (800db54 <a121_diagnostics_decode_stack_level+0x38>)
 800db42:	462b      	mov	r3, r5
 800db44:	2002      	movs	r0, #2
 800db46:	47a0      	blx	r4
 800db48:	b004      	add	sp, #16
 800db4a:	bd70      	pop	{r4, r5, r6, pc}
 800db4c:	200009dc 	.word	0x200009dc
 800db50:	08013808 	.word	0x08013808
 800db54:	080137e0 	.word	0x080137e0

0800db58 <a121_diagnostics_decode_wakeupinputwakeup>:
 800db58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db5a:	460c      	mov	r4, r1
 800db5c:	3962      	subs	r1, #98	@ 0x62
 800db5e:	07cb      	lsls	r3, r1, #31
 800db60:	b085      	sub	sp, #20
 800db62:	4605      	mov	r5, r0
 800db64:	4616      	mov	r6, r2
 800db66:	b28f      	uxth	r7, r1
 800db68:	d410      	bmi.n	800db8c <a121_diagnostics_decode_wakeupinputwakeup+0x34>
 800db6a:	f7ff f865 	bl	800cc38 <acc_rss_integration_log_level>
 800db6e:	2801      	cmp	r0, #1
 800db70:	d90a      	bls.n	800db88 <a121_diagnostics_decode_wakeupinputwakeup+0x30>
 800db72:	087f      	lsrs	r7, r7, #1
 800db74:	e9cd 7400 	strd	r7, r4, [sp]
 800db78:	490d      	ldr	r1, [pc, #52]	@ (800dbb0 <a121_diagnostics_decode_wakeupinputwakeup+0x58>)
 800db7a:	9602      	str	r6, [sp, #8]
 800db7c:	690c      	ldr	r4, [r1, #16]
 800db7e:	4a0d      	ldr	r2, [pc, #52]	@ (800dbb4 <a121_diagnostics_decode_wakeupinputwakeup+0x5c>)
 800db80:	490d      	ldr	r1, [pc, #52]	@ (800dbb8 <a121_diagnostics_decode_wakeupinputwakeup+0x60>)
 800db82:	462b      	mov	r3, r5
 800db84:	2002      	movs	r0, #2
 800db86:	47a0      	blx	r4
 800db88:	b005      	add	sp, #20
 800db8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db8c:	f7ff f854 	bl	800cc38 <acc_rss_integration_log_level>
 800db90:	2801      	cmp	r0, #1
 800db92:	d9f9      	bls.n	800db88 <a121_diagnostics_decode_wakeupinputwakeup+0x30>
 800db94:	087f      	lsrs	r7, r7, #1
 800db96:	e9cd 7400 	strd	r7, r4, [sp]
 800db9a:	4905      	ldr	r1, [pc, #20]	@ (800dbb0 <a121_diagnostics_decode_wakeupinputwakeup+0x58>)
 800db9c:	9602      	str	r6, [sp, #8]
 800db9e:	690c      	ldr	r4, [r1, #16]
 800dba0:	4a06      	ldr	r2, [pc, #24]	@ (800dbbc <a121_diagnostics_decode_wakeupinputwakeup+0x64>)
 800dba2:	4905      	ldr	r1, [pc, #20]	@ (800dbb8 <a121_diagnostics_decode_wakeupinputwakeup+0x60>)
 800dba4:	462b      	mov	r3, r5
 800dba6:	2002      	movs	r0, #2
 800dba8:	47a0      	blx	r4
 800dbaa:	b005      	add	sp, #20
 800dbac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	200009dc 	.word	0x200009dc
 800dbb4:	0801381c 	.word	0x0801381c
 800dbb8:	08013808 	.word	0x08013808
 800dbbc:	08013854 	.word	0x08013854

0800dbc0 <a121_diagnostics_decode_inputmuxwakeupinput>:
 800dbc0:	b570      	push	{r4, r5, r6, lr}
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	4605      	mov	r5, r0
 800dbc6:	460c      	mov	r4, r1
 800dbc8:	4616      	mov	r6, r2
 800dbca:	f7ff f835 	bl	800cc38 <acc_rss_integration_log_level>
 800dbce:	2801      	cmp	r0, #1
 800dbd0:	d90b      	bls.n	800dbea <a121_diagnostics_decode_inputmuxwakeupinput+0x2a>
 800dbd2:	f1a4 017d 	sub.w	r1, r4, #125	@ 0x7d
 800dbd6:	4a06      	ldr	r2, [pc, #24]	@ (800dbf0 <a121_diagnostics_decode_inputmuxwakeupinput+0x30>)
 800dbd8:	9601      	str	r6, [sp, #4]
 800dbda:	b289      	uxth	r1, r1
 800dbdc:	9100      	str	r1, [sp, #0]
 800dbde:	6914      	ldr	r4, [r2, #16]
 800dbe0:	4904      	ldr	r1, [pc, #16]	@ (800dbf4 <a121_diagnostics_decode_inputmuxwakeupinput+0x34>)
 800dbe2:	4a05      	ldr	r2, [pc, #20]	@ (800dbf8 <a121_diagnostics_decode_inputmuxwakeupinput+0x38>)
 800dbe4:	462b      	mov	r3, r5
 800dbe6:	2002      	movs	r0, #2
 800dbe8:	47a0      	blx	r4
 800dbea:	b002      	add	sp, #8
 800dbec:	bd70      	pop	{r4, r5, r6, pc}
 800dbee:	bf00      	nop
 800dbf0:	200009dc 	.word	0x200009dc
 800dbf4:	08013808 	.word	0x08013808
 800dbf8:	0801388c 	.word	0x0801388c

0800dbfc <a121_diagnostics_decode_scratchpad>:
 800dbfc:	b570      	push	{r4, r5, r6, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	4605      	mov	r5, r0
 800dc02:	460c      	mov	r4, r1
 800dc04:	4616      	mov	r6, r2
 800dc06:	f7ff f817 	bl	800cc38 <acc_rss_integration_log_level>
 800dc0a:	2801      	cmp	r0, #1
 800dc0c:	d90b      	bls.n	800dc26 <a121_diagnostics_decode_scratchpad+0x2a>
 800dc0e:	f1a4 012c 	sub.w	r1, r4, #44	@ 0x2c
 800dc12:	4a06      	ldr	r2, [pc, #24]	@ (800dc2c <a121_diagnostics_decode_scratchpad+0x30>)
 800dc14:	9601      	str	r6, [sp, #4]
 800dc16:	b289      	uxth	r1, r1
 800dc18:	9100      	str	r1, [sp, #0]
 800dc1a:	6914      	ldr	r4, [r2, #16]
 800dc1c:	4904      	ldr	r1, [pc, #16]	@ (800dc30 <a121_diagnostics_decode_scratchpad+0x34>)
 800dc1e:	4a05      	ldr	r2, [pc, #20]	@ (800dc34 <a121_diagnostics_decode_scratchpad+0x38>)
 800dc20:	462b      	mov	r3, r5
 800dc22:	2002      	movs	r0, #2
 800dc24:	47a0      	blx	r4
 800dc26:	b002      	add	sp, #8
 800dc28:	bd70      	pop	{r4, r5, r6, pc}
 800dc2a:	bf00      	nop
 800dc2c:	200009dc 	.word	0x200009dc
 800dc30:	08013808 	.word	0x08013808
 800dc34:	080138bc 	.word	0x080138bc

0800dc38 <a121_diagnostics_decode_run_status>:
 800dc38:	b570      	push	{r4, r5, r6, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	4605      	mov	r5, r0
 800dc3e:	4614      	mov	r4, r2
 800dc40:	f7fe fffa 	bl	800cc38 <acc_rss_integration_log_level>
 800dc44:	2801      	cmp	r0, #1
 800dc46:	d910      	bls.n	800dc6a <a121_diagnostics_decode_run_status+0x32>
 800dc48:	4b09      	ldr	r3, [pc, #36]	@ (800dc70 <a121_diagnostics_decode_run_status+0x38>)
 800dc4a:	480a      	ldr	r0, [pc, #40]	@ (800dc74 <a121_diagnostics_decode_run_status+0x3c>)
 800dc4c:	490a      	ldr	r1, [pc, #40]	@ (800dc78 <a121_diagnostics_decode_run_status+0x40>)
 800dc4e:	6906      	ldr	r6, [r0, #16]
 800dc50:	4a0a      	ldr	r2, [pc, #40]	@ (800dc7c <a121_diagnostics_decode_run_status+0x44>)
 800dc52:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 800dc56:	bf18      	it	ne
 800dc58:	4619      	movne	r1, r3
 800dc5a:	f3c4 040a 	ubfx	r4, r4, #0, #11
 800dc5e:	9100      	str	r1, [sp, #0]
 800dc60:	9401      	str	r4, [sp, #4]
 800dc62:	4907      	ldr	r1, [pc, #28]	@ (800dc80 <a121_diagnostics_decode_run_status+0x48>)
 800dc64:	462b      	mov	r3, r5
 800dc66:	2002      	movs	r0, #2
 800dc68:	47b0      	blx	r6
 800dc6a:	b002      	add	sp, #8
 800dc6c:	bd70      	pop	{r4, r5, r6, pc}
 800dc6e:	bf00      	nop
 800dc70:	080138ec 	.word	0x080138ec
 800dc74:	200009dc 	.word	0x200009dc
 800dc78:	080138e4 	.word	0x080138e4
 800dc7c:	080138f4 	.word	0x080138f4
 800dc80:	08013808 	.word	0x08013808

0800dc84 <a121_diagnostics_decode_asic_error>:
 800dc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc88:	4e1e      	ldr	r6, [pc, #120]	@ (800dd04 <a121_diagnostics_decode_asic_error+0x80>)
 800dc8a:	4680      	mov	r8, r0
 800dc8c:	4615      	mov	r5, r2
 800dc8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dc90:	b091      	sub	sp, #68	@ 0x44
 800dc92:	ac02      	add	r4, sp, #8
 800dc94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dc98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dc9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc9e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800dca2:	e884 0003 	stmia.w	r4, {r0, r1}
 800dca6:	f7fe ffc7 	bl	800cc38 <acc_rss_integration_log_level>
 800dcaa:	2801      	cmp	r0, #1
 800dcac:	d907      	bls.n	800dcbe <a121_diagnostics_decode_asic_error+0x3a>
 800dcae:	4b16      	ldr	r3, [pc, #88]	@ (800dd08 <a121_diagnostics_decode_asic_error+0x84>)
 800dcb0:	9500      	str	r5, [sp, #0]
 800dcb2:	691c      	ldr	r4, [r3, #16]
 800dcb4:	4a15      	ldr	r2, [pc, #84]	@ (800dd0c <a121_diagnostics_decode_asic_error+0x88>)
 800dcb6:	4916      	ldr	r1, [pc, #88]	@ (800dd10 <a121_diagnostics_decode_asic_error+0x8c>)
 800dcb8:	4643      	mov	r3, r8
 800dcba:	2002      	movs	r0, #2
 800dcbc:	47a0      	blx	r4
 800dcbe:	f8df b048 	ldr.w	fp, [pc, #72]	@ 800dd08 <a121_diagnostics_decode_asic_error+0x84>
 800dcc2:	f8df a050 	ldr.w	sl, [pc, #80]	@ 800dd14 <a121_diagnostics_decode_asic_error+0x90>
 800dcc6:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 800dd10 <a121_diagnostics_decode_asic_error+0x8c>
 800dcca:	ac02      	add	r4, sp, #8
 800dccc:	ae10      	add	r6, sp, #64	@ 0x40
 800dcce:	e002      	b.n	800dcd6 <a121_diagnostics_decode_asic_error+0x52>
 800dcd0:	3408      	adds	r4, #8
 800dcd2:	42b4      	cmp	r4, r6
 800dcd4:	d013      	beq.n	800dcfe <a121_diagnostics_decode_asic_error+0x7a>
 800dcd6:	88a3      	ldrh	r3, [r4, #4]
 800dcd8:	421d      	tst	r5, r3
 800dcda:	d0f9      	beq.n	800dcd0 <a121_diagnostics_decode_asic_error+0x4c>
 800dcdc:	f7fe ffac 	bl	800cc38 <acc_rss_integration_log_level>
 800dce0:	2801      	cmp	r0, #1
 800dce2:	4643      	mov	r3, r8
 800dce4:	4652      	mov	r2, sl
 800dce6:	4649      	mov	r1, r9
 800dce8:	f04f 0002 	mov.w	r0, #2
 800dcec:	d9f0      	bls.n	800dcd0 <a121_diagnostics_decode_asic_error+0x4c>
 800dcee:	6827      	ldr	r7, [r4, #0]
 800dcf0:	9700      	str	r7, [sp, #0]
 800dcf2:	3408      	adds	r4, #8
 800dcf4:	f8db 7010 	ldr.w	r7, [fp, #16]
 800dcf8:	47b8      	blx	r7
 800dcfa:	42b4      	cmp	r4, r6
 800dcfc:	d1eb      	bne.n	800dcd6 <a121_diagnostics_decode_asic_error+0x52>
 800dcfe:	b011      	add	sp, #68	@ 0x44
 800dd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd04:	0801277c 	.word	0x0801277c
 800dd08:	200009dc 	.word	0x200009dc
 800dd0c:	08013908 	.word	0x08013908
 800dd10:	08013808 	.word	0x08013808
 800dd14:	08013924 	.word	0x08013924

0800dd18 <a121_diagnostics_decode_wakeup_status0>:
 800dd18:	b570      	push	{r4, r5, r6, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	4605      	mov	r5, r0
 800dd1e:	4614      	mov	r4, r2
 800dd20:	f7fe ff8a 	bl	800cc38 <acc_rss_integration_log_level>
 800dd24:	2801      	cmp	r0, #1
 800dd26:	d909      	bls.n	800dd3c <a121_diagnostics_decode_wakeup_status0+0x24>
 800dd28:	4b05      	ldr	r3, [pc, #20]	@ (800dd40 <a121_diagnostics_decode_wakeup_status0+0x28>)
 800dd2a:	4a06      	ldr	r2, [pc, #24]	@ (800dd44 <a121_diagnostics_decode_wakeup_status0+0x2c>)
 800dd2c:	691e      	ldr	r6, [r3, #16]
 800dd2e:	4906      	ldr	r1, [pc, #24]	@ (800dd48 <a121_diagnostics_decode_wakeup_status0+0x30>)
 800dd30:	f004 040f 	and.w	r4, r4, #15
 800dd34:	9400      	str	r4, [sp, #0]
 800dd36:	462b      	mov	r3, r5
 800dd38:	2002      	movs	r0, #2
 800dd3a:	47b0      	blx	r6
 800dd3c:	b002      	add	sp, #8
 800dd3e:	bd70      	pop	{r4, r5, r6, pc}
 800dd40:	200009dc 	.word	0x200009dc
 800dd44:	08013938 	.word	0x08013938
 800dd48:	08013808 	.word	0x08013808

0800dd4c <acc_sensor_status_a121>:
 800dd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd50:	ed2d 8b02 	vpush	{d8}
 800dd54:	b0a3      	sub	sp, #140	@ 0x8c
 800dd56:	4606      	mov	r6, r0
 800dd58:	f7fe ff6e 	bl	800cc38 <acc_rss_integration_log_level>
 800dd5c:	2801      	cmp	r0, #1
 800dd5e:	d905      	bls.n	800dd6c <acc_sensor_status_a121+0x20>
 800dd60:	4b2e      	ldr	r3, [pc, #184]	@ (800de1c <acc_sensor_status_a121+0xd0>)
 800dd62:	4a2f      	ldr	r2, [pc, #188]	@ (800de20 <acc_sensor_status_a121+0xd4>)
 800dd64:	691b      	ldr	r3, [r3, #16]
 800dd66:	492f      	ldr	r1, [pc, #188]	@ (800de24 <acc_sensor_status_a121+0xd8>)
 800dd68:	2002      	movs	r0, #2
 800dd6a:	4798      	blx	r3
 800dd6c:	492e      	ldr	r1, [pc, #184]	@ (800de28 <acc_sensor_status_a121+0xdc>)
 800dd6e:	f8df a0ac 	ldr.w	sl, [pc, #172]	@ 800de1c <acc_sensor_status_a121+0xd0>
 800dd72:	f8df 90bc 	ldr.w	r9, [pc, #188]	@ 800de30 <acc_sensor_status_a121+0xe4>
 800dd76:	2278      	movs	r2, #120	@ 0x78
 800dd78:	a804      	add	r0, sp, #16
 800dd7a:	f003 f824 	bl	8010dc6 <memcpy>
 800dd7e:	2201      	movs	r2, #1
 800dd80:	21d5      	movs	r1, #213	@ 0xd5
 800dd82:	4630      	mov	r0, r6
 800dd84:	f001 fd74 	bl	800f870 <acc_sensor_reg_write>
 800dd88:	ab22      	add	r3, sp, #136	@ 0x88
 800dd8a:	ee08 3a10 	vmov	s16, r3
 800dd8e:	ac04      	add	r4, sp, #16
 800dd90:	88a5      	ldrh	r5, [r4, #4]
 800dd92:	f8b4 8006 	ldrh.w	r8, [r4, #6]
 800dd96:	44a8      	add	r8, r5
 800dd98:	4545      	cmp	r5, r8
 800dd9a:	da2a      	bge.n	800ddf2 <acc_sensor_status_a121+0xa6>
 800dd9c:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800de24 <acc_sensor_status_a121+0xd8>
 800dda0:	e006      	b.n	800ddb0 <acc_sensor_status_a121+0x64>
 800dda2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800dda6:	4798      	blx	r3
 800dda8:	3501      	adds	r5, #1
 800ddaa:	b2ad      	uxth	r5, r5
 800ddac:	4545      	cmp	r5, r8
 800ddae:	da20      	bge.n	800ddf2 <acc_sensor_status_a121+0xa6>
 800ddb0:	4629      	mov	r1, r5
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	f10d 020e 	add.w	r2, sp, #14
 800ddb8:	f001 fd44 	bl	800f844 <acc_sensor_reg_read>
 800ddbc:	68a3      	ldr	r3, [r4, #8]
 800ddbe:	4629      	mov	r1, r5
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d1ed      	bne.n	800dda2 <acc_sensor_status_a121+0x56>
 800ddc6:	f7fe ff37 	bl	800cc38 <acc_rss_integration_log_level>
 800ddca:	2801      	cmp	r0, #1
 800ddcc:	4633      	mov	r3, r6
 800ddce:	464a      	mov	r2, r9
 800ddd0:	4659      	mov	r1, fp
 800ddd2:	f04f 0002 	mov.w	r0, #2
 800ddd6:	d9e7      	bls.n	800dda8 <acc_sensor_status_a121+0x5c>
 800ddd8:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 800dddc:	f8cd c004 	str.w	ip, [sp, #4]
 800dde0:	6827      	ldr	r7, [r4, #0]
 800dde2:	9700      	str	r7, [sp, #0]
 800dde4:	3501      	adds	r5, #1
 800dde6:	f8da 7010 	ldr.w	r7, [sl, #16]
 800ddea:	b2ad      	uxth	r5, r5
 800ddec:	47b8      	blx	r7
 800ddee:	4545      	cmp	r5, r8
 800ddf0:	dbde      	blt.n	800ddb0 <acc_sensor_status_a121+0x64>
 800ddf2:	ee18 3a10 	vmov	r3, s16
 800ddf6:	340c      	adds	r4, #12
 800ddf8:	42a3      	cmp	r3, r4
 800ddfa:	d1c9      	bne.n	800dd90 <acc_sensor_status_a121+0x44>
 800ddfc:	f7fe ff1c 	bl	800cc38 <acc_rss_integration_log_level>
 800de00:	2801      	cmp	r0, #1
 800de02:	d905      	bls.n	800de10 <acc_sensor_status_a121+0xc4>
 800de04:	4b05      	ldr	r3, [pc, #20]	@ (800de1c <acc_sensor_status_a121+0xd0>)
 800de06:	4a09      	ldr	r2, [pc, #36]	@ (800de2c <acc_sensor_status_a121+0xe0>)
 800de08:	691b      	ldr	r3, [r3, #16]
 800de0a:	4906      	ldr	r1, [pc, #24]	@ (800de24 <acc_sensor_status_a121+0xd8>)
 800de0c:	2002      	movs	r0, #2
 800de0e:	4798      	blx	r3
 800de10:	b023      	add	sp, #140	@ 0x8c
 800de12:	ecbd 8b02 	vpop	{d8}
 800de16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de1a:	bf00      	nop
 800de1c:	200009dc 	.word	0x200009dc
 800de20:	08013958 	.word	0x08013958
 800de24:	08013808 	.word	0x08013808
 800de28:	080127b4 	.word	0x080127b4
 800de2c:	080139a8 	.word	0x080139a8
 800de30:	08013994 	.word	0x08013994

0800de34 <get_pll_freq>:
 800de34:	b508      	push	{r3, lr}
 800de36:	ed2d 8b02 	vpush	{d8}
 800de3a:	f7fe fe77 	bl	800cb2c <acc_rss_integration_get_sensor_reference_frequency>
 800de3e:	ee07 0a90 	vmov	s15, r0
 800de42:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800de46:	eeb0 0a48 	vmov.f32	s0, s16
 800de4a:	f001 fe49 	bl	800fae0 <acc_cpd_pll_divisors_ref_divisor>
 800de4e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800de52:	ecbd 8b02 	vpop	{d8}
 800de56:	bd08      	pop	{r3, pc}

0800de58 <acc_translation_a121_profile_to_pulse_params>:
 800de58:	2300      	movs	r3, #0
 800de5a:	3801      	subs	r0, #1
 800de5c:	b430      	push	{r4, r5}
 800de5e:	e9c2 3301 	strd	r3, r3, [r2, #4]
 800de62:	60d3      	str	r3, [r2, #12]
 800de64:	2804      	cmp	r0, #4
 800de66:	d836      	bhi.n	800ded6 <acc_translation_a121_profile_to_pulse_params+0x7e>
 800de68:	e8df f000 	tbb	[pc, r0]
 800de6c:	2d291b0d 	.word	0x2d291b0d
 800de70:	03          	.byte	0x03
 800de71:	00          	.byte	0x00
 800de72:	4b1c      	ldr	r3, [pc, #112]	@ (800dee4 <acc_translation_a121_profile_to_pulse_params+0x8c>)
 800de74:	491c      	ldr	r1, [pc, #112]	@ (800dee8 <acc_translation_a121_profile_to_pulse_params+0x90>)
 800de76:	2000      	movs	r0, #0
 800de78:	e9c2 3305 	strd	r3, r3, [r2, #20]
 800de7c:	7010      	strb	r0, [r2, #0]
 800de7e:	61d1      	str	r1, [r2, #28]
 800de80:	2001      	movs	r0, #1
 800de82:	bc30      	pop	{r4, r5}
 800de84:	4770      	bx	lr
 800de86:	2001      	movs	r0, #1
 800de88:	2400      	movs	r4, #0
 800de8a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800de8e:	7014      	strb	r4, [r2, #0]
 800de90:	82d0      	strh	r0, [r2, #22]
 800de92:	8350      	strh	r0, [r2, #26]
 800de94:	61d3      	str	r3, [r2, #28]
 800de96:	b1d1      	cbz	r1, 800dece <acc_translation_a121_profile_to_pulse_params+0x76>
 800de98:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
 800de9a:	8293      	strh	r3, [r2, #20]
 800de9c:	bc30      	pop	{r4, r5}
 800de9e:	8313      	strh	r3, [r2, #24]
 800dea0:	4770      	bx	lr
 800dea2:	4b12      	ldr	r3, [pc, #72]	@ (800deec <acc_translation_a121_profile_to_pulse_params+0x94>)
 800dea4:	4c12      	ldr	r4, [pc, #72]	@ (800def0 <acc_translation_a121_profile_to_pulse_params+0x98>)
 800dea6:	61d4      	str	r4, [r2, #28]
 800dea8:	2001      	movs	r0, #1
 800deaa:	2596      	movs	r5, #150	@ 0x96
 800deac:	21fa      	movs	r1, #250	@ 0xfa
 800deae:	60d5      	str	r5, [r2, #12]
 800deb0:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800deb4:	bc30      	pop	{r4, r5}
 800deb6:	e9c2 3305 	strd	r3, r3, [r2, #20]
 800deba:	7010      	strb	r0, [r2, #0]
 800debc:	4770      	bx	lr
 800debe:	4b0d      	ldr	r3, [pc, #52]	@ (800def4 <acc_translation_a121_profile_to_pulse_params+0x9c>)
 800dec0:	490d      	ldr	r1, [pc, #52]	@ (800def8 <acc_translation_a121_profile_to_pulse_params+0xa0>)
 800dec2:	2000      	movs	r0, #0
 800dec4:	e7d8      	b.n	800de78 <acc_translation_a121_profile_to_pulse_params+0x20>
 800dec6:	4b0d      	ldr	r3, [pc, #52]	@ (800defc <acc_translation_a121_profile_to_pulse_params+0xa4>)
 800dec8:	490d      	ldr	r1, [pc, #52]	@ (800df00 <acc_translation_a121_profile_to_pulse_params+0xa8>)
 800deca:	2000      	movs	r0, #0
 800decc:	e7d4      	b.n	800de78 <acc_translation_a121_profile_to_pulse_params+0x20>
 800dece:	2302      	movs	r3, #2
 800ded0:	8293      	strh	r3, [r2, #20]
 800ded2:	8313      	strh	r3, [r2, #24]
 800ded4:	e7d5      	b.n	800de82 <acc_translation_a121_profile_to_pulse_params+0x2a>
 800ded6:	2000      	movs	r0, #0
 800ded8:	e9c2 0005 	strd	r0, r0, [r2, #20]
 800dedc:	7010      	strb	r0, [r2, #0]
 800dede:	61d0      	str	r0, [r2, #28]
 800dee0:	e7cf      	b.n	800de82 <acc_translation_a121_profile_to_pulse_params+0x2a>
 800dee2:	bf00      	nop
 800dee4:	00050008 	.word	0x00050008
 800dee8:	0002000b 	.word	0x0002000b
 800deec:	00010008 	.word	0x00010008
 800def0:	00030002 	.word	0x00030002
 800def4:	00020008 	.word	0x00020008
 800def8:	00020004 	.word	0x00020004
 800defc:	00030008 	.word	0x00030008
 800df00:	00020006 	.word	0x00020006

0800df04 <acc_translation_a121_profile_to_start_point_offset>:
 800df04:	3801      	subs	r0, #1
 800df06:	2804      	cmp	r0, #4
 800df08:	d818      	bhi.n	800df3c <acc_translation_a121_profile_to_start_point_offset+0x38>
 800df0a:	e8df f000 	tbb	[pc, r0]
 800df0e:	0812      	.short	0x0812
 800df10:	0d03      	.short	0x0d03
 800df12:	03          	.byte	0x03
 800df13:	00          	.byte	0x00
 800df14:	f06f 030c 	mvn.w	r3, #12
 800df18:	600b      	str	r3, [r1, #0]
 800df1a:	2001      	movs	r0, #1
 800df1c:	4770      	bx	lr
 800df1e:	f06f 0306 	mvn.w	r3, #6
 800df22:	600b      	str	r3, [r1, #0]
 800df24:	2001      	movs	r0, #1
 800df26:	4770      	bx	lr
 800df28:	f06f 030f 	mvn.w	r3, #15
 800df2c:	600b      	str	r3, [r1, #0]
 800df2e:	2001      	movs	r0, #1
 800df30:	4770      	bx	lr
 800df32:	f06f 030b 	mvn.w	r3, #11
 800df36:	600b      	str	r3, [r1, #0]
 800df38:	2001      	movs	r0, #1
 800df3a:	4770      	bx	lr
 800df3c:	2000      	movs	r0, #0
 800df3e:	6008      	str	r0, [r1, #0]
 800df40:	4770      	bx	lr
 800df42:	bf00      	nop

0800df44 <acc_translation_a121_set_calibration_params>:
 800df44:	b530      	push	{r4, r5, lr}
 800df46:	460c      	mov	r4, r1
 800df48:	f8b0 2084 	ldrh.w	r2, [r0, #132]	@ 0x84
 800df4c:	f8b0 3086 	ldrh.w	r3, [r0, #134]	@ 0x86
 800df50:	f8b0 5082 	ldrh.w	r5, [r0, #130]	@ 0x82
 800df54:	f8b0 1088 	ldrh.w	r1, [r0, #136]	@ 0x88
 800df58:	8062      	strh	r2, [r4, #2]
 800df5a:	8842      	ldrh	r2, [r0, #2]
 800df5c:	80a3      	strh	r3, [r4, #4]
 800df5e:	8883      	ldrh	r3, [r0, #4]
 800df60:	8025      	strh	r5, [r4, #0]
 800df62:	b087      	sub	sp, #28
 800df64:	88c5      	ldrh	r5, [r0, #6]
 800df66:	80e1      	strh	r1, [r4, #6]
 800df68:	8941      	ldrh	r1, [r0, #10]
 800df6a:	8122      	strh	r2, [r4, #8]
 800df6c:	8c02      	ldrh	r2, [r0, #32]
 800df6e:	8163      	strh	r3, [r4, #10]
 800df70:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800df72:	8263      	strh	r3, [r4, #18]
 800df74:	81a5      	strh	r5, [r4, #12]
 800df76:	81e1      	strh	r1, [r4, #14]
 800df78:	8222      	strh	r2, [r4, #16]
 800df7a:	8900      	ldrh	r0, [r0, #8]
 800df7c:	466a      	mov	r2, sp
 800df7e:	2160      	movs	r1, #96	@ 0x60
 800df80:	f001 fdb6 	bl	800faf0 <acc_dll_calculate_area_settings>
 800df84:	f8bd 1000 	ldrh.w	r1, [sp]
 800df88:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800df8c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800df90:	f8bd 5008 	ldrh.w	r5, [sp, #8]
 800df94:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800df98:	82a1      	strh	r1, [r4, #20]
 800df9a:	82e2      	strh	r2, [r4, #22]
 800df9c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800dfa0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800dfa4:	8323      	strh	r3, [r4, #24]
 800dfa6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800dfaa:	8365      	strh	r5, [r4, #26]
 800dfac:	83a0      	strh	r0, [r4, #28]
 800dfae:	83e1      	strh	r1, [r4, #30]
 800dfb0:	8422      	strh	r2, [r4, #32]
 800dfb2:	8463      	strh	r3, [r4, #34]	@ 0x22
 800dfb4:	b007      	add	sp, #28
 800dfb6:	bd30      	pop	{r4, r5, pc}

0800dfb8 <acc_translation_a121_set_gain_params>:
 800dfb8:	7a83      	ldrb	r3, [r0, #10]
 800dfba:	2b17      	cmp	r3, #23
 800dfbc:	d80e      	bhi.n	800dfdc <acc_translation_a121_set_gain_params+0x24>
 800dfbe:	2b09      	cmp	r3, #9
 800dfc0:	d80e      	bhi.n	800dfe0 <acc_translation_a121_set_gain_params+0x28>
 800dfc2:	f1c3 0309 	rsb	r3, r3, #9
 800dfc6:	2015      	movs	r0, #21
 800dfc8:	8053      	strh	r3, [r2, #2]
 800dfca:	8010      	strh	r0, [r2, #0]
 800dfcc:	b199      	cbz	r1, 800dff6 <acc_translation_a121_set_gain_params+0x3e>
 800dfce:	8853      	ldrh	r3, [r2, #2]
 800dfd0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800dfd4:	2001      	movs	r0, #1
 800dfd6:	898b      	ldrh	r3, [r1, #12]
 800dfd8:	8093      	strh	r3, [r2, #4]
 800dfda:	4770      	bx	lr
 800dfdc:	2000      	movs	r0, #0
 800dfde:	4770      	bx	lr
 800dfe0:	2b10      	cmp	r3, #16
 800dfe2:	bf94      	ite	ls
 800dfe4:	f1c3 031e 	rsbls	r3, r3, #30
 800dfe8:	f1c3 0317 	rsbhi	r3, r3, #23
 800dfec:	2000      	movs	r0, #0
 800dfee:	8013      	strh	r3, [r2, #0]
 800dff0:	8050      	strh	r0, [r2, #2]
 800dff2:	2900      	cmp	r1, #0
 800dff4:	d1eb      	bne.n	800dfce <acc_translation_a121_set_gain_params+0x16>
 800dff6:	8091      	strh	r1, [r2, #4]
 800dff8:	2001      	movs	r0, #1
 800dffa:	4770      	bx	lr

0800dffc <acc_translation_a121_set_pulse_length_params>:
 800dffc:	8a83      	ldrh	r3, [r0, #20]
 800dffe:	2b08      	cmp	r3, #8
 800e000:	d802      	bhi.n	800e008 <acc_translation_a121_set_pulse_length_params+0xc>
 800e002:	8ac2      	ldrh	r2, [r0, #22]
 800e004:	2a07      	cmp	r2, #7
 800e006:	d901      	bls.n	800e00c <acc_translation_a121_set_pulse_length_params+0x10>
 800e008:	2000      	movs	r0, #0
 800e00a:	4770      	bx	lr
 800e00c:	b470      	push	{r4, r5, r6}
 800e00e:	8b05      	ldrh	r5, [r0, #24]
 800e010:	2d08      	cmp	r5, #8
 800e012:	d902      	bls.n	800e01a <acc_translation_a121_set_pulse_length_params+0x1e>
 800e014:	2000      	movs	r0, #0
 800e016:	bc70      	pop	{r4, r5, r6}
 800e018:	4770      	bx	lr
 800e01a:	8b44      	ldrh	r4, [r0, #26]
 800e01c:	2c08      	cmp	r4, #8
 800e01e:	d8f9      	bhi.n	800e014 <acc_translation_a121_set_pulse_length_params+0x18>
 800e020:	2001      	movs	r0, #1
 800e022:	1e66      	subs	r6, r4, #1
 800e024:	fa00 f202 	lsl.w	r2, r0, r2
 800e028:	3a01      	subs	r2, #1
 800e02a:	fa00 f404 	lsl.w	r4, r0, r4
 800e02e:	fa00 f606 	lsl.w	r6, r0, r6
 800e032:	b292      	uxth	r2, r2
 800e034:	3c01      	subs	r4, #1
 800e036:	3e01      	subs	r6, #1
 800e038:	01a4      	lsls	r4, r4, #6
 800e03a:	0276      	lsls	r6, r6, #9
 800e03c:	800b      	strh	r3, [r1, #0]
 800e03e:	0193      	lsls	r3, r2, #6
 800e040:	0252      	lsls	r2, r2, #9
 800e042:	804d      	strh	r5, [r1, #2]
 800e044:	808b      	strh	r3, [r1, #4]
 800e046:	810a      	strh	r2, [r1, #8]
 800e048:	80cc      	strh	r4, [r1, #6]
 800e04a:	814e      	strh	r6, [r1, #10]
 800e04c:	e7e3      	b.n	800e016 <acc_translation_a121_set_pulse_length_params+0x1a>
 800e04e:	bf00      	nop

0800e050 <acc_translation_a121_set_range_params>:
 800e050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e054:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 800e058:	f890 704c 	ldrb.w	r7, [r0, #76]	@ 0x4c
 800e05c:	888d      	ldrh	r5, [r1, #4]
 800e05e:	b08d      	sub	sp, #52	@ 0x34
 800e060:	f1ba 0f18 	cmp.w	sl, #24
 800e064:	9102      	str	r1, [sp, #8]
 800e066:	4691      	mov	r9, r2
 800e068:	461c      	mov	r4, r3
 800e06a:	f240 812e 	bls.w	800e2ca <acc_translation_a121_set_range_params+0x27a>
 800e06e:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 800e072:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800e076:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 800e07a:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 800e07e:	f3c3 02cc 	ubfx	r2, r3, #3, #13
 800e082:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800e086:	b29b      	uxth	r3, r3
 800e088:	f640 22aa 	movw	r2, #2730	@ 0xaaa
 800e08c:	4293      	cmp	r3, r2
 800e08e:	f240 8141 	bls.w	800e314 <acc_translation_a121_set_range_params+0x2c4>
 800e092:	4bb3      	ldr	r3, [pc, #716]	@ (800e360 <acc_translation_a121_set_range_params+0x310>)
 800e094:	4ab3      	ldr	r2, [pc, #716]	@ (800e364 <acc_translation_a121_set_range_params+0x314>)
 800e096:	691b      	ldr	r3, [r3, #16]
 800e098:	49b3      	ldr	r1, [pc, #716]	@ (800e368 <acc_translation_a121_set_range_params+0x318>)
 800e09a:	2000      	movs	r0, #0
 800e09c:	4606      	mov	r6, r0
 800e09e:	9001      	str	r0, [sp, #4]
 800e0a0:	f04f 0801 	mov.w	r8, #1
 800e0a4:	4798      	blx	r3
 800e0a6:	46c3      	mov	fp, r8
 800e0a8:	9604      	str	r6, [sp, #16]
 800e0aa:	2f00      	cmp	r7, #0
 800e0ac:	f040 812f 	bne.w	800e30e <acc_translation_a121_set_range_params+0x2be>
 800e0b0:	2204      	movs	r2, #4
 800e0b2:	9b02      	ldr	r3, [sp, #8]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	4499      	add	r9, r3
 800e0b8:	f509 43c3 	add.w	r3, r9, #24960	@ 0x6180
 800e0bc:	fb12 f205 	smulbb	r2, r2, r5
 800e0c0:	3328      	adds	r3, #40	@ 0x28
 800e0c2:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800e0c6:	3d01      	subs	r5, #1
 800e0c8:	b292      	uxth	r2, r2
 800e0ca:	428b      	cmp	r3, r1
 800e0cc:	9205      	str	r2, [sp, #20]
 800e0ce:	fb0a 9a05 	mla	sl, sl, r5, r9
 800e0d2:	d906      	bls.n	800e0e2 <acc_translation_a121_set_range_params+0x92>
 800e0d4:	4ba2      	ldr	r3, [pc, #648]	@ (800e360 <acc_translation_a121_set_range_params+0x310>)
 800e0d6:	4aa5      	ldr	r2, [pc, #660]	@ (800e36c <acc_translation_a121_set_range_params+0x31c>)
 800e0d8:	691b      	ldr	r3, [r3, #16]
 800e0da:	49a3      	ldr	r1, [pc, #652]	@ (800e368 <acc_translation_a121_set_range_params+0x318>)
 800e0dc:	2000      	movs	r0, #0
 800e0de:	4798      	blx	r3
 800e0e0:	2700      	movs	r7, #0
 800e0e2:	f50a 43c3 	add.w	r3, sl, #24960	@ 0x6180
 800e0e6:	3328      	adds	r3, #40	@ 0x28
 800e0e8:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d906      	bls.n	800e0fe <acc_translation_a121_set_range_params+0xae>
 800e0f0:	4b9b      	ldr	r3, [pc, #620]	@ (800e360 <acc_translation_a121_set_range_params+0x310>)
 800e0f2:	4a9f      	ldr	r2, [pc, #636]	@ (800e370 <acc_translation_a121_set_range_params+0x320>)
 800e0f4:	691b      	ldr	r3, [r3, #16]
 800e0f6:	499c      	ldr	r1, [pc, #624]	@ (800e368 <acc_translation_a121_set_range_params+0x318>)
 800e0f8:	2000      	movs	r0, #0
 800e0fa:	4798      	blx	r3
 800e0fc:	2700      	movs	r7, #0
 800e0fe:	f1b9 0f00 	cmp.w	r9, #0
 800e102:	f2c0 817c 	blt.w	800e3fe <acc_translation_a121_set_range_params+0x3ae>
 800e106:	4b9b      	ldr	r3, [pc, #620]	@ (800e374 <acc_translation_a121_set_range_params+0x324>)
 800e108:	ea4f 72e9 	mov.w	r2, r9, asr #31
 800e10c:	fb83 1309 	smull	r1, r3, r3, r9
 800e110:	ebc2 03a3 	rsb	r3, r2, r3, asr #2
 800e114:	f1ba 0f00 	cmp.w	sl, #0
 800e118:	b21b      	sxth	r3, r3
 800e11a:	f2c0 817e 	blt.w	800e41a <acc_translation_a121_set_range_params+0x3ca>
 800e11e:	4995      	ldr	r1, [pc, #596]	@ (800e374 <acc_translation_a121_set_range_params+0x324>)
 800e120:	ea4f 7cea 	mov.w	ip, sl, asr #31
 800e124:	fb81 010a 	smull	r0, r1, r1, sl
 800e128:	ebcc 01a1 	rsb	r1, ip, r1, asr #2
 800e12c:	b209      	sxth	r1, r1
 800e12e:	4891      	ldr	r0, [pc, #580]	@ (800e374 <acc_translation_a121_set_range_params+0x324>)
 800e130:	fb80 5009 	smull	r5, r0, r0, r9
 800e134:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 800e138:	b29b      	uxth	r3, r3
 800e13a:	1ac9      	subs	r1, r1, r3
 800e13c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e140:	b288      	uxth	r0, r1
 800e142:	ebb9 02c2 	subs.w	r2, r9, r2, lsl #3
 800e146:	b209      	sxth	r1, r1
 800e148:	fbb0 fbfb 	udiv	fp, r0, fp
 800e14c:	f10b 0b01 	add.w	fp, fp, #1
 800e150:	9106      	str	r1, [sp, #24]
 800e152:	fa1f fb8b 	uxth.w	fp, fp
 800e156:	f04f 0118 	mov.w	r1, #24
 800e15a:	fbb1 f1f8 	udiv	r1, r1, r8
 800e15e:	f100 816e 	bmi.w	800e43e <acc_translation_a121_set_range_params+0x3ee>
 800e162:	b210      	sxth	r0, r2
 800e164:	b292      	uxth	r2, r2
 800e166:	f8df 920c 	ldr.w	r9, [pc, #524]	@ 800e374 <acc_translation_a121_set_range_params+0x324>
 800e16a:	fbb2 f5f8 	udiv	r5, r2, r8
 800e16e:	fb89 690a 	smull	r6, r9, r9, sl
 800e172:	ebcc 09a9 	rsb	r9, ip, r9, asr #2
 800e176:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 800e17a:	fb08 2515 	mls	r5, r8, r5, r2
 800e17e:	b2ad      	uxth	r5, r5
 800e180:	ebba 09c9 	subs.w	r9, sl, r9, lsl #3
 800e184:	9500      	str	r5, [sp, #0]
 800e186:	f100 8153 	bmi.w	800e430 <acc_translation_a121_set_range_params+0x3e0>
 800e18a:	fa0f f589 	sxth.w	r5, r9
 800e18e:	950a      	str	r5, [sp, #40]	@ 0x28
 800e190:	fa1f f989 	uxth.w	r9, r9
 800e194:	9d00      	ldr	r5, [sp, #0]
 800e196:	3901      	subs	r1, #1
 800e198:	b289      	uxth	r1, r1
 800e19a:	9109      	str	r1, [sp, #36]	@ 0x24
 800e19c:	f1bb 0f01 	cmp.w	fp, #1
 800e1a0:	fb11 5108 	smlabb	r1, r1, r8, r5
 800e1a4:	b289      	uxth	r1, r1
 800e1a6:	f000 80f3 	beq.w	800e390 <acc_translation_a121_set_range_params+0x340>
 800e1aa:	9d00      	ldr	r5, [sp, #0]
 800e1ac:	ebb9 0901 	subs.w	r9, r9, r1
 800e1b0:	bf18      	it	ne
 800e1b2:	f04f 0901 	movne.w	r9, #1
 800e1b6:	4295      	cmp	r5, r2
 800e1b8:	bf14      	ite	ne
 800e1ba:	2501      	movne	r5, #1
 800e1bc:	2500      	moveq	r5, #0
 800e1be:	ebab 0505 	sub.w	r5, fp, r5
 800e1c2:	eba5 0509 	sub.w	r5, r5, r9
 800e1c6:	fa1f f689 	uxth.w	r6, r9
 800e1ca:	b2ad      	uxth	r5, r5
 800e1cc:	9607      	str	r6, [sp, #28]
 800e1ce:	f040 80e6 	bne.w	800e39e <acc_translation_a121_set_range_params+0x34e>
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	9108      	str	r1, [sp, #32]
 800e1d6:	9103      	str	r1, [sp, #12]
 800e1d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e1da:	9900      	ldr	r1, [sp, #0]
 800e1dc:	0092      	lsls	r2, r2, #2
 800e1de:	0089      	lsls	r1, r1, #2
 800e1e0:	87a2      	strh	r2, [r4, #60]	@ 0x3c
 800e1e2:	87e1      	strh	r1, [r4, #62]	@ 0x3e
 800e1e4:	2f00      	cmp	r7, #0
 800e1e6:	f000 80b4 	beq.w	800e352 <acc_translation_a121_set_range_params+0x302>
 800e1ea:	9a02      	ldr	r2, [sp, #8]
 800e1ec:	7b92      	ldrb	r2, [r2, #14]
 800e1ee:	2a05      	cmp	r2, #5
 800e1f0:	f200 812a 	bhi.w	800e448 <acc_translation_a121_set_range_params+0x3f8>
 800e1f4:	4960      	ldr	r1, [pc, #384]	@ (800e378 <acc_translation_a121_set_range_params+0x328>)
 800e1f6:	f831 a012 	ldrh.w	sl, [r1, r2, lsl #1]
 800e1fa:	ea4f 015a 	mov.w	r1, sl, lsr #1
 800e1fe:	f1aa 0003 	sub.w	r0, sl, #3
 800e202:	f1aa 0b4a 	sub.w	fp, sl, #74	@ 0x4a
 800e206:	3903      	subs	r1, #3
 800e208:	b289      	uxth	r1, r1
 800e20a:	b280      	uxth	r0, r0
 800e20c:	fa1f fb8b 	uxth.w	fp, fp
 800e210:	f1aa 0a14 	sub.w	sl, sl, #20
 800e214:	f1c3 0629 	rsb	r6, r3, #41	@ 0x29
 800e218:	445e      	add	r6, fp
 800e21a:	9a06      	ldr	r2, [sp, #24]
 800e21c:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800e21e:	b233      	sxth	r3, r6
 800e220:	1a9a      	subs	r2, r3, r2
 800e222:	2a29      	cmp	r2, #41	@ 0x29
 800e224:	86e1      	strh	r1, [r4, #54]	@ 0x36
 800e226:	b2b6      	uxth	r6, r6
 800e228:	dc08      	bgt.n	800e23c <acc_translation_a121_set_range_params+0x1ec>
 800e22a:	494d      	ldr	r1, [pc, #308]	@ (800e360 <acc_translation_a121_set_range_params+0x310>)
 800e22c:	4a53      	ldr	r2, [pc, #332]	@ (800e37c <acc_translation_a121_set_range_params+0x32c>)
 800e22e:	690f      	ldr	r7, [r1, #16]
 800e230:	494d      	ldr	r1, [pc, #308]	@ (800e368 <acc_translation_a121_set_range_params+0x318>)
 800e232:	9302      	str	r3, [sp, #8]
 800e234:	2000      	movs	r0, #0
 800e236:	47b8      	blx	r7
 800e238:	9b02      	ldr	r3, [sp, #8]
 800e23a:	2700      	movs	r7, #0
 800e23c:	4553      	cmp	r3, sl
 800e23e:	db06      	blt.n	800e24e <acc_translation_a121_set_range_params+0x1fe>
 800e240:	4b47      	ldr	r3, [pc, #284]	@ (800e360 <acc_translation_a121_set_range_params+0x310>)
 800e242:	4a4f      	ldr	r2, [pc, #316]	@ (800e380 <acc_translation_a121_set_range_params+0x330>)
 800e244:	691b      	ldr	r3, [r3, #16]
 800e246:	4948      	ldr	r1, [pc, #288]	@ (800e368 <acc_translation_a121_set_range_params+0x318>)
 800e248:	2000      	movs	r0, #0
 800e24a:	4798      	blx	r3
 800e24c:	2700      	movs	r7, #0
 800e24e:	9b01      	ldr	r3, [sp, #4]
 800e250:	f8a4 b038 	strh.w	fp, [r4, #56]	@ 0x38
 800e254:	2b2c      	cmp	r3, #44	@ 0x2c
 800e256:	8766      	strh	r6, [r4, #58]	@ 0x3a
 800e258:	f240 80c4 	bls.w	800e3e4 <acc_translation_a121_set_range_params+0x394>
 800e25c:	2300      	movs	r3, #0
 800e25e:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 800e262:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800e266:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800e26a:	9b04      	ldr	r3, [sp, #16]
 800e26c:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 800e270:	9b08      	ldr	r3, [sp, #32]
 800e272:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800e276:	2d00      	cmp	r5, #0
 800e278:	f000 809a 	beq.w	800e3b0 <acc_translation_a121_set_range_params+0x360>
 800e27c:	2301      	movs	r3, #1
 800e27e:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 800e282:	9b03      	ldr	r3, [sp, #12]
 800e284:	9a07      	ldr	r2, [sp, #28]
 800e286:	f8a4 204c 	strh.w	r2, [r4, #76]	@ 0x4c
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	f000 80fc 	beq.w	800e488 <acc_translation_a121_set_range_params+0x438>
 800e290:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e292:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800e296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e298:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 800e29c:	f1b9 0f00 	cmp.w	r9, #0
 800e2a0:	f000 80ef 	beq.w	800e482 <acc_translation_a121_set_range_params+0x432>
 800e2a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2a6:	9a00      	ldr	r2, [sp, #0]
 800e2a8:	eba3 0902 	sub.w	r9, r3, r2
 800e2ac:	fb99 f8f8 	sdiv	r8, r9, r8
 800e2b0:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
 800e2b4:	3d01      	subs	r5, #1
 800e2b6:	b2ad      	uxth	r5, r5
 800e2b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e2ba:	9a05      	ldr	r2, [sp, #20]
 800e2bc:	f8a4 5040 	strh.w	r5, [r4, #64]	@ 0x40
 800e2c0:	4638      	mov	r0, r7
 800e2c2:	801a      	strh	r2, [r3, #0]
 800e2c4:	b00d      	add	sp, #52	@ 0x34
 800e2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ca:	f1ba 0f00 	cmp.w	sl, #0
 800e2ce:	f43f aee0 	beq.w	800e092 <acc_translation_a121_set_range_params+0x42>
 800e2d2:	2318      	movs	r3, #24
 800e2d4:	fbb3 f3fa 	udiv	r3, r3, sl
 800e2d8:	fb0a f303 	mul.w	r3, sl, r3
 800e2dc:	f1c3 0318 	rsb	r3, r3, #24
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	9304      	str	r3, [sp, #16]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f47f aed4 	bne.w	800e092 <acc_translation_a121_set_range_params+0x42>
 800e2ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	9301      	str	r3, [sp, #4]
 800e2f4:	46d0      	mov	r8, sl
 800e2f6:	f04f 0b01 	mov.w	fp, #1
 800e2fa:	b9d5      	cbnz	r5, 800e332 <acc_translation_a121_set_range_params+0x2e2>
 800e2fc:	4b18      	ldr	r3, [pc, #96]	@ (800e360 <acc_translation_a121_set_range_params+0x310>)
 800e2fe:	4a21      	ldr	r2, [pc, #132]	@ (800e384 <acc_translation_a121_set_range_params+0x334>)
 800e300:	691b      	ldr	r3, [r3, #16]
 800e302:	4919      	ldr	r1, [pc, #100]	@ (800e368 <acc_translation_a121_set_range_params+0x318>)
 800e304:	4628      	mov	r0, r5
 800e306:	4798      	blx	r3
 800e308:	2f00      	cmp	r7, #0
 800e30a:	f43f aed1 	beq.w	800e0b0 <acc_translation_a121_set_range_params+0x60>
 800e30e:	2700      	movs	r7, #0
 800e310:	2202      	movs	r2, #2
 800e312:	e6ce      	b.n	800e0b2 <acc_translation_a121_set_range_params+0x62>
 800e314:	4b1c      	ldr	r3, [pc, #112]	@ (800e388 <acc_translation_a121_set_range_params+0x338>)
 800e316:	fba3 3b0a 	umull	r3, fp, r3, sl
 800e31a:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 800e31e:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e322:	b29b      	uxth	r3, r3
 800e324:	9304      	str	r3, [sp, #16]
 800e326:	235c      	movs	r3, #92	@ 0x5c
 800e328:	9301      	str	r3, [sp, #4]
 800e32a:	f04f 0818 	mov.w	r8, #24
 800e32e:	2d00      	cmp	r5, #0
 800e330:	d0e4      	beq.n	800e2fc <acc_translation_a121_set_range_params+0x2ac>
 800e332:	2f00      	cmp	r7, #0
 800e334:	f040 80b2 	bne.w	800e49c <acc_translation_a121_set_range_params+0x44c>
 800e338:	9b02      	ldr	r3, [sp, #8]
 800e33a:	7b1b      	ldrb	r3, [r3, #12]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	f000 80c4 	beq.w	800e4ca <acc_translation_a121_set_range_params+0x47a>
 800e342:	4b07      	ldr	r3, [pc, #28]	@ (800e360 <acc_translation_a121_set_range_params+0x310>)
 800e344:	4a11      	ldr	r2, [pc, #68]	@ (800e38c <acc_translation_a121_set_range_params+0x33c>)
 800e346:	691b      	ldr	r3, [r3, #16]
 800e348:	4907      	ldr	r1, [pc, #28]	@ (800e368 <acc_translation_a121_set_range_params+0x318>)
 800e34a:	4638      	mov	r0, r7
 800e34c:	4798      	blx	r3
 800e34e:	2204      	movs	r2, #4
 800e350:	e6af      	b.n	800e0b2 <acc_translation_a121_set_range_params+0x62>
 800e352:	f04f 0b36 	mov.w	fp, #54	@ 0x36
 800e356:	f04f 0a6c 	mov.w	sl, #108	@ 0x6c
 800e35a:	213d      	movs	r1, #61	@ 0x3d
 800e35c:	207d      	movs	r0, #125	@ 0x7d
 800e35e:	e759      	b.n	800e214 <acc_translation_a121_set_range_params+0x1c4>
 800e360:	200009dc 	.word	0x200009dc
 800e364:	080139e4 	.word	0x080139e4
 800e368:	080139f8 	.word	0x080139f8
 800e36c:	08013a58 	.word	0x08013a58
 800e370:	08013a6c 	.word	0x08013a6c
 800e374:	2aaaaaab 	.word	0x2aaaaaab
 800e378:	08013cfc 	.word	0x08013cfc
 800e37c:	08013aa0 	.word	0x08013aa0
 800e380:	08013ac0 	.word	0x08013ac0
 800e384:	08013a0c 	.word	0x08013a0c
 800e388:	aaaaaaab 	.word	0xaaaaaaab
 800e38c:	08013a20 	.word	0x08013a20
 800e390:	4295      	cmp	r5, r2
 800e392:	f000 808e 	beq.w	800e4b2 <acc_translation_a121_set_range_params+0x462>
 800e396:	2500      	movs	r5, #0
 800e398:	4649      	mov	r1, r9
 800e39a:	9507      	str	r5, [sp, #28]
 800e39c:	46a9      	mov	r9, r5
 800e39e:	2601      	movs	r6, #1
 800e3a0:	1a08      	subs	r0, r1, r0
 800e3a2:	fb90 f0f8 	sdiv	r0, r0, r8
 800e3a6:	b281      	uxth	r1, r0
 800e3a8:	9608      	str	r6, [sp, #32]
 800e3aa:	9603      	str	r6, [sp, #12]
 800e3ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e3ae:	e714      	b.n	800e1da <acc_translation_a121_set_range_params+0x18a>
 800e3b0:	9b07      	ldr	r3, [sp, #28]
 800e3b2:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
 800e3b6:	9b03      	ldr	r3, [sp, #12]
 800e3b8:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d06a      	beq.n	800e496 <acc_translation_a121_set_range_params+0x446>
 800e3c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3c2:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 800e3cc:	f1b9 0f00 	cmp.w	r9, #0
 800e3d0:	d05e      	beq.n	800e490 <acc_translation_a121_set_range_params+0x440>
 800e3d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3d4:	9a00      	ldr	r2, [sp, #0]
 800e3d6:	eba3 0902 	sub.w	r9, r3, r2
 800e3da:	fb99 f8f8 	sdiv	r8, r9, r8
 800e3de:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
 800e3e2:	e769      	b.n	800e2b8 <acc_translation_a121_set_range_params+0x268>
 800e3e4:	9b01      	ldr	r3, [sp, #4]
 800e3e6:	2b1e      	cmp	r3, #30
 800e3e8:	d93e      	bls.n	800e468 <acc_translation_a121_set_range_params+0x418>
 800e3ea:	f1a3 021e 	sub.w	r2, r3, #30
 800e3ee:	230f      	movs	r3, #15
 800e3f0:	f8a4 2054 	strh.w	r2, [r4, #84]	@ 0x54
 800e3f4:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 800e3f8:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800e3fc:	e735      	b.n	800e26a <acc_translation_a121_set_range_params+0x21a>
 800e3fe:	4a36      	ldr	r2, [pc, #216]	@ (800e4d8 <acc_translation_a121_set_range_params+0x488>)
 800e400:	ea6f 0309 	mvn.w	r3, r9
 800e404:	fba2 2303 	umull	r2, r3, r2, r3
 800e408:	ea6f 1313 	mvn.w	r3, r3, lsr #4
 800e40c:	f1ba 0f00 	cmp.w	sl, #0
 800e410:	b21b      	sxth	r3, r3
 800e412:	ea4f 72e9 	mov.w	r2, r9, asr #31
 800e416:	f6bf ae82 	bge.w	800e11e <acc_translation_a121_set_range_params+0xce>
 800e41a:	482f      	ldr	r0, [pc, #188]	@ (800e4d8 <acc_translation_a121_set_range_params+0x488>)
 800e41c:	ea6f 010a 	mvn.w	r1, sl
 800e420:	fba0 0101 	umull	r0, r1, r0, r1
 800e424:	ea6f 1111 	mvn.w	r1, r1, lsr #4
 800e428:	b209      	sxth	r1, r1
 800e42a:	ea4f 7cea 	mov.w	ip, sl, asr #31
 800e42e:	e67e      	b.n	800e12e <acc_translation_a121_set_range_params+0xde>
 800e430:	f109 0518 	add.w	r5, r9, #24
 800e434:	fa1f f985 	uxth.w	r9, r5
 800e438:	b22d      	sxth	r5, r5
 800e43a:	950a      	str	r5, [sp, #40]	@ 0x28
 800e43c:	e6aa      	b.n	800e194 <acc_translation_a121_set_range_params+0x144>
 800e43e:	f102 0018 	add.w	r0, r2, #24
 800e442:	b282      	uxth	r2, r0
 800e444:	b200      	sxth	r0, r0
 800e446:	e68e      	b.n	800e166 <acc_translation_a121_set_range_params+0x116>
 800e448:	4924      	ldr	r1, [pc, #144]	@ (800e4dc <acc_translation_a121_set_range_params+0x48c>)
 800e44a:	4a25      	ldr	r2, [pc, #148]	@ (800e4e0 <acc_translation_a121_set_range_params+0x490>)
 800e44c:	690e      	ldr	r6, [r1, #16]
 800e44e:	4925      	ldr	r1, [pc, #148]	@ (800e4e4 <acc_translation_a121_set_range_params+0x494>)
 800e450:	9302      	str	r3, [sp, #8]
 800e452:	2000      	movs	r0, #0
 800e454:	47b0      	blx	r6
 800e456:	f04f 0b36 	mov.w	fp, #54	@ 0x36
 800e45a:	9b02      	ldr	r3, [sp, #8]
 800e45c:	f04f 0a6c 	mov.w	sl, #108	@ 0x6c
 800e460:	213d      	movs	r1, #61	@ 0x3d
 800e462:	207d      	movs	r0, #125	@ 0x7d
 800e464:	2700      	movs	r7, #0
 800e466:	e6d5      	b.n	800e214 <acc_translation_a121_set_range_params+0x1c4>
 800e468:	9b01      	ldr	r3, [sp, #4]
 800e46a:	2b0f      	cmp	r3, #15
 800e46c:	d918      	bls.n	800e4a0 <acc_translation_a121_set_range_params+0x450>
 800e46e:	3b0f      	subs	r3, #15
 800e470:	220f      	movs	r2, #15
 800e472:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800e476:	2300      	movs	r3, #0
 800e478:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 800e47c:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800e480:	e6f3      	b.n	800e26a <acc_translation_a121_set_range_params+0x21a>
 800e482:	f8a4 9046 	strh.w	r9, [r4, #70]	@ 0x46
 800e486:	e715      	b.n	800e2b4 <acc_translation_a121_set_range_params+0x264>
 800e488:	9b03      	ldr	r3, [sp, #12]
 800e48a:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800e48e:	e702      	b.n	800e296 <acc_translation_a121_set_range_params+0x246>
 800e490:	f8a4 9046 	strh.w	r9, [r4, #70]	@ 0x46
 800e494:	e710      	b.n	800e2b8 <acc_translation_a121_set_range_params+0x268>
 800e496:	f8a4 5042 	strh.w	r5, [r4, #66]	@ 0x42
 800e49a:	e794      	b.n	800e3c6 <acc_translation_a121_set_range_params+0x376>
 800e49c:	2202      	movs	r2, #2
 800e49e:	e608      	b.n	800e0b2 <acc_translation_a121_set_range_params+0x62>
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	9a01      	ldr	r2, [sp, #4]
 800e4a4:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 800e4a8:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800e4ac:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800e4b0:	e6db      	b.n	800e26a <acc_translation_a121_set_range_params+0x21a>
 800e4b2:	4589      	cmp	r9, r1
 800e4b4:	bf0c      	ite	eq
 800e4b6:	2501      	moveq	r5, #1
 800e4b8:	2500      	movne	r5, #0
 800e4ba:	d108      	bne.n	800e4ce <acc_translation_a121_set_range_params+0x47e>
 800e4bc:	2100      	movs	r1, #0
 800e4be:	e9cd 1107 	strd	r1, r1, [sp, #28]
 800e4c2:	4689      	mov	r9, r1
 800e4c4:	9103      	str	r1, [sp, #12]
 800e4c6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e4c8:	e687      	b.n	800e1da <acc_translation_a121_set_range_params+0x18a>
 800e4ca:	2701      	movs	r7, #1
 800e4cc:	e5f0      	b.n	800e0b0 <acc_translation_a121_set_range_params+0x60>
 800e4ce:	2600      	movs	r6, #0
 800e4d0:	4649      	mov	r1, r9
 800e4d2:	9607      	str	r6, [sp, #28]
 800e4d4:	46b1      	mov	r9, r6
 800e4d6:	e762      	b.n	800e39e <acc_translation_a121_set_range_params+0x34e>
 800e4d8:	aaaaaaab 	.word	0xaaaaaaab
 800e4dc:	200009dc 	.word	0x200009dc
 800e4e0:	08013a94 	.word	0x08013a94
 800e4e4:	080139f8 	.word	0x080139f8

0800e4e8 <acc_translation_a121_subsweep_translate>:
 800e4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ec:	f890 c04c 	ldrb.w	ip, [r0, #76]	@ 0x4c
 800e4f0:	4607      	mov	r7, r0
 800e4f2:	8908      	ldrh	r0, [r1, #8]
 800e4f4:	460e      	mov	r6, r1
 800e4f6:	f240 35ff 	movw	r5, #1023	@ 0x3ff
 800e4fa:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800e4fe:	b08c      	sub	sp, #48	@ 0x30
 800e500:	f1bc 0f00 	cmp.w	ip, #0
 800e504:	bf08      	it	eq
 800e506:	4629      	moveq	r1, r5
 800e508:	b108      	cbz	r0, 800e50e <acc_translation_a121_subsweep_translate+0x26>
 800e50a:	4281      	cmp	r1, r0
 800e50c:	d20a      	bcs.n	800e524 <acc_translation_a121_subsweep_translate+0x3c>
 800e50e:	4b55      	ldr	r3, [pc, #340]	@ (800e664 <acc_translation_a121_subsweep_translate+0x17c>)
 800e510:	4a55      	ldr	r2, [pc, #340]	@ (800e668 <acc_translation_a121_subsweep_translate+0x180>)
 800e512:	691b      	ldr	r3, [r3, #16]
 800e514:	4955      	ldr	r1, [pc, #340]	@ (800e66c <acc_translation_a121_subsweep_translate+0x184>)
 800e516:	2000      	movs	r0, #0
 800e518:	4798      	blx	r3
 800e51a:	2500      	movs	r5, #0
 800e51c:	4628      	mov	r0, r5
 800e51e:	b00c      	add	sp, #48	@ 0x30
 800e520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e524:	461c      	mov	r4, r3
 800e526:	7b73      	ldrb	r3, [r6, #13]
 800e528:	4690      	mov	r8, r2
 800e52a:	b97b      	cbnz	r3, 800e54c <acc_translation_a121_subsweep_translate+0x64>
 800e52c:	7bf0      	ldrb	r0, [r6, #15]
 800e52e:	7bb5      	ldrb	r5, [r6, #14]
 800e530:	2d00      	cmp	r5, #0
 800e532:	d12d      	bne.n	800e590 <acc_translation_a121_subsweep_translate+0xa8>
 800e534:	2801      	cmp	r0, #1
 800e536:	d00f      	beq.n	800e558 <acc_translation_a121_subsweep_translate+0x70>
 800e538:	4b4a      	ldr	r3, [pc, #296]	@ (800e664 <acc_translation_a121_subsweep_translate+0x17c>)
 800e53a:	4a4d      	ldr	r2, [pc, #308]	@ (800e670 <acc_translation_a121_subsweep_translate+0x188>)
 800e53c:	691b      	ldr	r3, [r3, #16]
 800e53e:	494b      	ldr	r1, [pc, #300]	@ (800e66c <acc_translation_a121_subsweep_translate+0x184>)
 800e540:	4628      	mov	r0, r5
 800e542:	4798      	blx	r3
 800e544:	4628      	mov	r0, r5
 800e546:	b00c      	add	sp, #48	@ 0x30
 800e548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e54c:	7bf0      	ldrb	r0, [r6, #15]
 800e54e:	2802      	cmp	r0, #2
 800e550:	d1ed      	bne.n	800e52e <acc_translation_a121_subsweep_translate+0x46>
 800e552:	4b44      	ldr	r3, [pc, #272]	@ (800e664 <acc_translation_a121_subsweep_translate+0x17c>)
 800e554:	4a47      	ldr	r2, [pc, #284]	@ (800e674 <acc_translation_a121_subsweep_translate+0x18c>)
 800e556:	e7dc      	b.n	800e512 <acc_translation_a121_subsweep_translate+0x2a>
 800e558:	4b47      	ldr	r3, [pc, #284]	@ (800e678 <acc_translation_a121_subsweep_translate+0x190>)
 800e55a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e55c:	9200      	str	r2, [sp, #0]
 800e55e:	4631      	mov	r1, r6
 800e560:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 800e564:	4638      	mov	r0, r7
 800e566:	4623      	mov	r3, r4
 800e568:	f7ff fd72 	bl	800e050 <acc_translation_a121_set_range_params>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	d0d4      	beq.n	800e51a <acc_translation_a121_subsweep_translate+0x32>
 800e570:	4622      	mov	r2, r4
 800e572:	4641      	mov	r1, r8
 800e574:	4630      	mov	r0, r6
 800e576:	f7ff fd1f 	bl	800dfb8 <acc_translation_a121_set_gain_params>
 800e57a:	4605      	mov	r5, r0
 800e57c:	b978      	cbnz	r0, 800e59e <acc_translation_a121_subsweep_translate+0xb6>
 800e57e:	4b39      	ldr	r3, [pc, #228]	@ (800e664 <acc_translation_a121_subsweep_translate+0x17c>)
 800e580:	4a3e      	ldr	r2, [pc, #248]	@ (800e67c <acc_translation_a121_subsweep_translate+0x194>)
 800e582:	691b      	ldr	r3, [r3, #16]
 800e584:	4939      	ldr	r1, [pc, #228]	@ (800e66c <acc_translation_a121_subsweep_translate+0x184>)
 800e586:	4798      	blx	r3
 800e588:	4628      	mov	r0, r5
 800e58a:	b00c      	add	sp, #48	@ 0x30
 800e58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e590:	1e45      	subs	r5, r0, #1
 800e592:	b2ed      	uxtb	r5, r5
 800e594:	2d04      	cmp	r5, #4
 800e596:	d9df      	bls.n	800e558 <acc_translation_a121_subsweep_translate+0x70>
 800e598:	4b32      	ldr	r3, [pc, #200]	@ (800e664 <acc_translation_a121_subsweep_translate+0x17c>)
 800e59a:	4a39      	ldr	r2, [pc, #228]	@ (800e680 <acc_translation_a121_subsweep_translate+0x198>)
 800e59c:	e7b9      	b.n	800e512 <acc_translation_a121_subsweep_translate+0x2a>
 800e59e:	7bf0      	ldrb	r0, [r6, #15]
 800e5a0:	aa04      	add	r2, sp, #16
 800e5a2:	4641      	mov	r1, r8
 800e5a4:	f7ff fc58 	bl	800de58 <acc_translation_a121_profile_to_pulse_params>
 800e5a8:	4605      	mov	r5, r0
 800e5aa:	b970      	cbnz	r0, 800e5ca <acc_translation_a121_subsweep_translate+0xe2>
 800e5ac:	4b2d      	ldr	r3, [pc, #180]	@ (800e664 <acc_translation_a121_subsweep_translate+0x17c>)
 800e5ae:	4a34      	ldr	r2, [pc, #208]	@ (800e680 <acc_translation_a121_subsweep_translate+0x198>)
 800e5b0:	691b      	ldr	r3, [r3, #16]
 800e5b2:	492e      	ldr	r1, [pc, #184]	@ (800e66c <acc_translation_a121_subsweep_translate+0x184>)
 800e5b4:	4798      	blx	r3
 800e5b6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800e5ba:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800e5be:	8562      	strh	r2, [r4, #42]	@ 0x2a
 800e5c0:	4628      	mov	r0, r5
 800e5c2:	8523      	strh	r3, [r4, #40]	@ 0x28
 800e5c4:	b00c      	add	sp, #48	@ 0x30
 800e5c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5ca:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800e5ce:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800e5d2:	8562      	strh	r2, [r4, #42]	@ 0x2a
 800e5d4:	8523      	strh	r3, [r4, #40]	@ 0x28
 800e5d6:	f104 0108 	add.w	r1, r4, #8
 800e5da:	a804      	add	r0, sp, #16
 800e5dc:	f7ff fd0e 	bl	800dffc <acc_translation_a121_set_pulse_length_params>
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	d09a      	beq.n	800e51a <acc_translation_a121_subsweep_translate+0x32>
 800e5e4:	f104 0214 	add.w	r2, r4, #20
 800e5e8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800e5ec:	9203      	str	r2, [sp, #12]
 800e5ee:	4611      	mov	r1, r2
 800e5f0:	a804      	add	r0, sp, #16
 800e5f2:	9308      	str	r3, [sp, #32]
 800e5f4:	f000 fdd0 	bl	800f198 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>
 800e5f8:	9a03      	ldr	r2, [sp, #12]
 800e5fa:	4605      	mov	r5, r0
 800e5fc:	b940      	cbnz	r0, 800e610 <acc_translation_a121_subsweep_translate+0x128>
 800e5fe:	4b19      	ldr	r3, [pc, #100]	@ (800e664 <acc_translation_a121_subsweep_translate+0x17c>)
 800e600:	4a20      	ldr	r2, [pc, #128]	@ (800e684 <acc_translation_a121_subsweep_translate+0x19c>)
 800e602:	691b      	ldr	r3, [r3, #16]
 800e604:	4919      	ldr	r1, [pc, #100]	@ (800e66c <acc_translation_a121_subsweep_translate+0x184>)
 800e606:	4798      	blx	r3
 800e608:	4628      	mov	r0, r5
 800e60a:	b00c      	add	sp, #48	@ 0x30
 800e60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e610:	f1b8 0f00 	cmp.w	r8, #0
 800e614:	d00f      	beq.n	800e636 <acc_translation_a121_subsweep_translate+0x14e>
 800e616:	f108 015c 	add.w	r1, r8, #92	@ 0x5c
 800e61a:	a804      	add	r0, sp, #16
 800e61c:	f000 fcb6 	bl	800ef8c <acc_translation_pulseshaper_calc_settings>
 800e620:	b948      	cbnz	r0, 800e636 <acc_translation_a121_subsweep_translate+0x14e>
 800e622:	4910      	ldr	r1, [pc, #64]	@ (800e664 <acc_translation_a121_subsweep_translate+0x17c>)
 800e624:	4a18      	ldr	r2, [pc, #96]	@ (800e688 <acc_translation_a121_subsweep_translate+0x1a0>)
 800e626:	690c      	ldr	r4, [r1, #16]
 800e628:	4910      	ldr	r1, [pc, #64]	@ (800e66c <acc_translation_a121_subsweep_translate+0x184>)
 800e62a:	4605      	mov	r5, r0
 800e62c:	47a0      	blx	r4
 800e62e:	4628      	mov	r0, r5
 800e630:	b00c      	add	sp, #48	@ 0x30
 800e632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e636:	8933      	ldrh	r3, [r6, #8]
 800e638:	7af2      	ldrb	r2, [r6, #11]
 800e63a:	8622      	strh	r2, [r4, #48]	@ 0x30
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d00c      	beq.n	800e65a <acc_translation_a121_subsweep_translate+0x172>
 800e640:	3b02      	subs	r3, #2
 800e642:	2201      	movs	r2, #1
 800e644:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 800e646:	85e2      	strh	r2, [r4, #46]	@ 0x2e
 800e648:	7b73      	ldrb	r3, [r6, #13]
 800e64a:	80e3      	strh	r3, [r4, #6]
 800e64c:	4628      	mov	r0, r5
 800e64e:	f083 0301 	eor.w	r3, r3, #1
 800e652:	8663      	strh	r3, [r4, #50]	@ 0x32
 800e654:	b00c      	add	sp, #48	@ 0x30
 800e656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e65a:	2300      	movs	r3, #0
 800e65c:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 800e65e:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 800e660:	e7f2      	b.n	800e648 <acc_translation_a121_subsweep_translate+0x160>
 800e662:	bf00      	nop
 800e664:	200009dc 	.word	0x200009dc
 800e668:	08013ad8 	.word	0x08013ad8
 800e66c:	080139f8 	.word	0x080139f8
 800e670:	08013b14 	.word	0x08013b14
 800e674:	08013ae8 	.word	0x08013ae8
 800e678:	08013d08 	.word	0x08013d08
 800e67c:	08013b4c 	.word	0x08013b4c
 800e680:	08013b3c 	.word	0x08013b3c
 800e684:	08013b64 	.word	0x08013b64
 800e688:	08013b84 	.word	0x08013b84

0800e68c <acc_translation_a121_point_to_coarse>:
 800e68c:	2800      	cmp	r0, #0
 800e68e:	db04      	blt.n	800e69a <acc_translation_a121_point_to_coarse+0xe>
 800e690:	b209      	sxth	r1, r1
 800e692:	fb90 f0f1 	sdiv	r0, r0, r1
 800e696:	b200      	sxth	r0, r0
 800e698:	4770      	bx	lr
 800e69a:	43c3      	mvns	r3, r0
 800e69c:	b208      	sxth	r0, r1
 800e69e:	fb93 f0f0 	sdiv	r0, r3, r0
 800e6a2:	43c0      	mvns	r0, r0
 800e6a4:	b200      	sxth	r0, r0
 800e6a6:	4770      	bx	lr

0800e6a8 <acc_translation_a121_point_in_coarse>:
 800e6a8:	fb90 f3f1 	sdiv	r3, r0, r1
 800e6ac:	fb03 0011 	mls	r0, r3, r1, r0
 800e6b0:	0403      	lsls	r3, r0, #16
 800e6b2:	bf48      	it	mi
 800e6b4:	1840      	addmi	r0, r0, r1
 800e6b6:	b280      	uxth	r0, r0
 800e6b8:	4770      	bx	lr
 800e6ba:	bf00      	nop

0800e6bc <acc_translation_a121_calculate_minimum_sweep_period>:
 800e6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6c0:	f8b1 31ac 	ldrh.w	r3, [r1, #428]	@ 0x1ac
 800e6c4:	f8b1 11a4 	ldrh.w	r1, [r1, #420]	@ 0x1a4
 800e6c8:	ed2d 8b0a 	vpush	{d8-d12}
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	b088      	sub	sp, #32
 800e6d0:	4680      	mov	r8, r0
 800e6d2:	4617      	mov	r7, r2
 800e6d4:	f000 80b9 	beq.w	800e84a <acc_translation_a121_calculate_minimum_sweep_period+0x18e>
 800e6d8:	ee07 1a90 	vmov	s15, r1
 800e6dc:	eddf 9a5f 	vldr	s19, [pc, #380]	@ 800e85c <acc_translation_a121_calculate_minimum_sweep_period+0x1a0>
 800e6e0:	eef8 aa67 	vcvt.f32.u32	s21, s15
 800e6e4:	eeb7 9a08 	vmov.f32	s18, #120	@ 0x3fc00000  1.5
 800e6e8:	eef2 ca02 	vmov.f32	s25, #34	@ 0x41100000  9.0
 800e6ec:	f7ff fba2 	bl	800de34 <get_pll_freq>
 800e6f0:	f898 3050 	ldrb.w	r3, [r8, #80]	@ 0x50
 800e6f4:	2b02      	cmp	r3, #2
 800e6f6:	eef0 8a40 	vmov.f32	s17, s0
 800e6fa:	f200 8099 	bhi.w	800e830 <acc_translation_a121_calculate_minimum_sweep_period+0x174>
 800e6fe:	4958      	ldr	r1, [pc, #352]	@ (800e860 <acc_translation_a121_calculate_minimum_sweep_period+0x1a4>)
 800e700:	4a58      	ldr	r2, [pc, #352]	@ (800e864 <acc_translation_a121_calculate_minimum_sweep_period+0x1a8>)
 800e702:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800e706:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e70a:	edd1 ba00 	vldr	s23, [r1]
 800e70e:	ed93 ca00 	vldr	s24, [r3]
 800e712:	f04f 0901 	mov.w	r9, #1
 800e716:	f898 304e 	ldrb.w	r3, [r8, #78]	@ 0x4e
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d068      	beq.n	800e7f0 <acc_translation_a121_calculate_minimum_sweep_period+0x134>
 800e71e:	2500      	movs	r5, #0
 800e720:	ed9f 8a51 	vldr	s16, [pc, #324]	@ 800e868 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800e724:	4e51      	ldr	r6, [pc, #324]	@ (800e86c <acc_translation_a121_calculate_minimum_sweep_period+0x1b0>)
 800e726:	ed9f ba52 	vldr	s22, [pc, #328]	@ 800e870 <acc_translation_a121_calculate_minimum_sweep_period+0x1b4>
 800e72a:	ed9f aa52 	vldr	s20, [pc, #328]	@ 800e874 <acc_translation_a121_calculate_minimum_sweep_period+0x1b8>
 800e72e:	462c      	mov	r4, r5
 800e730:	e03d      	b.n	800e7ae <acc_translation_a121_calculate_minimum_sweep_period+0xf2>
 800e732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e736:	ee07 3a90 	vmov	s15, r3
 800e73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e73e:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 800e742:	4444      	add	r4, r8
 800e744:	f10a 0302 	add.w	r3, sl, #2
 800e748:	8920      	ldrh	r0, [r4, #8]
 800e74a:	88a1      	ldrh	r1, [r4, #4]
 800e74c:	f898 204e 	ldrb.w	r2, [r8, #78]	@ 0x4e
 800e750:	005b      	lsls	r3, r3, #1
 800e752:	b29b      	uxth	r3, r3
 800e754:	fb00 3303 	mla	r3, r0, r3, r3
 800e758:	3302      	adds	r3, #2
 800e75a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 800e75e:	005b      	lsls	r3, r3, #1
 800e760:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800e764:	b29b      	uxth	r3, r3
 800e766:	ee87 6a0a 	vdiv.f32	s12, s14, s20
 800e76a:	f10a 0a18 	add.w	sl, sl, #24
 800e76e:	fa1f fa8a 	uxth.w	sl, sl
 800e772:	3501      	adds	r5, #1
 800e774:	b2ec      	uxtb	r4, r5
 800e776:	42a2      	cmp	r2, r4
 800e778:	ee07 3a90 	vmov	s15, r3
 800e77c:	ee07 aa10 	vmov	s14, sl
 800e780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e784:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e788:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800e78c:	eec7 5a06 	vdiv.f32	s11, s14, s12
 800e790:	ee07 1a90 	vmov	s15, r1
 800e794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e79c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800e7a0:	ee77 7aa9 	vadd.f32	s15, s15, s19
 800e7a4:	ee77 7a89 	vadd.f32	s15, s15, s18
 800e7a8:	ee38 8a27 	vadd.f32	s16, s16, s15
 800e7ac:	d922      	bls.n	800e7f4 <acc_translation_a121_calculate_minimum_sweep_period+0x138>
 800e7ae:	eb08 1304 	add.w	r3, r8, r4, lsl #4
 800e7b2:	466a      	mov	r2, sp
 800e7b4:	2100      	movs	r1, #0
 800e7b6:	7bd8      	ldrb	r0, [r3, #15]
 800e7b8:	f7ff fb4e 	bl	800de58 <acc_translation_a121_profile_to_pulse_params>
 800e7bc:	0124      	lsls	r4, r4, #4
 800e7be:	4a2e      	ldr	r2, [pc, #184]	@ (800e878 <acc_translation_a121_calculate_minimum_sweep_period+0x1bc>)
 800e7c0:	492e      	ldr	r1, [pc, #184]	@ (800e87c <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 800e7c2:	4682      	mov	sl, r0
 800e7c4:	b910      	cbnz	r0, 800e7cc <acc_translation_a121_calculate_minimum_sweep_period+0x110>
 800e7c6:	6933      	ldr	r3, [r6, #16]
 800e7c8:	4798      	blx	r3
 800e7ca:	46d1      	mov	r9, sl
 800e7cc:	eb08 0304 	add.w	r3, r8, r4
 800e7d0:	4a2b      	ldr	r2, [pc, #172]	@ (800e880 <acc_translation_a121_calculate_minimum_sweep_period+0x1c4>)
 800e7d2:	7b9b      	ldrb	r3, [r3, #14]
 800e7d4:	f8bd a01e 	ldrh.w	sl, [sp, #30]
 800e7d8:	2b05      	cmp	r3, #5
 800e7da:	d9aa      	bls.n	800e732 <acc_translation_a121_calculate_minimum_sweep_period+0x76>
 800e7dc:	6933      	ldr	r3, [r6, #16]
 800e7de:	4a29      	ldr	r2, [pc, #164]	@ (800e884 <acc_translation_a121_calculate_minimum_sweep_period+0x1c8>)
 800e7e0:	4926      	ldr	r1, [pc, #152]	@ (800e87c <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	4798      	blx	r3
 800e7e6:	f04f 0900 	mov.w	r9, #0
 800e7ea:	eef0 7a4b 	vmov.f32	s15, s22
 800e7ee:	e7a6      	b.n	800e73e <acc_translation_a121_calculate_minimum_sweep_period+0x82>
 800e7f0:	ed9f 8a1d 	vldr	s16, [pc, #116]	@ 800e868 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800e7f4:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800e888 <acc_translation_a121_calculate_minimum_sweep_period+0x1cc>
 800e7f8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800e874 <acc_translation_a121_calculate_minimum_sweep_period+0x1b8>
 800e7fc:	ee88 6aa7 	vdiv.f32	s12, s17, s15
 800e800:	4648      	mov	r0, r9
 800e802:	eef1 7a0c 	vmov.f32	s15, #28	@ 0x40e00000  7.0
 800e806:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800e80a:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800e80e:	ee7b ba8c 	vadd.f32	s23, s23, s24
 800e812:	eeca 7a87 	vdiv.f32	s15, s21, s14
 800e816:	ee77 caac 	vadd.f32	s25, s15, s25
 800e81a:	ee3c 8a88 	vadd.f32	s16, s25, s16
 800e81e:	ee78 ba2b 	vadd.f32	s23, s16, s23
 800e822:	edc7 ba00 	vstr	s23, [r7]
 800e826:	b008      	add	sp, #32
 800e828:	ecbd 8b0a 	vpop	{d8-d12}
 800e82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e830:	4b0e      	ldr	r3, [pc, #56]	@ (800e86c <acc_translation_a121_calculate_minimum_sweep_period+0x1b0>)
 800e832:	ed9f ca0d 	vldr	s24, [pc, #52]	@ 800e868 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800e836:	4a15      	ldr	r2, [pc, #84]	@ (800e88c <acc_translation_a121_calculate_minimum_sweep_period+0x1d0>)
 800e838:	691b      	ldr	r3, [r3, #16]
 800e83a:	4910      	ldr	r1, [pc, #64]	@ (800e87c <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 800e83c:	2000      	movs	r0, #0
 800e83e:	4798      	blx	r3
 800e840:	eef0 ba4c 	vmov.f32	s23, s24
 800e844:	f04f 0900 	mov.w	r9, #0
 800e848:	e765      	b.n	800e716 <acc_translation_a121_calculate_minimum_sweep_period+0x5a>
 800e84a:	ed9f 9a07 	vldr	s18, [pc, #28]	@ 800e868 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800e84e:	eef0 9a49 	vmov.f32	s19, s18
 800e852:	eef0 ca49 	vmov.f32	s25, s18
 800e856:	eef0 aa49 	vmov.f32	s21, s18
 800e85a:	e747      	b.n	800e6ec <acc_translation_a121_calculate_minimum_sweep_period+0x30>
 800e85c:	419d999a 	.word	0x419d999a
 800e860:	08013d1c 	.word	0x08013d1c
 800e864:	08013d28 	.word	0x08013d28
 800e868:	00000000 	.word	0x00000000
 800e86c:	200009dc 	.word	0x200009dc
 800e870:	43000000 	.word	0x43000000
 800e874:	49742400 	.word	0x49742400
 800e878:	08013b3c 	.word	0x08013b3c
 800e87c:	080139f8 	.word	0x080139f8
 800e880:	08013cfc 	.word	0x08013cfc
 800e884:	08013a94 	.word	0x08013a94
 800e888:	43200000 	.word	0x43200000
 800e88c:	08013bb0 	.word	0x08013bb0

0800e890 <acc_translation_a121_translate>:
 800e890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e894:	ed2d 8b06 	vpush	{d8-d10}
 800e898:	4605      	mov	r5, r0
 800e89a:	b091      	sub	sp, #68	@ 0x44
 800e89c:	f890 004e 	ldrb.w	r0, [r0, #78]	@ 0x4e
 800e8a0:	f895 404c 	ldrb.w	r4, [r5, #76]	@ 0x4c
 800e8a4:	9408      	str	r4, [sp, #32]
 800e8a6:	2804      	cmp	r0, #4
 800e8a8:	f8b5 4048 	ldrh.w	r4, [r5, #72]	@ 0x48
 800e8ac:	9406      	str	r4, [sp, #24]
 800e8ae:	468b      	mov	fp, r1
 800e8b0:	4614      	mov	r4, r2
 800e8b2:	4698      	mov	r8, r3
 800e8b4:	f200 8128 	bhi.w	800eb08 <acc_translation_a121_translate+0x278>
 800e8b8:	edd5 7a10 	vldr	s15, [r5, #64]	@ 0x40
 800e8bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c4:	f100 8169 	bmi.w	800eb9a <acc_translation_a121_translate+0x30a>
 800e8c8:	f895 3056 	ldrb.w	r3, [r5, #86]	@ 0x56
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	f040 81a5 	bne.w	800ec1c <acc_translation_a121_translate+0x38c>
 800e8d2:	f7fe f92b 	bl	800cb2c <acc_rss_integration_get_sensor_reference_frequency>
 800e8d6:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800e8da:	ee07 0a10 	vmov	s14, r0
 800e8de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8e6:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 800e8ea:	f340 81d4 	ble.w	800ec96 <acc_translation_a121_translate+0x406>
 800e8ee:	eec8 8a27 	vdiv.f32	s17, s16, s15
 800e8f2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e8f6:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800e8fa:	f100 81e3 	bmi.w	800ecc4 <acc_translation_a121_translate+0x434>
 800e8fe:	ee18 0a90 	vmov	r0, s17
 800e902:	f7f1 fcad 	bl	8000260 <__aeabi_f2ulz>
 800e906:	2901      	cmp	r1, #1
 800e908:	bf08      	it	eq
 800e90a:	2800      	cmpeq	r0, #0
 800e90c:	f080 81da 	bcs.w	800ecc4 <acc_translation_a121_translate+0x434>
 800e910:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800e914:	2b00      	cmp	r3, #0
 800e916:	f000 81a9 	beq.w	800ec6c <acc_translation_a121_translate+0x3dc>
 800e91a:	4bc9      	ldr	r3, [pc, #804]	@ (800ec40 <acc_translation_a121_translate+0x3b0>)
 800e91c:	4ac9      	ldr	r2, [pc, #804]	@ (800ec44 <acc_translation_a121_translate+0x3b4>)
 800e91e:	691b      	ldr	r3, [r3, #16]
 800e920:	49c9      	ldr	r1, [pc, #804]	@ (800ec48 <acc_translation_a121_translate+0x3b8>)
 800e922:	2000      	movs	r0, #0
 800e924:	4798      	blx	r3
 800e926:	9b06      	ldr	r3, [sp, #24]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	f000 810a 	beq.w	800eb42 <acc_translation_a121_translate+0x2b2>
 800e92e:	f895 304e 	ldrb.w	r3, [r5, #78]	@ 0x4e
 800e932:	9304      	str	r3, [sp, #16]
 800e934:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800e938:	2b00      	cmp	r3, #0
 800e93a:	f000 8108 	beq.w	800eb4e <acc_translation_a121_translate+0x2be>
 800e93e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e940:	2300      	movs	r3, #0
 800e942:	7113      	strb	r3, [r2, #4]
 800e944:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800e948:	f1bb 0f00 	cmp.w	fp, #0
 800e94c:	f000 82da 	beq.w	800ef04 <acc_translation_a121_translate+0x674>
 800e950:	4658      	mov	r0, fp
 800e952:	4621      	mov	r1, r4
 800e954:	f7ff faf6 	bl	800df44 <acc_translation_a121_set_calibration_params>
 800e958:	2200      	movs	r2, #0
 800e95a:	2301      	movs	r3, #1
 800e95c:	4617      	mov	r7, r2
 800e95e:	f8a8 2002 	strh.w	r2, [r8, #2]
 800e962:	9202      	str	r2, [sp, #8]
 800e964:	4610      	mov	r0, r2
 800e966:	f8a8 300a 	strh.w	r3, [r8, #10]
 800e96a:	f04f 0c02 	mov.w	ip, #2
 800e96e:	f8b4 11ac 	ldrh.w	r1, [r4, #428]	@ 0x1ac
 800e972:	2901      	cmp	r1, #1
 800e974:	d104      	bne.n	800e980 <acc_translation_a121_translate+0xf0>
 800e976:	9902      	ldr	r1, [sp, #8]
 800e978:	9e06      	ldr	r6, [sp, #24]
 800e97a:	fb06 f101 	mul.w	r1, r6, r1
 800e97e:	9102      	str	r1, [sp, #8]
 800e980:	f8b5 1054 	ldrh.w	r1, [r5, #84]	@ 0x54
 800e984:	f895 e052 	ldrb.w	lr, [r5, #82]	@ 0x52
 800e988:	f895 9053 	ldrb.w	r9, [r5, #83]	@ 0x53
 800e98c:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800e990:	f8a4 e19e 	strh.w	lr, [r4, #414]	@ 0x19e
 800e994:	ea4f 0a51 	mov.w	sl, r1, lsr #1
 800e998:	3903      	subs	r1, #3
 800e99a:	9103      	str	r1, [sp, #12]
 800e99c:	9902      	ldr	r1, [sp, #8]
 800e99e:	f8a4 71a0 	strh.w	r7, [r4, #416]	@ 0x1a0
 800e9a2:	f64f 7eff 	movw	lr, #65535	@ 0xffff
 800e9a6:	4571      	cmp	r1, lr
 800e9a8:	bf28      	it	cs
 800e9aa:	4671      	movcs	r1, lr
 800e9ac:	468e      	mov	lr, r1
 800e9ae:	f1aa 0a03 	sub.w	sl, sl, #3
 800e9b2:	9903      	ldr	r1, [sp, #12]
 800e9b4:	f8a4 a1aa 	strh.w	sl, [r4, #426]	@ 0x1aa
 800e9b8:	f089 0901 	eor.w	r9, r9, #1
 800e9bc:	f8a4 91a6 	strh.w	r9, [r4, #422]	@ 0x1a6
 800e9c0:	f8a4 11a8 	strh.w	r1, [r4, #424]	@ 0x1a8
 800e9c4:	f8a4 e1a4 	strh.w	lr, [r4, #420]	@ 0x1a4
 800e9c8:	f8a8 200c 	strh.w	r2, [r8, #12]
 800e9cc:	f8a8 3004 	strh.w	r3, [r8, #4]
 800e9d0:	f8a8 c006 	strh.w	ip, [r8, #6]
 800e9d4:	2e00      	cmp	r6, #0
 800e9d6:	f000 811c 	beq.w	800ec12 <acc_translation_a121_translate+0x382>
 800e9da:	3341      	adds	r3, #65	@ 0x41
 800e9dc:	2240      	movs	r2, #64	@ 0x40
 800e9de:	f8a8 3000 	strh.w	r3, [r8]
 800e9e2:	f8a8 2008 	strh.w	r2, [r8, #8]
 800e9e6:	2601      	movs	r6, #1
 800e9e8:	f8a4 61c0 	strh.w	r6, [r4, #448]	@ 0x1c0
 800e9ec:	f1bb 0f00 	cmp.w	fp, #0
 800e9f0:	d003      	beq.n	800e9fa <acc_translation_a121_translate+0x16a>
 800e9f2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800e9f6:	f8a4 31c2 	strh.w	r3, [r4, #450]	@ 0x1c2
 800e9fa:	2800      	cmp	r0, #0
 800e9fc:	f040 80e5 	bne.w	800ebca <acc_translation_a121_translate+0x33a>
 800ea00:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ea02:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800ea06:	2300      	movs	r3, #0
 800ea08:	6013      	str	r3, [r2, #0]
 800ea0a:	9b08      	ldr	r3, [sp, #32]
 800ea0c:	f8a4 31b2 	strh.w	r3, [r4, #434]	@ 0x1b2
 800ea10:	9b06      	ldr	r3, [sp, #24]
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	f240 80f7 	bls.w	800ec06 <acc_translation_a121_translate+0x376>
 800ea18:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	3b02      	subs	r3, #2
 800ea20:	f8a4 31ae 	strh.w	r3, [r4, #430]	@ 0x1ae
 800ea24:	f8a4 21b0 	strh.w	r2, [r4, #432]	@ 0x1b0
 800ea28:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 800ec4c <acc_translation_a121_translate+0x3bc>
 800ea2c:	ed9f 6a88 	vldr	s12, [pc, #544]	@ 800ec50 <acc_translation_a121_translate+0x3c0>
 800ea30:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800ea34:	ee28 7a07 	vmul.f32	s14, s16, s14
 800ea38:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ea3c:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800ea40:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800ea44:	eec8 7a06 	vdiv.f32	s15, s16, s12
 800ea48:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800ea4c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ea50:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ea54:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ea58:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ea5c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800ea60:	ee17 2a10 	vmov	r2, s14
 800ea64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea68:	ee16 3a90 	vmov	r3, s13
 800ea6c:	eef5 5a40 	vcmp.f32	s11, #0.0
 800ea70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea74:	f8a4 21b6 	strh.w	r2, [r4, #438]	@ 0x1b6
 800ea78:	ee17 2a90 	vmov	r2, s15
 800ea7c:	f8a4 31b8 	strh.w	r3, [r4, #440]	@ 0x1b8
 800ea80:	bf14      	ite	ne
 800ea82:	2301      	movne	r3, #1
 800ea84:	2300      	moveq	r3, #0
 800ea86:	f8a4 21b4 	strh.w	r2, [r4, #436]	@ 0x1b4
 800ea8a:	8723      	strh	r3, [r4, #56]	@ 0x38
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	f000 808b 	beq.w	800eba8 <acc_translation_a121_translate+0x318>
 800ea92:	eef5 5a40 	vcmp.f32	s11, #0.0
 800ea96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea9a:	d00a      	beq.n	800eab2 <acc_translation_a121_translate+0x222>
 800ea9c:	eec8 7a25 	vdiv.f32	s15, s16, s11
 800eaa0:	ee37 6a86 	vadd.f32	s12, s15, s12
 800eaa4:	eefc 7ac6 	vcvt.u32.f32	s15, s12
 800eaa8:	ee17 3a90 	vmov	r3, s15
 800eaac:	0c1a      	lsrs	r2, r3, #16
 800eaae:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 800eab0:	8762      	strh	r2, [r4, #58]	@ 0x3a
 800eab2:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800eab6:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800eaba:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 800eabe:	8623      	strh	r3, [r4, #48]	@ 0x30
 800eac0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800eac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eac8:	bf14      	ite	ne
 800eaca:	2301      	movne	r3, #1
 800eacc:	2300      	moveq	r3, #0
 800eace:	8662      	strh	r2, [r4, #50]	@ 0x32
 800ead0:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800ead2:	d006      	beq.n	800eae2 <acc_translation_a121_translate+0x252>
 800ead4:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800ead8:	ee17 3a90 	vmov	r3, s15
 800eadc:	0c1a      	lsrs	r2, r3, #16
 800eade:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 800eae0:	85a2      	strh	r2, [r4, #44]	@ 0x2c
 800eae2:	f895 3051 	ldrb.w	r3, [r5, #81]	@ 0x51
 800eae6:	f8a4 31be 	strh.w	r3, [r4, #446]	@ 0x1be
 800eaea:	2101      	movs	r1, #1
 800eaec:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800eaf0:	f640 0301 	movw	r3, #2049	@ 0x801
 800eaf4:	84a1      	strh	r1, [r4, #36]	@ 0x24
 800eaf6:	f8a4 21ba 	strh.w	r2, [r4, #442]	@ 0x1ba
 800eafa:	f8a4 31bc 	strh.w	r3, [r4, #444]	@ 0x1bc
 800eafe:	b011      	add	sp, #68	@ 0x44
 800eb00:	ecbd 8b06 	vpop	{d8-d10}
 800eb04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb08:	4b4d      	ldr	r3, [pc, #308]	@ (800ec40 <acc_translation_a121_translate+0x3b0>)
 800eb0a:	4a52      	ldr	r2, [pc, #328]	@ (800ec54 <acc_translation_a121_translate+0x3c4>)
 800eb0c:	691b      	ldr	r3, [r3, #16]
 800eb0e:	494e      	ldr	r1, [pc, #312]	@ (800ec48 <acc_translation_a121_translate+0x3b8>)
 800eb10:	2000      	movs	r0, #0
 800eb12:	4798      	blx	r3
 800eb14:	f7fe f80a 	bl	800cb2c <acc_rss_integration_get_sensor_reference_frequency>
 800eb18:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800eb1c:	ee07 0a10 	vmov	s14, r0
 800eb20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb28:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 800eb2c:	dd32      	ble.n	800eb94 <acc_translation_a121_translate+0x304>
 800eb2e:	eec8 8a27 	vdiv.f32	s17, s16, s15
 800eb32:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800eb36:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800eb3a:	9b06      	ldr	r3, [sp, #24]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	f47f aef6 	bne.w	800e92e <acc_translation_a121_translate+0x9e>
 800eb42:	9304      	str	r3, [sp, #16]
 800eb44:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f47f aef8 	bne.w	800e93e <acc_translation_a121_translate+0xae>
 800eb4e:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 800eb52:	2a02      	cmp	r2, #2
 800eb54:	f040 80ef 	bne.w	800ed36 <acc_translation_a121_translate+0x4a6>
 800eb58:	f895 204e 	ldrb.w	r2, [r5, #78]	@ 0x4e
 800eb5c:	2a01      	cmp	r2, #1
 800eb5e:	d069      	beq.n	800ec34 <acc_translation_a121_translate+0x3a4>
 800eb60:	2200      	movs	r2, #0
 800eb62:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800eb64:	7102      	strb	r2, [r0, #4]
 800eb66:	f8a4 21ac 	strh.w	r2, [r4, #428]	@ 0x1ac
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	f43f aeec 	beq.w	800e948 <acc_translation_a121_translate+0xb8>
 800eb70:	f895 304f 	ldrb.w	r3, [r5, #79]	@ 0x4f
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	f000 814f 	beq.w	800ee18 <acc_translation_a121_translate+0x588>
 800eb7a:	2b02      	cmp	r3, #2
 800eb7c:	f000 80f3 	beq.w	800ed66 <acc_translation_a121_translate+0x4d6>
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	f000 80dd 	beq.w	800ed40 <acc_translation_a121_translate+0x4b0>
 800eb86:	4b2e      	ldr	r3, [pc, #184]	@ (800ec40 <acc_translation_a121_translate+0x3b0>)
 800eb88:	4a33      	ldr	r2, [pc, #204]	@ (800ec58 <acc_translation_a121_translate+0x3c8>)
 800eb8a:	691b      	ldr	r3, [r3, #16]
 800eb8c:	492e      	ldr	r1, [pc, #184]	@ (800ec48 <acc_translation_a121_translate+0x3b8>)
 800eb8e:	2000      	movs	r0, #0
 800eb90:	4798      	blx	r3
 800eb92:	e6d9      	b.n	800e948 <acc_translation_a121_translate+0xb8>
 800eb94:	eddf 8a33 	vldr	s17, [pc, #204]	@ 800ec64 <acc_translation_a121_translate+0x3d4>
 800eb98:	e7cf      	b.n	800eb3a <acc_translation_a121_translate+0x2aa>
 800eb9a:	4b29      	ldr	r3, [pc, #164]	@ (800ec40 <acc_translation_a121_translate+0x3b0>)
 800eb9c:	4a2f      	ldr	r2, [pc, #188]	@ (800ec5c <acc_translation_a121_translate+0x3cc>)
 800eb9e:	691b      	ldr	r3, [r3, #16]
 800eba0:	4929      	ldr	r1, [pc, #164]	@ (800ec48 <acc_translation_a121_translate+0x3b8>)
 800eba2:	2000      	movs	r0, #0
 800eba4:	4798      	blx	r3
 800eba6:	e7b5      	b.n	800eb14 <acc_translation_a121_translate+0x284>
 800eba8:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800ebac:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800ebb0:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 800ebb4:	8623      	strh	r3, [r4, #48]	@ 0x30
 800ebb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ebba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebbe:	bf14      	ite	ne
 800ebc0:	2301      	movne	r3, #1
 800ebc2:	2300      	moveq	r3, #0
 800ebc4:	8662      	strh	r2, [r4, #50]	@ 0x32
 800ebc6:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800ebc8:	e78b      	b.n	800eae2 <acc_translation_a121_translate+0x252>
 800ebca:	f895 304d 	ldrb.w	r3, [r5, #77]	@ 0x4d
 800ebce:	2600      	movs	r6, #0
 800ebd0:	a80b      	add	r0, sp, #44	@ 0x2c
 800ebd2:	f504 71d1 	add.w	r1, r4, #418	@ 0x1a2
 800ebd6:	e9cd 630e 	strd	r6, r3, [sp, #56]	@ 0x38
 800ebda:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 800ebde:	f88d 602c 	strb.w	r6, [sp, #44]	@ 0x2c
 800ebe2:	f000 fad9 	bl	800f198 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>
 800ebe6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ebe8:	2300      	movs	r3, #0
 800ebea:	6013      	str	r3, [r2, #0]
 800ebec:	b110      	cbz	r0, 800ebf4 <acc_translation_a121_translate+0x364>
 800ebee:	9b04      	ldr	r3, [sp, #16]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d16e      	bne.n	800ecd2 <acc_translation_a121_translate+0x442>
 800ebf4:	9b08      	ldr	r3, [sp, #32]
 800ebf6:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800ebfa:	f8a4 31b2 	strh.w	r3, [r4, #434]	@ 0x1b2
 800ebfe:	9b06      	ldr	r3, [sp, #24]
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	f63f af09 	bhi.w	800ea18 <acc_translation_a121_translate+0x188>
 800ec06:	2300      	movs	r3, #0
 800ec08:	f8a4 31ae 	strh.w	r3, [r4, #430]	@ 0x1ae
 800ec0c:	f8a4 31b0 	strh.w	r3, [r4, #432]	@ 0x1b0
 800ec10:	e70a      	b.n	800ea28 <acc_translation_a121_translate+0x198>
 800ec12:	f8a8 6008 	strh.w	r6, [r8, #8]
 800ec16:	f8a8 c000 	strh.w	ip, [r8]
 800ec1a:	e6e5      	b.n	800e9e8 <acc_translation_a121_translate+0x158>
 800ec1c:	f895 304b 	ldrb.w	r3, [r5, #75]	@ 0x4b
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	f43f ae56 	beq.w	800e8d2 <acc_translation_a121_translate+0x42>
 800ec26:	4b06      	ldr	r3, [pc, #24]	@ (800ec40 <acc_translation_a121_translate+0x3b0>)
 800ec28:	4a0d      	ldr	r2, [pc, #52]	@ (800ec60 <acc_translation_a121_translate+0x3d0>)
 800ec2a:	691b      	ldr	r3, [r3, #16]
 800ec2c:	4906      	ldr	r1, [pc, #24]	@ (800ec48 <acc_translation_a121_translate+0x3b8>)
 800ec2e:	2000      	movs	r0, #0
 800ec30:	4798      	blx	r3
 800ec32:	e76f      	b.n	800eb14 <acc_translation_a121_translate+0x284>
 800ec34:	7be9      	ldrb	r1, [r5, #15]
 800ec36:	3901      	subs	r1, #1
 800ec38:	2901      	cmp	r1, #1
 800ec3a:	d892      	bhi.n	800eb62 <acc_translation_a121_translate+0x2d2>
 800ec3c:	e790      	b.n	800eb60 <acc_translation_a121_translate+0x2d0>
 800ec3e:	bf00      	nop
 800ec40:	200009dc 	.word	0x200009dc
 800ec44:	08013c40 	.word	0x08013c40
 800ec48:	080139f8 	.word	0x080139f8
 800ec4c:	43960000 	.word	0x43960000
 800ec50:	49742400 	.word	0x49742400
 800ec54:	08013bd0 	.word	0x08013bd0
 800ec58:	08013cbc 	.word	0x08013cbc
 800ec5c:	08013bec 	.word	0x08013bec
 800ec60:	08013c00 	.word	0x08013c00
 800ec64:	00000000 	.word	0x00000000
 800ec68:	ed5f 8a02 	vldr	s17, [pc, #-8]	@ 800ec64 <acc_translation_a121_translate+0x3d4>
 800ec6c:	f895 104f 	ldrb.w	r1, [r5, #79]	@ 0x4f
 800ec70:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 800ec74:	9806      	ldr	r0, [sp, #24]
 800ec76:	2800      	cmp	r0, #0
 800ec78:	f000 8161 	beq.w	800ef3e <acc_translation_a121_translate+0x6ae>
 800ec7c:	f895 004e 	ldrb.w	r0, [r5, #78]	@ 0x4e
 800ec80:	9004      	str	r0, [sp, #16]
 800ec82:	4291      	cmp	r1, r2
 800ec84:	f240 814b 	bls.w	800ef1e <acc_translation_a121_translate+0x68e>
 800ec88:	4bb4      	ldr	r3, [pc, #720]	@ (800ef5c <acc_translation_a121_translate+0x6cc>)
 800ec8a:	4ab5      	ldr	r2, [pc, #724]	@ (800ef60 <acc_translation_a121_translate+0x6d0>)
 800ec8c:	691b      	ldr	r3, [r3, #16]
 800ec8e:	49b5      	ldr	r1, [pc, #724]	@ (800ef64 <acc_translation_a121_translate+0x6d4>)
 800ec90:	2000      	movs	r0, #0
 800ec92:	4798      	blx	r3
 800ec94:	e756      	b.n	800eb44 <acc_translation_a121_translate+0x2b4>
 800ec96:	d413      	bmi.n	800ecc0 <acc_translation_a121_translate+0x430>
 800ec98:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d0e3      	beq.n	800ec68 <acc_translation_a121_translate+0x3d8>
 800eca0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800eca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca8:	d107      	bne.n	800ecba <acc_translation_a121_translate+0x42a>
 800ecaa:	edd5 7a10 	vldr	s15, [r5, #64]	@ 0x40
 800ecae:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ecb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb6:	f040 811b 	bne.w	800eef0 <acc_translation_a121_translate+0x660>
 800ecba:	eddf 8aab 	vldr	s17, [pc, #684]	@ 800ef68 <acc_translation_a121_translate+0x6d8>
 800ecbe:	e62c      	b.n	800e91a <acc_translation_a121_translate+0x8a>
 800ecc0:	eddf 8aa9 	vldr	s17, [pc, #676]	@ 800ef68 <acc_translation_a121_translate+0x6d8>
 800ecc4:	4ba5      	ldr	r3, [pc, #660]	@ (800ef5c <acc_translation_a121_translate+0x6cc>)
 800ecc6:	4aa9      	ldr	r2, [pc, #676]	@ (800ef6c <acc_translation_a121_translate+0x6dc>)
 800ecc8:	691b      	ldr	r3, [r3, #16]
 800ecca:	49a6      	ldr	r1, [pc, #664]	@ (800ef64 <acc_translation_a121_translate+0x6d4>)
 800eccc:	2000      	movs	r0, #0
 800ecce:	4798      	blx	r3
 800ecd0:	e733      	b.n	800eb3a <acc_translation_a121_translate+0x2aa>
 800ecd2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ecd4:	4621      	mov	r1, r4
 800ecd6:	4628      	mov	r0, r5
 800ecd8:	f7ff fcf0 	bl	800e6bc <acc_translation_a121_calculate_minimum_sweep_period>
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	d089      	beq.n	800ebf4 <acc_translation_a121_translate+0x364>
 800ece0:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 800ece4:	eddf 7aa2 	vldr	s15, [pc, #648]	@ 800ef70 <acc_translation_a121_translate+0x6e0>
 800ece8:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 800ef74 <acc_translation_a121_translate+0x6e4>
 800ecec:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800ecf0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ecf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecf6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800ecfa:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ecfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed06:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 800ed0a:	eef4 5ac7 	vcmpe.f32	s11, s14
 800ed0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed12:	ed83 7a00 	vstr	s14, [r3]
 800ed16:	f77f ae78 	ble.w	800ea0a <acc_translation_a121_translate+0x17a>
 800ed1a:	4b90      	ldr	r3, [pc, #576]	@ (800ef5c <acc_translation_a121_translate+0x6cc>)
 800ed1c:	4a96      	ldr	r2, [pc, #600]	@ (800ef78 <acc_translation_a121_translate+0x6e8>)
 800ed1e:	691f      	ldr	r7, [r3, #16]
 800ed20:	4990      	ldr	r1, [pc, #576]	@ (800ef64 <acc_translation_a121_translate+0x6d4>)
 800ed22:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800ed26:	4630      	mov	r0, r6
 800ed28:	ee17 3a90 	vmov	r3, s15
 800ed2c:	47b8      	blx	r7
 800ed2e:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800ed32:	4630      	mov	r0, r6
 800ed34:	e669      	b.n	800ea0a <acc_translation_a121_translate+0x17a>
 800ed36:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ed38:	7113      	strb	r3, [r2, #4]
 800ed3a:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800ed3e:	e603      	b.n	800e948 <acc_translation_a121_translate+0xb8>
 800ed40:	2301      	movs	r3, #1
 800ed42:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800ed44:	8523      	strh	r3, [r4, #40]	@ 0x28
 800ed46:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d012      	beq.n	800ed74 <acc_translation_a121_translate+0x4e4>
 800ed4e:	2b02      	cmp	r3, #2
 800ed50:	f000 80b7 	beq.w	800eec2 <acc_translation_a121_translate+0x632>
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d063      	beq.n	800ee20 <acc_translation_a121_translate+0x590>
 800ed58:	4b80      	ldr	r3, [pc, #512]	@ (800ef5c <acc_translation_a121_translate+0x6cc>)
 800ed5a:	4a88      	ldr	r2, [pc, #544]	@ (800ef7c <acc_translation_a121_translate+0x6ec>)
 800ed5c:	691b      	ldr	r3, [r3, #16]
 800ed5e:	4981      	ldr	r1, [pc, #516]	@ (800ef64 <acc_translation_a121_translate+0x6d4>)
 800ed60:	2000      	movs	r0, #0
 800ed62:	4798      	blx	r3
 800ed64:	e5f0      	b.n	800e948 <acc_translation_a121_translate+0xb8>
 800ed66:	2300      	movs	r3, #0
 800ed68:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800ed6a:	8523      	strh	r3, [r4, #40]	@ 0x28
 800ed6c:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d1ec      	bne.n	800ed4e <acc_translation_a121_translate+0x4be>
 800ed74:	2200      	movs	r2, #0
 800ed76:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800ed78:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800ed7a:	f1bb 0f00 	cmp.w	fp, #0
 800ed7e:	f040 80e0 	bne.w	800ef42 <acc_translation_a121_translate+0x6b2>
 800ed82:	2301      	movs	r3, #1
 800ed84:	f8a8 b002 	strh.w	fp, [r8, #2]
 800ed88:	f8a8 b00c 	strh.w	fp, [r8, #12]
 800ed8c:	f8a8 300a 	strh.w	r3, [r8, #10]
 800ed90:	2600      	movs	r6, #0
 800ed92:	f104 033e 	add.w	r3, r4, #62	@ 0x3e
 800ed96:	ed9f aa7a 	vldr	s20, [pc, #488]	@ 800ef80 <acc_translation_a121_translate+0x6f0>
 800ed9a:	eddf aa7a 	vldr	s21, [pc, #488]	@ 800ef84 <acc_translation_a121_translate+0x6f4>
 800ed9e:	eddf 9a72 	vldr	s19, [pc, #456]	@ 800ef68 <acc_translation_a121_translate+0x6d8>
 800eda2:	ed9f 9a79 	vldr	s18, [pc, #484]	@ 800ef88 <acc_translation_a121_translate+0x6f8>
 800eda6:	9607      	str	r6, [sp, #28]
 800eda8:	9602      	str	r6, [sp, #8]
 800edaa:	f108 090e 	add.w	r9, r8, #14
 800edae:	462f      	mov	r7, r5
 800edb0:	f104 0a46 	add.w	sl, r4, #70	@ 0x46
 800edb4:	9503      	str	r5, [sp, #12]
 800edb6:	9409      	str	r4, [sp, #36]	@ 0x24
 800edb8:	9305      	str	r3, [sp, #20]
 800edba:	e9dd 0403 	ldrd	r0, r4, [sp, #12]
 800edbe:	fa5f fc86 	uxtb.w	ip, r6
 800edc2:	4564      	cmp	r4, ip
 800edc4:	4653      	mov	r3, sl
 800edc6:	4639      	mov	r1, r7
 800edc8:	465a      	mov	r2, fp
 800edca:	f04f 0c00 	mov.w	ip, #0
 800edce:	d82b      	bhi.n	800ee28 <acc_translation_a121_translate+0x598>
 800edd0:	9b05      	ldr	r3, [sp, #20]
 800edd2:	f8a9 c000 	strh.w	ip, [r9]
 800edd6:	f8a9 c008 	strh.w	ip, [r9, #8]
 800edda:	f823 c016 	strh.w	ip, [r3, r6, lsl #1]
 800edde:	3601      	adds	r6, #1
 800ede0:	2e04      	cmp	r6, #4
 800ede2:	f109 0902 	add.w	r9, r9, #2
 800ede6:	f107 0710 	add.w	r7, r7, #16
 800edea:	f10a 0a56 	add.w	sl, sl, #86	@ 0x56
 800edee:	d1e4      	bne.n	800edba <acc_translation_a121_translate+0x52a>
 800edf0:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 800edf4:	9906      	ldr	r1, [sp, #24]
 800edf6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800edfa:	9d03      	ldr	r5, [sp, #12]
 800edfc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800edfe:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 800ee02:	fb12 f201 	smulbb	r2, r2, r1
 800ee06:	b292      	uxth	r2, r2
 800ee08:	4413      	add	r3, r2
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	f103 0c01 	add.w	ip, r3, #1
 800ee10:	fa1f fc8c 	uxth.w	ip, ip
 800ee14:	2001      	movs	r0, #1
 800ee16:	e5aa      	b.n	800e96e <acc_translation_a121_translate+0xde>
 800ee18:	2200      	movs	r2, #0
 800ee1a:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800ee1c:	8522      	strh	r2, [r4, #40]	@ 0x28
 800ee1e:	e792      	b.n	800ed46 <acc_translation_a121_translate+0x4b6>
 800ee20:	2301      	movs	r3, #1
 800ee22:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800ee24:	86e3      	strh	r3, [r4, #54]	@ 0x36
 800ee26:	e7a8      	b.n	800ed7a <acc_translation_a121_translate+0x4ea>
 800ee28:	9d05      	ldr	r5, [sp, #20]
 800ee2a:	f04f 0401 	mov.w	r4, #1
 800ee2e:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800ee32:	ac0b      	add	r4, sp, #44	@ 0x2c
 800ee34:	9400      	str	r4, [sp, #0]
 800ee36:	f7ff fb57 	bl	800e4e8 <acc_translation_a121_subsweep_translate>
 800ee3a:	2800      	cmp	r0, #0
 800ee3c:	d045      	beq.n	800eeca <acc_translation_a121_translate+0x63a>
 800ee3e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800ee42:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800ee46:	f8a9 3000 	strh.w	r3, [r9]
 800ee4a:	f8a9 2008 	strh.w	r2, [r9, #8]
 800ee4e:	4413      	add	r3, r2
 800ee50:	7bfa      	ldrb	r2, [r7, #15]
 800ee52:	f8a8 300c 	strh.w	r3, [r8, #12]
 800ee56:	2a01      	cmp	r2, #1
 800ee58:	f8ba 3028 	ldrh.w	r3, [sl, #40]	@ 0x28
 800ee5c:	d02e      	beq.n	800eebc <acc_translation_a121_translate+0x62c>
 800ee5e:	2a02      	cmp	r2, #2
 800ee60:	bf0c      	ite	eq
 800ee62:	eef0 5a49 	vmoveq.f32	s11, s18
 800ee66:	eef0 5a69 	vmovne.f32	s11, s19
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	b29b      	uxth	r3, r3
 800ee6e:	ee07 3a10 	vmov	s14, r3
 800ee72:	88bb      	ldrh	r3, [r7, #4]
 800ee74:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800ee78:	ee06 3a10 	vmov	s12, r3
 800ee7c:	893b      	ldrh	r3, [r7, #8]
 800ee7e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800ee82:	ee07 3a90 	vmov	s15, r3
 800ee86:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ee8a:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800ee8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee92:	ee67 7a06 	vmul.f32	s15, s14, s12
 800ee96:	9b02      	ldr	r3, [sp, #8]
 800ee98:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ee9c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800eea0:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800eea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eea8:	ee17 2a90 	vmov	r2, s15
 800eeac:	4413      	add	r3, r2
 800eeae:	9302      	str	r3, [sp, #8]
 800eeb0:	9b07      	ldr	r3, [sp, #28]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d193      	bne.n	800edde <acc_translation_a121_translate+0x54e>
 800eeb6:	7afb      	ldrb	r3, [r7, #11]
 800eeb8:	9307      	str	r3, [sp, #28]
 800eeba:	e790      	b.n	800edde <acc_translation_a121_translate+0x54e>
 800eebc:	eef0 5a6a 	vmov.f32	s11, s21
 800eec0:	e7d3      	b.n	800ee6a <acc_translation_a121_translate+0x5da>
 800eec2:	2300      	movs	r3, #0
 800eec4:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800eec6:	86e3      	strh	r3, [r4, #54]	@ 0x36
 800eec8:	e757      	b.n	800ed7a <acc_translation_a121_translate+0x4ea>
 800eeca:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 800eece:	9906      	ldr	r1, [sp, #24]
 800eed0:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800eed4:	9d03      	ldr	r5, [sp, #12]
 800eed6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800eed8:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 800eedc:	fb12 f201 	smulbb	r2, r2, r1
 800eee0:	b292      	uxth	r2, r2
 800eee2:	4413      	add	r3, r2
 800eee4:	b29b      	uxth	r3, r3
 800eee6:	f103 0c01 	add.w	ip, r3, #1
 800eeea:	fa1f fc8c 	uxth.w	ip, ip
 800eeee:	e53e      	b.n	800e96e <acc_translation_a121_translate+0xde>
 800eef0:	f895 104f 	ldrb.w	r1, [r5, #79]	@ 0x4f
 800eef4:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 800eef8:	eddf 8a1b 	vldr	s17, [pc, #108]	@ 800ef68 <acc_translation_a121_translate+0x6d8>
 800eefc:	4291      	cmp	r1, r2
 800eefe:	f47f ad0c 	bne.w	800e91a <acc_translation_a121_translate+0x8a>
 800ef02:	e6b7      	b.n	800ec74 <acc_translation_a121_translate+0x3e4>
 800ef04:	2301      	movs	r3, #1
 800ef06:	f8a8 b002 	strh.w	fp, [r8, #2]
 800ef0a:	f8a8 300a 	strh.w	r3, [r8, #10]
 800ef0e:	465f      	mov	r7, fp
 800ef10:	f04f 0c02 	mov.w	ip, #2
 800ef14:	465a      	mov	r2, fp
 800ef16:	f8cd b008 	str.w	fp, [sp, #8]
 800ef1a:	4658      	mov	r0, fp
 800ef1c:	e527      	b.n	800e96e <acc_translation_a121_translate+0xde>
 800ef1e:	b933      	cbnz	r3, 800ef2e <acc_translation_a121_translate+0x69e>
 800ef20:	2a02      	cmp	r2, #2
 800ef22:	d00a      	beq.n	800ef3a <acc_translation_a121_translate+0x6aa>
 800ef24:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ef26:	7113      	strb	r3, [r2, #4]
 800ef28:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800ef2c:	e620      	b.n	800eb70 <acc_translation_a121_translate+0x2e0>
 800ef2e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ef30:	2300      	movs	r3, #0
 800ef32:	7113      	strb	r3, [r2, #4]
 800ef34:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800ef38:	e61a      	b.n	800eb70 <acc_translation_a121_translate+0x2e0>
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	e60c      	b.n	800eb58 <acc_translation_a121_translate+0x2c8>
 800ef3e:	9004      	str	r0, [sp, #16]
 800ef40:	e69f      	b.n	800ec82 <acc_translation_a121_translate+0x3f2>
 800ef42:	4621      	mov	r1, r4
 800ef44:	4658      	mov	r0, fp
 800ef46:	f7fe fffd 	bl	800df44 <acc_translation_a121_set_calibration_params>
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	2201      	movs	r2, #1
 800ef4e:	f8a8 3002 	strh.w	r3, [r8, #2]
 800ef52:	f8a8 300c 	strh.w	r3, [r8, #12]
 800ef56:	f8a8 200a 	strh.w	r2, [r8, #10]
 800ef5a:	e719      	b.n	800ed90 <acc_translation_a121_translate+0x500>
 800ef5c:	200009dc 	.word	0x200009dc
 800ef60:	08013c6c 	.word	0x08013c6c
 800ef64:	080139f8 	.word	0x080139f8
 800ef68:	00000000 	.word	0x00000000
 800ef6c:	08013c2c 	.word	0x08013c2c
 800ef70:	3c23d70a 	.word	0x3c23d70a
 800ef74:	49742400 	.word	0x49742400
 800ef78:	08013cdc 	.word	0x08013cdc
 800ef7c:	08013bb0 	.word	0x08013bb0
 800ef80:	3e124925 	.word	0x3e124925
 800ef84:	3e4ccccd 	.word	0x3e4ccccd
 800ef88:	3d75c28f 	.word	0x3d75c28f

0800ef8c <acc_translation_pulseshaper_calc_settings>:
 800ef8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef90:	7804      	ldrb	r4, [r0, #0]
 800ef92:	2300      	movs	r3, #0
 800ef94:	8093      	strh	r3, [r2, #4]
 800ef96:	b374      	cbz	r4, 800eff6 <acc_translation_pulseshaper_calc_settings+0x6a>
 800ef98:	6846      	ldr	r6, [r0, #4]
 800ef9a:	2401      	movs	r4, #1
 800ef9c:	4637      	mov	r7, r6
 800ef9e:	8214      	strh	r4, [r2, #16]
 800efa0:	b3a6      	cbz	r6, 800f00c <acc_translation_pulseshaper_calc_settings+0x80>
 800efa2:	e9d1 9a03 	ldrd	r9, sl, [r1, #12]
 800efa6:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800efaa:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800efae:	461c      	mov	r4, r3
 800efb0:	eb09 4513 	add.w	r5, r9, r3, lsr #16
 800efb4:	eba5 0508 	sub.w	r5, r5, r8
 800efb8:	4575      	cmp	r5, lr
 800efba:	fa1f fc84 	uxth.w	ip, r4
 800efbe:	4453      	add	r3, sl
 800efc0:	f104 0401 	add.w	r4, r4, #1
 800efc4:	da02      	bge.n	800efcc <acc_translation_pulseshaper_calc_settings+0x40>
 800efc6:	2c0f      	cmp	r4, #15
 800efc8:	d1f2      	bne.n	800efb0 <acc_translation_pulseshaper_calc_settings+0x24>
 800efca:	46a4      	mov	ip, r4
 800efcc:	e9d1 8e07 	ldrd	r8, lr, [r1, #28]
 800efd0:	2505      	movs	r5, #5
 800efd2:	f8a2 c006 	strh.w	ip, [r2, #6]
 800efd6:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 800efda:	eb08 4413 	add.w	r4, r8, r3, lsr #16
 800efde:	1ba4      	subs	r4, r4, r6
 800efe0:	f105 0c01 	add.w	ip, r5, #1
 800efe4:	4473      	add	r3, lr
 800efe6:	d563      	bpl.n	800f0b0 <acc_translation_pulseshaper_calc_settings+0x124>
 800efe8:	fa1f f58c 	uxth.w	r5, ip
 800efec:	2d14      	cmp	r5, #20
 800efee:	d1f4      	bne.n	800efda <acc_translation_pulseshaper_calc_settings+0x4e>
 800eff0:	2000      	movs	r0, #0
 800eff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eff6:	8214      	strh	r4, [r2, #16]
 800eff8:	80d4      	strh	r4, [r2, #6]
 800effa:	8054      	strh	r4, [r2, #2]
 800effc:	8114      	strh	r4, [r2, #8]
 800effe:	81d4      	strh	r4, [r2, #14]
 800f000:	8154      	strh	r4, [r2, #10]
 800f002:	8194      	strh	r4, [r2, #12]
 800f004:	8254      	strh	r4, [r2, #18]
 800f006:	2001      	movs	r0, #1
 800f008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f00c:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800f010:	80d6      	strh	r6, [r2, #6]
 800f012:	f5bc 7f16 	cmp.w	ip, #600	@ 0x258
 800f016:	8056      	strh	r6, [r2, #2]
 800f018:	d343      	bcc.n	800f0a2 <acc_translation_pulseshaper_calc_settings+0x116>
 800f01a:	f8d1 e014 	ldr.w	lr, [r1, #20]
 800f01e:	ebac 050e 	sub.w	r5, ip, lr
 800f022:	f5b5 7fc8 	cmp.w	r5, #400	@ 0x190
 800f026:	f340 80b3 	ble.w	800f190 <acc_translation_pulseshaper_calc_settings+0x204>
 800f02a:	2400      	movs	r4, #0
 800f02c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800f030:	4620      	mov	r0, r4
 800f032:	3002      	adds	r0, #2
 800f034:	fb03 f000 	mul.w	r0, r3, r0
 800f038:	42a8      	cmp	r0, r5
 800f03a:	f104 0401 	add.w	r4, r4, #1
 800f03e:	dbf7      	blt.n	800f030 <acc_translation_pulseshaper_calc_settings+0xa4>
 800f040:	2e00      	cmp	r6, #0
 800f042:	bf14      	ite	ne
 800f044:	2501      	movne	r5, #1
 800f046:	2500      	moveq	r5, #0
 800f048:	f04f 0001 	mov.w	r0, #1
 800f04c:	8115      	strh	r5, [r2, #8]
 800f04e:	81d0      	strh	r0, [r2, #14]
 800f050:	d14f      	bne.n	800f0f2 <acc_translation_pulseshaper_calc_settings+0x166>
 800f052:	8156      	strh	r6, [r2, #10]
 800f054:	b344      	cbz	r4, 800f0a8 <acc_translation_pulseshaper_calc_settings+0x11c>
 800f056:	fb03 c314 	mls	r3, r3, r4, ip
 800f05a:	2000      	movs	r0, #0
 800f05c:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800f060:	4601      	mov	r1, r0
 800f062:	e001      	b.n	800f068 <acc_translation_pulseshaper_calc_settings+0xdc>
 800f064:	2916      	cmp	r1, #22
 800f066:	d0c3      	beq.n	800eff0 <acc_translation_pulseshaper_calc_settings+0x64>
 800f068:	eb0c 4510 	add.w	r5, ip, r0, lsr #16
 800f06c:	1aed      	subs	r5, r5, r3
 800f06e:	b28e      	uxth	r6, r1
 800f070:	4470      	add	r0, lr
 800f072:	f101 0101 	add.w	r1, r1, #1
 800f076:	d4f5      	bmi.n	800f064 <acc_translation_pulseshaper_calc_settings+0xd8>
 800f078:	b15e      	cbz	r6, 800f092 <acc_translation_pulseshaper_calc_settings+0x106>
 800f07a:	b957      	cbnz	r7, 800f092 <acc_translation_pulseshaper_calc_settings+0x106>
 800f07c:	1e71      	subs	r1, r6, #1
 800f07e:	b289      	uxth	r1, r1
 800f080:	fb0e fe01 	mul.w	lr, lr, r1
 800f084:	eb0c 4c1e 	add.w	ip, ip, lr, lsr #16
 800f088:	eba3 030c 	sub.w	r3, r3, ip
 800f08c:	429d      	cmp	r5, r3
 800f08e:	bfc8      	it	gt
 800f090:	460e      	movgt	r6, r1
 800f092:	8196      	strh	r6, [r2, #12]
 800f094:	2c00      	cmp	r4, #0
 800f096:	d0b5      	beq.n	800f004 <acc_translation_pulseshaper_calc_settings+0x78>
 800f098:	1de3      	adds	r3, r4, #7
 800f09a:	2401      	movs	r4, #1
 800f09c:	409c      	lsls	r4, r3
 800f09e:	b2a4      	uxth	r4, r4
 800f0a0:	e7b0      	b.n	800f004 <acc_translation_pulseshaper_calc_settings+0x78>
 800f0a2:	8116      	strh	r6, [r2, #8]
 800f0a4:	81d6      	strh	r6, [r2, #14]
 800f0a6:	8156      	strh	r6, [r2, #10]
 800f0a8:	2400      	movs	r4, #0
 800f0aa:	4663      	mov	r3, ip
 800f0ac:	4627      	mov	r7, r4
 800f0ae:	e7d4      	b.n	800f05a <acc_translation_pulseshaper_calc_settings+0xce>
 800f0b0:	2d05      	cmp	r5, #5
 800f0b2:	d00a      	beq.n	800f0ca <acc_translation_pulseshaper_calc_settings+0x13e>
 800f0b4:	1e6b      	subs	r3, r5, #1
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	fb0e fe03 	mul.w	lr, lr, r3
 800f0bc:	eb08 4e1e 	add.w	lr, r8, lr, lsr #16
 800f0c0:	eba6 0e0e 	sub.w	lr, r6, lr
 800f0c4:	4574      	cmp	r4, lr
 800f0c6:	bfc8      	it	gt
 800f0c8:	461d      	movgt	r5, r3
 800f0ca:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800f0ce:	8055      	strh	r5, [r2, #2]
 800f0d0:	f5bc 7f16 	cmp.w	ip, #600	@ 0x258
 800f0d4:	d349      	bcc.n	800f16a <acc_translation_pulseshaper_calc_settings+0x1de>
 800f0d6:	f8d1 e014 	ldr.w	lr, [r1, #20]
 800f0da:	ebac 050e 	sub.w	r5, ip, lr
 800f0de:	f5b5 7fc8 	cmp.w	r5, #400	@ 0x190
 800f0e2:	dca2      	bgt.n	800f02a <acc_translation_pulseshaper_calc_settings+0x9e>
 800f0e4:	1e30      	subs	r0, r6, #0
 800f0e6:	bf18      	it	ne
 800f0e8:	2001      	movne	r0, #1
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	8110      	strh	r0, [r2, #8]
 800f0ee:	81d3      	strh	r3, [r2, #14]
 800f0f0:	2400      	movs	r4, #0
 800f0f2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800f0f6:	fb03 c314 	mls	r3, r3, r4, ip
 800f0fa:	2500      	movs	r5, #0
 800f0fc:	f8d1 9018 	ldr.w	r9, [r1, #24]
 800f100:	4628      	mov	r0, r5
 800f102:	e002      	b.n	800f10a <acc_translation_pulseshaper_calc_settings+0x17e>
 800f104:	2816      	cmp	r0, #22
 800f106:	f43f af73 	beq.w	800eff0 <acc_translation_pulseshaper_calc_settings+0x64>
 800f10a:	eb0e 4715 	add.w	r7, lr, r5, lsr #16
 800f10e:	1aff      	subs	r7, r7, r3
 800f110:	fa1f f880 	uxth.w	r8, r0
 800f114:	444d      	add	r5, r9
 800f116:	f100 0001 	add.w	r0, r0, #1
 800f11a:	d4f3      	bmi.n	800f104 <acc_translation_pulseshaper_calc_settings+0x178>
 800f11c:	f1b8 0f00 	cmp.w	r8, #0
 800f120:	d12a      	bne.n	800f178 <acc_translation_pulseshaper_calc_settings+0x1ec>
 800f122:	f8a2 800a 	strh.w	r8, [r2, #10]
 800f126:	b1c4      	cbz	r4, 800f15a <acc_translation_pulseshaper_calc_settings+0x1ce>
 800f128:	4637      	mov	r7, r6
 800f12a:	2e00      	cmp	r6, #0
 800f12c:	d095      	beq.n	800f05a <acc_translation_pulseshaper_calc_settings+0xce>
 800f12e:	e9d1 0503 	ldrd	r0, r5, [r1, #12]
 800f132:	88d6      	ldrh	r6, [r2, #6]
 800f134:	fb05 f506 	mul.w	r5, r5, r6
 800f138:	688e      	ldr	r6, [r1, #8]
 800f13a:	eb00 4015 	add.w	r0, r0, r5, lsr #16
 800f13e:	1b80      	subs	r0, r0, r6
 800f140:	f53f af56 	bmi.w	800eff0 <acc_translation_pulseshaper_calc_settings+0x64>
 800f144:	e9d1 5607 	ldrd	r5, r6, [r1, #28]
 800f148:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800f14c:	fb06 f60c 	mul.w	r6, r6, ip
 800f150:	eb05 4516 	add.w	r5, r5, r6, lsr #16
 800f154:	4428      	add	r0, r5
 800f156:	4403      	add	r3, r0
 800f158:	e77f      	b.n	800f05a <acc_translation_pulseshaper_calc_settings+0xce>
 800f15a:	4637      	mov	r7, r6
 800f15c:	2e00      	cmp	r6, #0
 800f15e:	d0a3      	beq.n	800f0a8 <acc_translation_pulseshaper_calc_settings+0x11c>
 800f160:	fb09 f308 	mul.w	r3, r9, r8
 800f164:	eb0e 4313 	add.w	r3, lr, r3, lsr #16
 800f168:	e7e1      	b.n	800f12e <acc_translation_pulseshaper_calc_settings+0x1a2>
 800f16a:	2400      	movs	r4, #0
 800f16c:	f8d1 e014 	ldr.w	lr, [r1, #20]
 800f170:	8114      	strh	r4, [r2, #8]
 800f172:	81d4      	strh	r4, [r2, #14]
 800f174:	4663      	mov	r3, ip
 800f176:	e7c0      	b.n	800f0fa <acc_translation_pulseshaper_calc_settings+0x16e>
 800f178:	f108 35ff 	add.w	r5, r8, #4294967295
 800f17c:	b2ad      	uxth	r5, r5
 800f17e:	fb09 f005 	mul.w	r0, r9, r5
 800f182:	eb0e 4010 	add.w	r0, lr, r0, lsr #16
 800f186:	1a18      	subs	r0, r3, r0
 800f188:	4287      	cmp	r7, r0
 800f18a:	bfc8      	it	gt
 800f18c:	46a8      	movgt	r8, r5
 800f18e:	e7c8      	b.n	800f122 <acc_translation_pulseshaper_calc_settings+0x196>
 800f190:	8116      	strh	r6, [r2, #8]
 800f192:	81d4      	strh	r4, [r2, #14]
 800f194:	8156      	strh	r6, [r2, #10]
 800f196:	e787      	b.n	800f0a8 <acc_translation_pulseshaper_calc_settings+0x11c>

0800f198 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>:
 800f198:	7803      	ldrb	r3, [r0, #0]
 800f19a:	b13b      	cbz	r3, 800f1ac <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x14>
 800f19c:	6842      	ldr	r2, [r0, #4]
 800f19e:	b12a      	cbz	r2, 800f1ac <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x14>
 800f1a0:	6902      	ldr	r2, [r0, #16]
 800f1a2:	2a02      	cmp	r2, #2
 800f1a4:	d90b      	bls.n	800f1be <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x26>
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	4770      	bx	lr
 800f1ac:	6903      	ldr	r3, [r0, #16]
 800f1ae:	2b07      	cmp	r3, #7
 800f1b0:	d8f9      	bhi.n	800f1a6 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0xe>
 800f1b2:	4a05      	ldr	r2, [pc, #20]	@ (800f1c8 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x30>)
 800f1b4:	5cd3      	ldrb	r3, [r2, r3]
 800f1b6:	800b      	strh	r3, [r1, #0]
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	4770      	bx	lr
 800f1be:	4803      	ldr	r0, [pc, #12]	@ (800f1cc <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x34>)
 800f1c0:	5c82      	ldrb	r2, [r0, r2]
 800f1c2:	800a      	strh	r2, [r1, #0]
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	4770      	bx	lr
 800f1c8:	08013d34 	.word	0x08013d34
 800f1cc:	08013d3c 	.word	0x08013d3c

0800f1d0 <acc_utils_bool_to_str>:
 800f1d0:	4a03      	ldr	r2, [pc, #12]	@ (800f1e0 <acc_utils_bool_to_str+0x10>)
 800f1d2:	4b04      	ldr	r3, [pc, #16]	@ (800f1e4 <acc_utils_bool_to_str+0x14>)
 800f1d4:	2800      	cmp	r0, #0
 800f1d6:	bf14      	ite	ne
 800f1d8:	4610      	movne	r0, r2
 800f1da:	4618      	moveq	r0, r3
 800f1dc:	4770      	bx	lr
 800f1de:	bf00      	nop
 800f1e0:	08013d40 	.word	0x08013d40
 800f1e4:	08013d48 	.word	0x08013d48

0800f1e8 <acc_utils_idle_state_to_str>:
 800f1e8:	2802      	cmp	r0, #2
 800f1ea:	bf9a      	itte	ls
 800f1ec:	4b02      	ldrls	r3, [pc, #8]	@ (800f1f8 <acc_utils_idle_state_to_str+0x10>)
 800f1ee:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800f1f2:	4802      	ldrhi	r0, [pc, #8]	@ (800f1fc <acc_utils_idle_state_to_str+0x14>)
 800f1f4:	4770      	bx	lr
 800f1f6:	bf00      	nop
 800f1f8:	08013de0 	.word	0x08013de0
 800f1fc:	08013d50 	.word	0x08013d50

0800f200 <acc_utils_profile_to_str>:
 800f200:	3801      	subs	r0, #1
 800f202:	b2c0      	uxtb	r0, r0
 800f204:	2804      	cmp	r0, #4
 800f206:	bf9a      	itte	ls
 800f208:	4b02      	ldrls	r3, [pc, #8]	@ (800f214 <acc_utils_profile_to_str+0x14>)
 800f20a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800f20e:	4802      	ldrhi	r0, [pc, #8]	@ (800f218 <acc_utils_profile_to_str+0x18>)
 800f210:	4770      	bx	lr
 800f212:	bf00      	nop
 800f214:	08013dec 	.word	0x08013dec
 800f218:	08013d50 	.word	0x08013d50

0800f21c <acc_utils_prf_to_str>:
 800f21c:	2805      	cmp	r0, #5
 800f21e:	bf9a      	itte	ls
 800f220:	4b02      	ldrls	r3, [pc, #8]	@ (800f22c <acc_utils_prf_to_str+0x10>)
 800f222:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800f226:	4802      	ldrhi	r0, [pc, #8]	@ (800f230 <acc_utils_prf_to_str+0x14>)
 800f228:	4770      	bx	lr
 800f22a:	bf00      	nop
 800f22c:	08013e00 	.word	0x08013e00
 800f230:	08013d50 	.word	0x08013d50

0800f234 <acc_alg_atan2_q16>:
 800f234:	2800      	cmp	r0, #0
 800f236:	bfb8      	it	lt
 800f238:	4240      	neglt	r0, r0
 800f23a:	b4f0      	push	{r4, r5, r6, r7}
 800f23c:	bfba      	itte	lt
 800f23e:	b200      	sxthlt	r0, r0
 800f240:	2401      	movlt	r4, #1
 800f242:	2400      	movge	r4, #0
 800f244:	2900      	cmp	r1, #0
 800f246:	db3f      	blt.n	800f2c8 <acc_alg_atan2_q16+0x94>
 800f248:	4288      	cmp	r0, r1
 800f24a:	db38      	blt.n	800f2be <acc_alg_atan2_q16+0x8a>
 800f24c:	2200      	movs	r2, #0
 800f24e:	4603      	mov	r3, r0
 800f250:	b368      	cbz	r0, 800f2ae <acc_alg_atan2_q16+0x7a>
 800f252:	4608      	mov	r0, r1
 800f254:	2600      	movs	r6, #0
 800f256:	f643 4528 	movw	r5, #15400	@ 0x3c28
 800f25a:	0400      	lsls	r0, r0, #16
 800f25c:	fbb0 f1f3 	udiv	r1, r0, r3
 800f260:	42a9      	cmp	r1, r5
 800f262:	d948      	bls.n	800f2f6 <acc_alg_atan2_q16+0xc2>
 800f264:	f246 33d6 	movw	r3, #25558	@ 0x63d6
 800f268:	4299      	cmp	r1, r3
 800f26a:	d936      	bls.n	800f2da <acc_alg_atan2_q16+0xa6>
 800f26c:	f648 0372 	movw	r3, #34930	@ 0x8872
 800f270:	4299      	cmp	r1, r3
 800f272:	d942      	bls.n	800f2fa <acc_alg_atan2_q16+0xc6>
 800f274:	f64a 4349 	movw	r3, #44105	@ 0xac49
 800f278:	4299      	cmp	r1, r3
 800f27a:	d940      	bls.n	800f2fe <acc_alg_atan2_q16+0xca>
 800f27c:	f24d 03a3 	movw	r3, #53411	@ 0xd0a3
 800f280:	4299      	cmp	r1, r3
 800f282:	d93e      	bls.n	800f302 <acc_alg_atan2_q16+0xce>
 800f284:	f24f 734b 	movw	r3, #63307	@ 0xf74b
 800f288:	4299      	cmp	r1, r3
 800f28a:	bf98      	it	ls
 800f28c:	2705      	movls	r7, #5
 800f28e:	d925      	bls.n	800f2dc <acc_alg_atan2_q16+0xa8>
 800f290:	f24f 754c 	movw	r5, #63308	@ 0xf74c
 800f294:	f248 2333 	movw	r3, #33331	@ 0x8233
 800f298:	f24c 40a3 	movw	r0, #50339	@ 0xc4a3
 800f29c:	1b49      	subs	r1, r1, r5
 800f29e:	fb03 f101 	mul.w	r1, r3, r1
 800f2a2:	eb00 4011 	add.w	r0, r0, r1, lsr #16
 800f2a6:	b116      	cbz	r6, 800f2ae <acc_alg_atan2_q16+0x7a>
 800f2a8:	f5c0 30c9 	rsb	r0, r0, #102912	@ 0x19200
 800f2ac:	301f      	adds	r0, #31
 800f2ae:	b114      	cbz	r4, 800f2b6 <acc_alg_atan2_q16+0x82>
 800f2b0:	f5c0 3049 	rsb	r0, r0, #205824	@ 0x32400
 800f2b4:	303f      	adds	r0, #63	@ 0x3f
 800f2b6:	b102      	cbz	r2, 800f2ba <acc_alg_atan2_q16+0x86>
 800f2b8:	4240      	negs	r0, r0
 800f2ba:	bcf0      	pop	{r4, r5, r6, r7}
 800f2bc:	4770      	bx	lr
 800f2be:	460b      	mov	r3, r1
 800f2c0:	b9b1      	cbnz	r1, 800f2f0 <acc_alg_atan2_q16+0xbc>
 800f2c2:	4811      	ldr	r0, [pc, #68]	@ (800f308 <acc_alg_atan2_q16+0xd4>)
 800f2c4:	460a      	mov	r2, r1
 800f2c6:	e7f2      	b.n	800f2ae <acc_alg_atan2_q16+0x7a>
 800f2c8:	4249      	negs	r1, r1
 800f2ca:	b209      	sxth	r1, r1
 800f2cc:	4288      	cmp	r0, r1
 800f2ce:	f04f 0201 	mov.w	r2, #1
 800f2d2:	dabc      	bge.n	800f24e <acc_alg_atan2_q16+0x1a>
 800f2d4:	460b      	mov	r3, r1
 800f2d6:	4616      	mov	r6, r2
 800f2d8:	e7bd      	b.n	800f256 <acc_alg_atan2_q16+0x22>
 800f2da:	2701      	movs	r7, #1
 800f2dc:	480b      	ldr	r0, [pc, #44]	@ (800f30c <acc_alg_atan2_q16+0xd8>)
 800f2de:	4b0c      	ldr	r3, [pc, #48]	@ (800f310 <acc_alg_atan2_q16+0xdc>)
 800f2e0:	f850 5037 	ldr.w	r5, [r0, r7, lsl #3]
 800f2e4:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800f2e8:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 800f2ec:	6840      	ldr	r0, [r0, #4]
 800f2ee:	e7d5      	b.n	800f29c <acc_alg_atan2_q16+0x68>
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	2601      	movs	r6, #1
 800f2f4:	e7af      	b.n	800f256 <acc_alg_atan2_q16+0x22>
 800f2f6:	2700      	movs	r7, #0
 800f2f8:	e7f0      	b.n	800f2dc <acc_alg_atan2_q16+0xa8>
 800f2fa:	2702      	movs	r7, #2
 800f2fc:	e7ee      	b.n	800f2dc <acc_alg_atan2_q16+0xa8>
 800f2fe:	2703      	movs	r7, #3
 800f300:	e7ec      	b.n	800f2dc <acc_alg_atan2_q16+0xa8>
 800f302:	2704      	movs	r7, #4
 800f304:	e7ea      	b.n	800f2dc <acc_alg_atan2_q16+0xa8>
 800f306:	bf00      	nop
 800f308:	0001921f 	.word	0x0001921f
 800f30c:	08013e18 	.word	0x08013e18
 800f310:	08013e50 	.word	0x08013e50

0800f314 <acc_alg_basic_util_crc32>:
 800f314:	b1a9      	cbz	r1, 800f342 <acc_alg_basic_util_crc32+0x2e>
 800f316:	b430      	push	{r4, r5}
 800f318:	4a0b      	ldr	r2, [pc, #44]	@ (800f348 <acc_alg_basic_util_crc32+0x34>)
 800f31a:	1e44      	subs	r4, r0, #1
 800f31c:	1865      	adds	r5, r4, r1
 800f31e:	f04f 30ff 	mov.w	r0, #4294967295
 800f322:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800f326:	2308      	movs	r3, #8
 800f328:	4048      	eors	r0, r1
 800f32a:	07c1      	lsls	r1, r0, #31
 800f32c:	bf4c      	ite	mi
 800f32e:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
 800f332:	0840      	lsrpl	r0, r0, #1
 800f334:	3b01      	subs	r3, #1
 800f336:	d1f8      	bne.n	800f32a <acc_alg_basic_util_crc32+0x16>
 800f338:	42ac      	cmp	r4, r5
 800f33a:	d1f2      	bne.n	800f322 <acc_alg_basic_util_crc32+0xe>
 800f33c:	43c0      	mvns	r0, r0
 800f33e:	bc30      	pop	{r4, r5}
 800f340:	4770      	bx	lr
 800f342:	4608      	mov	r0, r1
 800f344:	4770      	bx	lr
 800f346:	bf00      	nop
 800f348:	edb88320 	.word	0xedb88320

0800f34c <acc_alg_least_square_fit>:
 800f34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f350:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 800f354:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800f358:	b08d      	sub	sp, #52	@ 0x34
 800f35a:	2600      	movs	r6, #0
 800f35c:	4683      	mov	fp, r0
 800f35e:	4682      	mov	sl, r0
 800f360:	4680      	mov	r8, r0
 800f362:	4667      	mov	r7, ip
 800f364:	46b1      	mov	r9, r6
 800f366:	a803      	add	r0, sp, #12
 800f368:	ea4f 0589 	mov.w	r5, r9, lsl #2
 800f36c:	4686      	mov	lr, r0
 800f36e:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 800f4cc <acc_alg_least_square_fit+0x180>
 800f372:	4643      	mov	r3, r8
 800f374:	b16a      	cbz	r2, 800f392 <acc_alg_least_square_fit+0x46>
 800f376:	199c      	adds	r4, r3, r6
 800f378:	442c      	add	r4, r5
 800f37a:	edd4 7a00 	vldr	s15, [r4]
 800f37e:	461c      	mov	r4, r3
 800f380:	edd4 6a00 	vldr	s13, [r4]
 800f384:	330c      	adds	r3, #12
 800f386:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f38a:	42bb      	cmp	r3, r7
 800f38c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f390:	d1f1      	bne.n	800f376 <acc_alg_least_square_fit+0x2a>
 800f392:	3504      	adds	r5, #4
 800f394:	2d0c      	cmp	r5, #12
 800f396:	ecae 7a01 	vstmia	lr!, {s14}
 800f39a:	d1e8      	bne.n	800f36e <acc_alg_least_square_fit+0x22>
 800f39c:	f109 0901 	add.w	r9, r9, #1
 800f3a0:	f1b9 0f03 	cmp.w	r9, #3
 800f3a4:	f100 0010 	add.w	r0, r0, #16
 800f3a8:	f108 0804 	add.w	r8, r8, #4
 800f3ac:	f1a6 0604 	sub.w	r6, r6, #4
 800f3b0:	f107 0704 	add.w	r7, r7, #4
 800f3b4:	d1d8      	bne.n	800f368 <acc_alg_least_square_fit+0x1c>
 800f3b6:	ed9d 6a04 	vldr	s12, [sp, #16]
 800f3ba:	eddd 5a05 	vldr	s11, [sp, #20]
 800f3be:	eddd 6a08 	vldr	s13, [sp, #32]
 800f3c2:	4668      	mov	r0, sp
 800f3c4:	f10b 040c 	add.w	r4, fp, #12
 800f3c8:	eddf 7a40 	vldr	s15, [pc, #256]	@ 800f4cc <acc_alg_least_square_fit+0x180>
 800f3cc:	4653      	mov	r3, sl
 800f3ce:	b13a      	cbz	r2, 800f3e0 <acc_alg_least_square_fit+0x94>
 800f3d0:	461d      	mov	r5, r3
 800f3d2:	ed95 7a00 	vldr	s14, [r5]
 800f3d6:	330c      	adds	r3, #12
 800f3d8:	4563      	cmp	r3, ip
 800f3da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f3de:	d1f7      	bne.n	800f3d0 <acc_alg_least_square_fit+0x84>
 800f3e0:	f10a 0a04 	add.w	sl, sl, #4
 800f3e4:	45a2      	cmp	sl, r4
 800f3e6:	ece0 7a01 	vstmia	r0!, {s15}
 800f3ea:	f10c 0c04 	add.w	ip, ip, #4
 800f3ee:	d1eb      	bne.n	800f3c8 <acc_alg_least_square_fit+0x7c>
 800f3f0:	eddd 7a03 	vldr	s15, [sp, #12]
 800f3f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3fc:	d010      	beq.n	800f420 <acc_alg_least_square_fit+0xd4>
 800f3fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f402:	ee87 4a27 	vdiv.f32	s8, s14, s15
 800f406:	eddd 7a07 	vldr	s15, [sp, #28]
 800f40a:	ee66 4a04 	vmul.f32	s9, s12, s8
 800f40e:	ee26 5a24 	vmul.f32	s10, s12, s9
 800f412:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f416:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f41e:	d106      	bne.n	800f42e <acc_alg_least_square_fit+0xe2>
 800f420:	2000      	movs	r0, #0
 800f422:	2300      	movs	r3, #0
 800f424:	f8cb 3000 	str.w	r3, [fp]
 800f428:	b00d      	add	sp, #52	@ 0x34
 800f42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f42e:	eec7 2a27 	vdiv.f32	s5, s14, s15
 800f432:	ee65 3a84 	vmul.f32	s7, s11, s8
 800f436:	ee25 7aa4 	vmul.f32	s14, s11, s9
 800f43a:	ee66 7a23 	vmul.f32	s15, s12, s7
 800f43e:	ed9d 5a0b 	vldr	s10, [sp, #44]	@ 0x2c
 800f442:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f446:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f44a:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800f44e:	ee65 6aa3 	vmul.f32	s13, s11, s7
 800f452:	ee75 6a66 	vsub.f32	s13, s10, s13
 800f456:	ee27 5a27 	vmul.f32	s10, s14, s15
 800f45a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800f45e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f466:	d0db      	beq.n	800f420 <acc_alg_least_square_fit+0xd4>
 800f468:	ed9d 5a00 	vldr	s10, [sp]
 800f46c:	ed9d 3a01 	vldr	s6, [sp, #4]
 800f470:	ed9d 2a02 	vldr	s4, [sp, #8]
 800f474:	ee64 4a85 	vmul.f32	s9, s9, s10
 800f478:	ee63 3a85 	vmul.f32	s7, s7, s10
 800f47c:	ee73 4a64 	vsub.f32	s9, s6, s9
 800f480:	2001      	movs	r0, #1
 800f482:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800f486:	2300      	movs	r3, #0
 800f488:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f48c:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800f490:	eec3 7aa6 	vdiv.f32	s15, s7, s13
 800f494:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f498:	edc1 7a02 	vstr	s15, [r1, #8]
 800f49c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800f4a0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800f4a4:	ee67 7a22 	vmul.f32	s15, s14, s5
 800f4a8:	ee26 6a27 	vmul.f32	s12, s12, s15
 800f4ac:	edc1 7a01 	vstr	s15, [r1, #4]
 800f4b0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800f4b4:	ee76 5a65 	vsub.f32	s11, s12, s11
 800f4b8:	ee25 4a84 	vmul.f32	s8, s11, s8
 800f4bc:	ed81 4a00 	vstr	s8, [r1]
 800f4c0:	f8cb 3000 	str.w	r3, [fp]
 800f4c4:	b00d      	add	sp, #52	@ 0x34
 800f4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4ca:	bf00      	nop
 800f4cc:	00000000 	.word	0x00000000

0800f4d0 <acc_confprogram_modify_bin_sensor>:
 800f4d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f4d4:	b085      	sub	sp, #20
 800f4d6:	2601      	movs	r6, #1
 800f4d8:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800f4dc:	fa06 f503 	lsl.w	r5, r6, r3
 800f4e0:	4545      	cmp	r5, r8
 800f4e2:	461c      	mov	r4, r3
 800f4e4:	460b      	mov	r3, r1
 800f4e6:	d80d      	bhi.n	800f504 <acc_confprogram_modify_bin_sensor+0x34>
 800f4e8:	4a14      	ldr	r2, [pc, #80]	@ (800f53c <acc_confprogram_modify_bin_sensor+0x6c>)
 800f4ea:	f8cd 8000 	str.w	r8, [sp]
 800f4ee:	3d01      	subs	r5, #1
 800f4f0:	9501      	str	r5, [sp, #4]
 800f4f2:	6914      	ldr	r4, [r2, #16]
 800f4f4:	4912      	ldr	r1, [pc, #72]	@ (800f540 <acc_confprogram_modify_bin_sensor+0x70>)
 800f4f6:	4a13      	ldr	r2, [pc, #76]	@ (800f544 <acc_confprogram_modify_bin_sensor+0x74>)
 800f4f8:	2000      	movs	r0, #0
 800f4fa:	47a0      	blx	r4
 800f4fc:	2000      	movs	r0, #0
 800f4fe:	b005      	add	sp, #20
 800f500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f504:	4691      	mov	r9, r2
 800f506:	4607      	mov	r7, r0
 800f508:	9103      	str	r1, [sp, #12]
 800f50a:	f1c4 0420 	rsb	r4, r4, #32
 800f50e:	f000 f9ed 	bl	800f8ec <acc_sensor_conf_read_instr>
 800f512:	f04f 31ff 	mov.w	r1, #4294967295
 800f516:	fa21 f404 	lsr.w	r4, r1, r4
 800f51a:	9b03      	ldr	r3, [sp, #12]
 800f51c:	fa04 f409 	lsl.w	r4, r4, r9
 800f520:	ea20 0404 	bic.w	r4, r0, r4
 800f524:	fa08 f209 	lsl.w	r2, r8, r9
 800f528:	4619      	mov	r1, r3
 800f52a:	4638      	mov	r0, r7
 800f52c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f52e:	4322      	orrs	r2, r4
 800f530:	4798      	blx	r3
 800f532:	4630      	mov	r0, r6
 800f534:	b005      	add	sp, #20
 800f536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f53a:	bf00      	nop
 800f53c:	200009dc 	.word	0x200009dc
 800f540:	08013ea4 	.word	0x08013ea4
 800f544:	08013e6c 	.word	0x08013e6c

0800f548 <acc_confprogram_modify_bin>:
 800f548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f54c:	b085      	sub	sp, #20
 800f54e:	2401      	movs	r4, #1
 800f550:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800f554:	fa04 f703 	lsl.w	r7, r4, r3
 800f558:	4547      	cmp	r7, r8
 800f55a:	461e      	mov	r6, r3
 800f55c:	460b      	mov	r3, r1
 800f55e:	d80d      	bhi.n	800f57c <acc_confprogram_modify_bin+0x34>
 800f560:	4a17      	ldr	r2, [pc, #92]	@ (800f5c0 <acc_confprogram_modify_bin+0x78>)
 800f562:	f8cd 8000 	str.w	r8, [sp]
 800f566:	3f01      	subs	r7, #1
 800f568:	9701      	str	r7, [sp, #4]
 800f56a:	6914      	ldr	r4, [r2, #16]
 800f56c:	4915      	ldr	r1, [pc, #84]	@ (800f5c4 <acc_confprogram_modify_bin+0x7c>)
 800f56e:	4a16      	ldr	r2, [pc, #88]	@ (800f5c8 <acc_confprogram_modify_bin+0x80>)
 800f570:	2000      	movs	r0, #0
 800f572:	47a0      	blx	r4
 800f574:	2000      	movs	r0, #0
 800f576:	b005      	add	sp, #20
 800f578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f57c:	eb00 0541 	add.w	r5, r0, r1, lsl #1
 800f580:	4691      	mov	r9, r2
 800f582:	4628      	mov	r0, r5
 800f584:	4622      	mov	r2, r4
 800f586:	a902      	add	r1, sp, #8
 800f588:	f000 faf8 	bl	800fb7c <acc_utils_transfer_buffer_to_uint32>
 800f58c:	f1c6 0620 	rsb	r6, r6, #32
 800f590:	f04f 32ff 	mov.w	r2, #4294967295
 800f594:	fa22 f606 	lsr.w	r6, r2, r6
 800f598:	9a02      	ldr	r2, [sp, #8]
 800f59a:	fa06 f609 	lsl.w	r6, r6, r9
 800f59e:	fa08 f809 	lsl.w	r8, r8, r9
 800f5a2:	ea22 0206 	bic.w	r2, r2, r6
 800f5a6:	ea42 0608 	orr.w	r6, r2, r8
 800f5aa:	a803      	add	r0, sp, #12
 800f5ac:	4629      	mov	r1, r5
 800f5ae:	4622      	mov	r2, r4
 800f5b0:	9603      	str	r6, [sp, #12]
 800f5b2:	f000 fad5 	bl	800fb60 <acc_utils_uint32_to_transfer_buffer>
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	b005      	add	sp, #20
 800f5ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5be:	bf00      	nop
 800f5c0:	200009dc 	.word	0x200009dc
 800f5c4:	08013ea4 	.word	0x08013ea4
 800f5c8:	08013eb0 	.word	0x08013eb0

0800f5cc <acc_confprogram_modify_runif>:
 800f5cc:	b570      	push	{r4, r5, r6, lr}
 800f5ce:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	2201      	movs	r2, #1
 800f5d6:	460e      	mov	r6, r1
 800f5d8:	4620      	mov	r0, r4
 800f5da:	4669      	mov	r1, sp
 800f5dc:	461d      	mov	r5, r3
 800f5de:	f000 facd 	bl	800fb7c <acc_utils_transfer_buffer_to_uint32>
 800f5e2:	9a00      	ldr	r2, [sp, #0]
 800f5e4:	f022 020f 	bic.w	r2, r2, #15
 800f5e8:	b105      	cbz	r5, 800f5ec <acc_confprogram_modify_runif+0x20>
 800f5ea:	4332      	orrs	r2, r6
 800f5ec:	9201      	str	r2, [sp, #4]
 800f5ee:	4621      	mov	r1, r4
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	a801      	add	r0, sp, #4
 800f5f4:	f000 fab4 	bl	800fb60 <acc_utils_uint32_to_transfer_buffer>
 800f5f8:	b002      	add	sp, #8
 800f5fa:	bd70      	pop	{r4, r5, r6, pc}

0800f5fc <acc_confprogram_patch_offset>:
 800f5fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f600:	b083      	sub	sp, #12
 800f602:	f8bd 7028 	ldrh.w	r7, [sp, #40]	@ 0x28
 800f606:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800f60a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f60e:	887b      	ldrh	r3, [r7, #2]
 800f610:	b303      	cbz	r3, 800f654 <acc_confprogram_patch_offset+0x58>
 800f612:	460d      	mov	r5, r1
 800f614:	6879      	ldr	r1, [r7, #4]
 800f616:	4680      	mov	r8, r0
 800f618:	18ae      	adds	r6, r5, r2
 800f61a:	2400      	movs	r4, #0
 800f61c:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800f620:	0042      	lsls	r2, r0, #1
 800f622:	b292      	uxth	r2, r2
 800f624:	42aa      	cmp	r2, r5
 800f626:	d312      	bcc.n	800f64e <acc_confprogram_patch_offset+0x52>
 800f628:	42b2      	cmp	r2, r6
 800f62a:	da10      	bge.n	800f64e <acc_confprogram_patch_offset+0x52>
 800f62c:	f3c0 7301 	ubfx	r3, r0, #28, #2
 800f630:	2b01      	cmp	r3, #1
 800f632:	d036      	beq.n	800f6a2 <acc_confprogram_patch_offset+0xa6>
 800f634:	2b02      	cmp	r3, #2
 800f636:	d024      	beq.n	800f682 <acc_confprogram_patch_offset+0x86>
 800f638:	b183      	cbz	r3, 800f65c <acc_confprogram_patch_offset+0x60>
 800f63a:	4b1e      	ldr	r3, [pc, #120]	@ (800f6b4 <acc_confprogram_patch_offset+0xb8>)
 800f63c:	4a1e      	ldr	r2, [pc, #120]	@ (800f6b8 <acc_confprogram_patch_offset+0xbc>)
 800f63e:	691b      	ldr	r3, [r3, #16]
 800f640:	491e      	ldr	r1, [pc, #120]	@ (800f6bc <acc_confprogram_patch_offset+0xc0>)
 800f642:	2000      	movs	r0, #0
 800f644:	4798      	blx	r3
 800f646:	2000      	movs	r0, #0
 800f648:	b003      	add	sp, #12
 800f64a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f64e:	3401      	adds	r4, #1
 800f650:	42a3      	cmp	r3, r4
 800f652:	d8e3      	bhi.n	800f61c <acc_confprogram_patch_offset+0x20>
 800f654:	2001      	movs	r0, #1
 800f656:	b003      	add	sp, #12
 800f658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f65c:	1b52      	subs	r2, r2, r5
 800f65e:	f3c0 5344 	ubfx	r3, r0, #21, #5
 800f662:	b291      	uxth	r1, r2
 800f664:	f8cd 9000 	str.w	r9, [sp]
 800f668:	f3c0 4204 	ubfx	r2, r0, #16, #5
 800f66c:	4640      	mov	r0, r8
 800f66e:	f7ff ff6b 	bl	800f548 <acc_confprogram_modify_bin>
 800f672:	887b      	ldrh	r3, [r7, #2]
 800f674:	3401      	adds	r4, #1
 800f676:	42a3      	cmp	r3, r4
 800f678:	d9e6      	bls.n	800f648 <acc_confprogram_patch_offset+0x4c>
 800f67a:	2800      	cmp	r0, #0
 800f67c:	d0e4      	beq.n	800f648 <acc_confprogram_patch_offset+0x4c>
 800f67e:	6879      	ldr	r1, [r7, #4]
 800f680:	e7cc      	b.n	800f61c <acc_confprogram_patch_offset+0x20>
 800f682:	1b52      	subs	r2, r2, r5
 800f684:	fab9 f389 	clz	r3, r9
 800f688:	b292      	uxth	r2, r2
 800f68a:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800f68e:	095b      	lsrs	r3, r3, #5
 800f690:	4640      	mov	r0, r8
 800f692:	f7ff ff9b 	bl	800f5cc <acc_confprogram_modify_runif>
 800f696:	887b      	ldrh	r3, [r7, #2]
 800f698:	3401      	adds	r4, #1
 800f69a:	42a3      	cmp	r3, r4
 800f69c:	d8ef      	bhi.n	800f67e <acc_confprogram_patch_offset+0x82>
 800f69e:	2001      	movs	r0, #1
 800f6a0:	e7d9      	b.n	800f656 <acc_confprogram_patch_offset+0x5a>
 800f6a2:	1b52      	subs	r2, r2, r5
 800f6a4:	f1b9 0300 	subs.w	r3, r9, #0
 800f6a8:	b292      	uxth	r2, r2
 800f6aa:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800f6ae:	bf18      	it	ne
 800f6b0:	2301      	movne	r3, #1
 800f6b2:	e7ed      	b.n	800f690 <acc_confprogram_patch_offset+0x94>
 800f6b4:	200009dc 	.word	0x200009dc
 800f6b8:	08013ee8 	.word	0x08013ee8
 800f6bc:	08013ea4 	.word	0x08013ea4

0800f6c0 <acc_confprogram_live_patch>:
 800f6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c4:	b083      	sub	sp, #12
 800f6c6:	e9dd 9a0d 	ldrd	r9, sl, [sp, #52]	@ 0x34
 800f6ca:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 800f6ce:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f6d2:	8873      	ldrh	r3, [r6, #2]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d050      	beq.n	800f77a <acc_confprogram_live_patch+0xba>
 800f6d8:	4607      	mov	r7, r0
 800f6da:	468b      	mov	fp, r1
 800f6dc:	4690      	mov	r8, r2
 800f6de:	2501      	movs	r5, #1
 800f6e0:	6873      	ldr	r3, [r6, #4]
 800f6e2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800f6e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f6ea:	f3c0 7401 	ubfx	r4, r0, #28, #2
 800f6ee:	2c01      	cmp	r4, #1
 800f6f0:	d00c      	beq.n	800f70c <acc_confprogram_live_patch+0x4c>
 800f6f2:	2c02      	cmp	r4, #2
 800f6f4:	d032      	beq.n	800f75c <acc_confprogram_live_patch+0x9c>
 800f6f6:	b1ec      	cbz	r4, 800f734 <acc_confprogram_live_patch+0x74>
 800f6f8:	4b22      	ldr	r3, [pc, #136]	@ (800f784 <acc_confprogram_live_patch+0xc4>)
 800f6fa:	4a23      	ldr	r2, [pc, #140]	@ (800f788 <acc_confprogram_live_patch+0xc8>)
 800f6fc:	691b      	ldr	r3, [r3, #16]
 800f6fe:	4923      	ldr	r1, [pc, #140]	@ (800f78c <acc_confprogram_live_patch+0xcc>)
 800f700:	2000      	movs	r0, #0
 800f702:	4798      	blx	r3
 800f704:	2000      	movs	r0, #0
 800f706:	b003      	add	sp, #12
 800f708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f70c:	eb08 0100 	add.w	r1, r8, r0
 800f710:	b289      	uxth	r1, r1
 800f712:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 800f716:	f022 020f 	bic.w	r2, r2, #15
 800f71a:	f1b9 0f00 	cmp.w	r9, #0
 800f71e:	d002      	beq.n	800f726 <acc_confprogram_live_patch+0x66>
 800f720:	f3c0 4003 	ubfx	r0, r0, #16, #4
 800f724:	4302      	orrs	r2, r0
 800f726:	4638      	mov	r0, r7
 800f728:	47d0      	blx	sl
 800f72a:	8873      	ldrh	r3, [r6, #2]
 800f72c:	42ab      	cmp	r3, r5
 800f72e:	d924      	bls.n	800f77a <acc_confprogram_live_patch+0xba>
 800f730:	3501      	adds	r5, #1
 800f732:	e7d5      	b.n	800f6e0 <acc_confprogram_live_patch+0x20>
 800f734:	eb08 0100 	add.w	r1, r8, r0
 800f738:	f3c0 5344 	ubfx	r3, r0, #21, #5
 800f73c:	f3c0 4204 	ubfx	r2, r0, #16, #5
 800f740:	e9cd 9a00 	strd	r9, sl, [sp]
 800f744:	b289      	uxth	r1, r1
 800f746:	4638      	mov	r0, r7
 800f748:	f7ff fec2 	bl	800f4d0 <acc_confprogram_modify_bin_sensor>
 800f74c:	8873      	ldrh	r3, [r6, #2]
 800f74e:	42ab      	cmp	r3, r5
 800f750:	d9d9      	bls.n	800f706 <acc_confprogram_live_patch+0x46>
 800f752:	2800      	cmp	r0, #0
 800f754:	d1ec      	bne.n	800f730 <acc_confprogram_live_patch+0x70>
 800f756:	b003      	add	sp, #12
 800f758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f75c:	eb08 0100 	add.w	r1, r8, r0
 800f760:	b289      	uxth	r1, r1
 800f762:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 800f766:	f022 020f 	bic.w	r2, r2, #15
 800f76a:	f1b9 0f00 	cmp.w	r9, #0
 800f76e:	d0d7      	beq.n	800f720 <acc_confprogram_live_patch+0x60>
 800f770:	4638      	mov	r0, r7
 800f772:	47d0      	blx	sl
 800f774:	8873      	ldrh	r3, [r6, #2]
 800f776:	42ab      	cmp	r3, r5
 800f778:	d8da      	bhi.n	800f730 <acc_confprogram_live_patch+0x70>
 800f77a:	2001      	movs	r0, #1
 800f77c:	b003      	add	sp, #12
 800f77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f782:	bf00      	nop
 800f784:	200009dc 	.word	0x200009dc
 800f788:	08013f0c 	.word	0x08013f0c
 800f78c:	08013ea4 	.word	0x08013ea4

0800f790 <acc_confprogram_copy>:
 800f790:	b152      	cbz	r2, 800f7a8 <acc_confprogram_copy+0x18>
 800f792:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800f796:	3804      	subs	r0, #4
 800f798:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800f79c:	804b      	strh	r3, [r1, #2]
 800f79e:	0c1b      	lsrs	r3, r3, #16
 800f7a0:	800b      	strh	r3, [r1, #0]
 800f7a2:	3104      	adds	r1, #4
 800f7a4:	4291      	cmp	r1, r2
 800f7a6:	d1f7      	bne.n	800f798 <acc_confprogram_copy+0x8>
 800f7a8:	4770      	bx	lr
 800f7aa:	bf00      	nop

0800f7ac <acc_confprogram_get_parameter_patch_range>:
 800f7ac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f7b0:	b470      	push	{r4, r5, r6}
 800f7b2:	884e      	ldrh	r6, [r1, #2]
 800f7b4:	b1c6      	cbz	r6, 800f7e8 <acc_confprogram_get_parameter_patch_range+0x3c>
 800f7b6:	6848      	ldr	r0, [r1, #4]
 800f7b8:	2500      	movs	r5, #0
 800f7ba:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800f7be:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 800f7c2:	f850 1b04 	ldr.w	r1, [r0], #4
 800f7c6:	b289      	uxth	r1, r1
 800f7c8:	428c      	cmp	r4, r1
 800f7ca:	bf28      	it	cs
 800f7cc:	460c      	movcs	r4, r1
 800f7ce:	428d      	cmp	r5, r1
 800f7d0:	bf38      	it	cc
 800f7d2:	460d      	movcc	r5, r1
 800f7d4:	4286      	cmp	r6, r0
 800f7d6:	d1f4      	bne.n	800f7c2 <acc_confprogram_get_parameter_patch_range+0x16>
 800f7d8:	0064      	lsls	r4, r4, #1
 800f7da:	006d      	lsls	r5, r5, #1
 800f7dc:	b2a4      	uxth	r4, r4
 800f7de:	b2ad      	uxth	r5, r5
 800f7e0:	8014      	strh	r4, [r2, #0]
 800f7e2:	801d      	strh	r5, [r3, #0]
 800f7e4:	bc70      	pop	{r4, r5, r6}
 800f7e6:	4770      	bx	lr
 800f7e8:	4635      	mov	r5, r6
 800f7ea:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 800f7ee:	8014      	strh	r4, [r2, #0]
 800f7f0:	801d      	strh	r5, [r3, #0]
 800f7f2:	bc70      	pop	{r4, r5, r6}
 800f7f4:	4770      	bx	lr
 800f7f6:	bf00      	nop

0800f7f8 <acc_element_sizeof>:
 800f7f8:	3801      	subs	r0, #1
 800f7fa:	b2c0      	uxtb	r0, r0
 800f7fc:	2807      	cmp	r0, #7
 800f7fe:	bf9a      	itte	ls
 800f800:	4b02      	ldrls	r3, [pc, #8]	@ (800f80c <acc_element_sizeof+0x14>)
 800f802:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800f806:	2000      	movhi	r0, #0
 800f808:	4770      	bx	lr
 800f80a:	bf00      	nop
 800f80c:	08013f34 	.word	0x08013f34

0800f810 <acc_element_connect>:
 800f810:	6001      	str	r1, [r0, #0]
 800f812:	4770      	bx	lr

0800f814 <acc_probes_execute_struct>:
 800f814:	b530      	push	{r4, r5, lr}
 800f816:	4c0a      	ldr	r4, [pc, #40]	@ (800f840 <acc_probes_execute_struct+0x2c>)
 800f818:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 800f81c:	b085      	sub	sp, #20
 800f81e:	6865      	ldr	r5, [r4, #4]
 800f820:	f88d 0004 	strb.w	r0, [sp, #4]
 800f824:	2007      	movs	r0, #7
 800f826:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800f82a:	b135      	cbz	r5, 800f83a <acc_probes_execute_struct+0x26>
 800f82c:	4611      	mov	r1, r2
 800f82e:	a801      	add	r0, sp, #4
 800f830:	461a      	mov	r2, r3
 800f832:	68e3      	ldr	r3, [r4, #12]
 800f834:	47a8      	blx	r5
 800f836:	b005      	add	sp, #20
 800f838:	bd30      	pop	{r4, r5, pc}
 800f83a:	2001      	movs	r0, #1
 800f83c:	b005      	add	sp, #20
 800f83e:	bd30      	pop	{r4, r5, pc}
 800f840:	2000004c 	.word	0x2000004c

0800f844 <acc_sensor_reg_read>:
 800f844:	b530      	push	{r4, r5, lr}
 800f846:	b083      	sub	sp, #12
 800f848:	f441 5140 	orr.w	r1, r1, #12288	@ 0x3000
 800f84c:	4614      	mov	r4, r2
 800f84e:	2500      	movs	r5, #0
 800f850:	f8ad 1000 	strh.w	r1, [sp]
 800f854:	2301      	movs	r3, #1
 800f856:	2203      	movs	r2, #3
 800f858:	4669      	mov	r1, sp
 800f85a:	f8ad 5002 	strh.w	r5, [sp, #2]
 800f85e:	f8ad 5004 	strh.w	r5, [sp, #4]
 800f862:	f7fd f96f 	bl	800cb44 <acc_rss_integration_sensor_device_transfer>
 800f866:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f86a:	8023      	strh	r3, [r4, #0]
 800f86c:	b003      	add	sp, #12
 800f86e:	bd30      	pop	{r4, r5, pc}

0800f870 <acc_sensor_reg_write>:
 800f870:	b530      	push	{r4, r5, lr}
 800f872:	b083      	sub	sp, #12
 800f874:	f441 5480 	orr.w	r4, r1, #4096	@ 0x1000
 800f878:	4615      	mov	r5, r2
 800f87a:	2300      	movs	r3, #0
 800f87c:	2202      	movs	r2, #2
 800f87e:	a901      	add	r1, sp, #4
 800f880:	f8ad 4004 	strh.w	r4, [sp, #4]
 800f884:	f8ad 5006 	strh.w	r5, [sp, #6]
 800f888:	f7fd f95c 	bl	800cb44 <acc_rss_integration_sensor_device_transfer>
 800f88c:	b003      	add	sp, #12
 800f88e:	bd30      	pop	{r4, r5, pc}

0800f890 <acc_sensor_reg_field_write>:
 800f890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f894:	b082      	sub	sp, #8
 800f896:	461d      	mov	r5, r3
 800f898:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800f89c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	@ 0x28
 800f8a0:	f8ad 3000 	strh.w	r3, [sp]
 800f8a4:	2700      	movs	r7, #0
 800f8a6:	468a      	mov	sl, r1
 800f8a8:	4691      	mov	r9, r2
 800f8aa:	4669      	mov	r1, sp
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	2203      	movs	r2, #3
 800f8b0:	4680      	mov	r8, r0
 800f8b2:	f8ad 7002 	strh.w	r7, [sp, #2]
 800f8b6:	f8ad 7004 	strh.w	r7, [sp, #4]
 800f8ba:	f7fd f943 	bl	800cb44 <acc_rss_integration_sensor_device_transfer>
 800f8be:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800f8c2:	fa04 f10a 	lsl.w	r1, r4, sl
 800f8c6:	4071      	eors	r1, r6
 800f8c8:	ea01 0409 	and.w	r4, r1, r9
 800f8cc:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
 800f8d0:	4640      	mov	r0, r8
 800f8d2:	463b      	mov	r3, r7
 800f8d4:	4669      	mov	r1, sp
 800f8d6:	4074      	eors	r4, r6
 800f8d8:	2202      	movs	r2, #2
 800f8da:	f8ad 5000 	strh.w	r5, [sp]
 800f8de:	f8ad 4002 	strh.w	r4, [sp, #2]
 800f8e2:	f7fd f92f 	bl	800cb44 <acc_rss_integration_sensor_device_transfer>
 800f8e6:	b002      	add	sp, #8
 800f8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f8ec <acc_sensor_conf_read_instr>:
 800f8ec:	b530      	push	{r4, r5, lr}
 800f8ee:	b085      	sub	sp, #20
 800f8f0:	2401      	movs	r4, #1
 800f8f2:	f441 4120 	orr.w	r1, r1, #40960	@ 0xa000
 800f8f6:	4623      	mov	r3, r4
 800f8f8:	2500      	movs	r5, #0
 800f8fa:	f8ad 1004 	strh.w	r1, [sp, #4]
 800f8fe:	2205      	movs	r2, #5
 800f900:	a901      	add	r1, sp, #4
 800f902:	f8ad 4006 	strh.w	r4, [sp, #6]
 800f906:	f8ad 5008 	strh.w	r5, [sp, #8]
 800f90a:	f8cd 500a 	str.w	r5, [sp, #10]
 800f90e:	f7fd f919 	bl	800cb44 <acc_rss_integration_sensor_device_transfer>
 800f912:	f10d 000a 	add.w	r0, sp, #10
 800f916:	4622      	mov	r2, r4
 800f918:	4669      	mov	r1, sp
 800f91a:	f000 f92f 	bl	800fb7c <acc_utils_transfer_buffer_to_uint32>
 800f91e:	9800      	ldr	r0, [sp, #0]
 800f920:	b005      	add	sp, #20
 800f922:	bd30      	pop	{r4, r5, pc}

0800f924 <acc_cpd_pll_divisors_calculate>:
 800f924:	edd0 7a00 	vldr	s15, [r0]
 800f928:	ed9f 6a61 	vldr	s12, [pc, #388]	@ 800fab0 <acc_cpd_pll_divisors_calculate+0x18c>
 800f92c:	eddf 6a61 	vldr	s13, [pc, #388]	@ 800fab4 <acc_cpd_pll_divisors_calculate+0x190>
 800f930:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800f934:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f936:	4606      	mov	r6, r0
 800f938:	b083      	sub	sp, #12
 800f93a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800f93e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f942:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f946:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f94e:	ee17 3a10 	vmov	r3, s14
 800f952:	b29c      	uxth	r4, r3
 800f954:	dc06      	bgt.n	800f964 <acc_cpd_pll_divisors_calculate+0x40>
 800f956:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800fab8 <acc_cpd_pll_divisors_calculate+0x194>
 800f95a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f95e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f962:	d571      	bpl.n	800fa48 <acc_cpd_pll_divisors_calculate+0x124>
 800f964:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f96c:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800fabc <acc_cpd_pll_divisors_calculate+0x198>
 800f970:	bf4c      	ite	mi
 800f972:	4b53      	ldrmi	r3, [pc, #332]	@ (800fac0 <acc_cpd_pll_divisors_calculate+0x19c>)
 800f974:	4b53      	ldrpl	r3, [pc, #332]	@ (800fac4 <acc_cpd_pll_divisors_calculate+0x1a0>)
 800f976:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 800fabc <acc_cpd_pll_divisors_calculate+0x198>
 800f97a:	eddf 6a53 	vldr	s13, [pc, #332]	@ 800fac8 <acc_cpd_pll_divisors_calculate+0x1a4>
 800f97e:	4d53      	ldr	r5, [pc, #332]	@ (800facc <acc_cpd_pll_divisors_calculate+0x1a8>)
 800f980:	4953      	ldr	r1, [pc, #332]	@ (800fad0 <acc_cpd_pll_divisors_calculate+0x1ac>)
 800f982:	692f      	ldr	r7, [r5, #16]
 800f984:	bf48      	it	mi
 800f986:	eef1 7a67 	vnegmi.f32	s15, s15
 800f98a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f98e:	2000      	movs	r0, #0
 800f990:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800f994:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f99c:	ee17 2a10 	vmov	r2, s14
 800f9a0:	bf4c      	ite	mi
 800f9a2:	eeb1 7a67 	vnegmi.f32	s14, s15
 800f9a6:	eeb0 7a67 	vmovpl.f32	s14, s15
 800f9aa:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f9ae:	9200      	str	r2, [sp, #0]
 800f9b0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f9b4:	4a47      	ldr	r2, [pc, #284]	@ (800fad4 <acc_cpd_pll_divisors_calculate+0x1b0>)
 800f9b6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800f9ba:	3c10      	subs	r4, #16
 800f9bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f9c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f9c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f9c8:	edcd 7a01 	vstr	s15, [sp, #4]
 800f9cc:	47b8      	blx	r7
 800f9ce:	2cef      	cmp	r4, #239	@ 0xef
 800f9d0:	d937      	bls.n	800fa42 <acc_cpd_pll_divisors_calculate+0x11e>
 800f9d2:	edd6 7a00 	vldr	s15, [r6]
 800f9d6:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800fabc <acc_cpd_pll_divisors_calculate+0x198>
 800f9da:	ed9f 6a38 	vldr	s12, [pc, #224]	@ 800fabc <acc_cpd_pll_divisors_calculate+0x198>
 800f9de:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 800fac8 <acc_cpd_pll_divisors_calculate+0x1a4>
 800f9e2:	692c      	ldr	r4, [r5, #16]
 800f9e4:	493a      	ldr	r1, [pc, #232]	@ (800fad0 <acc_cpd_pll_divisors_calculate+0x1ac>)
 800f9e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ee:	bf48      	it	mi
 800f9f0:	eef1 7a67 	vnegmi.f32	s15, s15
 800f9f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f9f8:	bf4c      	ite	mi
 800f9fa:	4b31      	ldrmi	r3, [pc, #196]	@ (800fac0 <acc_cpd_pll_divisors_calculate+0x19c>)
 800f9fc:	4b31      	ldrpl	r3, [pc, #196]	@ (800fac4 <acc_cpd_pll_divisors_calculate+0x1a0>)
 800f9fe:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800fa02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fa06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa0a:	ee17 2a10 	vmov	r2, s14
 800fa0e:	bf4c      	ite	mi
 800fa10:	eeb1 7a67 	vnegmi.f32	s14, s15
 800fa14:	eeb0 7a67 	vmovpl.f32	s14, s15
 800fa18:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fa1c:	9200      	str	r2, [sp, #0]
 800fa1e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800fa22:	4a2c      	ldr	r2, [pc, #176]	@ (800fad4 <acc_cpd_pll_divisors_calculate+0x1b0>)
 800fa24:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800fa28:	2000      	movs	r0, #0
 800fa2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa36:	edcd 7a01 	vstr	s15, [sp, #4]
 800fa3a:	47a0      	blx	r4
 800fa3c:	2000      	movs	r0, #0
 800fa3e:	b003      	add	sp, #12
 800fa40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa42:	2000      	movs	r0, #0
 800fa44:	b003      	add	sp, #12
 800fa46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa48:	f1a4 0310 	sub.w	r3, r4, #16
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	2bef      	cmp	r3, #239	@ 0xef
 800fa50:	d901      	bls.n	800fa56 <acc_cpd_pll_divisors_calculate+0x132>
 800fa52:	4d1e      	ldr	r5, [pc, #120]	@ (800facc <acc_cpd_pll_divisors_calculate+0x1a8>)
 800fa54:	e7bf      	b.n	800f9d6 <acc_cpd_pll_divisors_calculate+0xb2>
 800fa56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa5a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800fad8 <acc_cpd_pll_divisors_calculate+0x1b4>
 800fa5e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800fadc <acc_cpd_pll_divisors_calculate+0x1b8>
 800fa62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa66:	2c3f      	cmp	r4, #63	@ 0x3f
 800fa68:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fa6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa70:	ee17 2a90 	vmov	r2, s15
 800fa74:	810a      	strh	r2, [r1, #8]
 800fa76:	d912      	bls.n	800fa9e <acc_cpd_pll_divisors_calculate+0x17a>
 800fa78:	2cbf      	cmp	r4, #191	@ 0xbf
 800fa7a:	f04f 0301 	mov.w	r3, #1
 800fa7e:	bf98      	it	ls
 800fa80:	f1a4 0240 	subls.w	r2, r4, #64	@ 0x40
 800fa84:	804b      	strh	r3, [r1, #2]
 800fa86:	bf8c      	ite	hi
 800fa88:	08e2      	lsrhi	r2, r4, #3
 800fa8a:	f3c2 02cf 	ubfxls	r2, r2, #3, #16
 800fa8e:	f004 0307 	and.w	r3, r4, #7
 800fa92:	808a      	strh	r2, [r1, #4]
 800fa94:	80cb      	strh	r3, [r1, #6]
 800fa96:	2001      	movs	r0, #1
 800fa98:	800c      	strh	r4, [r1, #0]
 800fa9a:	b003      	add	sp, #12
 800fa9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa9e:	2200      	movs	r2, #0
 800faa0:	2c2f      	cmp	r4, #47	@ 0x2f
 800faa2:	bf88      	it	hi
 800faa4:	4623      	movhi	r3, r4
 800faa6:	808b      	strh	r3, [r1, #4]
 800faa8:	804a      	strh	r2, [r1, #2]
 800faaa:	80ca      	strh	r2, [r1, #6]
 800faac:	e7f3      	b.n	800fa96 <acc_cpd_pll_divisors_calculate+0x172>
 800faae:	bf00      	nop
 800fab0:	4f1502f9 	.word	0x4f1502f9
 800fab4:	4c989680 	.word	0x4c989680
 800fab8:	4b989680 	.word	0x4b989680
 800fabc:	350637bd 	.word	0x350637bd
 800fac0:	08013990 	.word	0x08013990
 800fac4:	08013588 	.word	0x08013588
 800fac8:	49742400 	.word	0x49742400
 800facc:	200009dc 	.word	0x200009dc
 800fad0:	08013f80 	.word	0x08013f80
 800fad4:	08013f54 	.word	0x08013f54
 800fad8:	b55b38e8 	.word	0xb55b38e8
 800fadc:	427c0000 	.word	0x427c0000

0800fae0 <acc_cpd_pll_divisors_ref_divisor>:
 800fae0:	eddf 7a02 	vldr	s15, [pc, #8]	@ 800faec <acc_cpd_pll_divisors_ref_divisor+0xc>
 800fae4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800fae8:	f002 b82a 	b.w	8011b40 <roundf>
 800faec:	4f1502f9 	.word	0x4f1502f9

0800faf0 <acc_dll_calculate_area_settings>:
 800faf0:	0080      	lsls	r0, r0, #2
 800faf2:	b280      	uxth	r0, r0
 800faf4:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	428b      	cmp	r3, r1
 800fafc:	8010      	strh	r0, [r2, #0]
 800fafe:	8053      	strh	r3, [r2, #2]
 800fb00:	d20c      	bcs.n	800fb1c <acc_dll_calculate_area_settings+0x2c>
 800fb02:	2301      	movs	r3, #1
 800fb04:	2100      	movs	r1, #0
 800fb06:	2003      	movs	r0, #3
 800fb08:	8093      	strh	r3, [r2, #4]
 800fb0a:	8153      	strh	r3, [r2, #10]
 800fb0c:	8193      	strh	r3, [r2, #12]
 800fb0e:	8213      	strh	r3, [r2, #16]
 800fb10:	80d1      	strh	r1, [r2, #6]
 800fb12:	8251      	strh	r1, [r2, #18]
 800fb14:	8291      	strh	r1, [r2, #20]
 800fb16:	8110      	strh	r0, [r2, #8]
 800fb18:	81d0      	strh	r0, [r2, #14]
 800fb1a:	4770      	bx	lr
 800fb1c:	b430      	push	{r4, r5}
 800fb1e:	fbb3 f4f1 	udiv	r4, r3, r1
 800fb22:	2500      	movs	r5, #0
 800fb24:	fb01 3114 	mls	r1, r1, r4, r3
 800fb28:	2401      	movs	r4, #1
 800fb2a:	2303      	movs	r3, #3
 800fb2c:	8094      	strh	r4, [r2, #4]
 800fb2e:	80d4      	strh	r4, [r2, #6]
 800fb30:	8154      	strh	r4, [r2, #10]
 800fb32:	8214      	strh	r4, [r2, #16]
 800fb34:	8254      	strh	r4, [r2, #18]
 800fb36:	8195      	strh	r5, [r2, #12]
 800fb38:	81d5      	strh	r5, [r2, #14]
 800fb3a:	8295      	strh	r5, [r2, #20]
 800fb3c:	8050      	strh	r0, [r2, #2]
 800fb3e:	bc30      	pop	{r4, r5}
 800fb40:	8011      	strh	r1, [r2, #0]
 800fb42:	8113      	strh	r3, [r2, #8]
 800fb44:	4770      	bx	lr
 800fb46:	bf00      	nop

0800fb48 <acc_utils_swap16_array>:
 800fb48:	b141      	cbz	r1, 800fb5c <acc_utils_swap16_array+0x14>
 800fb4a:	3802      	subs	r0, #2
 800fb4c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800fb50:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800fb54:	ba5b      	rev16	r3, r3
 800fb56:	4288      	cmp	r0, r1
 800fb58:	8003      	strh	r3, [r0, #0]
 800fb5a:	d1f9      	bne.n	800fb50 <acc_utils_swap16_array+0x8>
 800fb5c:	4770      	bx	lr
 800fb5e:	bf00      	nop

0800fb60 <acc_utils_uint32_to_transfer_buffer>:
 800fb60:	b152      	cbz	r2, 800fb78 <acc_utils_uint32_to_transfer_buffer+0x18>
 800fb62:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800fb66:	3804      	subs	r0, #4
 800fb68:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800fb6c:	804b      	strh	r3, [r1, #2]
 800fb6e:	0c1b      	lsrs	r3, r3, #16
 800fb70:	800b      	strh	r3, [r1, #0]
 800fb72:	3104      	adds	r1, #4
 800fb74:	4291      	cmp	r1, r2
 800fb76:	d1f7      	bne.n	800fb68 <acc_utils_uint32_to_transfer_buffer+0x8>
 800fb78:	4770      	bx	lr
 800fb7a:	bf00      	nop

0800fb7c <acc_utils_transfer_buffer_to_uint32>:
 800fb7c:	b17a      	cbz	r2, 800fb9e <acc_utils_transfer_buffer_to_uint32+0x22>
 800fb7e:	b410      	push	{r4}
 800fb80:	3904      	subs	r1, #4
 800fb82:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 800fb86:	8802      	ldrh	r2, [r0, #0]
 800fb88:	8843      	ldrh	r3, [r0, #2]
 800fb8a:	3004      	adds	r0, #4
 800fb8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb90:	4284      	cmp	r4, r0
 800fb92:	f841 3f04 	str.w	r3, [r1, #4]!
 800fb96:	d1f6      	bne.n	800fb86 <acc_utils_transfer_buffer_to_uint32+0xa>
 800fb98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb9c:	4770      	bx	lr
 800fb9e:	4770      	bx	lr

0800fba0 <acc_alg_temp>:
 800fba0:	f240 13e5 	movw	r3, #485	@ 0x1e5
 800fba4:	fb03 f000 	mul.w	r0, r3, r0
 800fba8:	0c00      	lsrs	r0, r0, #16
 800fbaa:	f5a0 7089 	sub.w	r0, r0, #274	@ 0x112
 800fbae:	4770      	bx	lr

0800fbb0 <acc_diagnostic_log_set_scope>:
 800fbb0:	4b02      	ldr	r3, [pc, #8]	@ (800fbbc <acc_diagnostic_log_set_scope+0xc>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	b10b      	cbz	r3, 800fbba <acc_diagnostic_log_set_scope+0xa>
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	4718      	bx	r3
 800fbba:	4770      	bx	lr
 800fbbc:	2000088c 	.word	0x2000088c

0800fbc0 <acc_diagnostic_log_array>:
 800fbc0:	4b02      	ldr	r3, [pc, #8]	@ (800fbcc <acc_diagnostic_log_array+0xc>)
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	b10b      	cbz	r3, 800fbca <acc_diagnostic_log_array+0xa>
 800fbc6:	68db      	ldr	r3, [r3, #12]
 800fbc8:	4718      	bx	r3
 800fbca:	4770      	bx	lr
 800fbcc:	2000088c 	.word	0x2000088c

0800fbd0 <acc_diagnostic_log_scalar>:
 800fbd0:	4b02      	ldr	r3, [pc, #8]	@ (800fbdc <acc_diagnostic_log_scalar+0xc>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	b10b      	cbz	r3, 800fbda <acc_diagnostic_log_scalar+0xa>
 800fbd6:	695b      	ldr	r3, [r3, #20]
 800fbd8:	4718      	bx	r3
 800fbda:	4770      	bx	lr
 800fbdc:	2000088c 	.word	0x2000088c

0800fbe0 <acc_diagnostic_log_data_u16>:
 800fbe0:	4b02      	ldr	r3, [pc, #8]	@ (800fbec <acc_diagnostic_log_data_u16+0xc>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	b10b      	cbz	r3, 800fbea <acc_diagnostic_log_data_u16+0xa>
 800fbe6:	6a1b      	ldr	r3, [r3, #32]
 800fbe8:	4718      	bx	r3
 800fbea:	4770      	bx	lr
 800fbec:	2000088c 	.word	0x2000088c

0800fbf0 <acc_diagnostic_log_data_i16>:
 800fbf0:	4b02      	ldr	r3, [pc, #8]	@ (800fbfc <acc_diagnostic_log_data_i16+0xc>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	b10b      	cbz	r3, 800fbfa <acc_diagnostic_log_data_i16+0xa>
 800fbf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbf8:	4718      	bx	r3
 800fbfa:	4770      	bx	lr
 800fbfc:	2000088c 	.word	0x2000088c

0800fc00 <acc_image_a121_r1a_cal_session_get>:
 800fc00:	4800      	ldr	r0, [pc, #0]	@ (800fc04 <acc_image_a121_r1a_cal_session_get+0x4>)
 800fc02:	4770      	bx	lr
 800fc04:	08013f94 	.word	0x08013f94

0800fc08 <acc_image_a121_r1a_cal_session_param_table_get>:
 800fc08:	4800      	ldr	r0, [pc, #0]	@ (800fc0c <acc_image_a121_r1a_cal_session_param_table_get+0x4>)
 800fc0a:	4770      	bx	lr
 800fc0c:	08015628 	.word	0x08015628

0800fc10 <acc_alg_comp_iq_imb>:
 800fc10:	b430      	push	{r4, r5}
 800fc12:	8814      	ldrh	r4, [r2, #0]
 800fc14:	9a02      	ldr	r2, [sp, #8]
 800fc16:	f004 051f 	and.w	r5, r4, #31
 800fc1a:	3530      	adds	r5, #48	@ 0x30
 800fc1c:	fb00 f005 	mul.w	r0, r0, r5
 800fc20:	0aa5      	lsrs	r5, r4, #10
 800fc22:	3d20      	subs	r5, #32
 800fc24:	f3c4 1444 	ubfx	r4, r4, #5, #5
 800fc28:	fb01 f505 	mul.w	r5, r1, r5
 800fc2c:	2800      	cmp	r0, #0
 800fc2e:	f104 0430 	add.w	r4, r4, #48	@ 0x30
 800fc32:	fb01 f104 	mul.w	r1, r1, r4
 800fc36:	bfb8      	it	lt
 800fc38:	303f      	addlt	r0, #63	@ 0x3f
 800fc3a:	2d00      	cmp	r5, #0
 800fc3c:	bfb8      	it	lt
 800fc3e:	351f      	addlt	r5, #31
 800fc40:	2900      	cmp	r1, #0
 800fc42:	ea4f 10a0 	mov.w	r0, r0, asr #6
 800fc46:	bfb8      	it	lt
 800fc48:	313f      	addlt	r1, #63	@ 0x3f
 800fc4a:	eb00 1065 	add.w	r0, r0, r5, asr #5
 800fc4e:	1189      	asrs	r1, r1, #6
 800fc50:	8018      	strh	r0, [r3, #0]
 800fc52:	bc30      	pop	{r4, r5}
 800fc54:	8011      	strh	r1, [r2, #0]
 800fc56:	4770      	bx	lr

0800fc58 <acc_alg_iq_imb_comp_to_fix_point>:
 800fc58:	eef6 7a08 	vmov.f32	s15, #104	@ 0x3f400000  0.750
 800fc5c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800fd38 <acc_alg_iq_imb_comp_to_fix_point+0xe0>
 800fc60:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800fd3c <acc_alg_iq_imb_comp_to_fix_point+0xe4>
 800fc64:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fc68:	ee31 1a67 	vsub.f32	s2, s2, s15
 800fc6c:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fc70:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fc74:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800fc78:	ee70 0a86 	vadd.f32	s1, s1, s12
 800fc7c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fc80:	ee21 1a07 	vmul.f32	s2, s2, s14
 800fc84:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 800fc88:	ee60 0aa6 	vmul.f32	s1, s1, s13
 800fc8c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc94:	ee31 1a27 	vadd.f32	s2, s2, s15
 800fc98:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800fc9c:	dc22      	bgt.n	800fce4 <acc_alg_iq_imb_comp_to_fix_point+0x8c>
 800fc9e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fca6:	bf48      	it	mi
 800fca8:	2300      	movmi	r3, #0
 800fcaa:	d537      	bpl.n	800fd1c <acc_alg_iq_imb_comp_to_fix_point+0xc4>
 800fcac:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800fd40 <acc_alg_iq_imb_comp_to_fix_point+0xe8>
 800fcb0:	eef4 0ae7 	vcmpe.f32	s1, s15
 800fcb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb8:	dd1d      	ble.n	800fcf6 <acc_alg_iq_imb_comp_to_fix_point+0x9e>
 800fcba:	ea6f 5383 	mvn.w	r3, r3, lsl #22
 800fcbe:	ea6f 5393 	mvn.w	r3, r3, lsr #22
 800fcc2:	eef3 7a0f 	vmov.f32	s15, #63	@ 0x41f80000  31.0
 800fcc6:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800fcca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcce:	dc20      	bgt.n	800fd12 <acc_alg_iq_imb_comp_to_fix_point+0xba>
 800fcd0:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800fcd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcd8:	bf48      	it	mi
 800fcda:	2200      	movmi	r2, #0
 800fcdc:	d524      	bpl.n	800fd28 <acc_alg_iq_imb_comp_to_fix_point+0xd0>
 800fcde:	4313      	orrs	r3, r2
 800fce0:	8003      	strh	r3, [r0, #0]
 800fce2:	4770      	bx	lr
 800fce4:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800fd40 <acc_alg_iq_imb_comp_to_fix_point+0xe8>
 800fce8:	eef4 0ae7 	vcmpe.f32	s1, s15
 800fcec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf0:	f04f 031f 	mov.w	r3, #31
 800fcf4:	dce1      	bgt.n	800fcba <acc_alg_iq_imb_comp_to_fix_point+0x62>
 800fcf6:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800fcfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcfe:	d4e0      	bmi.n	800fcc2 <acc_alg_iq_imb_comp_to_fix_point+0x6a>
 800fd00:	eefc 0ae0 	vcvt.u32.f32	s1, s1
 800fd04:	ee10 2a90 	vmov	r2, s1
 800fd08:	b292      	uxth	r2, r2
 800fd0a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800fd0e:	b21b      	sxth	r3, r3
 800fd10:	e7d7      	b.n	800fcc2 <acc_alg_iq_imb_comp_to_fix_point+0x6a>
 800fd12:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800fd16:	4313      	orrs	r3, r2
 800fd18:	8003      	strh	r3, [r0, #0]
 800fd1a:	4770      	bx	lr
 800fd1c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800fd20:	ee10 3a10 	vmov	r3, s0
 800fd24:	b21b      	sxth	r3, r3
 800fd26:	e7c1      	b.n	800fcac <acc_alg_iq_imb_comp_to_fix_point+0x54>
 800fd28:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 800fd2c:	ee17 2a90 	vmov	r2, s15
 800fd30:	f342 020a 	sbfx	r2, r2, #0, #11
 800fd34:	0152      	lsls	r2, r2, #5
 800fd36:	e7d2      	b.n	800fcde <acc_alg_iq_imb_comp_to_fix_point+0x86>
 800fd38:	42800000 	.word	0x42800000
 800fd3c:	42000000 	.word	0x42000000
 800fd40:	427c0000 	.word	0x427c0000

0800fd44 <element_frame_reset>:
 800fd44:	6800      	ldr	r0, [r0, #0]
 800fd46:	68c3      	ldr	r3, [r0, #12]
 800fd48:	4718      	bx	r3
 800fd4a:	bf00      	nop

0800fd4c <element_frame_callback>:
 800fd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd4e:	6995      	ldr	r5, [r2, #24]
 800fd50:	782b      	ldrb	r3, [r5, #0]
 800fd52:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 800fd56:	4614      	mov	r4, r2
 800fd58:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800fd5c:	460f      	mov	r7, r1
 800fd5e:	f8b3 6044 	ldrh.w	r6, [r3, #68]	@ 0x44
 800fd62:	6963      	ldr	r3, [r4, #20]
 800fd64:	4601      	mov	r1, r0
 800fd66:	0072      	lsls	r2, r6, #1
 800fd68:	eb03 004e 	add.w	r0, r3, lr, lsl #1
 800fd6c:	f000 ff86 	bl	8010c7c <memmove>
 800fd70:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800fd72:	8869      	ldrh	r1, [r5, #2]
 800fd74:	7813      	ldrb	r3, [r2, #0]
 800fd76:	440e      	add	r6, r1
 800fd78:	806e      	strh	r6, [r5, #2]
 800fd7a:	b903      	cbnz	r3, 800fd7e <element_frame_callback+0x32>
 800fd7c:	793b      	ldrb	r3, [r7, #4]
 800fd7e:	7013      	strb	r3, [r2, #0]
 800fd80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd82:	bf00      	nop

0800fd84 <element_frame_event>:
 800fd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd88:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800fd8a:	f8d0 8018 	ldr.w	r8, [r0, #24]
 800fd8e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800fd92:	2400      	movs	r4, #0
 800fd94:	f8a8 4002 	strh.w	r4, [r8, #2]
 800fd98:	4605      	mov	r5, r0
 800fd9a:	701c      	strb	r4, [r3, #0]
 800fd9c:	f100 074c 	add.w	r7, r0, #76	@ 0x4c
 800fda0:	f857 6b04 	ldr.w	r6, [r7], #4
 800fda4:	4649      	mov	r1, r9
 800fda6:	4630      	mov	r0, r6
 800fda8:	b136      	cbz	r6, 800fdb8 <element_frame_event+0x34>
 800fdaa:	f000 fb11 	bl	80103d0 <acc_pipeline_subsweep_prepare_memory>
 800fdae:	f888 4000 	strb.w	r4, [r8]
 800fdb2:	4630      	mov	r0, r6
 800fdb4:	f000 fb24 	bl	8010400 <acc_pipeline_subsweep_produce>
 800fdb8:	3401      	adds	r4, #1
 800fdba:	b2e4      	uxtb	r4, r4
 800fdbc:	2c04      	cmp	r4, #4
 800fdbe:	d1ef      	bne.n	800fda0 <element_frame_event+0x1c>
 800fdc0:	6828      	ldr	r0, [r5, #0]
 800fdc2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdc6:	6843      	ldr	r3, [r0, #4]
 800fdc8:	4718      	bx	r3
 800fdca:	bf00      	nop

0800fdcc <element_frame_validate>:
 800fdcc:	b570      	push	{r4, r5, r6, lr}
 800fdce:	4604      	mov	r4, r0
 800fdd0:	6980      	ldr	r0, [r0, #24]
 800fdd2:	b178      	cbz	r0, 800fdf4 <element_frame_validate+0x28>
 800fdd4:	69e3      	ldr	r3, [r4, #28]
 800fdd6:	b143      	cbz	r3, 800fdea <element_frame_validate+0x1e>
 800fdd8:	f7fc ff2e 	bl	800cc38 <acc_rss_integration_log_level>
 800fddc:	b128      	cbz	r0, 800fdea <element_frame_validate+0x1e>
 800fdde:	4b0e      	ldr	r3, [pc, #56]	@ (800fe18 <element_frame_validate+0x4c>)
 800fde0:	4a0e      	ldr	r2, [pc, #56]	@ (800fe1c <element_frame_validate+0x50>)
 800fde2:	691b      	ldr	r3, [r3, #16]
 800fde4:	490e      	ldr	r1, [pc, #56]	@ (800fe20 <element_frame_validate+0x54>)
 800fde6:	2001      	movs	r0, #1
 800fde8:	4798      	blx	r3
 800fdea:	6820      	ldr	r0, [r4, #0]
 800fdec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fdf0:	6883      	ldr	r3, [r0, #8]
 800fdf2:	4718      	bx	r3
 800fdf4:	4d08      	ldr	r5, [pc, #32]	@ (800fe18 <element_frame_validate+0x4c>)
 800fdf6:	4a0b      	ldr	r2, [pc, #44]	@ (800fe24 <element_frame_validate+0x58>)
 800fdf8:	692b      	ldr	r3, [r5, #16]
 800fdfa:	4909      	ldr	r1, [pc, #36]	@ (800fe20 <element_frame_validate+0x54>)
 800fdfc:	4798      	blx	r3
 800fdfe:	69e3      	ldr	r3, [r4, #28]
 800fe00:	b13b      	cbz	r3, 800fe12 <element_frame_validate+0x46>
 800fe02:	f7fc ff19 	bl	800cc38 <acc_rss_integration_log_level>
 800fe06:	b120      	cbz	r0, 800fe12 <element_frame_validate+0x46>
 800fe08:	692b      	ldr	r3, [r5, #16]
 800fe0a:	4a04      	ldr	r2, [pc, #16]	@ (800fe1c <element_frame_validate+0x50>)
 800fe0c:	4904      	ldr	r1, [pc, #16]	@ (800fe20 <element_frame_validate+0x54>)
 800fe0e:	2001      	movs	r0, #1
 800fe10:	4798      	blx	r3
 800fe12:	2000      	movs	r0, #0
 800fe14:	bd70      	pop	{r4, r5, r6, pc}
 800fe16:	bf00      	nop
 800fe18:	200009dc 	.word	0x200009dc
 800fe1c:	08015938 	.word	0x08015938
 800fe20:	08015928 	.word	0x08015928
 800fe24:	0801590c 	.word	0x0801590c

0800fe28 <acc_element_frame_init>:
 800fe28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe2c:	460d      	mov	r5, r1
 800fe2e:	4b33      	ldr	r3, [pc, #204]	@ (800fefc <acc_element_frame_init+0xd4>)
 800fe30:	4a33      	ldr	r2, [pc, #204]	@ (800ff00 <acc_element_frame_init+0xd8>)
 800fe32:	4934      	ldr	r1, [pc, #208]	@ (800ff04 <acc_element_frame_init+0xdc>)
 800fe34:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 800fe38:	896e      	ldrh	r6, [r5, #10]
 800fe3a:	6043      	str	r3, [r0, #4]
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	e9c0 1202 	strd	r1, r2, [r0, #8]
 800fe42:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
 800fe46:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
 800fe4a:	f8a0 c038 	strh.w	ip, [r0, #56]	@ 0x38
 800fe4e:	8746      	strh	r6, [r0, #58]	@ 0x3a
 800fe50:	79aa      	ldrb	r2, [r5, #6]
 800fe52:	b087      	sub	sp, #28
 800fe54:	2a00      	cmp	r2, #0
 800fe56:	d04c      	beq.n	800fef2 <acc_element_frame_init+0xca>
 800fe58:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800ff14 <acc_element_frame_init+0xec>
 800fe5c:	4607      	mov	r7, r0
 800fe5e:	4699      	mov	r9, r3
 800fe60:	461c      	mov	r4, r3
 800fe62:	e007      	b.n	800fe74 <acc_element_frame_init+0x4c>
 800fe64:	79ab      	ldrb	r3, [r5, #6]
 800fe66:	fa5f f489 	uxtb.w	r4, r9
 800fe6a:	42a3      	cmp	r3, r4
 800fe6c:	d941      	bls.n	800fef2 <acc_element_frame_init+0xca>
 800fe6e:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 800fe72:	896e      	ldrh	r6, [r5, #10]
 800fe74:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800fe78:	69e8      	ldr	r0, [r5, #28]
 800fe7a:	f8ad 6012 	strh.w	r6, [sp, #18]
 800fe7e:	eb05 0144 	add.w	r1, r5, r4, lsl #1
 800fe82:	eb07 0244 	add.w	r2, r7, r4, lsl #1
 800fe86:	898b      	ldrh	r3, [r1, #12]
 800fe88:	8a89      	ldrh	r1, [r1, #20]
 800fe8a:	f8a2 1044 	strh.w	r1, [r2, #68]	@ 0x44
 800fe8e:	8793      	strh	r3, [r2, #60]	@ 0x3c
 800fe90:	4473      	add	r3, lr
 800fe92:	eb00 1204 	add.w	r2, r0, r4, lsl #4
 800fe96:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fe9a:	4668      	mov	r0, sp
 800fe9c:	682b      	ldr	r3, [r5, #0]
 800fe9e:	9302      	str	r3, [sp, #8]
 800fea0:	f8cd 8000 	str.w	r8, [sp]
 800fea4:	9701      	str	r7, [sp, #4]
 800fea6:	f8ad c010 	strh.w	ip, [sp, #16]
 800feaa:	f8ad 100e 	strh.w	r1, [sp, #14]
 800feae:	9205      	str	r2, [sp, #20]
 800feb0:	f000 fa1a 	bl	80102e8 <acc_pipeline_subsweep_assemble>
 800feb4:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 800feb8:	f109 0901 	add.w	r9, r9, #1
 800febc:	4606      	mov	r6, r0
 800febe:	64d8      	str	r0, [r3, #76]	@ 0x4c
 800fec0:	2800      	cmp	r0, #0
 800fec2:	d1cf      	bne.n	800fe64 <acc_element_frame_init+0x3c>
 800fec4:	4b10      	ldr	r3, [pc, #64]	@ (800ff08 <acc_element_frame_init+0xe0>)
 800fec6:	4a11      	ldr	r2, [pc, #68]	@ (800ff0c <acc_element_frame_init+0xe4>)
 800fec8:	691b      	ldr	r3, [r3, #16]
 800feca:	4911      	ldr	r1, [pc, #68]	@ (800ff10 <acc_element_frame_init+0xe8>)
 800fecc:	4798      	blx	r3
 800fece:	b164      	cbz	r4, 800feea <acc_element_frame_init+0xc2>
 800fed0:	3c01      	subs	r4, #1
 800fed2:	b2e4      	uxtb	r4, r4
 800fed4:	3413      	adds	r4, #19
 800fed6:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800feda:	3748      	adds	r7, #72	@ 0x48
 800fedc:	6820      	ldr	r0, [r4, #0]
 800fede:	f000 fa6b 	bl	80103b8 <acc_pipeline_subsweep_disassemble>
 800fee2:	f844 6904 	str.w	r6, [r4], #-4
 800fee6:	42a7      	cmp	r7, r4
 800fee8:	d1f8      	bne.n	800fedc <acc_element_frame_init+0xb4>
 800feea:	2000      	movs	r0, #0
 800feec:	b007      	add	sp, #28
 800feee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fef2:	2001      	movs	r0, #1
 800fef4:	b007      	add	sp, #28
 800fef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fefa:	bf00      	nop
 800fefc:	0800fd85 	.word	0x0800fd85
 800ff00:	0800fd45 	.word	0x0800fd45
 800ff04:	0800fdcd 	.word	0x0800fdcd
 800ff08:	200009dc 	.word	0x200009dc
 800ff0c:	08015948 	.word	0x08015948
 800ff10:	08015928 	.word	0x08015928
 800ff14:	0800fd4d 	.word	0x0800fd4d

0800ff18 <acc_element_frame_release>:
 800ff18:	b178      	cbz	r0, 800ff3a <acc_element_frame_release+0x22>
 800ff1a:	b570      	push	{r4, r5, r6, lr}
 800ff1c:	f100 044c 	add.w	r4, r0, #76	@ 0x4c
 800ff20:	f100 055c 	add.w	r5, r0, #92	@ 0x5c
 800ff24:	2600      	movs	r6, #0
 800ff26:	f854 0b04 	ldr.w	r0, [r4], #4
 800ff2a:	b118      	cbz	r0, 800ff34 <acc_element_frame_release+0x1c>
 800ff2c:	f000 fa44 	bl	80103b8 <acc_pipeline_subsweep_disassemble>
 800ff30:	f844 6c04 	str.w	r6, [r4, #-4]
 800ff34:	42ac      	cmp	r4, r5
 800ff36:	d1f6      	bne.n	800ff26 <acc_element_frame_release+0xe>
 800ff38:	bd70      	pop	{r4, r5, r6, pc}
 800ff3a:	4770      	bx	lr

0800ff3c <element_frame_aux_reset>:
 800ff3c:	6800      	ldr	r0, [r0, #0]
 800ff3e:	68c3      	ldr	r3, [r0, #12]
 800ff40:	4718      	bx	r3
 800ff42:	bf00      	nop

0800ff44 <element_frame_aux_validate>:
 800ff44:	6800      	ldr	r0, [r0, #0]
 800ff46:	6883      	ldr	r3, [r0, #8]
 800ff48:	4718      	bx	r3
 800ff4a:	bf00      	nop

0800ff4c <element_frame_aux_event>:
 800ff4c:	b570      	push	{r4, r5, r6, lr}
 800ff4e:	6902      	ldr	r2, [r0, #16]
 800ff50:	f8b0 1042 	ldrh.w	r1, [r0, #66]	@ 0x42
 800ff54:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ff58:	4604      	mov	r4, r0
 800ff5a:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 800ff5e:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800ff60:	2b03      	cmp	r3, #3
 800ff62:	bf08      	it	eq
 800ff64:	f480 4000 	eoreq.w	r0, r0, #32768	@ 0x8000
 800ff68:	f7ff fe1a 	bl	800fba0 <acc_alg_temp>
 800ff6c:	8028      	strh	r0, [r5, #0]
 800ff6e:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 800ff70:	6923      	ldr	r3, [r4, #16]
 800ff72:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800ff76:	b14a      	cbz	r2, 800ff8c <element_frame_aux_event+0x40>
 800ff78:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 800ff7c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800ff80:	2a01      	cmp	r2, #1
 800ff82:	d903      	bls.n	800ff8c <element_frame_aux_event+0x40>
 800ff84:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800ff86:	2101      	movs	r1, #1
 800ff88:	7011      	strb	r1, [r2, #0]
 800ff8a:	e002      	b.n	800ff92 <element_frame_aux_event+0x46>
 800ff8c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800ff8e:	2100      	movs	r1, #0
 800ff90:	7011      	strb	r1, [r2, #0]
 800ff92:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 800ff94:	8fe0      	ldrh	r0, [r4, #62]	@ 0x3e
 800ff96:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800ff9a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800ff9e:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800ffa0:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800ffa2:	882d      	ldrh	r5, [r5, #0]
 800ffa4:	f1a2 0301 	sub.w	r3, r2, #1
 800ffa8:	fab3 f383 	clz	r3, r3
 800ffac:	095b      	lsrs	r3, r3, #5
 800ffae:	700b      	strb	r3, [r1, #0]
 800ffb0:	f7ff fdf6 	bl	800fba0 <acc_alg_temp>
 800ffb4:	1a2d      	subs	r5, r5, r0
 800ffb6:	b22d      	sxth	r5, r5
 800ffb8:	2d00      	cmp	r5, #0
 800ffba:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 800ffbe:	6820      	ldr	r0, [r4, #0]
 800ffc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ffc2:	bfb8      	it	lt
 800ffc4:	426d      	neglt	r5, r5
 800ffc6:	b22d      	sxth	r5, r5
 800ffc8:	42ab      	cmp	r3, r5
 800ffca:	bfac      	ite	ge
 800ffcc:	2500      	movge	r5, #0
 800ffce:	2501      	movlt	r5, #1
 800ffd0:	7015      	strb	r5, [r2, #0]
 800ffd2:	6843      	ldr	r3, [r0, #4]
 800ffd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ffd8:	4718      	bx	r3
 800ffda:	bf00      	nop

0800ffdc <acc_element_frame_aux_init>:
 800ffdc:	b430      	push	{r4, r5}
 800ffde:	880b      	ldrh	r3, [r1, #0]
 800ffe0:	4d0c      	ldr	r5, [pc, #48]	@ (8010014 <acc_element_frame_aux_init+0x38>)
 800ffe2:	4c0d      	ldr	r4, [pc, #52]	@ (8010018 <acc_element_frame_aux_init+0x3c>)
 800ffe4:	4a0d      	ldr	r2, [pc, #52]	@ (801001c <acc_element_frame_aux_init+0x40>)
 800ffe6:	6045      	str	r5, [r0, #4]
 800ffe8:	884d      	ldrh	r5, [r1, #2]
 800ffea:	6084      	str	r4, [r0, #8]
 800ffec:	888c      	ldrh	r4, [r1, #4]
 800ffee:	60c2      	str	r2, [r0, #12]
 800fff0:	88ca      	ldrh	r2, [r1, #6]
 800fff2:	8743      	strh	r3, [r0, #58]	@ 0x3a
 800fff4:	890b      	ldrh	r3, [r1, #8]
 800fff6:	f8a0 3042 	strh.w	r3, [r0, #66]	@ 0x42
 800fffa:	8785      	strh	r5, [r0, #60]	@ 0x3c
 800fffc:	87c4      	strh	r4, [r0, #62]	@ 0x3e
 800fffe:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8010002:	7b0b      	ldrb	r3, [r1, #12]
 8010004:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8010008:	894b      	ldrh	r3, [r1, #10]
 801000a:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
 801000e:	bc30      	pop	{r4, r5}
 8010010:	2001      	movs	r0, #1
 8010012:	4770      	bx	lr
 8010014:	0800ff4d 	.word	0x0800ff4d
 8010018:	0800ff45 	.word	0x0800ff45
 801001c:	0800ff3d 	.word	0x0800ff3d

08010020 <acc_element_frame_aux_release>:
 8010020:	4770      	bx	lr
 8010022:	bf00      	nop

08010024 <sink_a121_callback_consume>:
 8010024:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	@ 0x3c
 8010028:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 801002a:	6900      	ldr	r0, [r0, #16]
 801002c:	4718      	bx	r3
 801002e:	bf00      	nop

08010030 <sink_a121_callback_reset>:
 8010030:	4770      	bx	lr
 8010032:	bf00      	nop

08010034 <sink_a121_callback_validate>:
 8010034:	6983      	ldr	r3, [r0, #24]
 8010036:	b510      	push	{r4, lr}
 8010038:	4604      	mov	r4, r0
 801003a:	b1bb      	cbz	r3, 801006c <sink_a121_callback_validate+0x38>
 801003c:	f7fc fdfc 	bl	800cc38 <acc_rss_integration_log_level>
 8010040:	b948      	cbnz	r0, 8010056 <sink_a121_callback_validate+0x22>
 8010042:	6963      	ldr	r3, [r4, #20]
 8010044:	b183      	cbz	r3, 8010068 <sink_a121_callback_validate+0x34>
 8010046:	4b0b      	ldr	r3, [pc, #44]	@ (8010074 <sink_a121_callback_validate+0x40>)
 8010048:	4a0b      	ldr	r2, [pc, #44]	@ (8010078 <sink_a121_callback_validate+0x44>)
 801004a:	691b      	ldr	r3, [r3, #16]
 801004c:	490b      	ldr	r1, [pc, #44]	@ (801007c <sink_a121_callback_validate+0x48>)
 801004e:	2000      	movs	r0, #0
 8010050:	4798      	blx	r3
 8010052:	2000      	movs	r0, #0
 8010054:	bd10      	pop	{r4, pc}
 8010056:	4b07      	ldr	r3, [pc, #28]	@ (8010074 <sink_a121_callback_validate+0x40>)
 8010058:	4a09      	ldr	r2, [pc, #36]	@ (8010080 <sink_a121_callback_validate+0x4c>)
 801005a:	691b      	ldr	r3, [r3, #16]
 801005c:	4907      	ldr	r1, [pc, #28]	@ (801007c <sink_a121_callback_validate+0x48>)
 801005e:	2001      	movs	r0, #1
 8010060:	4798      	blx	r3
 8010062:	6963      	ldr	r3, [r4, #20]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d1ee      	bne.n	8010046 <sink_a121_callback_validate+0x12>
 8010068:	2001      	movs	r0, #1
 801006a:	bd10      	pop	{r4, pc}
 801006c:	69c3      	ldr	r3, [r0, #28]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d1e4      	bne.n	801003c <sink_a121_callback_validate+0x8>
 8010072:	e7e6      	b.n	8010042 <sink_a121_callback_validate+0xe>
 8010074:	200009dc 	.word	0x200009dc
 8010078:	080159a4 	.word	0x080159a4
 801007c:	08015988 	.word	0x08015988
 8010080:	0801596c 	.word	0x0801596c

08010084 <acc_element_sink_a121_callback_init>:
 8010084:	b410      	push	{r4}
 8010086:	4a05      	ldr	r2, [pc, #20]	@ (801009c <acc_element_sink_a121_callback_init+0x18>)
 8010088:	4c05      	ldr	r4, [pc, #20]	@ (80100a0 <acc_element_sink_a121_callback_init+0x1c>)
 801008a:	4b06      	ldr	r3, [pc, #24]	@ (80100a4 <acc_element_sink_a121_callback_init+0x20>)
 801008c:	6401      	str	r1, [r0, #64]	@ 0x40
 801008e:	e9c0 4201 	strd	r4, r2, [r0, #4]
 8010092:	60c3      	str	r3, [r0, #12]
 8010094:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010098:	4770      	bx	lr
 801009a:	bf00      	nop
 801009c:	08010035 	.word	0x08010035
 80100a0:	08010025 	.word	0x08010025
 80100a4:	08010031 	.word	0x08010031

080100a8 <patch_program_parameters>:
 80100a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ac:	f5c2 661d 	rsb	r6, r2, #2512	@ 0x9d0
 80100b0:	469a      	mov	sl, r3
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	360e      	adds	r6, #14
 80100b6:	42b3      	cmp	r3, r6
 80100b8:	b083      	sub	sp, #12
 80100ba:	bf94      	ite	ls
 80100bc:	b29e      	uxthls	r6, r3
 80100be:	b2b6      	uxthhi	r6, r6
 80100c0:	4690      	mov	r8, r2
 80100c2:	4605      	mov	r5, r0
 80100c4:	4689      	mov	r9, r1
 80100c6:	f000 f9a7 	bl	8010418 <acc_image_a121_r1a_meas_session_get>
 80100ca:	ea4f 0358 	mov.w	r3, r8, lsr #1
 80100ce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80100d2:	0872      	lsrs	r2, r6, #1
 80100d4:	4649      	mov	r1, r9
 80100d6:	f7ff fb5b 	bl	800f790 <acc_confprogram_copy>
 80100da:	f000 f9a5 	bl	8010428 <acc_cpd_a121_meas_session_parameters_patch_table_get>
 80100de:	4607      	mov	r7, r0
 80100e0:	3d02      	subs	r5, #2
 80100e2:	1e44      	subs	r4, r0, #1
 80100e4:	37e1      	adds	r7, #225	@ 0xe1
 80100e6:	f814 bf01 	ldrb.w	fp, [r4, #1]!
 80100ea:	f000 f999 	bl	8010420 <acc_image_a121_r1a_meas_session_param_table_get>
 80100ee:	f835 2f02 	ldrh.w	r2, [r5, #2]!
 80100f2:	4603      	mov	r3, r0
 80100f4:	e9cd b200 	strd	fp, r2, [sp]
 80100f8:	4641      	mov	r1, r8
 80100fa:	4632      	mov	r2, r6
 80100fc:	4648      	mov	r0, r9
 80100fe:	f7ff fa7d 	bl	800f5fc <acc_confprogram_patch_offset>
 8010102:	42bc      	cmp	r4, r7
 8010104:	d001      	beq.n	801010a <patch_program_parameters+0x62>
 8010106:	2800      	cmp	r0, #0
 8010108:	d1ed      	bne.n	80100e6 <patch_program_parameters+0x3e>
 801010a:	f8ca 6000 	str.w	r6, [sl]
 801010e:	b003      	add	sp, #12
 8010110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010114 <get_parameter_patch_range.constprop.0>:
 8010114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010118:	b085      	sub	sp, #20
 801011a:	4606      	mov	r6, r0
 801011c:	460d      	mov	r5, r1
 801011e:	4693      	mov	fp, r2
 8010120:	469a      	mov	sl, r3
 8010122:	f000 f981 	bl	8010428 <acc_cpd_a121_meas_session_parameters_patch_table_get>
 8010126:	3e02      	subs	r6, #2
 8010128:	4604      	mov	r4, r0
 801012a:	3d02      	subs	r5, #2
 801012c:	f100 09e2 	add.w	r9, r0, #226	@ 0xe2
 8010130:	2700      	movs	r7, #0
 8010132:	f640 18de 	movw	r8, #2526	@ 0x9de
 8010136:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 801013a:	f835 3f02 	ldrh.w	r3, [r5, #2]!
 801013e:	429a      	cmp	r2, r3
 8010140:	d013      	beq.n	801016a <get_parameter_patch_range.constprop.0+0x56>
 8010142:	7821      	ldrb	r1, [r4, #0]
 8010144:	9101      	str	r1, [sp, #4]
 8010146:	f000 f96b 	bl	8010420 <acc_image_a121_r1a_meas_session_param_table_get>
 801014a:	f10d 030e 	add.w	r3, sp, #14
 801014e:	aa03      	add	r2, sp, #12
 8010150:	9901      	ldr	r1, [sp, #4]
 8010152:	f7ff fb2b 	bl	800f7ac <acc_confprogram_get_parameter_patch_range>
 8010156:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801015a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801015e:	4590      	cmp	r8, r2
 8010160:	bf28      	it	cs
 8010162:	4690      	movcs	r8, r2
 8010164:	429f      	cmp	r7, r3
 8010166:	bf38      	it	cc
 8010168:	461f      	movcc	r7, r3
 801016a:	3401      	adds	r4, #1
 801016c:	454c      	cmp	r4, r9
 801016e:	d1e2      	bne.n	8010136 <get_parameter_patch_range.constprop.0+0x22>
 8010170:	f8ab 8000 	strh.w	r8, [fp]
 8010174:	f8aa 7000 	strh.w	r7, [sl]
 8010178:	b005      	add	sp, #20
 801017a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801017e:	bf00      	nop

08010180 <acc_cpd_a121_meas_session_load_program>:
 8010180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010184:	4688      	mov	r8, r1
 8010186:	b084      	sub	sp, #16
 8010188:	4607      	mov	r7, r0
 801018a:	4611      	mov	r1, r2
 801018c:	4640      	mov	r0, r8
 801018e:	4699      	mov	r9, r3
 8010190:	2400      	movs	r4, #0
 8010192:	ab02      	add	r3, sp, #8
 8010194:	aa01      	add	r2, sp, #4
 8010196:	e9cd 4401 	strd	r4, r4, [sp, #4]
 801019a:	f7fd f9e9 	bl	800d570 <acc_sensor_a121_prepare_load_confmem>
 801019e:	4638      	mov	r0, r7
 80101a0:	f7fd fa90 	bl	800d6c4 <acc_sensor_protocol_a121_prepare_load>
 80101a4:	b1d8      	cbz	r0, 80101de <acc_cpd_a121_meas_session_load_program+0x5e>
 80101a6:	9d02      	ldr	r5, [sp, #8]
 80101a8:	f640 1add 	movw	sl, #2525	@ 0x9dd
 80101ac:	e000      	b.n	80101b0 <acc_cpd_a121_meas_session_load_program+0x30>
 80101ae:	b1b6      	cbz	r6, 80101de <acc_cpd_a121_meas_session_load_program+0x5e>
 80101b0:	4622      	mov	r2, r4
 80101b2:	9901      	ldr	r1, [sp, #4]
 80101b4:	9503      	str	r5, [sp, #12]
 80101b6:	ab03      	add	r3, sp, #12
 80101b8:	4648      	mov	r0, r9
 80101ba:	f7ff ff75 	bl	80100a8 <patch_program_parameters>
 80101be:	0861      	lsrs	r1, r4, #1
 80101c0:	4606      	mov	r6, r0
 80101c2:	9b03      	ldr	r3, [sp, #12]
 80101c4:	4638      	mov	r0, r7
 80101c6:	4642      	mov	r2, r8
 80101c8:	f7fd f9ea 	bl	800d5a0 <acc_sensor_a121_load_confmem>
 80101cc:	9d02      	ldr	r5, [sp, #8]
 80101ce:	442c      	add	r4, r5
 80101d0:	b2a4      	uxth	r4, r4
 80101d2:	4554      	cmp	r4, sl
 80101d4:	4630      	mov	r0, r6
 80101d6:	d9ea      	bls.n	80101ae <acc_cpd_a121_meas_session_load_program+0x2e>
 80101d8:	b004      	add	sp, #16
 80101da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101de:	2000      	movs	r0, #0
 80101e0:	b004      	add	sp, #16
 80101e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101e6:	bf00      	nop

080101e8 <acc_cpd_a121_meas_session_run_program>:
 80101e8:	2115      	movs	r1, #21
 80101ea:	f7fd bac1 	b.w	800d770 <acc_sensor_protocol_a121_run_program>
 80101ee:	bf00      	nop

080101f0 <acc_cpd_a121_meas_session_is_patch_needed>:
 80101f0:	b500      	push	{lr}
 80101f2:	b083      	sub	sp, #12
 80101f4:	f10d 0306 	add.w	r3, sp, #6
 80101f8:	aa01      	add	r2, sp, #4
 80101fa:	f7ff ff8b 	bl	8010114 <get_parameter_patch_range.constprop.0>
 80101fe:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8010202:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010206:	4298      	cmp	r0, r3
 8010208:	bf34      	ite	cc
 801020a:	2000      	movcc	r0, #0
 801020c:	2001      	movcs	r0, #1
 801020e:	b003      	add	sp, #12
 8010210:	f85d fb04 	ldr.w	pc, [sp], #4

08010214 <acc_cpd_a121_meas_session_update_program>:
 8010214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010218:	b085      	sub	sp, #20
 801021a:	468a      	mov	sl, r1
 801021c:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 8010220:	4693      	mov	fp, r2
 8010222:	461c      	mov	r4, r3
 8010224:	4607      	mov	r7, r0
 8010226:	f7fd fa8f 	bl	800d748 <acc_sensor_protocol_a121_is_ready_to_update>
 801022a:	b198      	cbz	r0, 8010254 <acc_cpd_a121_meas_session_update_program+0x40>
 801022c:	4620      	mov	r0, r4
 801022e:	ab03      	add	r3, sp, #12
 8010230:	aa02      	add	r2, sp, #8
 8010232:	4649      	mov	r1, r9
 8010234:	f7ff ff6e 	bl	8010114 <get_parameter_patch_range.constprop.0>
 8010238:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 801023c:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 8010240:	4544      	cmp	r4, r8
 8010242:	d91c      	bls.n	801027e <acc_cpd_a121_meas_session_update_program+0x6a>
 8010244:	2501      	movs	r5, #1
 8010246:	4638      	mov	r0, r7
 8010248:	f7fd fc60 	bl	800db0c <acc_sensor_protocol_a121_reconfigure>
 801024c:	4628      	mov	r0, r5
 801024e:	b005      	add	sp, #20
 8010250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010254:	4638      	mov	r0, r7
 8010256:	f7fd fc43 	bl	800dae0 <acc_sensor_protocol_a121_is_hibernate>
 801025a:	4605      	mov	r5, r0
 801025c:	2800      	cmp	r0, #0
 801025e:	d1e5      	bne.n	801022c <acc_cpd_a121_meas_session_update_program+0x18>
 8010260:	f7fc fcea 	bl	800cc38 <acc_rss_integration_log_level>
 8010264:	2800      	cmp	r0, #0
 8010266:	d0f1      	beq.n	801024c <acc_cpd_a121_meas_session_update_program+0x38>
 8010268:	4b18      	ldr	r3, [pc, #96]	@ (80102cc <acc_cpd_a121_meas_session_update_program+0xb8>)
 801026a:	4a19      	ldr	r2, [pc, #100]	@ (80102d0 <acc_cpd_a121_meas_session_update_program+0xbc>)
 801026c:	691c      	ldr	r4, [r3, #16]
 801026e:	4919      	ldr	r1, [pc, #100]	@ (80102d4 <acc_cpd_a121_meas_session_update_program+0xc0>)
 8010270:	463b      	mov	r3, r7
 8010272:	2001      	movs	r0, #1
 8010274:	47a0      	blx	r4
 8010276:	4628      	mov	r0, r5
 8010278:	b005      	add	sp, #20
 801027a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801027e:	ab02      	add	r3, sp, #8
 8010280:	f108 0602 	add.w	r6, r8, #2
 8010284:	4659      	mov	r1, fp
 8010286:	aa01      	add	r2, sp, #4
 8010288:	4650      	mov	r0, sl
 801028a:	f7fd f971 	bl	800d570 <acc_sensor_a121_prepare_load_confmem>
 801028e:	1b36      	subs	r6, r6, r4
 8010290:	9b02      	ldr	r3, [sp, #8]
 8010292:	b2b6      	uxth	r6, r6
 8010294:	429e      	cmp	r6, r3
 8010296:	bf28      	it	cs
 8010298:	461e      	movcs	r6, r3
 801029a:	9602      	str	r6, [sp, #8]
 801029c:	e004      	b.n	80102a8 <acc_cpd_a121_meas_session_update_program+0x94>
 801029e:	9e02      	ldr	r6, [sp, #8]
 80102a0:	4434      	add	r4, r6
 80102a2:	b2a4      	uxth	r4, r4
 80102a4:	4544      	cmp	r4, r8
 80102a6:	d8ce      	bhi.n	8010246 <acc_cpd_a121_meas_session_update_program+0x32>
 80102a8:	9901      	ldr	r1, [sp, #4]
 80102aa:	9603      	str	r6, [sp, #12]
 80102ac:	ab03      	add	r3, sp, #12
 80102ae:	4622      	mov	r2, r4
 80102b0:	4648      	mov	r0, r9
 80102b2:	f7ff fef9 	bl	80100a8 <patch_program_parameters>
 80102b6:	4605      	mov	r5, r0
 80102b8:	2800      	cmp	r0, #0
 80102ba:	d0f0      	beq.n	801029e <acc_cpd_a121_meas_session_update_program+0x8a>
 80102bc:	9b03      	ldr	r3, [sp, #12]
 80102be:	4652      	mov	r2, sl
 80102c0:	0861      	lsrs	r1, r4, #1
 80102c2:	4638      	mov	r0, r7
 80102c4:	f7fd f96c 	bl	800d5a0 <acc_sensor_a121_load_confmem>
 80102c8:	e7e9      	b.n	801029e <acc_cpd_a121_meas_session_update_program+0x8a>
 80102ca:	bf00      	nop
 80102cc:	200009dc 	.word	0x200009dc
 80102d0:	080159cc 	.word	0x080159cc
 80102d4:	080159f0 	.word	0x080159f0

080102d8 <acc_cpd_a121_meas_session_transfer_data>:
 80102d8:	b410      	push	{r4}
 80102da:	460c      	mov	r4, r1
 80102dc:	4611      	mov	r1, r2
 80102de:	4622      	mov	r2, r4
 80102e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102e4:	f7fd b986 	b.w	800d5f4 <acc_sensor_a121_buffer_processed_read>

080102e8 <acc_pipeline_subsweep_assemble>:
 80102e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102ea:	4a30      	ldr	r2, [pc, #192]	@ (80103ac <acc_pipeline_subsweep_assemble+0xc4>)
 80102ec:	b085      	sub	sp, #20
 80102ee:	4605      	mov	r5, r0
 80102f0:	2333      	movs	r3, #51	@ 0x33
 80102f2:	21e8      	movs	r1, #232	@ 0xe8
 80102f4:	2001      	movs	r0, #1
 80102f6:	f7fc fc6f 	bl	800cbd8 <acc_rss_integration_mem_calloc_debug>
 80102fa:	4604      	mov	r4, r0
 80102fc:	2800      	cmp	r0, #0
 80102fe:	d042      	beq.n	8010386 <acc_pipeline_subsweep_assemble+0x9e>
 8010300:	89ab      	ldrh	r3, [r5, #12]
 8010302:	68a9      	ldr	r1, [r5, #8]
 8010304:	8a2e      	ldrh	r6, [r5, #16]
 8010306:	8a6a      	ldrh	r2, [r5, #18]
 8010308:	f8ad 3004 	strh.w	r3, [sp, #4]
 801030c:	f100 073c 	add.w	r7, r0, #60	@ 0x3c
 8010310:	696b      	ldr	r3, [r5, #20]
 8010312:	9100      	str	r1, [sp, #0]
 8010314:	f8ad 6006 	strh.w	r6, [sp, #6]
 8010318:	4669      	mov	r1, sp
 801031a:	f104 0694 	add.w	r6, r4, #148	@ 0x94
 801031e:	4638      	mov	r0, r7
 8010320:	f8ad 2008 	strh.w	r2, [sp, #8]
 8010324:	9303      	str	r3, [sp, #12]
 8010326:	f000 f975 	bl	8010614 <acc_element_phase_enhancement_init>
 801032a:	6829      	ldr	r1, [r5, #0]
 801032c:	4630      	mov	r0, r6
 801032e:	f7ff fea9 	bl	8010084 <acc_element_sink_a121_callback_init>
 8010332:	89eb      	ldrh	r3, [r5, #14]
 8010334:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 8010338:	6868      	ldr	r0, [r5, #4]
 801033a:	f8c4 00d0 	str.w	r0, [r4, #208]	@ 0xd0
 801033e:	005b      	lsls	r3, r3, #1
 8010340:	2200      	movs	r2, #0
 8010342:	f104 05e0 	add.w	r5, r4, #224	@ 0xe0
 8010346:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 801034a:	f104 03e4 	add.w	r3, r4, #228	@ 0xe4
 801034e:	f8a4 c092 	strh.w	ip, [r4, #146]	@ 0x92
 8010352:	f8a4 c0d8 	strh.w	ip, [r4, #216]	@ 0xd8
 8010356:	8722      	strh	r2, [r4, #56]	@ 0x38
 8010358:	f8a4 2090 	strh.w	r2, [r4, #144]	@ 0x90
 801035c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8010360:	4639      	mov	r1, r7
 8010362:	6265      	str	r5, [r4, #36]	@ 0x24
 8010364:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 8010368:	4620      	mov	r0, r4
 801036a:	f7ff fa51 	bl	800f810 <acc_element_connect>
 801036e:	4631      	mov	r1, r6
 8010370:	4638      	mov	r0, r7
 8010372:	f7ff fa4d 	bl	800f810 <acc_element_connect>
 8010376:	6820      	ldr	r0, [r4, #0]
 8010378:	6883      	ldr	r3, [r0, #8]
 801037a:	4798      	blx	r3
 801037c:	4605      	mov	r5, r0
 801037e:	b128      	cbz	r0, 801038c <acc_pipeline_subsweep_assemble+0xa4>
 8010380:	6820      	ldr	r0, [r4, #0]
 8010382:	68c3      	ldr	r3, [r0, #12]
 8010384:	4798      	blx	r3
 8010386:	4620      	mov	r0, r4
 8010388:	b005      	add	sp, #20
 801038a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801038c:	4b08      	ldr	r3, [pc, #32]	@ (80103b0 <acc_pipeline_subsweep_assemble+0xc8>)
 801038e:	4a09      	ldr	r2, [pc, #36]	@ (80103b4 <acc_pipeline_subsweep_assemble+0xcc>)
 8010390:	691b      	ldr	r3, [r3, #16]
 8010392:	4906      	ldr	r1, [pc, #24]	@ (80103ac <acc_pipeline_subsweep_assemble+0xc4>)
 8010394:	4798      	blx	r3
 8010396:	4638      	mov	r0, r7
 8010398:	f000 f96e 	bl	8010678 <acc_element_phase_enhancement_release>
 801039c:	4620      	mov	r0, r4
 801039e:	f7fc fc37 	bl	800cc10 <acc_rss_integration_mem_free>
 80103a2:	462c      	mov	r4, r5
 80103a4:	4620      	mov	r0, r4
 80103a6:	b005      	add	sp, #20
 80103a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103aa:	bf00      	nop
 80103ac:	08015a08 	.word	0x08015a08
 80103b0:	200009dc 	.word	0x200009dc
 80103b4:	080133b4 	.word	0x080133b4

080103b8 <acc_pipeline_subsweep_disassemble>:
 80103b8:	b148      	cbz	r0, 80103ce <acc_pipeline_subsweep_disassemble+0x16>
 80103ba:	b510      	push	{r4, lr}
 80103bc:	4604      	mov	r4, r0
 80103be:	303c      	adds	r0, #60	@ 0x3c
 80103c0:	f000 f95a 	bl	8010678 <acc_element_phase_enhancement_release>
 80103c4:	4620      	mov	r0, r4
 80103c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103ca:	f7fc bc21 	b.w	800cc10 <acc_rss_integration_mem_free>
 80103ce:	4770      	bx	lr

080103d0 <acc_pipeline_subsweep_prepare_memory>:
 80103d0:	b430      	push	{r4, r5}
 80103d2:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 80103d6:	f8b0 50d8 	ldrh.w	r5, [r0, #216]	@ 0xd8
 80103da:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 80103dc:	f8b0 3092 	ldrh.w	r3, [r0, #146]	@ 0x92
 80103e0:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 80103e4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80103e8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80103ec:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 80103f0:	6144      	str	r4, [r0, #20]
 80103f2:	e9c0 2313 	strd	r2, r3, [r0, #76]	@ 0x4c
 80103f6:	bc30      	pop	{r4, r5}
 80103f8:	f8c0 10a4 	str.w	r1, [r0, #164]	@ 0xa4
 80103fc:	4770      	bx	lr
 80103fe:	bf00      	nop

08010400 <acc_pipeline_subsweep_produce>:
 8010400:	6803      	ldr	r3, [r0, #0]
 8010402:	f8d0 20dc 	ldr.w	r2, [r0, #220]	@ 0xdc
 8010406:	f8c0 20e0 	str.w	r2, [r0, #224]	@ 0xe0
 801040a:	2100      	movs	r1, #0
 801040c:	f880 10e4 	strb.w	r1, [r0, #228]	@ 0xe4
 8010410:	685a      	ldr	r2, [r3, #4]
 8010412:	4618      	mov	r0, r3
 8010414:	4710      	bx	r2
 8010416:	bf00      	nop

08010418 <acc_image_a121_r1a_meas_session_get>:
 8010418:	4800      	ldr	r0, [pc, #0]	@ (801041c <acc_image_a121_r1a_meas_session_get+0x4>)
 801041a:	4770      	bx	lr
 801041c:	08015a1c 	.word	0x08015a1c

08010420 <acc_image_a121_r1a_meas_session_param_table_get>:
 8010420:	4800      	ldr	r0, [pc, #0]	@ (8010424 <acc_image_a121_r1a_meas_session_param_table_get+0x4>)
 8010422:	4770      	bx	lr
 8010424:	08016dd8 	.word	0x08016dd8

08010428 <acc_cpd_a121_meas_session_parameters_patch_table_get>:
 8010428:	4800      	ldr	r0, [pc, #0]	@ (801042c <acc_cpd_a121_meas_session_parameters_patch_table_get+0x4>)
 801042a:	4770      	bx	lr
 801042c:	08017b80 	.word	0x08017b80

08010430 <element_phase_enhancement_reset>:
 8010430:	6800      	ldr	r0, [r0, #0]
 8010432:	68c3      	ldr	r3, [r0, #12]
 8010434:	4718      	bx	r3
 8010436:	bf00      	nop

08010438 <element_phase_enhancement_validate>:
 8010438:	6800      	ldr	r0, [r0, #0]
 801043a:	6883      	ldr	r3, [r0, #8]
 801043c:	4718      	bx	r3
 801043e:	bf00      	nop

08010440 <element_phase_enhancement_event>:
 8010440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010444:	ed2d 8b04 	vpush	{d8-d9}
 8010448:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 801044c:	b089      	sub	sp, #36	@ 0x24
 801044e:	4683      	mov	fp, r0
 8010450:	9303      	str	r3, [sp, #12]
 8010452:	2b00      	cmp	r3, #0
 8010454:	f000 80d1 	beq.w	80105fa <element_phase_enhancement_event+0x1ba>
 8010458:	8fc2      	ldrh	r2, [r0, #62]	@ 0x3e
 801045a:	6904      	ldr	r4, [r0, #16]
 801045c:	8f81      	ldrh	r1, [r0, #60]	@ 0x3c
 801045e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 8010462:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8010464:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 8010468:	9006      	str	r0, [sp, #24]
 801046a:	0052      	lsls	r2, r2, #1
 801046c:	9201      	str	r2, [sp, #4]
 801046e:	2b00      	cmp	r3, #0
 8010470:	f000 80c3 	beq.w	80105fa <element_phase_enhancement_event+0x1ba>
 8010474:	2300      	movs	r3, #0
 8010476:	010a      	lsls	r2, r1, #4
 8010478:	eddf 8a64 	vldr	s17, [pc, #400]	@ 801060c <element_phase_enhancement_event+0x1cc>
 801047c:	9302      	str	r3, [sp, #8]
 801047e:	9207      	str	r2, [sp, #28]
 8010480:	469a      	mov	sl, r3
 8010482:	e9db 3211 	ldrd	r3, r2, [fp, #68]	@ 0x44
 8010486:	f8bb 604e 	ldrh.w	r6, [fp, #78]	@ 0x4e
 801048a:	4413      	add	r3, r2
 801048c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8010490:	fb02 3606 	mla	r6, r2, r6, r3
 8010494:	2118      	movs	r1, #24
 8010496:	4630      	mov	r0, r6
 8010498:	f7fe f906 	bl	800e6a8 <acc_translation_a121_point_in_coarse>
 801049c:	2118      	movs	r1, #24
 801049e:	4605      	mov	r5, r0
 80104a0:	4630      	mov	r0, r6
 80104a2:	f7fe f8f3 	bl	800e68c <acc_translation_a121_point_to_coarse>
 80104a6:	9b07      	ldr	r3, [sp, #28]
 80104a8:	0400      	lsls	r0, r0, #16
 80104aa:	fb80 0103 	smull	r0, r1, r0, r3
 80104ae:	2800      	cmp	r0, #0
 80104b0:	f171 0300 	sbcs.w	r3, r1, #0
 80104b4:	da04      	bge.n	80104c0 <element_phase_enhancement_event+0x80>
 80104b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80104ba:	18c0      	adds	r0, r0, r3
 80104bc:	f141 0100 	adc.w	r1, r1, #0
 80104c0:	9b06      	ldr	r3, [sp, #24]
 80104c2:	441d      	add	r5, r3
 80104c4:	0c03      	lsrs	r3, r0, #16
 80104c6:	f934 2015 	ldrsh.w	r2, [r4, r5, lsl #1]
 80104ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80104ce:	eba3 1302 	sub.w	r3, r3, r2, lsl #4
 80104d2:	ee07 3a90 	vmov	s15, r3
 80104d6:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 80104da:	ee29 9a28 	vmul.f32	s18, s18, s17
 80104de:	eeb0 0a49 	vmov.f32	s0, s18
 80104e2:	f001 fa57 	bl	8011994 <cosf>
 80104e6:	eeb0 8a40 	vmov.f32	s16, s0
 80104ea:	eeb0 0a49 	vmov.f32	s0, s18
 80104ee:	f001 fa9d 	bl	8011a2c <sinf>
 80104f2:	f8bb 9040 	ldrh.w	r9, [fp, #64]	@ 0x40
 80104f6:	f1b9 0f00 	cmp.w	r9, #0
 80104fa:	d073      	beq.n	80105e4 <element_phase_enhancement_event+0x1a4>
 80104fc:	f8db 3050 	ldr.w	r3, [fp, #80]	@ 0x50
 8010500:	f8bb 2042 	ldrh.w	r2, [fp, #66]	@ 0x42
 8010504:	f8cd b014 	str.w	fp, [sp, #20]
 8010508:	2000      	movs	r0, #0
 801050a:	f893 8000 	ldrb.w	r8, [r3]
 801050e:	f8df c100 	ldr.w	ip, [pc, #256]	@ 8010610 <element_phase_enhancement_event+0x1d0>
 8010512:	9304      	str	r3, [sp, #16]
 8010514:	4605      	mov	r5, r0
 8010516:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801051a:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 801051e:	4693      	mov	fp, r2
 8010520:	e009      	b.n	8010536 <element_phase_enhancement_event+0xf6>
 8010522:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010526:	52e2      	strh	r2, [r4, r3]
 8010528:	3501      	adds	r5, #1
 801052a:	fa1f fe85 	uxth.w	lr, r5
 801052e:	45f1      	cmp	r9, lr
 8010530:	4458      	add	r0, fp
 8010532:	8071      	strh	r1, [r6, #2]
 8010534:	d952      	bls.n	80105dc <element_phase_enhancement_event+0x19c>
 8010536:	9a01      	ldr	r2, [sp, #4]
 8010538:	eb0a 0350 	add.w	r3, sl, r0, lsr #1
 801053c:	b29b      	uxth	r3, r3
 801053e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010542:	18e6      	adds	r6, r4, r3
 8010544:	5ee2      	ldrsh	r2, [r4, r3]
 8010546:	ee07 2a90 	vmov	s15, r2
 801054a:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 801054e:	ee06 2a90 	vmov	s13, r2
 8010552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010556:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801055a:	ee27 7a88 	vmul.f32	s14, s15, s16
 801055e:	ee66 5a80 	vmul.f32	s11, s13, s0
 8010562:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010566:	ee66 6a88 	vmul.f32	s13, s13, s16
 801056a:	ee37 7a65 	vsub.f32	s14, s14, s11
 801056e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010572:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801057a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801057e:	bf4c      	ite	mi
 8010580:	ee37 7a46 	vsubmi.f32	s14, s14, s12
 8010584:	ee37 7a06 	vaddpl.f32	s14, s14, s12
 8010588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801058c:	bf4c      	ite	mi
 801058e:	ee77 7ac6 	vsubmi.f32	s15, s15, s12
 8010592:	ee77 7a86 	vaddpl.f32	s15, s15, s12
 8010596:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801059a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801059e:	ee17 ea10 	vmov	lr, s14
 80105a2:	ee17 1a90 	vmov	r1, s15
 80105a6:	ee17 2a10 	vmov	r2, s14
 80105aa:	45e6      	cmp	lr, ip
 80105ac:	bfb8      	it	lt
 80105ae:	4662      	movlt	r2, ip
 80105b0:	4561      	cmp	r1, ip
 80105b2:	bfb8      	it	lt
 80105b4:	4661      	movlt	r1, ip
 80105b6:	42ba      	cmp	r2, r7
 80105b8:	bfa8      	it	ge
 80105ba:	463a      	movge	r2, r7
 80105bc:	42b9      	cmp	r1, r7
 80105be:	bfa8      	it	ge
 80105c0:	4639      	movge	r1, r7
 80105c2:	f1b8 0f00 	cmp.w	r8, #0
 80105c6:	d1ae      	bne.n	8010526 <element_phase_enhancement_event+0xe6>
 80105c8:	4596      	cmp	lr, r2
 80105ca:	d1aa      	bne.n	8010522 <element_phase_enhancement_event+0xe2>
 80105cc:	ee17 ea90 	vmov	lr, s15
 80105d0:	ebbe 0801 	subs.w	r8, lr, r1
 80105d4:	bf18      	it	ne
 80105d6:	f04f 0801 	movne.w	r8, #1
 80105da:	e7a4      	b.n	8010526 <element_phase_enhancement_event+0xe6>
 80105dc:	e9dd 3b04 	ldrd	r3, fp, [sp, #16]
 80105e0:	f883 8000 	strb.w	r8, [r3]
 80105e4:	9b02      	ldr	r3, [sp, #8]
 80105e6:	3301      	adds	r3, #1
 80105e8:	461a      	mov	r2, r3
 80105ea:	9302      	str	r3, [sp, #8]
 80105ec:	f8bb 304c 	ldrh.w	r3, [fp, #76]	@ 0x4c
 80105f0:	fa1f fa82 	uxth.w	sl, r2
 80105f4:	4553      	cmp	r3, sl
 80105f6:	f63f af44 	bhi.w	8010482 <element_phase_enhancement_event+0x42>
 80105fa:	f8db 0000 	ldr.w	r0, [fp]
 80105fe:	6843      	ldr	r3, [r0, #4]
 8010600:	b009      	add	sp, #36	@ 0x24
 8010602:	ecbd 8b04 	vpop	{d8-d9}
 8010606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060a:	4718      	bx	r3
 801060c:	37800000 	.word	0x37800000
 8010610:	ffff8000 	.word	0xffff8000

08010614 <acc_element_phase_enhancement_init>:
 8010614:	b570      	push	{r4, r5, r6, lr}
 8010616:	4604      	mov	r4, r0
 8010618:	460d      	mov	r5, r1
 801061a:	4814      	ldr	r0, [pc, #80]	@ (801066c <acc_element_phase_enhancement_init+0x58>)
 801061c:	4914      	ldr	r1, [pc, #80]	@ (8010670 <acc_element_phase_enhancement_init+0x5c>)
 801061e:	68eb      	ldr	r3, [r5, #12]
 8010620:	4a14      	ldr	r2, [pc, #80]	@ (8010674 <acc_element_phase_enhancement_init+0x60>)
 8010622:	60e2      	str	r2, [r4, #12]
 8010624:	e9c4 0101 	strd	r0, r1, [r4, #4]
 8010628:	b082      	sub	sp, #8
 801062a:	a901      	add	r1, sp, #4
 801062c:	7bd8      	ldrb	r0, [r3, #15]
 801062e:	f7fd fc69 	bl	800df04 <acc_translation_a121_profile_to_start_point_offset>
 8010632:	68eb      	ldr	r3, [r5, #12]
 8010634:	882a      	ldrh	r2, [r5, #0]
 8010636:	8869      	ldrh	r1, [r5, #2]
 8010638:	8762      	strh	r2, [r4, #58]	@ 0x3a
 801063a:	88aa      	ldrh	r2, [r5, #4]
 801063c:	88ee      	ldrh	r6, [r5, #6]
 801063e:	87a1      	strh	r1, [r4, #60]	@ 0x3c
 8010640:	8929      	ldrh	r1, [r5, #8]
 8010642:	87e2      	strh	r2, [r4, #62]	@ 0x3e
 8010644:	7b1a      	ldrb	r2, [r3, #12]
 8010646:	681d      	ldr	r5, [r3, #0]
 8010648:	f8a4 1042 	strh.w	r1, [r4, #66]	@ 0x42
 801064c:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
 8010650:	9901      	ldr	r1, [sp, #4]
 8010652:	88da      	ldrh	r2, [r3, #6]
 8010654:	889b      	ldrh	r3, [r3, #4]
 8010656:	f8a4 6040 	strh.w	r6, [r4, #64]	@ 0x40
 801065a:	e9c4 5111 	strd	r5, r1, [r4, #68]	@ 0x44
 801065e:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
 8010662:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
 8010666:	b002      	add	sp, #8
 8010668:	bd70      	pop	{r4, r5, r6, pc}
 801066a:	bf00      	nop
 801066c:	08010441 	.word	0x08010441
 8010670:	08010439 	.word	0x08010439
 8010674:	08010431 	.word	0x08010431

08010678 <acc_element_phase_enhancement_release>:
 8010678:	4770      	bx	lr
 801067a:	bf00      	nop

0801067c <malloc>:
 801067c:	4b02      	ldr	r3, [pc, #8]	@ (8010688 <malloc+0xc>)
 801067e:	4601      	mov	r1, r0
 8010680:	6818      	ldr	r0, [r3, #0]
 8010682:	f000 b82d 	b.w	80106e0 <_malloc_r>
 8010686:	bf00      	nop
 8010688:	200001d8 	.word	0x200001d8

0801068c <free>:
 801068c:	4b02      	ldr	r3, [pc, #8]	@ (8010698 <free+0xc>)
 801068e:	4601      	mov	r1, r0
 8010690:	6818      	ldr	r0, [r3, #0]
 8010692:	f000 bba7 	b.w	8010de4 <_free_r>
 8010696:	bf00      	nop
 8010698:	200001d8 	.word	0x200001d8

0801069c <sbrk_aligned>:
 801069c:	b570      	push	{r4, r5, r6, lr}
 801069e:	4e0f      	ldr	r6, [pc, #60]	@ (80106dc <sbrk_aligned+0x40>)
 80106a0:	460c      	mov	r4, r1
 80106a2:	6831      	ldr	r1, [r6, #0]
 80106a4:	4605      	mov	r5, r0
 80106a6:	b911      	cbnz	r1, 80106ae <sbrk_aligned+0x12>
 80106a8:	f000 fb3e 	bl	8010d28 <_sbrk_r>
 80106ac:	6030      	str	r0, [r6, #0]
 80106ae:	4621      	mov	r1, r4
 80106b0:	4628      	mov	r0, r5
 80106b2:	f000 fb39 	bl	8010d28 <_sbrk_r>
 80106b6:	1c43      	adds	r3, r0, #1
 80106b8:	d103      	bne.n	80106c2 <sbrk_aligned+0x26>
 80106ba:	f04f 34ff 	mov.w	r4, #4294967295
 80106be:	4620      	mov	r0, r4
 80106c0:	bd70      	pop	{r4, r5, r6, pc}
 80106c2:	1cc4      	adds	r4, r0, #3
 80106c4:	f024 0403 	bic.w	r4, r4, #3
 80106c8:	42a0      	cmp	r0, r4
 80106ca:	d0f8      	beq.n	80106be <sbrk_aligned+0x22>
 80106cc:	1a21      	subs	r1, r4, r0
 80106ce:	4628      	mov	r0, r5
 80106d0:	f000 fb2a 	bl	8010d28 <_sbrk_r>
 80106d4:	3001      	adds	r0, #1
 80106d6:	d1f2      	bne.n	80106be <sbrk_aligned+0x22>
 80106d8:	e7ef      	b.n	80106ba <sbrk_aligned+0x1e>
 80106da:	bf00      	nop
 80106dc:	20000890 	.word	0x20000890

080106e0 <_malloc_r>:
 80106e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106e4:	1ccd      	adds	r5, r1, #3
 80106e6:	f025 0503 	bic.w	r5, r5, #3
 80106ea:	3508      	adds	r5, #8
 80106ec:	2d0c      	cmp	r5, #12
 80106ee:	bf38      	it	cc
 80106f0:	250c      	movcc	r5, #12
 80106f2:	2d00      	cmp	r5, #0
 80106f4:	4606      	mov	r6, r0
 80106f6:	db01      	blt.n	80106fc <_malloc_r+0x1c>
 80106f8:	42a9      	cmp	r1, r5
 80106fa:	d904      	bls.n	8010706 <_malloc_r+0x26>
 80106fc:	230c      	movs	r3, #12
 80106fe:	6033      	str	r3, [r6, #0]
 8010700:	2000      	movs	r0, #0
 8010702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010706:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80107dc <_malloc_r+0xfc>
 801070a:	f000 f869 	bl	80107e0 <__malloc_lock>
 801070e:	f8d8 3000 	ldr.w	r3, [r8]
 8010712:	461c      	mov	r4, r3
 8010714:	bb44      	cbnz	r4, 8010768 <_malloc_r+0x88>
 8010716:	4629      	mov	r1, r5
 8010718:	4630      	mov	r0, r6
 801071a:	f7ff ffbf 	bl	801069c <sbrk_aligned>
 801071e:	1c43      	adds	r3, r0, #1
 8010720:	4604      	mov	r4, r0
 8010722:	d158      	bne.n	80107d6 <_malloc_r+0xf6>
 8010724:	f8d8 4000 	ldr.w	r4, [r8]
 8010728:	4627      	mov	r7, r4
 801072a:	2f00      	cmp	r7, #0
 801072c:	d143      	bne.n	80107b6 <_malloc_r+0xd6>
 801072e:	2c00      	cmp	r4, #0
 8010730:	d04b      	beq.n	80107ca <_malloc_r+0xea>
 8010732:	6823      	ldr	r3, [r4, #0]
 8010734:	4639      	mov	r1, r7
 8010736:	4630      	mov	r0, r6
 8010738:	eb04 0903 	add.w	r9, r4, r3
 801073c:	f000 faf4 	bl	8010d28 <_sbrk_r>
 8010740:	4581      	cmp	r9, r0
 8010742:	d142      	bne.n	80107ca <_malloc_r+0xea>
 8010744:	6821      	ldr	r1, [r4, #0]
 8010746:	1a6d      	subs	r5, r5, r1
 8010748:	4629      	mov	r1, r5
 801074a:	4630      	mov	r0, r6
 801074c:	f7ff ffa6 	bl	801069c <sbrk_aligned>
 8010750:	3001      	adds	r0, #1
 8010752:	d03a      	beq.n	80107ca <_malloc_r+0xea>
 8010754:	6823      	ldr	r3, [r4, #0]
 8010756:	442b      	add	r3, r5
 8010758:	6023      	str	r3, [r4, #0]
 801075a:	f8d8 3000 	ldr.w	r3, [r8]
 801075e:	685a      	ldr	r2, [r3, #4]
 8010760:	bb62      	cbnz	r2, 80107bc <_malloc_r+0xdc>
 8010762:	f8c8 7000 	str.w	r7, [r8]
 8010766:	e00f      	b.n	8010788 <_malloc_r+0xa8>
 8010768:	6822      	ldr	r2, [r4, #0]
 801076a:	1b52      	subs	r2, r2, r5
 801076c:	d420      	bmi.n	80107b0 <_malloc_r+0xd0>
 801076e:	2a0b      	cmp	r2, #11
 8010770:	d917      	bls.n	80107a2 <_malloc_r+0xc2>
 8010772:	1961      	adds	r1, r4, r5
 8010774:	42a3      	cmp	r3, r4
 8010776:	6025      	str	r5, [r4, #0]
 8010778:	bf18      	it	ne
 801077a:	6059      	strne	r1, [r3, #4]
 801077c:	6863      	ldr	r3, [r4, #4]
 801077e:	bf08      	it	eq
 8010780:	f8c8 1000 	streq.w	r1, [r8]
 8010784:	5162      	str	r2, [r4, r5]
 8010786:	604b      	str	r3, [r1, #4]
 8010788:	4630      	mov	r0, r6
 801078a:	f000 f82f 	bl	80107ec <__malloc_unlock>
 801078e:	f104 000b 	add.w	r0, r4, #11
 8010792:	1d23      	adds	r3, r4, #4
 8010794:	f020 0007 	bic.w	r0, r0, #7
 8010798:	1ac2      	subs	r2, r0, r3
 801079a:	bf1c      	itt	ne
 801079c:	1a1b      	subne	r3, r3, r0
 801079e:	50a3      	strne	r3, [r4, r2]
 80107a0:	e7af      	b.n	8010702 <_malloc_r+0x22>
 80107a2:	6862      	ldr	r2, [r4, #4]
 80107a4:	42a3      	cmp	r3, r4
 80107a6:	bf0c      	ite	eq
 80107a8:	f8c8 2000 	streq.w	r2, [r8]
 80107ac:	605a      	strne	r2, [r3, #4]
 80107ae:	e7eb      	b.n	8010788 <_malloc_r+0xa8>
 80107b0:	4623      	mov	r3, r4
 80107b2:	6864      	ldr	r4, [r4, #4]
 80107b4:	e7ae      	b.n	8010714 <_malloc_r+0x34>
 80107b6:	463c      	mov	r4, r7
 80107b8:	687f      	ldr	r7, [r7, #4]
 80107ba:	e7b6      	b.n	801072a <_malloc_r+0x4a>
 80107bc:	461a      	mov	r2, r3
 80107be:	685b      	ldr	r3, [r3, #4]
 80107c0:	42a3      	cmp	r3, r4
 80107c2:	d1fb      	bne.n	80107bc <_malloc_r+0xdc>
 80107c4:	2300      	movs	r3, #0
 80107c6:	6053      	str	r3, [r2, #4]
 80107c8:	e7de      	b.n	8010788 <_malloc_r+0xa8>
 80107ca:	230c      	movs	r3, #12
 80107cc:	6033      	str	r3, [r6, #0]
 80107ce:	4630      	mov	r0, r6
 80107d0:	f000 f80c 	bl	80107ec <__malloc_unlock>
 80107d4:	e794      	b.n	8010700 <_malloc_r+0x20>
 80107d6:	6005      	str	r5, [r0, #0]
 80107d8:	e7d6      	b.n	8010788 <_malloc_r+0xa8>
 80107da:	bf00      	nop
 80107dc:	20000894 	.word	0x20000894

080107e0 <__malloc_lock>:
 80107e0:	4801      	ldr	r0, [pc, #4]	@ (80107e8 <__malloc_lock+0x8>)
 80107e2:	f000 baee 	b.w	8010dc2 <__retarget_lock_acquire_recursive>
 80107e6:	bf00      	nop
 80107e8:	200009d8 	.word	0x200009d8

080107ec <__malloc_unlock>:
 80107ec:	4801      	ldr	r0, [pc, #4]	@ (80107f4 <__malloc_unlock+0x8>)
 80107ee:	f000 bae9 	b.w	8010dc4 <__retarget_lock_release_recursive>
 80107f2:	bf00      	nop
 80107f4:	200009d8 	.word	0x200009d8

080107f8 <std>:
 80107f8:	2300      	movs	r3, #0
 80107fa:	b510      	push	{r4, lr}
 80107fc:	4604      	mov	r4, r0
 80107fe:	e9c0 3300 	strd	r3, r3, [r0]
 8010802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010806:	6083      	str	r3, [r0, #8]
 8010808:	8181      	strh	r1, [r0, #12]
 801080a:	6643      	str	r3, [r0, #100]	@ 0x64
 801080c:	81c2      	strh	r2, [r0, #14]
 801080e:	6183      	str	r3, [r0, #24]
 8010810:	4619      	mov	r1, r3
 8010812:	2208      	movs	r2, #8
 8010814:	305c      	adds	r0, #92	@ 0x5c
 8010816:	f000 fa4b 	bl	8010cb0 <memset>
 801081a:	4b0d      	ldr	r3, [pc, #52]	@ (8010850 <std+0x58>)
 801081c:	6263      	str	r3, [r4, #36]	@ 0x24
 801081e:	4b0d      	ldr	r3, [pc, #52]	@ (8010854 <std+0x5c>)
 8010820:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010822:	4b0d      	ldr	r3, [pc, #52]	@ (8010858 <std+0x60>)
 8010824:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010826:	4b0d      	ldr	r3, [pc, #52]	@ (801085c <std+0x64>)
 8010828:	6323      	str	r3, [r4, #48]	@ 0x30
 801082a:	4b0d      	ldr	r3, [pc, #52]	@ (8010860 <std+0x68>)
 801082c:	6224      	str	r4, [r4, #32]
 801082e:	429c      	cmp	r4, r3
 8010830:	d006      	beq.n	8010840 <std+0x48>
 8010832:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010836:	4294      	cmp	r4, r2
 8010838:	d002      	beq.n	8010840 <std+0x48>
 801083a:	33d0      	adds	r3, #208	@ 0xd0
 801083c:	429c      	cmp	r4, r3
 801083e:	d105      	bne.n	801084c <std+0x54>
 8010840:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010848:	f000 baba 	b.w	8010dc0 <__retarget_lock_init_recursive>
 801084c:	bd10      	pop	{r4, pc}
 801084e:	bf00      	nop
 8010850:	08010a5d 	.word	0x08010a5d
 8010854:	08010a7f 	.word	0x08010a7f
 8010858:	08010ab7 	.word	0x08010ab7
 801085c:	08010adb 	.word	0x08010adb
 8010860:	20000898 	.word	0x20000898

08010864 <stdio_exit_handler>:
 8010864:	4a02      	ldr	r2, [pc, #8]	@ (8010870 <stdio_exit_handler+0xc>)
 8010866:	4903      	ldr	r1, [pc, #12]	@ (8010874 <stdio_exit_handler+0x10>)
 8010868:	4803      	ldr	r0, [pc, #12]	@ (8010878 <stdio_exit_handler+0x14>)
 801086a:	f000 b869 	b.w	8010940 <_fwalk_sglue>
 801086e:	bf00      	nop
 8010870:	200001cc 	.word	0x200001cc
 8010874:	080117d1 	.word	0x080117d1
 8010878:	200001dc 	.word	0x200001dc

0801087c <cleanup_stdio>:
 801087c:	6841      	ldr	r1, [r0, #4]
 801087e:	4b0c      	ldr	r3, [pc, #48]	@ (80108b0 <cleanup_stdio+0x34>)
 8010880:	4299      	cmp	r1, r3
 8010882:	b510      	push	{r4, lr}
 8010884:	4604      	mov	r4, r0
 8010886:	d001      	beq.n	801088c <cleanup_stdio+0x10>
 8010888:	f000 ffa2 	bl	80117d0 <_fflush_r>
 801088c:	68a1      	ldr	r1, [r4, #8]
 801088e:	4b09      	ldr	r3, [pc, #36]	@ (80108b4 <cleanup_stdio+0x38>)
 8010890:	4299      	cmp	r1, r3
 8010892:	d002      	beq.n	801089a <cleanup_stdio+0x1e>
 8010894:	4620      	mov	r0, r4
 8010896:	f000 ff9b 	bl	80117d0 <_fflush_r>
 801089a:	68e1      	ldr	r1, [r4, #12]
 801089c:	4b06      	ldr	r3, [pc, #24]	@ (80108b8 <cleanup_stdio+0x3c>)
 801089e:	4299      	cmp	r1, r3
 80108a0:	d004      	beq.n	80108ac <cleanup_stdio+0x30>
 80108a2:	4620      	mov	r0, r4
 80108a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108a8:	f000 bf92 	b.w	80117d0 <_fflush_r>
 80108ac:	bd10      	pop	{r4, pc}
 80108ae:	bf00      	nop
 80108b0:	20000898 	.word	0x20000898
 80108b4:	20000900 	.word	0x20000900
 80108b8:	20000968 	.word	0x20000968

080108bc <global_stdio_init.part.0>:
 80108bc:	b510      	push	{r4, lr}
 80108be:	4b0b      	ldr	r3, [pc, #44]	@ (80108ec <global_stdio_init.part.0+0x30>)
 80108c0:	4c0b      	ldr	r4, [pc, #44]	@ (80108f0 <global_stdio_init.part.0+0x34>)
 80108c2:	4a0c      	ldr	r2, [pc, #48]	@ (80108f4 <global_stdio_init.part.0+0x38>)
 80108c4:	601a      	str	r2, [r3, #0]
 80108c6:	4620      	mov	r0, r4
 80108c8:	2200      	movs	r2, #0
 80108ca:	2104      	movs	r1, #4
 80108cc:	f7ff ff94 	bl	80107f8 <std>
 80108d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80108d4:	2201      	movs	r2, #1
 80108d6:	2109      	movs	r1, #9
 80108d8:	f7ff ff8e 	bl	80107f8 <std>
 80108dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80108e0:	2202      	movs	r2, #2
 80108e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108e6:	2112      	movs	r1, #18
 80108e8:	f7ff bf86 	b.w	80107f8 <std>
 80108ec:	200009d0 	.word	0x200009d0
 80108f0:	20000898 	.word	0x20000898
 80108f4:	08010865 	.word	0x08010865

080108f8 <__sfp_lock_acquire>:
 80108f8:	4801      	ldr	r0, [pc, #4]	@ (8010900 <__sfp_lock_acquire+0x8>)
 80108fa:	f000 ba62 	b.w	8010dc2 <__retarget_lock_acquire_recursive>
 80108fe:	bf00      	nop
 8010900:	200009d9 	.word	0x200009d9

08010904 <__sfp_lock_release>:
 8010904:	4801      	ldr	r0, [pc, #4]	@ (801090c <__sfp_lock_release+0x8>)
 8010906:	f000 ba5d 	b.w	8010dc4 <__retarget_lock_release_recursive>
 801090a:	bf00      	nop
 801090c:	200009d9 	.word	0x200009d9

08010910 <__sinit>:
 8010910:	b510      	push	{r4, lr}
 8010912:	4604      	mov	r4, r0
 8010914:	f7ff fff0 	bl	80108f8 <__sfp_lock_acquire>
 8010918:	6a23      	ldr	r3, [r4, #32]
 801091a:	b11b      	cbz	r3, 8010924 <__sinit+0x14>
 801091c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010920:	f7ff bff0 	b.w	8010904 <__sfp_lock_release>
 8010924:	4b04      	ldr	r3, [pc, #16]	@ (8010938 <__sinit+0x28>)
 8010926:	6223      	str	r3, [r4, #32]
 8010928:	4b04      	ldr	r3, [pc, #16]	@ (801093c <__sinit+0x2c>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d1f5      	bne.n	801091c <__sinit+0xc>
 8010930:	f7ff ffc4 	bl	80108bc <global_stdio_init.part.0>
 8010934:	e7f2      	b.n	801091c <__sinit+0xc>
 8010936:	bf00      	nop
 8010938:	0801087d 	.word	0x0801087d
 801093c:	200009d0 	.word	0x200009d0

08010940 <_fwalk_sglue>:
 8010940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010944:	4607      	mov	r7, r0
 8010946:	4688      	mov	r8, r1
 8010948:	4614      	mov	r4, r2
 801094a:	2600      	movs	r6, #0
 801094c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010950:	f1b9 0901 	subs.w	r9, r9, #1
 8010954:	d505      	bpl.n	8010962 <_fwalk_sglue+0x22>
 8010956:	6824      	ldr	r4, [r4, #0]
 8010958:	2c00      	cmp	r4, #0
 801095a:	d1f7      	bne.n	801094c <_fwalk_sglue+0xc>
 801095c:	4630      	mov	r0, r6
 801095e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010962:	89ab      	ldrh	r3, [r5, #12]
 8010964:	2b01      	cmp	r3, #1
 8010966:	d907      	bls.n	8010978 <_fwalk_sglue+0x38>
 8010968:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801096c:	3301      	adds	r3, #1
 801096e:	d003      	beq.n	8010978 <_fwalk_sglue+0x38>
 8010970:	4629      	mov	r1, r5
 8010972:	4638      	mov	r0, r7
 8010974:	47c0      	blx	r8
 8010976:	4306      	orrs	r6, r0
 8010978:	3568      	adds	r5, #104	@ 0x68
 801097a:	e7e9      	b.n	8010950 <_fwalk_sglue+0x10>

0801097c <iprintf>:
 801097c:	b40f      	push	{r0, r1, r2, r3}
 801097e:	b507      	push	{r0, r1, r2, lr}
 8010980:	4906      	ldr	r1, [pc, #24]	@ (801099c <iprintf+0x20>)
 8010982:	ab04      	add	r3, sp, #16
 8010984:	6808      	ldr	r0, [r1, #0]
 8010986:	f853 2b04 	ldr.w	r2, [r3], #4
 801098a:	6881      	ldr	r1, [r0, #8]
 801098c:	9301      	str	r3, [sp, #4]
 801098e:	f000 fbf5 	bl	801117c <_vfiprintf_r>
 8010992:	b003      	add	sp, #12
 8010994:	f85d eb04 	ldr.w	lr, [sp], #4
 8010998:	b004      	add	sp, #16
 801099a:	4770      	bx	lr
 801099c:	200001d8 	.word	0x200001d8

080109a0 <_puts_r>:
 80109a0:	6a03      	ldr	r3, [r0, #32]
 80109a2:	b570      	push	{r4, r5, r6, lr}
 80109a4:	6884      	ldr	r4, [r0, #8]
 80109a6:	4605      	mov	r5, r0
 80109a8:	460e      	mov	r6, r1
 80109aa:	b90b      	cbnz	r3, 80109b0 <_puts_r+0x10>
 80109ac:	f7ff ffb0 	bl	8010910 <__sinit>
 80109b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80109b2:	07db      	lsls	r3, r3, #31
 80109b4:	d405      	bmi.n	80109c2 <_puts_r+0x22>
 80109b6:	89a3      	ldrh	r3, [r4, #12]
 80109b8:	0598      	lsls	r0, r3, #22
 80109ba:	d402      	bmi.n	80109c2 <_puts_r+0x22>
 80109bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80109be:	f000 fa00 	bl	8010dc2 <__retarget_lock_acquire_recursive>
 80109c2:	89a3      	ldrh	r3, [r4, #12]
 80109c4:	0719      	lsls	r1, r3, #28
 80109c6:	d502      	bpl.n	80109ce <_puts_r+0x2e>
 80109c8:	6923      	ldr	r3, [r4, #16]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d135      	bne.n	8010a3a <_puts_r+0x9a>
 80109ce:	4621      	mov	r1, r4
 80109d0:	4628      	mov	r0, r5
 80109d2:	f000 f8fd 	bl	8010bd0 <__swsetup_r>
 80109d6:	b380      	cbz	r0, 8010a3a <_puts_r+0x9a>
 80109d8:	f04f 35ff 	mov.w	r5, #4294967295
 80109dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80109de:	07da      	lsls	r2, r3, #31
 80109e0:	d405      	bmi.n	80109ee <_puts_r+0x4e>
 80109e2:	89a3      	ldrh	r3, [r4, #12]
 80109e4:	059b      	lsls	r3, r3, #22
 80109e6:	d402      	bmi.n	80109ee <_puts_r+0x4e>
 80109e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80109ea:	f000 f9eb 	bl	8010dc4 <__retarget_lock_release_recursive>
 80109ee:	4628      	mov	r0, r5
 80109f0:	bd70      	pop	{r4, r5, r6, pc}
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	da04      	bge.n	8010a00 <_puts_r+0x60>
 80109f6:	69a2      	ldr	r2, [r4, #24]
 80109f8:	429a      	cmp	r2, r3
 80109fa:	dc17      	bgt.n	8010a2c <_puts_r+0x8c>
 80109fc:	290a      	cmp	r1, #10
 80109fe:	d015      	beq.n	8010a2c <_puts_r+0x8c>
 8010a00:	6823      	ldr	r3, [r4, #0]
 8010a02:	1c5a      	adds	r2, r3, #1
 8010a04:	6022      	str	r2, [r4, #0]
 8010a06:	7019      	strb	r1, [r3, #0]
 8010a08:	68a3      	ldr	r3, [r4, #8]
 8010a0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010a0e:	3b01      	subs	r3, #1
 8010a10:	60a3      	str	r3, [r4, #8]
 8010a12:	2900      	cmp	r1, #0
 8010a14:	d1ed      	bne.n	80109f2 <_puts_r+0x52>
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	da11      	bge.n	8010a3e <_puts_r+0x9e>
 8010a1a:	4622      	mov	r2, r4
 8010a1c:	210a      	movs	r1, #10
 8010a1e:	4628      	mov	r0, r5
 8010a20:	f000 f898 	bl	8010b54 <__swbuf_r>
 8010a24:	3001      	adds	r0, #1
 8010a26:	d0d7      	beq.n	80109d8 <_puts_r+0x38>
 8010a28:	250a      	movs	r5, #10
 8010a2a:	e7d7      	b.n	80109dc <_puts_r+0x3c>
 8010a2c:	4622      	mov	r2, r4
 8010a2e:	4628      	mov	r0, r5
 8010a30:	f000 f890 	bl	8010b54 <__swbuf_r>
 8010a34:	3001      	adds	r0, #1
 8010a36:	d1e7      	bne.n	8010a08 <_puts_r+0x68>
 8010a38:	e7ce      	b.n	80109d8 <_puts_r+0x38>
 8010a3a:	3e01      	subs	r6, #1
 8010a3c:	e7e4      	b.n	8010a08 <_puts_r+0x68>
 8010a3e:	6823      	ldr	r3, [r4, #0]
 8010a40:	1c5a      	adds	r2, r3, #1
 8010a42:	6022      	str	r2, [r4, #0]
 8010a44:	220a      	movs	r2, #10
 8010a46:	701a      	strb	r2, [r3, #0]
 8010a48:	e7ee      	b.n	8010a28 <_puts_r+0x88>
	...

08010a4c <puts>:
 8010a4c:	4b02      	ldr	r3, [pc, #8]	@ (8010a58 <puts+0xc>)
 8010a4e:	4601      	mov	r1, r0
 8010a50:	6818      	ldr	r0, [r3, #0]
 8010a52:	f7ff bfa5 	b.w	80109a0 <_puts_r>
 8010a56:	bf00      	nop
 8010a58:	200001d8 	.word	0x200001d8

08010a5c <__sread>:
 8010a5c:	b510      	push	{r4, lr}
 8010a5e:	460c      	mov	r4, r1
 8010a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a64:	f000 f94e 	bl	8010d04 <_read_r>
 8010a68:	2800      	cmp	r0, #0
 8010a6a:	bfab      	itete	ge
 8010a6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010a6e:	89a3      	ldrhlt	r3, [r4, #12]
 8010a70:	181b      	addge	r3, r3, r0
 8010a72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010a76:	bfac      	ite	ge
 8010a78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010a7a:	81a3      	strhlt	r3, [r4, #12]
 8010a7c:	bd10      	pop	{r4, pc}

08010a7e <__swrite>:
 8010a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a82:	461f      	mov	r7, r3
 8010a84:	898b      	ldrh	r3, [r1, #12]
 8010a86:	05db      	lsls	r3, r3, #23
 8010a88:	4605      	mov	r5, r0
 8010a8a:	460c      	mov	r4, r1
 8010a8c:	4616      	mov	r6, r2
 8010a8e:	d505      	bpl.n	8010a9c <__swrite+0x1e>
 8010a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a94:	2302      	movs	r3, #2
 8010a96:	2200      	movs	r2, #0
 8010a98:	f000 f922 	bl	8010ce0 <_lseek_r>
 8010a9c:	89a3      	ldrh	r3, [r4, #12]
 8010a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010aa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010aa6:	81a3      	strh	r3, [r4, #12]
 8010aa8:	4632      	mov	r2, r6
 8010aaa:	463b      	mov	r3, r7
 8010aac:	4628      	mov	r0, r5
 8010aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ab2:	f000 b949 	b.w	8010d48 <_write_r>

08010ab6 <__sseek>:
 8010ab6:	b510      	push	{r4, lr}
 8010ab8:	460c      	mov	r4, r1
 8010aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010abe:	f000 f90f 	bl	8010ce0 <_lseek_r>
 8010ac2:	1c43      	adds	r3, r0, #1
 8010ac4:	89a3      	ldrh	r3, [r4, #12]
 8010ac6:	bf15      	itete	ne
 8010ac8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010aca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010ace:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010ad2:	81a3      	strheq	r3, [r4, #12]
 8010ad4:	bf18      	it	ne
 8010ad6:	81a3      	strhne	r3, [r4, #12]
 8010ad8:	bd10      	pop	{r4, pc}

08010ada <__sclose>:
 8010ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ade:	f000 b8ef 	b.w	8010cc0 <_close_r>

08010ae2 <_vsniprintf_r>:
 8010ae2:	b530      	push	{r4, r5, lr}
 8010ae4:	4614      	mov	r4, r2
 8010ae6:	2c00      	cmp	r4, #0
 8010ae8:	b09b      	sub	sp, #108	@ 0x6c
 8010aea:	4605      	mov	r5, r0
 8010aec:	461a      	mov	r2, r3
 8010aee:	da05      	bge.n	8010afc <_vsniprintf_r+0x1a>
 8010af0:	238b      	movs	r3, #139	@ 0x8b
 8010af2:	6003      	str	r3, [r0, #0]
 8010af4:	f04f 30ff 	mov.w	r0, #4294967295
 8010af8:	b01b      	add	sp, #108	@ 0x6c
 8010afa:	bd30      	pop	{r4, r5, pc}
 8010afc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010b00:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010b04:	bf14      	ite	ne
 8010b06:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010b0a:	4623      	moveq	r3, r4
 8010b0c:	9302      	str	r3, [sp, #8]
 8010b0e:	9305      	str	r3, [sp, #20]
 8010b10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010b14:	9100      	str	r1, [sp, #0]
 8010b16:	9104      	str	r1, [sp, #16]
 8010b18:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010b1c:	4669      	mov	r1, sp
 8010b1e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010b20:	f000 fa06 	bl	8010f30 <_svfiprintf_r>
 8010b24:	1c43      	adds	r3, r0, #1
 8010b26:	bfbc      	itt	lt
 8010b28:	238b      	movlt	r3, #139	@ 0x8b
 8010b2a:	602b      	strlt	r3, [r5, #0]
 8010b2c:	2c00      	cmp	r4, #0
 8010b2e:	d0e3      	beq.n	8010af8 <_vsniprintf_r+0x16>
 8010b30:	9b00      	ldr	r3, [sp, #0]
 8010b32:	2200      	movs	r2, #0
 8010b34:	701a      	strb	r2, [r3, #0]
 8010b36:	e7df      	b.n	8010af8 <_vsniprintf_r+0x16>

08010b38 <vsniprintf>:
 8010b38:	b507      	push	{r0, r1, r2, lr}
 8010b3a:	9300      	str	r3, [sp, #0]
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	460a      	mov	r2, r1
 8010b40:	4601      	mov	r1, r0
 8010b42:	4803      	ldr	r0, [pc, #12]	@ (8010b50 <vsniprintf+0x18>)
 8010b44:	6800      	ldr	r0, [r0, #0]
 8010b46:	f7ff ffcc 	bl	8010ae2 <_vsniprintf_r>
 8010b4a:	b003      	add	sp, #12
 8010b4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b50:	200001d8 	.word	0x200001d8

08010b54 <__swbuf_r>:
 8010b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b56:	460e      	mov	r6, r1
 8010b58:	4614      	mov	r4, r2
 8010b5a:	4605      	mov	r5, r0
 8010b5c:	b118      	cbz	r0, 8010b66 <__swbuf_r+0x12>
 8010b5e:	6a03      	ldr	r3, [r0, #32]
 8010b60:	b90b      	cbnz	r3, 8010b66 <__swbuf_r+0x12>
 8010b62:	f7ff fed5 	bl	8010910 <__sinit>
 8010b66:	69a3      	ldr	r3, [r4, #24]
 8010b68:	60a3      	str	r3, [r4, #8]
 8010b6a:	89a3      	ldrh	r3, [r4, #12]
 8010b6c:	071a      	lsls	r2, r3, #28
 8010b6e:	d501      	bpl.n	8010b74 <__swbuf_r+0x20>
 8010b70:	6923      	ldr	r3, [r4, #16]
 8010b72:	b943      	cbnz	r3, 8010b86 <__swbuf_r+0x32>
 8010b74:	4621      	mov	r1, r4
 8010b76:	4628      	mov	r0, r5
 8010b78:	f000 f82a 	bl	8010bd0 <__swsetup_r>
 8010b7c:	b118      	cbz	r0, 8010b86 <__swbuf_r+0x32>
 8010b7e:	f04f 37ff 	mov.w	r7, #4294967295
 8010b82:	4638      	mov	r0, r7
 8010b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b86:	6823      	ldr	r3, [r4, #0]
 8010b88:	6922      	ldr	r2, [r4, #16]
 8010b8a:	1a98      	subs	r0, r3, r2
 8010b8c:	6963      	ldr	r3, [r4, #20]
 8010b8e:	b2f6      	uxtb	r6, r6
 8010b90:	4283      	cmp	r3, r0
 8010b92:	4637      	mov	r7, r6
 8010b94:	dc05      	bgt.n	8010ba2 <__swbuf_r+0x4e>
 8010b96:	4621      	mov	r1, r4
 8010b98:	4628      	mov	r0, r5
 8010b9a:	f000 fe19 	bl	80117d0 <_fflush_r>
 8010b9e:	2800      	cmp	r0, #0
 8010ba0:	d1ed      	bne.n	8010b7e <__swbuf_r+0x2a>
 8010ba2:	68a3      	ldr	r3, [r4, #8]
 8010ba4:	3b01      	subs	r3, #1
 8010ba6:	60a3      	str	r3, [r4, #8]
 8010ba8:	6823      	ldr	r3, [r4, #0]
 8010baa:	1c5a      	adds	r2, r3, #1
 8010bac:	6022      	str	r2, [r4, #0]
 8010bae:	701e      	strb	r6, [r3, #0]
 8010bb0:	6962      	ldr	r2, [r4, #20]
 8010bb2:	1c43      	adds	r3, r0, #1
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	d004      	beq.n	8010bc2 <__swbuf_r+0x6e>
 8010bb8:	89a3      	ldrh	r3, [r4, #12]
 8010bba:	07db      	lsls	r3, r3, #31
 8010bbc:	d5e1      	bpl.n	8010b82 <__swbuf_r+0x2e>
 8010bbe:	2e0a      	cmp	r6, #10
 8010bc0:	d1df      	bne.n	8010b82 <__swbuf_r+0x2e>
 8010bc2:	4621      	mov	r1, r4
 8010bc4:	4628      	mov	r0, r5
 8010bc6:	f000 fe03 	bl	80117d0 <_fflush_r>
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	d0d9      	beq.n	8010b82 <__swbuf_r+0x2e>
 8010bce:	e7d6      	b.n	8010b7e <__swbuf_r+0x2a>

08010bd0 <__swsetup_r>:
 8010bd0:	b538      	push	{r3, r4, r5, lr}
 8010bd2:	4b29      	ldr	r3, [pc, #164]	@ (8010c78 <__swsetup_r+0xa8>)
 8010bd4:	4605      	mov	r5, r0
 8010bd6:	6818      	ldr	r0, [r3, #0]
 8010bd8:	460c      	mov	r4, r1
 8010bda:	b118      	cbz	r0, 8010be4 <__swsetup_r+0x14>
 8010bdc:	6a03      	ldr	r3, [r0, #32]
 8010bde:	b90b      	cbnz	r3, 8010be4 <__swsetup_r+0x14>
 8010be0:	f7ff fe96 	bl	8010910 <__sinit>
 8010be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010be8:	0719      	lsls	r1, r3, #28
 8010bea:	d422      	bmi.n	8010c32 <__swsetup_r+0x62>
 8010bec:	06da      	lsls	r2, r3, #27
 8010bee:	d407      	bmi.n	8010c00 <__swsetup_r+0x30>
 8010bf0:	2209      	movs	r2, #9
 8010bf2:	602a      	str	r2, [r5, #0]
 8010bf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bf8:	81a3      	strh	r3, [r4, #12]
 8010bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8010bfe:	e033      	b.n	8010c68 <__swsetup_r+0x98>
 8010c00:	0758      	lsls	r0, r3, #29
 8010c02:	d512      	bpl.n	8010c2a <__swsetup_r+0x5a>
 8010c04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c06:	b141      	cbz	r1, 8010c1a <__swsetup_r+0x4a>
 8010c08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c0c:	4299      	cmp	r1, r3
 8010c0e:	d002      	beq.n	8010c16 <__swsetup_r+0x46>
 8010c10:	4628      	mov	r0, r5
 8010c12:	f000 f8e7 	bl	8010de4 <_free_r>
 8010c16:	2300      	movs	r3, #0
 8010c18:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c1a:	89a3      	ldrh	r3, [r4, #12]
 8010c1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010c20:	81a3      	strh	r3, [r4, #12]
 8010c22:	2300      	movs	r3, #0
 8010c24:	6063      	str	r3, [r4, #4]
 8010c26:	6923      	ldr	r3, [r4, #16]
 8010c28:	6023      	str	r3, [r4, #0]
 8010c2a:	89a3      	ldrh	r3, [r4, #12]
 8010c2c:	f043 0308 	orr.w	r3, r3, #8
 8010c30:	81a3      	strh	r3, [r4, #12]
 8010c32:	6923      	ldr	r3, [r4, #16]
 8010c34:	b94b      	cbnz	r3, 8010c4a <__swsetup_r+0x7a>
 8010c36:	89a3      	ldrh	r3, [r4, #12]
 8010c38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010c40:	d003      	beq.n	8010c4a <__swsetup_r+0x7a>
 8010c42:	4621      	mov	r1, r4
 8010c44:	4628      	mov	r0, r5
 8010c46:	f000 fe11 	bl	801186c <__smakebuf_r>
 8010c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c4e:	f013 0201 	ands.w	r2, r3, #1
 8010c52:	d00a      	beq.n	8010c6a <__swsetup_r+0x9a>
 8010c54:	2200      	movs	r2, #0
 8010c56:	60a2      	str	r2, [r4, #8]
 8010c58:	6962      	ldr	r2, [r4, #20]
 8010c5a:	4252      	negs	r2, r2
 8010c5c:	61a2      	str	r2, [r4, #24]
 8010c5e:	6922      	ldr	r2, [r4, #16]
 8010c60:	b942      	cbnz	r2, 8010c74 <__swsetup_r+0xa4>
 8010c62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010c66:	d1c5      	bne.n	8010bf4 <__swsetup_r+0x24>
 8010c68:	bd38      	pop	{r3, r4, r5, pc}
 8010c6a:	0799      	lsls	r1, r3, #30
 8010c6c:	bf58      	it	pl
 8010c6e:	6962      	ldrpl	r2, [r4, #20]
 8010c70:	60a2      	str	r2, [r4, #8]
 8010c72:	e7f4      	b.n	8010c5e <__swsetup_r+0x8e>
 8010c74:	2000      	movs	r0, #0
 8010c76:	e7f7      	b.n	8010c68 <__swsetup_r+0x98>
 8010c78:	200001d8 	.word	0x200001d8

08010c7c <memmove>:
 8010c7c:	4288      	cmp	r0, r1
 8010c7e:	b510      	push	{r4, lr}
 8010c80:	eb01 0402 	add.w	r4, r1, r2
 8010c84:	d902      	bls.n	8010c8c <memmove+0x10>
 8010c86:	4284      	cmp	r4, r0
 8010c88:	4623      	mov	r3, r4
 8010c8a:	d807      	bhi.n	8010c9c <memmove+0x20>
 8010c8c:	1e43      	subs	r3, r0, #1
 8010c8e:	42a1      	cmp	r1, r4
 8010c90:	d008      	beq.n	8010ca4 <memmove+0x28>
 8010c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c9a:	e7f8      	b.n	8010c8e <memmove+0x12>
 8010c9c:	4402      	add	r2, r0
 8010c9e:	4601      	mov	r1, r0
 8010ca0:	428a      	cmp	r2, r1
 8010ca2:	d100      	bne.n	8010ca6 <memmove+0x2a>
 8010ca4:	bd10      	pop	{r4, pc}
 8010ca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010caa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010cae:	e7f7      	b.n	8010ca0 <memmove+0x24>

08010cb0 <memset>:
 8010cb0:	4402      	add	r2, r0
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	d100      	bne.n	8010cba <memset+0xa>
 8010cb8:	4770      	bx	lr
 8010cba:	f803 1b01 	strb.w	r1, [r3], #1
 8010cbe:	e7f9      	b.n	8010cb4 <memset+0x4>

08010cc0 <_close_r>:
 8010cc0:	b538      	push	{r3, r4, r5, lr}
 8010cc2:	4d06      	ldr	r5, [pc, #24]	@ (8010cdc <_close_r+0x1c>)
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	4604      	mov	r4, r0
 8010cc8:	4608      	mov	r0, r1
 8010cca:	602b      	str	r3, [r5, #0]
 8010ccc:	f7f2 f882 	bl	8002dd4 <_close>
 8010cd0:	1c43      	adds	r3, r0, #1
 8010cd2:	d102      	bne.n	8010cda <_close_r+0x1a>
 8010cd4:	682b      	ldr	r3, [r5, #0]
 8010cd6:	b103      	cbz	r3, 8010cda <_close_r+0x1a>
 8010cd8:	6023      	str	r3, [r4, #0]
 8010cda:	bd38      	pop	{r3, r4, r5, pc}
 8010cdc:	200009d4 	.word	0x200009d4

08010ce0 <_lseek_r>:
 8010ce0:	b538      	push	{r3, r4, r5, lr}
 8010ce2:	4d07      	ldr	r5, [pc, #28]	@ (8010d00 <_lseek_r+0x20>)
 8010ce4:	4604      	mov	r4, r0
 8010ce6:	4608      	mov	r0, r1
 8010ce8:	4611      	mov	r1, r2
 8010cea:	2200      	movs	r2, #0
 8010cec:	602a      	str	r2, [r5, #0]
 8010cee:	461a      	mov	r2, r3
 8010cf0:	f7f2 f897 	bl	8002e22 <_lseek>
 8010cf4:	1c43      	adds	r3, r0, #1
 8010cf6:	d102      	bne.n	8010cfe <_lseek_r+0x1e>
 8010cf8:	682b      	ldr	r3, [r5, #0]
 8010cfa:	b103      	cbz	r3, 8010cfe <_lseek_r+0x1e>
 8010cfc:	6023      	str	r3, [r4, #0]
 8010cfe:	bd38      	pop	{r3, r4, r5, pc}
 8010d00:	200009d4 	.word	0x200009d4

08010d04 <_read_r>:
 8010d04:	b538      	push	{r3, r4, r5, lr}
 8010d06:	4d07      	ldr	r5, [pc, #28]	@ (8010d24 <_read_r+0x20>)
 8010d08:	4604      	mov	r4, r0
 8010d0a:	4608      	mov	r0, r1
 8010d0c:	4611      	mov	r1, r2
 8010d0e:	2200      	movs	r2, #0
 8010d10:	602a      	str	r2, [r5, #0]
 8010d12:	461a      	mov	r2, r3
 8010d14:	f7f2 f841 	bl	8002d9a <_read>
 8010d18:	1c43      	adds	r3, r0, #1
 8010d1a:	d102      	bne.n	8010d22 <_read_r+0x1e>
 8010d1c:	682b      	ldr	r3, [r5, #0]
 8010d1e:	b103      	cbz	r3, 8010d22 <_read_r+0x1e>
 8010d20:	6023      	str	r3, [r4, #0]
 8010d22:	bd38      	pop	{r3, r4, r5, pc}
 8010d24:	200009d4 	.word	0x200009d4

08010d28 <_sbrk_r>:
 8010d28:	b538      	push	{r3, r4, r5, lr}
 8010d2a:	4d06      	ldr	r5, [pc, #24]	@ (8010d44 <_sbrk_r+0x1c>)
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	4604      	mov	r4, r0
 8010d30:	4608      	mov	r0, r1
 8010d32:	602b      	str	r3, [r5, #0]
 8010d34:	f7f2 f882 	bl	8002e3c <_sbrk>
 8010d38:	1c43      	adds	r3, r0, #1
 8010d3a:	d102      	bne.n	8010d42 <_sbrk_r+0x1a>
 8010d3c:	682b      	ldr	r3, [r5, #0]
 8010d3e:	b103      	cbz	r3, 8010d42 <_sbrk_r+0x1a>
 8010d40:	6023      	str	r3, [r4, #0]
 8010d42:	bd38      	pop	{r3, r4, r5, pc}
 8010d44:	200009d4 	.word	0x200009d4

08010d48 <_write_r>:
 8010d48:	b538      	push	{r3, r4, r5, lr}
 8010d4a:	4d07      	ldr	r5, [pc, #28]	@ (8010d68 <_write_r+0x20>)
 8010d4c:	4604      	mov	r4, r0
 8010d4e:	4608      	mov	r0, r1
 8010d50:	4611      	mov	r1, r2
 8010d52:	2200      	movs	r2, #0
 8010d54:	602a      	str	r2, [r5, #0]
 8010d56:	461a      	mov	r2, r3
 8010d58:	f7f1 fc72 	bl	8002640 <_write>
 8010d5c:	1c43      	adds	r3, r0, #1
 8010d5e:	d102      	bne.n	8010d66 <_write_r+0x1e>
 8010d60:	682b      	ldr	r3, [r5, #0]
 8010d62:	b103      	cbz	r3, 8010d66 <_write_r+0x1e>
 8010d64:	6023      	str	r3, [r4, #0]
 8010d66:	bd38      	pop	{r3, r4, r5, pc}
 8010d68:	200009d4 	.word	0x200009d4

08010d6c <__errno>:
 8010d6c:	4b01      	ldr	r3, [pc, #4]	@ (8010d74 <__errno+0x8>)
 8010d6e:	6818      	ldr	r0, [r3, #0]
 8010d70:	4770      	bx	lr
 8010d72:	bf00      	nop
 8010d74:	200001d8 	.word	0x200001d8

08010d78 <__libc_init_array>:
 8010d78:	b570      	push	{r4, r5, r6, lr}
 8010d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8010db0 <__libc_init_array+0x38>)
 8010d7c:	4c0d      	ldr	r4, [pc, #52]	@ (8010db4 <__libc_init_array+0x3c>)
 8010d7e:	1b64      	subs	r4, r4, r5
 8010d80:	10a4      	asrs	r4, r4, #2
 8010d82:	2600      	movs	r6, #0
 8010d84:	42a6      	cmp	r6, r4
 8010d86:	d109      	bne.n	8010d9c <__libc_init_array+0x24>
 8010d88:	4d0b      	ldr	r5, [pc, #44]	@ (8010db8 <__libc_init_array+0x40>)
 8010d8a:	4c0c      	ldr	r4, [pc, #48]	@ (8010dbc <__libc_init_array+0x44>)
 8010d8c:	f001 fba4 	bl	80124d8 <_init>
 8010d90:	1b64      	subs	r4, r4, r5
 8010d92:	10a4      	asrs	r4, r4, #2
 8010d94:	2600      	movs	r6, #0
 8010d96:	42a6      	cmp	r6, r4
 8010d98:	d105      	bne.n	8010da6 <__libc_init_array+0x2e>
 8010d9a:	bd70      	pop	{r4, r5, r6, pc}
 8010d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010da0:	4798      	blx	r3
 8010da2:	3601      	adds	r6, #1
 8010da4:	e7ee      	b.n	8010d84 <__libc_init_array+0xc>
 8010da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8010daa:	4798      	blx	r3
 8010dac:	3601      	adds	r6, #1
 8010dae:	e7f2      	b.n	8010d96 <__libc_init_array+0x1e>
 8010db0:	08018070 	.word	0x08018070
 8010db4:	08018070 	.word	0x08018070
 8010db8:	08018070 	.word	0x08018070
 8010dbc:	08018074 	.word	0x08018074

08010dc0 <__retarget_lock_init_recursive>:
 8010dc0:	4770      	bx	lr

08010dc2 <__retarget_lock_acquire_recursive>:
 8010dc2:	4770      	bx	lr

08010dc4 <__retarget_lock_release_recursive>:
 8010dc4:	4770      	bx	lr

08010dc6 <memcpy>:
 8010dc6:	440a      	add	r2, r1
 8010dc8:	4291      	cmp	r1, r2
 8010dca:	f100 33ff 	add.w	r3, r0, #4294967295
 8010dce:	d100      	bne.n	8010dd2 <memcpy+0xc>
 8010dd0:	4770      	bx	lr
 8010dd2:	b510      	push	{r4, lr}
 8010dd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010dd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ddc:	4291      	cmp	r1, r2
 8010dde:	d1f9      	bne.n	8010dd4 <memcpy+0xe>
 8010de0:	bd10      	pop	{r4, pc}
	...

08010de4 <_free_r>:
 8010de4:	b538      	push	{r3, r4, r5, lr}
 8010de6:	4605      	mov	r5, r0
 8010de8:	2900      	cmp	r1, #0
 8010dea:	d041      	beq.n	8010e70 <_free_r+0x8c>
 8010dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010df0:	1f0c      	subs	r4, r1, #4
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	bfb8      	it	lt
 8010df6:	18e4      	addlt	r4, r4, r3
 8010df8:	f7ff fcf2 	bl	80107e0 <__malloc_lock>
 8010dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8010e74 <_free_r+0x90>)
 8010dfe:	6813      	ldr	r3, [r2, #0]
 8010e00:	b933      	cbnz	r3, 8010e10 <_free_r+0x2c>
 8010e02:	6063      	str	r3, [r4, #4]
 8010e04:	6014      	str	r4, [r2, #0]
 8010e06:	4628      	mov	r0, r5
 8010e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e0c:	f7ff bcee 	b.w	80107ec <__malloc_unlock>
 8010e10:	42a3      	cmp	r3, r4
 8010e12:	d908      	bls.n	8010e26 <_free_r+0x42>
 8010e14:	6820      	ldr	r0, [r4, #0]
 8010e16:	1821      	adds	r1, r4, r0
 8010e18:	428b      	cmp	r3, r1
 8010e1a:	bf01      	itttt	eq
 8010e1c:	6819      	ldreq	r1, [r3, #0]
 8010e1e:	685b      	ldreq	r3, [r3, #4]
 8010e20:	1809      	addeq	r1, r1, r0
 8010e22:	6021      	streq	r1, [r4, #0]
 8010e24:	e7ed      	b.n	8010e02 <_free_r+0x1e>
 8010e26:	461a      	mov	r2, r3
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	b10b      	cbz	r3, 8010e30 <_free_r+0x4c>
 8010e2c:	42a3      	cmp	r3, r4
 8010e2e:	d9fa      	bls.n	8010e26 <_free_r+0x42>
 8010e30:	6811      	ldr	r1, [r2, #0]
 8010e32:	1850      	adds	r0, r2, r1
 8010e34:	42a0      	cmp	r0, r4
 8010e36:	d10b      	bne.n	8010e50 <_free_r+0x6c>
 8010e38:	6820      	ldr	r0, [r4, #0]
 8010e3a:	4401      	add	r1, r0
 8010e3c:	1850      	adds	r0, r2, r1
 8010e3e:	4283      	cmp	r3, r0
 8010e40:	6011      	str	r1, [r2, #0]
 8010e42:	d1e0      	bne.n	8010e06 <_free_r+0x22>
 8010e44:	6818      	ldr	r0, [r3, #0]
 8010e46:	685b      	ldr	r3, [r3, #4]
 8010e48:	6053      	str	r3, [r2, #4]
 8010e4a:	4408      	add	r0, r1
 8010e4c:	6010      	str	r0, [r2, #0]
 8010e4e:	e7da      	b.n	8010e06 <_free_r+0x22>
 8010e50:	d902      	bls.n	8010e58 <_free_r+0x74>
 8010e52:	230c      	movs	r3, #12
 8010e54:	602b      	str	r3, [r5, #0]
 8010e56:	e7d6      	b.n	8010e06 <_free_r+0x22>
 8010e58:	6820      	ldr	r0, [r4, #0]
 8010e5a:	1821      	adds	r1, r4, r0
 8010e5c:	428b      	cmp	r3, r1
 8010e5e:	bf04      	itt	eq
 8010e60:	6819      	ldreq	r1, [r3, #0]
 8010e62:	685b      	ldreq	r3, [r3, #4]
 8010e64:	6063      	str	r3, [r4, #4]
 8010e66:	bf04      	itt	eq
 8010e68:	1809      	addeq	r1, r1, r0
 8010e6a:	6021      	streq	r1, [r4, #0]
 8010e6c:	6054      	str	r4, [r2, #4]
 8010e6e:	e7ca      	b.n	8010e06 <_free_r+0x22>
 8010e70:	bd38      	pop	{r3, r4, r5, pc}
 8010e72:	bf00      	nop
 8010e74:	20000894 	.word	0x20000894

08010e78 <__ssputs_r>:
 8010e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e7c:	688e      	ldr	r6, [r1, #8]
 8010e7e:	461f      	mov	r7, r3
 8010e80:	42be      	cmp	r6, r7
 8010e82:	680b      	ldr	r3, [r1, #0]
 8010e84:	4682      	mov	sl, r0
 8010e86:	460c      	mov	r4, r1
 8010e88:	4690      	mov	r8, r2
 8010e8a:	d82d      	bhi.n	8010ee8 <__ssputs_r+0x70>
 8010e8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010e90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010e94:	d026      	beq.n	8010ee4 <__ssputs_r+0x6c>
 8010e96:	6965      	ldr	r5, [r4, #20]
 8010e98:	6909      	ldr	r1, [r1, #16]
 8010e9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e9e:	eba3 0901 	sub.w	r9, r3, r1
 8010ea2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010ea6:	1c7b      	adds	r3, r7, #1
 8010ea8:	444b      	add	r3, r9
 8010eaa:	106d      	asrs	r5, r5, #1
 8010eac:	429d      	cmp	r5, r3
 8010eae:	bf38      	it	cc
 8010eb0:	461d      	movcc	r5, r3
 8010eb2:	0553      	lsls	r3, r2, #21
 8010eb4:	d527      	bpl.n	8010f06 <__ssputs_r+0x8e>
 8010eb6:	4629      	mov	r1, r5
 8010eb8:	f7ff fc12 	bl	80106e0 <_malloc_r>
 8010ebc:	4606      	mov	r6, r0
 8010ebe:	b360      	cbz	r0, 8010f1a <__ssputs_r+0xa2>
 8010ec0:	6921      	ldr	r1, [r4, #16]
 8010ec2:	464a      	mov	r2, r9
 8010ec4:	f7ff ff7f 	bl	8010dc6 <memcpy>
 8010ec8:	89a3      	ldrh	r3, [r4, #12]
 8010eca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ed2:	81a3      	strh	r3, [r4, #12]
 8010ed4:	6126      	str	r6, [r4, #16]
 8010ed6:	6165      	str	r5, [r4, #20]
 8010ed8:	444e      	add	r6, r9
 8010eda:	eba5 0509 	sub.w	r5, r5, r9
 8010ede:	6026      	str	r6, [r4, #0]
 8010ee0:	60a5      	str	r5, [r4, #8]
 8010ee2:	463e      	mov	r6, r7
 8010ee4:	42be      	cmp	r6, r7
 8010ee6:	d900      	bls.n	8010eea <__ssputs_r+0x72>
 8010ee8:	463e      	mov	r6, r7
 8010eea:	6820      	ldr	r0, [r4, #0]
 8010eec:	4632      	mov	r2, r6
 8010eee:	4641      	mov	r1, r8
 8010ef0:	f7ff fec4 	bl	8010c7c <memmove>
 8010ef4:	68a3      	ldr	r3, [r4, #8]
 8010ef6:	1b9b      	subs	r3, r3, r6
 8010ef8:	60a3      	str	r3, [r4, #8]
 8010efa:	6823      	ldr	r3, [r4, #0]
 8010efc:	4433      	add	r3, r6
 8010efe:	6023      	str	r3, [r4, #0]
 8010f00:	2000      	movs	r0, #0
 8010f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f06:	462a      	mov	r2, r5
 8010f08:	f000 fd0e 	bl	8011928 <_realloc_r>
 8010f0c:	4606      	mov	r6, r0
 8010f0e:	2800      	cmp	r0, #0
 8010f10:	d1e0      	bne.n	8010ed4 <__ssputs_r+0x5c>
 8010f12:	6921      	ldr	r1, [r4, #16]
 8010f14:	4650      	mov	r0, sl
 8010f16:	f7ff ff65 	bl	8010de4 <_free_r>
 8010f1a:	230c      	movs	r3, #12
 8010f1c:	f8ca 3000 	str.w	r3, [sl]
 8010f20:	89a3      	ldrh	r3, [r4, #12]
 8010f22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f26:	81a3      	strh	r3, [r4, #12]
 8010f28:	f04f 30ff 	mov.w	r0, #4294967295
 8010f2c:	e7e9      	b.n	8010f02 <__ssputs_r+0x8a>
	...

08010f30 <_svfiprintf_r>:
 8010f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f34:	4698      	mov	r8, r3
 8010f36:	898b      	ldrh	r3, [r1, #12]
 8010f38:	061b      	lsls	r3, r3, #24
 8010f3a:	b09d      	sub	sp, #116	@ 0x74
 8010f3c:	4607      	mov	r7, r0
 8010f3e:	460d      	mov	r5, r1
 8010f40:	4614      	mov	r4, r2
 8010f42:	d510      	bpl.n	8010f66 <_svfiprintf_r+0x36>
 8010f44:	690b      	ldr	r3, [r1, #16]
 8010f46:	b973      	cbnz	r3, 8010f66 <_svfiprintf_r+0x36>
 8010f48:	2140      	movs	r1, #64	@ 0x40
 8010f4a:	f7ff fbc9 	bl	80106e0 <_malloc_r>
 8010f4e:	6028      	str	r0, [r5, #0]
 8010f50:	6128      	str	r0, [r5, #16]
 8010f52:	b930      	cbnz	r0, 8010f62 <_svfiprintf_r+0x32>
 8010f54:	230c      	movs	r3, #12
 8010f56:	603b      	str	r3, [r7, #0]
 8010f58:	f04f 30ff 	mov.w	r0, #4294967295
 8010f5c:	b01d      	add	sp, #116	@ 0x74
 8010f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f62:	2340      	movs	r3, #64	@ 0x40
 8010f64:	616b      	str	r3, [r5, #20]
 8010f66:	2300      	movs	r3, #0
 8010f68:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f6a:	2320      	movs	r3, #32
 8010f6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010f70:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f74:	2330      	movs	r3, #48	@ 0x30
 8010f76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011114 <_svfiprintf_r+0x1e4>
 8010f7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010f7e:	f04f 0901 	mov.w	r9, #1
 8010f82:	4623      	mov	r3, r4
 8010f84:	469a      	mov	sl, r3
 8010f86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f8a:	b10a      	cbz	r2, 8010f90 <_svfiprintf_r+0x60>
 8010f8c:	2a25      	cmp	r2, #37	@ 0x25
 8010f8e:	d1f9      	bne.n	8010f84 <_svfiprintf_r+0x54>
 8010f90:	ebba 0b04 	subs.w	fp, sl, r4
 8010f94:	d00b      	beq.n	8010fae <_svfiprintf_r+0x7e>
 8010f96:	465b      	mov	r3, fp
 8010f98:	4622      	mov	r2, r4
 8010f9a:	4629      	mov	r1, r5
 8010f9c:	4638      	mov	r0, r7
 8010f9e:	f7ff ff6b 	bl	8010e78 <__ssputs_r>
 8010fa2:	3001      	adds	r0, #1
 8010fa4:	f000 80a7 	beq.w	80110f6 <_svfiprintf_r+0x1c6>
 8010fa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010faa:	445a      	add	r2, fp
 8010fac:	9209      	str	r2, [sp, #36]	@ 0x24
 8010fae:	f89a 3000 	ldrb.w	r3, [sl]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	f000 809f 	beq.w	80110f6 <_svfiprintf_r+0x1c6>
 8010fb8:	2300      	movs	r3, #0
 8010fba:	f04f 32ff 	mov.w	r2, #4294967295
 8010fbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010fc2:	f10a 0a01 	add.w	sl, sl, #1
 8010fc6:	9304      	str	r3, [sp, #16]
 8010fc8:	9307      	str	r3, [sp, #28]
 8010fca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010fce:	931a      	str	r3, [sp, #104]	@ 0x68
 8010fd0:	4654      	mov	r4, sl
 8010fd2:	2205      	movs	r2, #5
 8010fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fd8:	484e      	ldr	r0, [pc, #312]	@ (8011114 <_svfiprintf_r+0x1e4>)
 8010fda:	f7ef f8d9 	bl	8000190 <memchr>
 8010fde:	9a04      	ldr	r2, [sp, #16]
 8010fe0:	b9d8      	cbnz	r0, 801101a <_svfiprintf_r+0xea>
 8010fe2:	06d0      	lsls	r0, r2, #27
 8010fe4:	bf44      	itt	mi
 8010fe6:	2320      	movmi	r3, #32
 8010fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010fec:	0711      	lsls	r1, r2, #28
 8010fee:	bf44      	itt	mi
 8010ff0:	232b      	movmi	r3, #43	@ 0x2b
 8010ff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ff6:	f89a 3000 	ldrb.w	r3, [sl]
 8010ffa:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ffc:	d015      	beq.n	801102a <_svfiprintf_r+0xfa>
 8010ffe:	9a07      	ldr	r2, [sp, #28]
 8011000:	4654      	mov	r4, sl
 8011002:	2000      	movs	r0, #0
 8011004:	f04f 0c0a 	mov.w	ip, #10
 8011008:	4621      	mov	r1, r4
 801100a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801100e:	3b30      	subs	r3, #48	@ 0x30
 8011010:	2b09      	cmp	r3, #9
 8011012:	d94b      	bls.n	80110ac <_svfiprintf_r+0x17c>
 8011014:	b1b0      	cbz	r0, 8011044 <_svfiprintf_r+0x114>
 8011016:	9207      	str	r2, [sp, #28]
 8011018:	e014      	b.n	8011044 <_svfiprintf_r+0x114>
 801101a:	eba0 0308 	sub.w	r3, r0, r8
 801101e:	fa09 f303 	lsl.w	r3, r9, r3
 8011022:	4313      	orrs	r3, r2
 8011024:	9304      	str	r3, [sp, #16]
 8011026:	46a2      	mov	sl, r4
 8011028:	e7d2      	b.n	8010fd0 <_svfiprintf_r+0xa0>
 801102a:	9b03      	ldr	r3, [sp, #12]
 801102c:	1d19      	adds	r1, r3, #4
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	9103      	str	r1, [sp, #12]
 8011032:	2b00      	cmp	r3, #0
 8011034:	bfbb      	ittet	lt
 8011036:	425b      	neglt	r3, r3
 8011038:	f042 0202 	orrlt.w	r2, r2, #2
 801103c:	9307      	strge	r3, [sp, #28]
 801103e:	9307      	strlt	r3, [sp, #28]
 8011040:	bfb8      	it	lt
 8011042:	9204      	strlt	r2, [sp, #16]
 8011044:	7823      	ldrb	r3, [r4, #0]
 8011046:	2b2e      	cmp	r3, #46	@ 0x2e
 8011048:	d10a      	bne.n	8011060 <_svfiprintf_r+0x130>
 801104a:	7863      	ldrb	r3, [r4, #1]
 801104c:	2b2a      	cmp	r3, #42	@ 0x2a
 801104e:	d132      	bne.n	80110b6 <_svfiprintf_r+0x186>
 8011050:	9b03      	ldr	r3, [sp, #12]
 8011052:	1d1a      	adds	r2, r3, #4
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	9203      	str	r2, [sp, #12]
 8011058:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801105c:	3402      	adds	r4, #2
 801105e:	9305      	str	r3, [sp, #20]
 8011060:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011124 <_svfiprintf_r+0x1f4>
 8011064:	7821      	ldrb	r1, [r4, #0]
 8011066:	2203      	movs	r2, #3
 8011068:	4650      	mov	r0, sl
 801106a:	f7ef f891 	bl	8000190 <memchr>
 801106e:	b138      	cbz	r0, 8011080 <_svfiprintf_r+0x150>
 8011070:	9b04      	ldr	r3, [sp, #16]
 8011072:	eba0 000a 	sub.w	r0, r0, sl
 8011076:	2240      	movs	r2, #64	@ 0x40
 8011078:	4082      	lsls	r2, r0
 801107a:	4313      	orrs	r3, r2
 801107c:	3401      	adds	r4, #1
 801107e:	9304      	str	r3, [sp, #16]
 8011080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011084:	4824      	ldr	r0, [pc, #144]	@ (8011118 <_svfiprintf_r+0x1e8>)
 8011086:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801108a:	2206      	movs	r2, #6
 801108c:	f7ef f880 	bl	8000190 <memchr>
 8011090:	2800      	cmp	r0, #0
 8011092:	d036      	beq.n	8011102 <_svfiprintf_r+0x1d2>
 8011094:	4b21      	ldr	r3, [pc, #132]	@ (801111c <_svfiprintf_r+0x1ec>)
 8011096:	bb1b      	cbnz	r3, 80110e0 <_svfiprintf_r+0x1b0>
 8011098:	9b03      	ldr	r3, [sp, #12]
 801109a:	3307      	adds	r3, #7
 801109c:	f023 0307 	bic.w	r3, r3, #7
 80110a0:	3308      	adds	r3, #8
 80110a2:	9303      	str	r3, [sp, #12]
 80110a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110a6:	4433      	add	r3, r6
 80110a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80110aa:	e76a      	b.n	8010f82 <_svfiprintf_r+0x52>
 80110ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80110b0:	460c      	mov	r4, r1
 80110b2:	2001      	movs	r0, #1
 80110b4:	e7a8      	b.n	8011008 <_svfiprintf_r+0xd8>
 80110b6:	2300      	movs	r3, #0
 80110b8:	3401      	adds	r4, #1
 80110ba:	9305      	str	r3, [sp, #20]
 80110bc:	4619      	mov	r1, r3
 80110be:	f04f 0c0a 	mov.w	ip, #10
 80110c2:	4620      	mov	r0, r4
 80110c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110c8:	3a30      	subs	r2, #48	@ 0x30
 80110ca:	2a09      	cmp	r2, #9
 80110cc:	d903      	bls.n	80110d6 <_svfiprintf_r+0x1a6>
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d0c6      	beq.n	8011060 <_svfiprintf_r+0x130>
 80110d2:	9105      	str	r1, [sp, #20]
 80110d4:	e7c4      	b.n	8011060 <_svfiprintf_r+0x130>
 80110d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80110da:	4604      	mov	r4, r0
 80110dc:	2301      	movs	r3, #1
 80110de:	e7f0      	b.n	80110c2 <_svfiprintf_r+0x192>
 80110e0:	ab03      	add	r3, sp, #12
 80110e2:	9300      	str	r3, [sp, #0]
 80110e4:	462a      	mov	r2, r5
 80110e6:	4b0e      	ldr	r3, [pc, #56]	@ (8011120 <_svfiprintf_r+0x1f0>)
 80110e8:	a904      	add	r1, sp, #16
 80110ea:	4638      	mov	r0, r7
 80110ec:	f3af 8000 	nop.w
 80110f0:	1c42      	adds	r2, r0, #1
 80110f2:	4606      	mov	r6, r0
 80110f4:	d1d6      	bne.n	80110a4 <_svfiprintf_r+0x174>
 80110f6:	89ab      	ldrh	r3, [r5, #12]
 80110f8:	065b      	lsls	r3, r3, #25
 80110fa:	f53f af2d 	bmi.w	8010f58 <_svfiprintf_r+0x28>
 80110fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011100:	e72c      	b.n	8010f5c <_svfiprintf_r+0x2c>
 8011102:	ab03      	add	r3, sp, #12
 8011104:	9300      	str	r3, [sp, #0]
 8011106:	462a      	mov	r2, r5
 8011108:	4b05      	ldr	r3, [pc, #20]	@ (8011120 <_svfiprintf_r+0x1f0>)
 801110a:	a904      	add	r1, sp, #16
 801110c:	4638      	mov	r0, r7
 801110e:	f000 f9bb 	bl	8011488 <_printf_i>
 8011112:	e7ed      	b.n	80110f0 <_svfiprintf_r+0x1c0>
 8011114:	08017c62 	.word	0x08017c62
 8011118:	08017c6c 	.word	0x08017c6c
 801111c:	00000000 	.word	0x00000000
 8011120:	08010e79 	.word	0x08010e79
 8011124:	08017c68 	.word	0x08017c68

08011128 <__sfputc_r>:
 8011128:	6893      	ldr	r3, [r2, #8]
 801112a:	3b01      	subs	r3, #1
 801112c:	2b00      	cmp	r3, #0
 801112e:	b410      	push	{r4}
 8011130:	6093      	str	r3, [r2, #8]
 8011132:	da08      	bge.n	8011146 <__sfputc_r+0x1e>
 8011134:	6994      	ldr	r4, [r2, #24]
 8011136:	42a3      	cmp	r3, r4
 8011138:	db01      	blt.n	801113e <__sfputc_r+0x16>
 801113a:	290a      	cmp	r1, #10
 801113c:	d103      	bne.n	8011146 <__sfputc_r+0x1e>
 801113e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011142:	f7ff bd07 	b.w	8010b54 <__swbuf_r>
 8011146:	6813      	ldr	r3, [r2, #0]
 8011148:	1c58      	adds	r0, r3, #1
 801114a:	6010      	str	r0, [r2, #0]
 801114c:	7019      	strb	r1, [r3, #0]
 801114e:	4608      	mov	r0, r1
 8011150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011154:	4770      	bx	lr

08011156 <__sfputs_r>:
 8011156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011158:	4606      	mov	r6, r0
 801115a:	460f      	mov	r7, r1
 801115c:	4614      	mov	r4, r2
 801115e:	18d5      	adds	r5, r2, r3
 8011160:	42ac      	cmp	r4, r5
 8011162:	d101      	bne.n	8011168 <__sfputs_r+0x12>
 8011164:	2000      	movs	r0, #0
 8011166:	e007      	b.n	8011178 <__sfputs_r+0x22>
 8011168:	f814 1b01 	ldrb.w	r1, [r4], #1
 801116c:	463a      	mov	r2, r7
 801116e:	4630      	mov	r0, r6
 8011170:	f7ff ffda 	bl	8011128 <__sfputc_r>
 8011174:	1c43      	adds	r3, r0, #1
 8011176:	d1f3      	bne.n	8011160 <__sfputs_r+0xa>
 8011178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801117c <_vfiprintf_r>:
 801117c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011180:	460d      	mov	r5, r1
 8011182:	b09d      	sub	sp, #116	@ 0x74
 8011184:	4614      	mov	r4, r2
 8011186:	4698      	mov	r8, r3
 8011188:	4606      	mov	r6, r0
 801118a:	b118      	cbz	r0, 8011194 <_vfiprintf_r+0x18>
 801118c:	6a03      	ldr	r3, [r0, #32]
 801118e:	b90b      	cbnz	r3, 8011194 <_vfiprintf_r+0x18>
 8011190:	f7ff fbbe 	bl	8010910 <__sinit>
 8011194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011196:	07d9      	lsls	r1, r3, #31
 8011198:	d405      	bmi.n	80111a6 <_vfiprintf_r+0x2a>
 801119a:	89ab      	ldrh	r3, [r5, #12]
 801119c:	059a      	lsls	r2, r3, #22
 801119e:	d402      	bmi.n	80111a6 <_vfiprintf_r+0x2a>
 80111a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80111a2:	f7ff fe0e 	bl	8010dc2 <__retarget_lock_acquire_recursive>
 80111a6:	89ab      	ldrh	r3, [r5, #12]
 80111a8:	071b      	lsls	r3, r3, #28
 80111aa:	d501      	bpl.n	80111b0 <_vfiprintf_r+0x34>
 80111ac:	692b      	ldr	r3, [r5, #16]
 80111ae:	b99b      	cbnz	r3, 80111d8 <_vfiprintf_r+0x5c>
 80111b0:	4629      	mov	r1, r5
 80111b2:	4630      	mov	r0, r6
 80111b4:	f7ff fd0c 	bl	8010bd0 <__swsetup_r>
 80111b8:	b170      	cbz	r0, 80111d8 <_vfiprintf_r+0x5c>
 80111ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80111bc:	07dc      	lsls	r4, r3, #31
 80111be:	d504      	bpl.n	80111ca <_vfiprintf_r+0x4e>
 80111c0:	f04f 30ff 	mov.w	r0, #4294967295
 80111c4:	b01d      	add	sp, #116	@ 0x74
 80111c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ca:	89ab      	ldrh	r3, [r5, #12]
 80111cc:	0598      	lsls	r0, r3, #22
 80111ce:	d4f7      	bmi.n	80111c0 <_vfiprintf_r+0x44>
 80111d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80111d2:	f7ff fdf7 	bl	8010dc4 <__retarget_lock_release_recursive>
 80111d6:	e7f3      	b.n	80111c0 <_vfiprintf_r+0x44>
 80111d8:	2300      	movs	r3, #0
 80111da:	9309      	str	r3, [sp, #36]	@ 0x24
 80111dc:	2320      	movs	r3, #32
 80111de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80111e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80111e6:	2330      	movs	r3, #48	@ 0x30
 80111e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011398 <_vfiprintf_r+0x21c>
 80111ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80111f0:	f04f 0901 	mov.w	r9, #1
 80111f4:	4623      	mov	r3, r4
 80111f6:	469a      	mov	sl, r3
 80111f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111fc:	b10a      	cbz	r2, 8011202 <_vfiprintf_r+0x86>
 80111fe:	2a25      	cmp	r2, #37	@ 0x25
 8011200:	d1f9      	bne.n	80111f6 <_vfiprintf_r+0x7a>
 8011202:	ebba 0b04 	subs.w	fp, sl, r4
 8011206:	d00b      	beq.n	8011220 <_vfiprintf_r+0xa4>
 8011208:	465b      	mov	r3, fp
 801120a:	4622      	mov	r2, r4
 801120c:	4629      	mov	r1, r5
 801120e:	4630      	mov	r0, r6
 8011210:	f7ff ffa1 	bl	8011156 <__sfputs_r>
 8011214:	3001      	adds	r0, #1
 8011216:	f000 80a7 	beq.w	8011368 <_vfiprintf_r+0x1ec>
 801121a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801121c:	445a      	add	r2, fp
 801121e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011220:	f89a 3000 	ldrb.w	r3, [sl]
 8011224:	2b00      	cmp	r3, #0
 8011226:	f000 809f 	beq.w	8011368 <_vfiprintf_r+0x1ec>
 801122a:	2300      	movs	r3, #0
 801122c:	f04f 32ff 	mov.w	r2, #4294967295
 8011230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011234:	f10a 0a01 	add.w	sl, sl, #1
 8011238:	9304      	str	r3, [sp, #16]
 801123a:	9307      	str	r3, [sp, #28]
 801123c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011240:	931a      	str	r3, [sp, #104]	@ 0x68
 8011242:	4654      	mov	r4, sl
 8011244:	2205      	movs	r2, #5
 8011246:	f814 1b01 	ldrb.w	r1, [r4], #1
 801124a:	4853      	ldr	r0, [pc, #332]	@ (8011398 <_vfiprintf_r+0x21c>)
 801124c:	f7ee ffa0 	bl	8000190 <memchr>
 8011250:	9a04      	ldr	r2, [sp, #16]
 8011252:	b9d8      	cbnz	r0, 801128c <_vfiprintf_r+0x110>
 8011254:	06d1      	lsls	r1, r2, #27
 8011256:	bf44      	itt	mi
 8011258:	2320      	movmi	r3, #32
 801125a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801125e:	0713      	lsls	r3, r2, #28
 8011260:	bf44      	itt	mi
 8011262:	232b      	movmi	r3, #43	@ 0x2b
 8011264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011268:	f89a 3000 	ldrb.w	r3, [sl]
 801126c:	2b2a      	cmp	r3, #42	@ 0x2a
 801126e:	d015      	beq.n	801129c <_vfiprintf_r+0x120>
 8011270:	9a07      	ldr	r2, [sp, #28]
 8011272:	4654      	mov	r4, sl
 8011274:	2000      	movs	r0, #0
 8011276:	f04f 0c0a 	mov.w	ip, #10
 801127a:	4621      	mov	r1, r4
 801127c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011280:	3b30      	subs	r3, #48	@ 0x30
 8011282:	2b09      	cmp	r3, #9
 8011284:	d94b      	bls.n	801131e <_vfiprintf_r+0x1a2>
 8011286:	b1b0      	cbz	r0, 80112b6 <_vfiprintf_r+0x13a>
 8011288:	9207      	str	r2, [sp, #28]
 801128a:	e014      	b.n	80112b6 <_vfiprintf_r+0x13a>
 801128c:	eba0 0308 	sub.w	r3, r0, r8
 8011290:	fa09 f303 	lsl.w	r3, r9, r3
 8011294:	4313      	orrs	r3, r2
 8011296:	9304      	str	r3, [sp, #16]
 8011298:	46a2      	mov	sl, r4
 801129a:	e7d2      	b.n	8011242 <_vfiprintf_r+0xc6>
 801129c:	9b03      	ldr	r3, [sp, #12]
 801129e:	1d19      	adds	r1, r3, #4
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	9103      	str	r1, [sp, #12]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	bfbb      	ittet	lt
 80112a8:	425b      	neglt	r3, r3
 80112aa:	f042 0202 	orrlt.w	r2, r2, #2
 80112ae:	9307      	strge	r3, [sp, #28]
 80112b0:	9307      	strlt	r3, [sp, #28]
 80112b2:	bfb8      	it	lt
 80112b4:	9204      	strlt	r2, [sp, #16]
 80112b6:	7823      	ldrb	r3, [r4, #0]
 80112b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80112ba:	d10a      	bne.n	80112d2 <_vfiprintf_r+0x156>
 80112bc:	7863      	ldrb	r3, [r4, #1]
 80112be:	2b2a      	cmp	r3, #42	@ 0x2a
 80112c0:	d132      	bne.n	8011328 <_vfiprintf_r+0x1ac>
 80112c2:	9b03      	ldr	r3, [sp, #12]
 80112c4:	1d1a      	adds	r2, r3, #4
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	9203      	str	r2, [sp, #12]
 80112ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80112ce:	3402      	adds	r4, #2
 80112d0:	9305      	str	r3, [sp, #20]
 80112d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80113a8 <_vfiprintf_r+0x22c>
 80112d6:	7821      	ldrb	r1, [r4, #0]
 80112d8:	2203      	movs	r2, #3
 80112da:	4650      	mov	r0, sl
 80112dc:	f7ee ff58 	bl	8000190 <memchr>
 80112e0:	b138      	cbz	r0, 80112f2 <_vfiprintf_r+0x176>
 80112e2:	9b04      	ldr	r3, [sp, #16]
 80112e4:	eba0 000a 	sub.w	r0, r0, sl
 80112e8:	2240      	movs	r2, #64	@ 0x40
 80112ea:	4082      	lsls	r2, r0
 80112ec:	4313      	orrs	r3, r2
 80112ee:	3401      	adds	r4, #1
 80112f0:	9304      	str	r3, [sp, #16]
 80112f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112f6:	4829      	ldr	r0, [pc, #164]	@ (801139c <_vfiprintf_r+0x220>)
 80112f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80112fc:	2206      	movs	r2, #6
 80112fe:	f7ee ff47 	bl	8000190 <memchr>
 8011302:	2800      	cmp	r0, #0
 8011304:	d03f      	beq.n	8011386 <_vfiprintf_r+0x20a>
 8011306:	4b26      	ldr	r3, [pc, #152]	@ (80113a0 <_vfiprintf_r+0x224>)
 8011308:	bb1b      	cbnz	r3, 8011352 <_vfiprintf_r+0x1d6>
 801130a:	9b03      	ldr	r3, [sp, #12]
 801130c:	3307      	adds	r3, #7
 801130e:	f023 0307 	bic.w	r3, r3, #7
 8011312:	3308      	adds	r3, #8
 8011314:	9303      	str	r3, [sp, #12]
 8011316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011318:	443b      	add	r3, r7
 801131a:	9309      	str	r3, [sp, #36]	@ 0x24
 801131c:	e76a      	b.n	80111f4 <_vfiprintf_r+0x78>
 801131e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011322:	460c      	mov	r4, r1
 8011324:	2001      	movs	r0, #1
 8011326:	e7a8      	b.n	801127a <_vfiprintf_r+0xfe>
 8011328:	2300      	movs	r3, #0
 801132a:	3401      	adds	r4, #1
 801132c:	9305      	str	r3, [sp, #20]
 801132e:	4619      	mov	r1, r3
 8011330:	f04f 0c0a 	mov.w	ip, #10
 8011334:	4620      	mov	r0, r4
 8011336:	f810 2b01 	ldrb.w	r2, [r0], #1
 801133a:	3a30      	subs	r2, #48	@ 0x30
 801133c:	2a09      	cmp	r2, #9
 801133e:	d903      	bls.n	8011348 <_vfiprintf_r+0x1cc>
 8011340:	2b00      	cmp	r3, #0
 8011342:	d0c6      	beq.n	80112d2 <_vfiprintf_r+0x156>
 8011344:	9105      	str	r1, [sp, #20]
 8011346:	e7c4      	b.n	80112d2 <_vfiprintf_r+0x156>
 8011348:	fb0c 2101 	mla	r1, ip, r1, r2
 801134c:	4604      	mov	r4, r0
 801134e:	2301      	movs	r3, #1
 8011350:	e7f0      	b.n	8011334 <_vfiprintf_r+0x1b8>
 8011352:	ab03      	add	r3, sp, #12
 8011354:	9300      	str	r3, [sp, #0]
 8011356:	462a      	mov	r2, r5
 8011358:	4b12      	ldr	r3, [pc, #72]	@ (80113a4 <_vfiprintf_r+0x228>)
 801135a:	a904      	add	r1, sp, #16
 801135c:	4630      	mov	r0, r6
 801135e:	f3af 8000 	nop.w
 8011362:	4607      	mov	r7, r0
 8011364:	1c78      	adds	r0, r7, #1
 8011366:	d1d6      	bne.n	8011316 <_vfiprintf_r+0x19a>
 8011368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801136a:	07d9      	lsls	r1, r3, #31
 801136c:	d405      	bmi.n	801137a <_vfiprintf_r+0x1fe>
 801136e:	89ab      	ldrh	r3, [r5, #12]
 8011370:	059a      	lsls	r2, r3, #22
 8011372:	d402      	bmi.n	801137a <_vfiprintf_r+0x1fe>
 8011374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011376:	f7ff fd25 	bl	8010dc4 <__retarget_lock_release_recursive>
 801137a:	89ab      	ldrh	r3, [r5, #12]
 801137c:	065b      	lsls	r3, r3, #25
 801137e:	f53f af1f 	bmi.w	80111c0 <_vfiprintf_r+0x44>
 8011382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011384:	e71e      	b.n	80111c4 <_vfiprintf_r+0x48>
 8011386:	ab03      	add	r3, sp, #12
 8011388:	9300      	str	r3, [sp, #0]
 801138a:	462a      	mov	r2, r5
 801138c:	4b05      	ldr	r3, [pc, #20]	@ (80113a4 <_vfiprintf_r+0x228>)
 801138e:	a904      	add	r1, sp, #16
 8011390:	4630      	mov	r0, r6
 8011392:	f000 f879 	bl	8011488 <_printf_i>
 8011396:	e7e4      	b.n	8011362 <_vfiprintf_r+0x1e6>
 8011398:	08017c62 	.word	0x08017c62
 801139c:	08017c6c 	.word	0x08017c6c
 80113a0:	00000000 	.word	0x00000000
 80113a4:	08011157 	.word	0x08011157
 80113a8:	08017c68 	.word	0x08017c68

080113ac <_printf_common>:
 80113ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113b0:	4616      	mov	r6, r2
 80113b2:	4698      	mov	r8, r3
 80113b4:	688a      	ldr	r2, [r1, #8]
 80113b6:	690b      	ldr	r3, [r1, #16]
 80113b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80113bc:	4293      	cmp	r3, r2
 80113be:	bfb8      	it	lt
 80113c0:	4613      	movlt	r3, r2
 80113c2:	6033      	str	r3, [r6, #0]
 80113c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80113c8:	4607      	mov	r7, r0
 80113ca:	460c      	mov	r4, r1
 80113cc:	b10a      	cbz	r2, 80113d2 <_printf_common+0x26>
 80113ce:	3301      	adds	r3, #1
 80113d0:	6033      	str	r3, [r6, #0]
 80113d2:	6823      	ldr	r3, [r4, #0]
 80113d4:	0699      	lsls	r1, r3, #26
 80113d6:	bf42      	ittt	mi
 80113d8:	6833      	ldrmi	r3, [r6, #0]
 80113da:	3302      	addmi	r3, #2
 80113dc:	6033      	strmi	r3, [r6, #0]
 80113de:	6825      	ldr	r5, [r4, #0]
 80113e0:	f015 0506 	ands.w	r5, r5, #6
 80113e4:	d106      	bne.n	80113f4 <_printf_common+0x48>
 80113e6:	f104 0a19 	add.w	sl, r4, #25
 80113ea:	68e3      	ldr	r3, [r4, #12]
 80113ec:	6832      	ldr	r2, [r6, #0]
 80113ee:	1a9b      	subs	r3, r3, r2
 80113f0:	42ab      	cmp	r3, r5
 80113f2:	dc26      	bgt.n	8011442 <_printf_common+0x96>
 80113f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80113f8:	6822      	ldr	r2, [r4, #0]
 80113fa:	3b00      	subs	r3, #0
 80113fc:	bf18      	it	ne
 80113fe:	2301      	movne	r3, #1
 8011400:	0692      	lsls	r2, r2, #26
 8011402:	d42b      	bmi.n	801145c <_printf_common+0xb0>
 8011404:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011408:	4641      	mov	r1, r8
 801140a:	4638      	mov	r0, r7
 801140c:	47c8      	blx	r9
 801140e:	3001      	adds	r0, #1
 8011410:	d01e      	beq.n	8011450 <_printf_common+0xa4>
 8011412:	6823      	ldr	r3, [r4, #0]
 8011414:	6922      	ldr	r2, [r4, #16]
 8011416:	f003 0306 	and.w	r3, r3, #6
 801141a:	2b04      	cmp	r3, #4
 801141c:	bf02      	ittt	eq
 801141e:	68e5      	ldreq	r5, [r4, #12]
 8011420:	6833      	ldreq	r3, [r6, #0]
 8011422:	1aed      	subeq	r5, r5, r3
 8011424:	68a3      	ldr	r3, [r4, #8]
 8011426:	bf0c      	ite	eq
 8011428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801142c:	2500      	movne	r5, #0
 801142e:	4293      	cmp	r3, r2
 8011430:	bfc4      	itt	gt
 8011432:	1a9b      	subgt	r3, r3, r2
 8011434:	18ed      	addgt	r5, r5, r3
 8011436:	2600      	movs	r6, #0
 8011438:	341a      	adds	r4, #26
 801143a:	42b5      	cmp	r5, r6
 801143c:	d11a      	bne.n	8011474 <_printf_common+0xc8>
 801143e:	2000      	movs	r0, #0
 8011440:	e008      	b.n	8011454 <_printf_common+0xa8>
 8011442:	2301      	movs	r3, #1
 8011444:	4652      	mov	r2, sl
 8011446:	4641      	mov	r1, r8
 8011448:	4638      	mov	r0, r7
 801144a:	47c8      	blx	r9
 801144c:	3001      	adds	r0, #1
 801144e:	d103      	bne.n	8011458 <_printf_common+0xac>
 8011450:	f04f 30ff 	mov.w	r0, #4294967295
 8011454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011458:	3501      	adds	r5, #1
 801145a:	e7c6      	b.n	80113ea <_printf_common+0x3e>
 801145c:	18e1      	adds	r1, r4, r3
 801145e:	1c5a      	adds	r2, r3, #1
 8011460:	2030      	movs	r0, #48	@ 0x30
 8011462:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011466:	4422      	add	r2, r4
 8011468:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801146c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011470:	3302      	adds	r3, #2
 8011472:	e7c7      	b.n	8011404 <_printf_common+0x58>
 8011474:	2301      	movs	r3, #1
 8011476:	4622      	mov	r2, r4
 8011478:	4641      	mov	r1, r8
 801147a:	4638      	mov	r0, r7
 801147c:	47c8      	blx	r9
 801147e:	3001      	adds	r0, #1
 8011480:	d0e6      	beq.n	8011450 <_printf_common+0xa4>
 8011482:	3601      	adds	r6, #1
 8011484:	e7d9      	b.n	801143a <_printf_common+0x8e>
	...

08011488 <_printf_i>:
 8011488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801148c:	7e0f      	ldrb	r7, [r1, #24]
 801148e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011490:	2f78      	cmp	r7, #120	@ 0x78
 8011492:	4691      	mov	r9, r2
 8011494:	4680      	mov	r8, r0
 8011496:	460c      	mov	r4, r1
 8011498:	469a      	mov	sl, r3
 801149a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801149e:	d807      	bhi.n	80114b0 <_printf_i+0x28>
 80114a0:	2f62      	cmp	r7, #98	@ 0x62
 80114a2:	d80a      	bhi.n	80114ba <_printf_i+0x32>
 80114a4:	2f00      	cmp	r7, #0
 80114a6:	f000 80d2 	beq.w	801164e <_printf_i+0x1c6>
 80114aa:	2f58      	cmp	r7, #88	@ 0x58
 80114ac:	f000 80b9 	beq.w	8011622 <_printf_i+0x19a>
 80114b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80114b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80114b8:	e03a      	b.n	8011530 <_printf_i+0xa8>
 80114ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80114be:	2b15      	cmp	r3, #21
 80114c0:	d8f6      	bhi.n	80114b0 <_printf_i+0x28>
 80114c2:	a101      	add	r1, pc, #4	@ (adr r1, 80114c8 <_printf_i+0x40>)
 80114c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80114c8:	08011521 	.word	0x08011521
 80114cc:	08011535 	.word	0x08011535
 80114d0:	080114b1 	.word	0x080114b1
 80114d4:	080114b1 	.word	0x080114b1
 80114d8:	080114b1 	.word	0x080114b1
 80114dc:	080114b1 	.word	0x080114b1
 80114e0:	08011535 	.word	0x08011535
 80114e4:	080114b1 	.word	0x080114b1
 80114e8:	080114b1 	.word	0x080114b1
 80114ec:	080114b1 	.word	0x080114b1
 80114f0:	080114b1 	.word	0x080114b1
 80114f4:	08011635 	.word	0x08011635
 80114f8:	0801155f 	.word	0x0801155f
 80114fc:	080115ef 	.word	0x080115ef
 8011500:	080114b1 	.word	0x080114b1
 8011504:	080114b1 	.word	0x080114b1
 8011508:	08011657 	.word	0x08011657
 801150c:	080114b1 	.word	0x080114b1
 8011510:	0801155f 	.word	0x0801155f
 8011514:	080114b1 	.word	0x080114b1
 8011518:	080114b1 	.word	0x080114b1
 801151c:	080115f7 	.word	0x080115f7
 8011520:	6833      	ldr	r3, [r6, #0]
 8011522:	1d1a      	adds	r2, r3, #4
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	6032      	str	r2, [r6, #0]
 8011528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801152c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011530:	2301      	movs	r3, #1
 8011532:	e09d      	b.n	8011670 <_printf_i+0x1e8>
 8011534:	6833      	ldr	r3, [r6, #0]
 8011536:	6820      	ldr	r0, [r4, #0]
 8011538:	1d19      	adds	r1, r3, #4
 801153a:	6031      	str	r1, [r6, #0]
 801153c:	0606      	lsls	r6, r0, #24
 801153e:	d501      	bpl.n	8011544 <_printf_i+0xbc>
 8011540:	681d      	ldr	r5, [r3, #0]
 8011542:	e003      	b.n	801154c <_printf_i+0xc4>
 8011544:	0645      	lsls	r5, r0, #25
 8011546:	d5fb      	bpl.n	8011540 <_printf_i+0xb8>
 8011548:	f9b3 5000 	ldrsh.w	r5, [r3]
 801154c:	2d00      	cmp	r5, #0
 801154e:	da03      	bge.n	8011558 <_printf_i+0xd0>
 8011550:	232d      	movs	r3, #45	@ 0x2d
 8011552:	426d      	negs	r5, r5
 8011554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011558:	4859      	ldr	r0, [pc, #356]	@ (80116c0 <_printf_i+0x238>)
 801155a:	230a      	movs	r3, #10
 801155c:	e011      	b.n	8011582 <_printf_i+0xfa>
 801155e:	6821      	ldr	r1, [r4, #0]
 8011560:	6833      	ldr	r3, [r6, #0]
 8011562:	0608      	lsls	r0, r1, #24
 8011564:	f853 5b04 	ldr.w	r5, [r3], #4
 8011568:	d402      	bmi.n	8011570 <_printf_i+0xe8>
 801156a:	0649      	lsls	r1, r1, #25
 801156c:	bf48      	it	mi
 801156e:	b2ad      	uxthmi	r5, r5
 8011570:	2f6f      	cmp	r7, #111	@ 0x6f
 8011572:	4853      	ldr	r0, [pc, #332]	@ (80116c0 <_printf_i+0x238>)
 8011574:	6033      	str	r3, [r6, #0]
 8011576:	bf14      	ite	ne
 8011578:	230a      	movne	r3, #10
 801157a:	2308      	moveq	r3, #8
 801157c:	2100      	movs	r1, #0
 801157e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011582:	6866      	ldr	r6, [r4, #4]
 8011584:	60a6      	str	r6, [r4, #8]
 8011586:	2e00      	cmp	r6, #0
 8011588:	bfa2      	ittt	ge
 801158a:	6821      	ldrge	r1, [r4, #0]
 801158c:	f021 0104 	bicge.w	r1, r1, #4
 8011590:	6021      	strge	r1, [r4, #0]
 8011592:	b90d      	cbnz	r5, 8011598 <_printf_i+0x110>
 8011594:	2e00      	cmp	r6, #0
 8011596:	d04b      	beq.n	8011630 <_printf_i+0x1a8>
 8011598:	4616      	mov	r6, r2
 801159a:	fbb5 f1f3 	udiv	r1, r5, r3
 801159e:	fb03 5711 	mls	r7, r3, r1, r5
 80115a2:	5dc7      	ldrb	r7, [r0, r7]
 80115a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80115a8:	462f      	mov	r7, r5
 80115aa:	42bb      	cmp	r3, r7
 80115ac:	460d      	mov	r5, r1
 80115ae:	d9f4      	bls.n	801159a <_printf_i+0x112>
 80115b0:	2b08      	cmp	r3, #8
 80115b2:	d10b      	bne.n	80115cc <_printf_i+0x144>
 80115b4:	6823      	ldr	r3, [r4, #0]
 80115b6:	07df      	lsls	r7, r3, #31
 80115b8:	d508      	bpl.n	80115cc <_printf_i+0x144>
 80115ba:	6923      	ldr	r3, [r4, #16]
 80115bc:	6861      	ldr	r1, [r4, #4]
 80115be:	4299      	cmp	r1, r3
 80115c0:	bfde      	ittt	le
 80115c2:	2330      	movle	r3, #48	@ 0x30
 80115c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80115c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80115cc:	1b92      	subs	r2, r2, r6
 80115ce:	6122      	str	r2, [r4, #16]
 80115d0:	f8cd a000 	str.w	sl, [sp]
 80115d4:	464b      	mov	r3, r9
 80115d6:	aa03      	add	r2, sp, #12
 80115d8:	4621      	mov	r1, r4
 80115da:	4640      	mov	r0, r8
 80115dc:	f7ff fee6 	bl	80113ac <_printf_common>
 80115e0:	3001      	adds	r0, #1
 80115e2:	d14a      	bne.n	801167a <_printf_i+0x1f2>
 80115e4:	f04f 30ff 	mov.w	r0, #4294967295
 80115e8:	b004      	add	sp, #16
 80115ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115ee:	6823      	ldr	r3, [r4, #0]
 80115f0:	f043 0320 	orr.w	r3, r3, #32
 80115f4:	6023      	str	r3, [r4, #0]
 80115f6:	4833      	ldr	r0, [pc, #204]	@ (80116c4 <_printf_i+0x23c>)
 80115f8:	2778      	movs	r7, #120	@ 0x78
 80115fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80115fe:	6823      	ldr	r3, [r4, #0]
 8011600:	6831      	ldr	r1, [r6, #0]
 8011602:	061f      	lsls	r7, r3, #24
 8011604:	f851 5b04 	ldr.w	r5, [r1], #4
 8011608:	d402      	bmi.n	8011610 <_printf_i+0x188>
 801160a:	065f      	lsls	r7, r3, #25
 801160c:	bf48      	it	mi
 801160e:	b2ad      	uxthmi	r5, r5
 8011610:	6031      	str	r1, [r6, #0]
 8011612:	07d9      	lsls	r1, r3, #31
 8011614:	bf44      	itt	mi
 8011616:	f043 0320 	orrmi.w	r3, r3, #32
 801161a:	6023      	strmi	r3, [r4, #0]
 801161c:	b11d      	cbz	r5, 8011626 <_printf_i+0x19e>
 801161e:	2310      	movs	r3, #16
 8011620:	e7ac      	b.n	801157c <_printf_i+0xf4>
 8011622:	4827      	ldr	r0, [pc, #156]	@ (80116c0 <_printf_i+0x238>)
 8011624:	e7e9      	b.n	80115fa <_printf_i+0x172>
 8011626:	6823      	ldr	r3, [r4, #0]
 8011628:	f023 0320 	bic.w	r3, r3, #32
 801162c:	6023      	str	r3, [r4, #0]
 801162e:	e7f6      	b.n	801161e <_printf_i+0x196>
 8011630:	4616      	mov	r6, r2
 8011632:	e7bd      	b.n	80115b0 <_printf_i+0x128>
 8011634:	6833      	ldr	r3, [r6, #0]
 8011636:	6825      	ldr	r5, [r4, #0]
 8011638:	6961      	ldr	r1, [r4, #20]
 801163a:	1d18      	adds	r0, r3, #4
 801163c:	6030      	str	r0, [r6, #0]
 801163e:	062e      	lsls	r6, r5, #24
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	d501      	bpl.n	8011648 <_printf_i+0x1c0>
 8011644:	6019      	str	r1, [r3, #0]
 8011646:	e002      	b.n	801164e <_printf_i+0x1c6>
 8011648:	0668      	lsls	r0, r5, #25
 801164a:	d5fb      	bpl.n	8011644 <_printf_i+0x1bc>
 801164c:	8019      	strh	r1, [r3, #0]
 801164e:	2300      	movs	r3, #0
 8011650:	6123      	str	r3, [r4, #16]
 8011652:	4616      	mov	r6, r2
 8011654:	e7bc      	b.n	80115d0 <_printf_i+0x148>
 8011656:	6833      	ldr	r3, [r6, #0]
 8011658:	1d1a      	adds	r2, r3, #4
 801165a:	6032      	str	r2, [r6, #0]
 801165c:	681e      	ldr	r6, [r3, #0]
 801165e:	6862      	ldr	r2, [r4, #4]
 8011660:	2100      	movs	r1, #0
 8011662:	4630      	mov	r0, r6
 8011664:	f7ee fd94 	bl	8000190 <memchr>
 8011668:	b108      	cbz	r0, 801166e <_printf_i+0x1e6>
 801166a:	1b80      	subs	r0, r0, r6
 801166c:	6060      	str	r0, [r4, #4]
 801166e:	6863      	ldr	r3, [r4, #4]
 8011670:	6123      	str	r3, [r4, #16]
 8011672:	2300      	movs	r3, #0
 8011674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011678:	e7aa      	b.n	80115d0 <_printf_i+0x148>
 801167a:	6923      	ldr	r3, [r4, #16]
 801167c:	4632      	mov	r2, r6
 801167e:	4649      	mov	r1, r9
 8011680:	4640      	mov	r0, r8
 8011682:	47d0      	blx	sl
 8011684:	3001      	adds	r0, #1
 8011686:	d0ad      	beq.n	80115e4 <_printf_i+0x15c>
 8011688:	6823      	ldr	r3, [r4, #0]
 801168a:	079b      	lsls	r3, r3, #30
 801168c:	d413      	bmi.n	80116b6 <_printf_i+0x22e>
 801168e:	68e0      	ldr	r0, [r4, #12]
 8011690:	9b03      	ldr	r3, [sp, #12]
 8011692:	4298      	cmp	r0, r3
 8011694:	bfb8      	it	lt
 8011696:	4618      	movlt	r0, r3
 8011698:	e7a6      	b.n	80115e8 <_printf_i+0x160>
 801169a:	2301      	movs	r3, #1
 801169c:	4632      	mov	r2, r6
 801169e:	4649      	mov	r1, r9
 80116a0:	4640      	mov	r0, r8
 80116a2:	47d0      	blx	sl
 80116a4:	3001      	adds	r0, #1
 80116a6:	d09d      	beq.n	80115e4 <_printf_i+0x15c>
 80116a8:	3501      	adds	r5, #1
 80116aa:	68e3      	ldr	r3, [r4, #12]
 80116ac:	9903      	ldr	r1, [sp, #12]
 80116ae:	1a5b      	subs	r3, r3, r1
 80116b0:	42ab      	cmp	r3, r5
 80116b2:	dcf2      	bgt.n	801169a <_printf_i+0x212>
 80116b4:	e7eb      	b.n	801168e <_printf_i+0x206>
 80116b6:	2500      	movs	r5, #0
 80116b8:	f104 0619 	add.w	r6, r4, #25
 80116bc:	e7f5      	b.n	80116aa <_printf_i+0x222>
 80116be:	bf00      	nop
 80116c0:	08017c73 	.word	0x08017c73
 80116c4:	08017c84 	.word	0x08017c84

080116c8 <__sflush_r>:
 80116c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80116cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116d0:	0716      	lsls	r6, r2, #28
 80116d2:	4605      	mov	r5, r0
 80116d4:	460c      	mov	r4, r1
 80116d6:	d454      	bmi.n	8011782 <__sflush_r+0xba>
 80116d8:	684b      	ldr	r3, [r1, #4]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	dc02      	bgt.n	80116e4 <__sflush_r+0x1c>
 80116de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	dd48      	ble.n	8011776 <__sflush_r+0xae>
 80116e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80116e6:	2e00      	cmp	r6, #0
 80116e8:	d045      	beq.n	8011776 <__sflush_r+0xae>
 80116ea:	2300      	movs	r3, #0
 80116ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80116f0:	682f      	ldr	r7, [r5, #0]
 80116f2:	6a21      	ldr	r1, [r4, #32]
 80116f4:	602b      	str	r3, [r5, #0]
 80116f6:	d030      	beq.n	801175a <__sflush_r+0x92>
 80116f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80116fa:	89a3      	ldrh	r3, [r4, #12]
 80116fc:	0759      	lsls	r1, r3, #29
 80116fe:	d505      	bpl.n	801170c <__sflush_r+0x44>
 8011700:	6863      	ldr	r3, [r4, #4]
 8011702:	1ad2      	subs	r2, r2, r3
 8011704:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011706:	b10b      	cbz	r3, 801170c <__sflush_r+0x44>
 8011708:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801170a:	1ad2      	subs	r2, r2, r3
 801170c:	2300      	movs	r3, #0
 801170e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011710:	6a21      	ldr	r1, [r4, #32]
 8011712:	4628      	mov	r0, r5
 8011714:	47b0      	blx	r6
 8011716:	1c43      	adds	r3, r0, #1
 8011718:	89a3      	ldrh	r3, [r4, #12]
 801171a:	d106      	bne.n	801172a <__sflush_r+0x62>
 801171c:	6829      	ldr	r1, [r5, #0]
 801171e:	291d      	cmp	r1, #29
 8011720:	d82b      	bhi.n	801177a <__sflush_r+0xb2>
 8011722:	4a2a      	ldr	r2, [pc, #168]	@ (80117cc <__sflush_r+0x104>)
 8011724:	410a      	asrs	r2, r1
 8011726:	07d6      	lsls	r6, r2, #31
 8011728:	d427      	bmi.n	801177a <__sflush_r+0xb2>
 801172a:	2200      	movs	r2, #0
 801172c:	6062      	str	r2, [r4, #4]
 801172e:	04d9      	lsls	r1, r3, #19
 8011730:	6922      	ldr	r2, [r4, #16]
 8011732:	6022      	str	r2, [r4, #0]
 8011734:	d504      	bpl.n	8011740 <__sflush_r+0x78>
 8011736:	1c42      	adds	r2, r0, #1
 8011738:	d101      	bne.n	801173e <__sflush_r+0x76>
 801173a:	682b      	ldr	r3, [r5, #0]
 801173c:	b903      	cbnz	r3, 8011740 <__sflush_r+0x78>
 801173e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011742:	602f      	str	r7, [r5, #0]
 8011744:	b1b9      	cbz	r1, 8011776 <__sflush_r+0xae>
 8011746:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801174a:	4299      	cmp	r1, r3
 801174c:	d002      	beq.n	8011754 <__sflush_r+0x8c>
 801174e:	4628      	mov	r0, r5
 8011750:	f7ff fb48 	bl	8010de4 <_free_r>
 8011754:	2300      	movs	r3, #0
 8011756:	6363      	str	r3, [r4, #52]	@ 0x34
 8011758:	e00d      	b.n	8011776 <__sflush_r+0xae>
 801175a:	2301      	movs	r3, #1
 801175c:	4628      	mov	r0, r5
 801175e:	47b0      	blx	r6
 8011760:	4602      	mov	r2, r0
 8011762:	1c50      	adds	r0, r2, #1
 8011764:	d1c9      	bne.n	80116fa <__sflush_r+0x32>
 8011766:	682b      	ldr	r3, [r5, #0]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d0c6      	beq.n	80116fa <__sflush_r+0x32>
 801176c:	2b1d      	cmp	r3, #29
 801176e:	d001      	beq.n	8011774 <__sflush_r+0xac>
 8011770:	2b16      	cmp	r3, #22
 8011772:	d11e      	bne.n	80117b2 <__sflush_r+0xea>
 8011774:	602f      	str	r7, [r5, #0]
 8011776:	2000      	movs	r0, #0
 8011778:	e022      	b.n	80117c0 <__sflush_r+0xf8>
 801177a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801177e:	b21b      	sxth	r3, r3
 8011780:	e01b      	b.n	80117ba <__sflush_r+0xf2>
 8011782:	690f      	ldr	r7, [r1, #16]
 8011784:	2f00      	cmp	r7, #0
 8011786:	d0f6      	beq.n	8011776 <__sflush_r+0xae>
 8011788:	0793      	lsls	r3, r2, #30
 801178a:	680e      	ldr	r6, [r1, #0]
 801178c:	bf08      	it	eq
 801178e:	694b      	ldreq	r3, [r1, #20]
 8011790:	600f      	str	r7, [r1, #0]
 8011792:	bf18      	it	ne
 8011794:	2300      	movne	r3, #0
 8011796:	eba6 0807 	sub.w	r8, r6, r7
 801179a:	608b      	str	r3, [r1, #8]
 801179c:	f1b8 0f00 	cmp.w	r8, #0
 80117a0:	dde9      	ble.n	8011776 <__sflush_r+0xae>
 80117a2:	6a21      	ldr	r1, [r4, #32]
 80117a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80117a6:	4643      	mov	r3, r8
 80117a8:	463a      	mov	r2, r7
 80117aa:	4628      	mov	r0, r5
 80117ac:	47b0      	blx	r6
 80117ae:	2800      	cmp	r0, #0
 80117b0:	dc08      	bgt.n	80117c4 <__sflush_r+0xfc>
 80117b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117ba:	81a3      	strh	r3, [r4, #12]
 80117bc:	f04f 30ff 	mov.w	r0, #4294967295
 80117c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117c4:	4407      	add	r7, r0
 80117c6:	eba8 0800 	sub.w	r8, r8, r0
 80117ca:	e7e7      	b.n	801179c <__sflush_r+0xd4>
 80117cc:	dfbffffe 	.word	0xdfbffffe

080117d0 <_fflush_r>:
 80117d0:	b538      	push	{r3, r4, r5, lr}
 80117d2:	690b      	ldr	r3, [r1, #16]
 80117d4:	4605      	mov	r5, r0
 80117d6:	460c      	mov	r4, r1
 80117d8:	b913      	cbnz	r3, 80117e0 <_fflush_r+0x10>
 80117da:	2500      	movs	r5, #0
 80117dc:	4628      	mov	r0, r5
 80117de:	bd38      	pop	{r3, r4, r5, pc}
 80117e0:	b118      	cbz	r0, 80117ea <_fflush_r+0x1a>
 80117e2:	6a03      	ldr	r3, [r0, #32]
 80117e4:	b90b      	cbnz	r3, 80117ea <_fflush_r+0x1a>
 80117e6:	f7ff f893 	bl	8010910 <__sinit>
 80117ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d0f3      	beq.n	80117da <_fflush_r+0xa>
 80117f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80117f4:	07d0      	lsls	r0, r2, #31
 80117f6:	d404      	bmi.n	8011802 <_fflush_r+0x32>
 80117f8:	0599      	lsls	r1, r3, #22
 80117fa:	d402      	bmi.n	8011802 <_fflush_r+0x32>
 80117fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80117fe:	f7ff fae0 	bl	8010dc2 <__retarget_lock_acquire_recursive>
 8011802:	4628      	mov	r0, r5
 8011804:	4621      	mov	r1, r4
 8011806:	f7ff ff5f 	bl	80116c8 <__sflush_r>
 801180a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801180c:	07da      	lsls	r2, r3, #31
 801180e:	4605      	mov	r5, r0
 8011810:	d4e4      	bmi.n	80117dc <_fflush_r+0xc>
 8011812:	89a3      	ldrh	r3, [r4, #12]
 8011814:	059b      	lsls	r3, r3, #22
 8011816:	d4e1      	bmi.n	80117dc <_fflush_r+0xc>
 8011818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801181a:	f7ff fad3 	bl	8010dc4 <__retarget_lock_release_recursive>
 801181e:	e7dd      	b.n	80117dc <_fflush_r+0xc>

08011820 <__swhatbuf_r>:
 8011820:	b570      	push	{r4, r5, r6, lr}
 8011822:	460c      	mov	r4, r1
 8011824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011828:	2900      	cmp	r1, #0
 801182a:	b096      	sub	sp, #88	@ 0x58
 801182c:	4615      	mov	r5, r2
 801182e:	461e      	mov	r6, r3
 8011830:	da0d      	bge.n	801184e <__swhatbuf_r+0x2e>
 8011832:	89a3      	ldrh	r3, [r4, #12]
 8011834:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011838:	f04f 0100 	mov.w	r1, #0
 801183c:	bf14      	ite	ne
 801183e:	2340      	movne	r3, #64	@ 0x40
 8011840:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011844:	2000      	movs	r0, #0
 8011846:	6031      	str	r1, [r6, #0]
 8011848:	602b      	str	r3, [r5, #0]
 801184a:	b016      	add	sp, #88	@ 0x58
 801184c:	bd70      	pop	{r4, r5, r6, pc}
 801184e:	466a      	mov	r2, sp
 8011850:	f000 f848 	bl	80118e4 <_fstat_r>
 8011854:	2800      	cmp	r0, #0
 8011856:	dbec      	blt.n	8011832 <__swhatbuf_r+0x12>
 8011858:	9901      	ldr	r1, [sp, #4]
 801185a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801185e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011862:	4259      	negs	r1, r3
 8011864:	4159      	adcs	r1, r3
 8011866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801186a:	e7eb      	b.n	8011844 <__swhatbuf_r+0x24>

0801186c <__smakebuf_r>:
 801186c:	898b      	ldrh	r3, [r1, #12]
 801186e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011870:	079d      	lsls	r5, r3, #30
 8011872:	4606      	mov	r6, r0
 8011874:	460c      	mov	r4, r1
 8011876:	d507      	bpl.n	8011888 <__smakebuf_r+0x1c>
 8011878:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801187c:	6023      	str	r3, [r4, #0]
 801187e:	6123      	str	r3, [r4, #16]
 8011880:	2301      	movs	r3, #1
 8011882:	6163      	str	r3, [r4, #20]
 8011884:	b003      	add	sp, #12
 8011886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011888:	ab01      	add	r3, sp, #4
 801188a:	466a      	mov	r2, sp
 801188c:	f7ff ffc8 	bl	8011820 <__swhatbuf_r>
 8011890:	9f00      	ldr	r7, [sp, #0]
 8011892:	4605      	mov	r5, r0
 8011894:	4639      	mov	r1, r7
 8011896:	4630      	mov	r0, r6
 8011898:	f7fe ff22 	bl	80106e0 <_malloc_r>
 801189c:	b948      	cbnz	r0, 80118b2 <__smakebuf_r+0x46>
 801189e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118a2:	059a      	lsls	r2, r3, #22
 80118a4:	d4ee      	bmi.n	8011884 <__smakebuf_r+0x18>
 80118a6:	f023 0303 	bic.w	r3, r3, #3
 80118aa:	f043 0302 	orr.w	r3, r3, #2
 80118ae:	81a3      	strh	r3, [r4, #12]
 80118b0:	e7e2      	b.n	8011878 <__smakebuf_r+0xc>
 80118b2:	89a3      	ldrh	r3, [r4, #12]
 80118b4:	6020      	str	r0, [r4, #0]
 80118b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118ba:	81a3      	strh	r3, [r4, #12]
 80118bc:	9b01      	ldr	r3, [sp, #4]
 80118be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80118c2:	b15b      	cbz	r3, 80118dc <__smakebuf_r+0x70>
 80118c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118c8:	4630      	mov	r0, r6
 80118ca:	f000 f81d 	bl	8011908 <_isatty_r>
 80118ce:	b128      	cbz	r0, 80118dc <__smakebuf_r+0x70>
 80118d0:	89a3      	ldrh	r3, [r4, #12]
 80118d2:	f023 0303 	bic.w	r3, r3, #3
 80118d6:	f043 0301 	orr.w	r3, r3, #1
 80118da:	81a3      	strh	r3, [r4, #12]
 80118dc:	89a3      	ldrh	r3, [r4, #12]
 80118de:	431d      	orrs	r5, r3
 80118e0:	81a5      	strh	r5, [r4, #12]
 80118e2:	e7cf      	b.n	8011884 <__smakebuf_r+0x18>

080118e4 <_fstat_r>:
 80118e4:	b538      	push	{r3, r4, r5, lr}
 80118e6:	4d07      	ldr	r5, [pc, #28]	@ (8011904 <_fstat_r+0x20>)
 80118e8:	2300      	movs	r3, #0
 80118ea:	4604      	mov	r4, r0
 80118ec:	4608      	mov	r0, r1
 80118ee:	4611      	mov	r1, r2
 80118f0:	602b      	str	r3, [r5, #0]
 80118f2:	f7f1 fa7b 	bl	8002dec <_fstat>
 80118f6:	1c43      	adds	r3, r0, #1
 80118f8:	d102      	bne.n	8011900 <_fstat_r+0x1c>
 80118fa:	682b      	ldr	r3, [r5, #0]
 80118fc:	b103      	cbz	r3, 8011900 <_fstat_r+0x1c>
 80118fe:	6023      	str	r3, [r4, #0]
 8011900:	bd38      	pop	{r3, r4, r5, pc}
 8011902:	bf00      	nop
 8011904:	200009d4 	.word	0x200009d4

08011908 <_isatty_r>:
 8011908:	b538      	push	{r3, r4, r5, lr}
 801190a:	4d06      	ldr	r5, [pc, #24]	@ (8011924 <_isatty_r+0x1c>)
 801190c:	2300      	movs	r3, #0
 801190e:	4604      	mov	r4, r0
 8011910:	4608      	mov	r0, r1
 8011912:	602b      	str	r3, [r5, #0]
 8011914:	f7f1 fa7a 	bl	8002e0c <_isatty>
 8011918:	1c43      	adds	r3, r0, #1
 801191a:	d102      	bne.n	8011922 <_isatty_r+0x1a>
 801191c:	682b      	ldr	r3, [r5, #0]
 801191e:	b103      	cbz	r3, 8011922 <_isatty_r+0x1a>
 8011920:	6023      	str	r3, [r4, #0]
 8011922:	bd38      	pop	{r3, r4, r5, pc}
 8011924:	200009d4 	.word	0x200009d4

08011928 <_realloc_r>:
 8011928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801192c:	4680      	mov	r8, r0
 801192e:	4615      	mov	r5, r2
 8011930:	460c      	mov	r4, r1
 8011932:	b921      	cbnz	r1, 801193e <_realloc_r+0x16>
 8011934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011938:	4611      	mov	r1, r2
 801193a:	f7fe bed1 	b.w	80106e0 <_malloc_r>
 801193e:	b92a      	cbnz	r2, 801194c <_realloc_r+0x24>
 8011940:	f7ff fa50 	bl	8010de4 <_free_r>
 8011944:	2400      	movs	r4, #0
 8011946:	4620      	mov	r0, r4
 8011948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801194c:	f000 f81a 	bl	8011984 <_malloc_usable_size_r>
 8011950:	4285      	cmp	r5, r0
 8011952:	4606      	mov	r6, r0
 8011954:	d802      	bhi.n	801195c <_realloc_r+0x34>
 8011956:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801195a:	d8f4      	bhi.n	8011946 <_realloc_r+0x1e>
 801195c:	4629      	mov	r1, r5
 801195e:	4640      	mov	r0, r8
 8011960:	f7fe febe 	bl	80106e0 <_malloc_r>
 8011964:	4607      	mov	r7, r0
 8011966:	2800      	cmp	r0, #0
 8011968:	d0ec      	beq.n	8011944 <_realloc_r+0x1c>
 801196a:	42b5      	cmp	r5, r6
 801196c:	462a      	mov	r2, r5
 801196e:	4621      	mov	r1, r4
 8011970:	bf28      	it	cs
 8011972:	4632      	movcs	r2, r6
 8011974:	f7ff fa27 	bl	8010dc6 <memcpy>
 8011978:	4621      	mov	r1, r4
 801197a:	4640      	mov	r0, r8
 801197c:	f7ff fa32 	bl	8010de4 <_free_r>
 8011980:	463c      	mov	r4, r7
 8011982:	e7e0      	b.n	8011946 <_realloc_r+0x1e>

08011984 <_malloc_usable_size_r>:
 8011984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011988:	1f18      	subs	r0, r3, #4
 801198a:	2b00      	cmp	r3, #0
 801198c:	bfbc      	itt	lt
 801198e:	580b      	ldrlt	r3, [r1, r0]
 8011990:	18c0      	addlt	r0, r0, r3
 8011992:	4770      	bx	lr

08011994 <cosf>:
 8011994:	ee10 3a10 	vmov	r3, s0
 8011998:	b507      	push	{r0, r1, r2, lr}
 801199a:	4a1e      	ldr	r2, [pc, #120]	@ (8011a14 <cosf+0x80>)
 801199c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80119a0:	4293      	cmp	r3, r2
 80119a2:	d806      	bhi.n	80119b2 <cosf+0x1e>
 80119a4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8011a18 <cosf+0x84>
 80119a8:	b003      	add	sp, #12
 80119aa:	f85d eb04 	ldr.w	lr, [sp], #4
 80119ae:	f000 b8eb 	b.w	8011b88 <__kernel_cosf>
 80119b2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80119b6:	d304      	bcc.n	80119c2 <cosf+0x2e>
 80119b8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80119bc:	b003      	add	sp, #12
 80119be:	f85d fb04 	ldr.w	pc, [sp], #4
 80119c2:	4668      	mov	r0, sp
 80119c4:	f000 f980 	bl	8011cc8 <__ieee754_rem_pio2f>
 80119c8:	f000 0003 	and.w	r0, r0, #3
 80119cc:	2801      	cmp	r0, #1
 80119ce:	d009      	beq.n	80119e4 <cosf+0x50>
 80119d0:	2802      	cmp	r0, #2
 80119d2:	d010      	beq.n	80119f6 <cosf+0x62>
 80119d4:	b9b0      	cbnz	r0, 8011a04 <cosf+0x70>
 80119d6:	eddd 0a01 	vldr	s1, [sp, #4]
 80119da:	ed9d 0a00 	vldr	s0, [sp]
 80119de:	f000 f8d3 	bl	8011b88 <__kernel_cosf>
 80119e2:	e7eb      	b.n	80119bc <cosf+0x28>
 80119e4:	eddd 0a01 	vldr	s1, [sp, #4]
 80119e8:	ed9d 0a00 	vldr	s0, [sp]
 80119ec:	f000 f924 	bl	8011c38 <__kernel_sinf>
 80119f0:	eeb1 0a40 	vneg.f32	s0, s0
 80119f4:	e7e2      	b.n	80119bc <cosf+0x28>
 80119f6:	eddd 0a01 	vldr	s1, [sp, #4]
 80119fa:	ed9d 0a00 	vldr	s0, [sp]
 80119fe:	f000 f8c3 	bl	8011b88 <__kernel_cosf>
 8011a02:	e7f5      	b.n	80119f0 <cosf+0x5c>
 8011a04:	eddd 0a01 	vldr	s1, [sp, #4]
 8011a08:	ed9d 0a00 	vldr	s0, [sp]
 8011a0c:	2001      	movs	r0, #1
 8011a0e:	f000 f913 	bl	8011c38 <__kernel_sinf>
 8011a12:	e7d3      	b.n	80119bc <cosf+0x28>
 8011a14:	3f490fd8 	.word	0x3f490fd8
 8011a18:	00000000 	.word	0x00000000

08011a1c <fabsf>:
 8011a1c:	ee10 3a10 	vmov	r3, s0
 8011a20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011a24:	ee00 3a10 	vmov	s0, r3
 8011a28:	4770      	bx	lr
	...

08011a2c <sinf>:
 8011a2c:	ee10 3a10 	vmov	r3, s0
 8011a30:	b507      	push	{r0, r1, r2, lr}
 8011a32:	4a1f      	ldr	r2, [pc, #124]	@ (8011ab0 <sinf+0x84>)
 8011a34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011a38:	4293      	cmp	r3, r2
 8011a3a:	d807      	bhi.n	8011a4c <sinf+0x20>
 8011a3c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8011ab4 <sinf+0x88>
 8011a40:	2000      	movs	r0, #0
 8011a42:	b003      	add	sp, #12
 8011a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a48:	f000 b8f6 	b.w	8011c38 <__kernel_sinf>
 8011a4c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011a50:	d304      	bcc.n	8011a5c <sinf+0x30>
 8011a52:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011a56:	b003      	add	sp, #12
 8011a58:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a5c:	4668      	mov	r0, sp
 8011a5e:	f000 f933 	bl	8011cc8 <__ieee754_rem_pio2f>
 8011a62:	f000 0003 	and.w	r0, r0, #3
 8011a66:	2801      	cmp	r0, #1
 8011a68:	d00a      	beq.n	8011a80 <sinf+0x54>
 8011a6a:	2802      	cmp	r0, #2
 8011a6c:	d00f      	beq.n	8011a8e <sinf+0x62>
 8011a6e:	b9c0      	cbnz	r0, 8011aa2 <sinf+0x76>
 8011a70:	eddd 0a01 	vldr	s1, [sp, #4]
 8011a74:	ed9d 0a00 	vldr	s0, [sp]
 8011a78:	2001      	movs	r0, #1
 8011a7a:	f000 f8dd 	bl	8011c38 <__kernel_sinf>
 8011a7e:	e7ea      	b.n	8011a56 <sinf+0x2a>
 8011a80:	eddd 0a01 	vldr	s1, [sp, #4]
 8011a84:	ed9d 0a00 	vldr	s0, [sp]
 8011a88:	f000 f87e 	bl	8011b88 <__kernel_cosf>
 8011a8c:	e7e3      	b.n	8011a56 <sinf+0x2a>
 8011a8e:	eddd 0a01 	vldr	s1, [sp, #4]
 8011a92:	ed9d 0a00 	vldr	s0, [sp]
 8011a96:	2001      	movs	r0, #1
 8011a98:	f000 f8ce 	bl	8011c38 <__kernel_sinf>
 8011a9c:	eeb1 0a40 	vneg.f32	s0, s0
 8011aa0:	e7d9      	b.n	8011a56 <sinf+0x2a>
 8011aa2:	eddd 0a01 	vldr	s1, [sp, #4]
 8011aa6:	ed9d 0a00 	vldr	s0, [sp]
 8011aaa:	f000 f86d 	bl	8011b88 <__kernel_cosf>
 8011aae:	e7f5      	b.n	8011a9c <sinf+0x70>
 8011ab0:	3f490fd8 	.word	0x3f490fd8
 8011ab4:	00000000 	.word	0x00000000

08011ab8 <floorf>:
 8011ab8:	ee10 3a10 	vmov	r3, s0
 8011abc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011ac0:	3a7f      	subs	r2, #127	@ 0x7f
 8011ac2:	2a16      	cmp	r2, #22
 8011ac4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011ac8:	dc2b      	bgt.n	8011b22 <floorf+0x6a>
 8011aca:	2a00      	cmp	r2, #0
 8011acc:	da12      	bge.n	8011af4 <floorf+0x3c>
 8011ace:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011b34 <floorf+0x7c>
 8011ad2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011ad6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ade:	dd06      	ble.n	8011aee <floorf+0x36>
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	da24      	bge.n	8011b2e <floorf+0x76>
 8011ae4:	2900      	cmp	r1, #0
 8011ae6:	4b14      	ldr	r3, [pc, #80]	@ (8011b38 <floorf+0x80>)
 8011ae8:	bf08      	it	eq
 8011aea:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8011aee:	ee00 3a10 	vmov	s0, r3
 8011af2:	4770      	bx	lr
 8011af4:	4911      	ldr	r1, [pc, #68]	@ (8011b3c <floorf+0x84>)
 8011af6:	4111      	asrs	r1, r2
 8011af8:	420b      	tst	r3, r1
 8011afa:	d0fa      	beq.n	8011af2 <floorf+0x3a>
 8011afc:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8011b34 <floorf+0x7c>
 8011b00:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011b04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b0c:	ddef      	ble.n	8011aee <floorf+0x36>
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	bfbe      	ittt	lt
 8011b12:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8011b16:	fa40 f202 	asrlt.w	r2, r0, r2
 8011b1a:	189b      	addlt	r3, r3, r2
 8011b1c:	ea23 0301 	bic.w	r3, r3, r1
 8011b20:	e7e5      	b.n	8011aee <floorf+0x36>
 8011b22:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011b26:	d3e4      	bcc.n	8011af2 <floorf+0x3a>
 8011b28:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011b2c:	4770      	bx	lr
 8011b2e:	2300      	movs	r3, #0
 8011b30:	e7dd      	b.n	8011aee <floorf+0x36>
 8011b32:	bf00      	nop
 8011b34:	7149f2ca 	.word	0x7149f2ca
 8011b38:	bf800000 	.word	0xbf800000
 8011b3c:	007fffff 	.word	0x007fffff

08011b40 <roundf>:
 8011b40:	ee10 0a10 	vmov	r0, s0
 8011b44:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8011b48:	3a7f      	subs	r2, #127	@ 0x7f
 8011b4a:	2a16      	cmp	r2, #22
 8011b4c:	dc15      	bgt.n	8011b7a <roundf+0x3a>
 8011b4e:	2a00      	cmp	r2, #0
 8011b50:	da08      	bge.n	8011b64 <roundf+0x24>
 8011b52:	3201      	adds	r2, #1
 8011b54:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8011b58:	d101      	bne.n	8011b5e <roundf+0x1e>
 8011b5a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8011b5e:	ee00 3a10 	vmov	s0, r3
 8011b62:	4770      	bx	lr
 8011b64:	4907      	ldr	r1, [pc, #28]	@ (8011b84 <roundf+0x44>)
 8011b66:	4111      	asrs	r1, r2
 8011b68:	4201      	tst	r1, r0
 8011b6a:	d0fa      	beq.n	8011b62 <roundf+0x22>
 8011b6c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8011b70:	4113      	asrs	r3, r2
 8011b72:	4403      	add	r3, r0
 8011b74:	ea23 0301 	bic.w	r3, r3, r1
 8011b78:	e7f1      	b.n	8011b5e <roundf+0x1e>
 8011b7a:	2a80      	cmp	r2, #128	@ 0x80
 8011b7c:	d1f1      	bne.n	8011b62 <roundf+0x22>
 8011b7e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011b82:	4770      	bx	lr
 8011b84:	007fffff 	.word	0x007fffff

08011b88 <__kernel_cosf>:
 8011b88:	ee10 3a10 	vmov	r3, s0
 8011b8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011b90:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8011b94:	eef0 6a40 	vmov.f32	s13, s0
 8011b98:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011b9c:	d204      	bcs.n	8011ba8 <__kernel_cosf+0x20>
 8011b9e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8011ba2:	ee17 2a90 	vmov	r2, s15
 8011ba6:	b342      	cbz	r2, 8011bfa <__kernel_cosf+0x72>
 8011ba8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8011bac:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8011c18 <__kernel_cosf+0x90>
 8011bb0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8011c1c <__kernel_cosf+0x94>
 8011bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8011c20 <__kernel_cosf+0x98>)
 8011bb6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011c24 <__kernel_cosf+0x9c>
 8011bc0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011bc4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8011c28 <__kernel_cosf+0xa0>
 8011bc8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011bcc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8011c2c <__kernel_cosf+0xa4>
 8011bd0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011bd4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8011c30 <__kernel_cosf+0xa8>
 8011bd8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011bdc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8011be0:	ee26 6a07 	vmul.f32	s12, s12, s14
 8011be4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011be8:	eee7 0a06 	vfma.f32	s1, s14, s12
 8011bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011bf0:	d804      	bhi.n	8011bfc <__kernel_cosf+0x74>
 8011bf2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011bf6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011bfa:	4770      	bx	lr
 8011bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8011c34 <__kernel_cosf+0xac>)
 8011bfe:	4293      	cmp	r3, r2
 8011c00:	bf9a      	itte	ls
 8011c02:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8011c06:	ee07 3a10 	vmovls	s14, r3
 8011c0a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8011c0e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011c12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c16:	e7ec      	b.n	8011bf2 <__kernel_cosf+0x6a>
 8011c18:	ad47d74e 	.word	0xad47d74e
 8011c1c:	310f74f6 	.word	0x310f74f6
 8011c20:	3e999999 	.word	0x3e999999
 8011c24:	b493f27c 	.word	0xb493f27c
 8011c28:	37d00d01 	.word	0x37d00d01
 8011c2c:	bab60b61 	.word	0xbab60b61
 8011c30:	3d2aaaab 	.word	0x3d2aaaab
 8011c34:	3f480000 	.word	0x3f480000

08011c38 <__kernel_sinf>:
 8011c38:	ee10 3a10 	vmov	r3, s0
 8011c3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011c40:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8011c44:	d204      	bcs.n	8011c50 <__kernel_sinf+0x18>
 8011c46:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011c4a:	ee17 3a90 	vmov	r3, s15
 8011c4e:	b35b      	cbz	r3, 8011ca8 <__kernel_sinf+0x70>
 8011c50:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011c54:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011cac <__kernel_sinf+0x74>
 8011c58:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8011cb0 <__kernel_sinf+0x78>
 8011c5c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011c60:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8011cb4 <__kernel_sinf+0x7c>
 8011c64:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011c68:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8011cb8 <__kernel_sinf+0x80>
 8011c6c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011c70:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8011cbc <__kernel_sinf+0x84>
 8011c74:	ee60 6a07 	vmul.f32	s13, s0, s14
 8011c78:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011c7c:	b930      	cbnz	r0, 8011c8c <__kernel_sinf+0x54>
 8011c7e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8011cc0 <__kernel_sinf+0x88>
 8011c82:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011c86:	eea6 0a26 	vfma.f32	s0, s12, s13
 8011c8a:	4770      	bx	lr
 8011c8c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8011c90:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8011c94:	eee0 7a86 	vfma.f32	s15, s1, s12
 8011c98:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8011c9c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8011cc4 <__kernel_sinf+0x8c>
 8011ca0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8011ca4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8011ca8:	4770      	bx	lr
 8011caa:	bf00      	nop
 8011cac:	2f2ec9d3 	.word	0x2f2ec9d3
 8011cb0:	b2d72f34 	.word	0xb2d72f34
 8011cb4:	3638ef1b 	.word	0x3638ef1b
 8011cb8:	b9500d01 	.word	0xb9500d01
 8011cbc:	3c088889 	.word	0x3c088889
 8011cc0:	be2aaaab 	.word	0xbe2aaaab
 8011cc4:	3e2aaaab 	.word	0x3e2aaaab

08011cc8 <__ieee754_rem_pio2f>:
 8011cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cca:	ee10 6a10 	vmov	r6, s0
 8011cce:	4b88      	ldr	r3, [pc, #544]	@ (8011ef0 <__ieee754_rem_pio2f+0x228>)
 8011cd0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8011cd4:	429d      	cmp	r5, r3
 8011cd6:	b087      	sub	sp, #28
 8011cd8:	4604      	mov	r4, r0
 8011cda:	d805      	bhi.n	8011ce8 <__ieee754_rem_pio2f+0x20>
 8011cdc:	2300      	movs	r3, #0
 8011cde:	ed80 0a00 	vstr	s0, [r0]
 8011ce2:	6043      	str	r3, [r0, #4]
 8011ce4:	2000      	movs	r0, #0
 8011ce6:	e022      	b.n	8011d2e <__ieee754_rem_pio2f+0x66>
 8011ce8:	4b82      	ldr	r3, [pc, #520]	@ (8011ef4 <__ieee754_rem_pio2f+0x22c>)
 8011cea:	429d      	cmp	r5, r3
 8011cec:	d83a      	bhi.n	8011d64 <__ieee754_rem_pio2f+0x9c>
 8011cee:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011cf2:	2e00      	cmp	r6, #0
 8011cf4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8011ef8 <__ieee754_rem_pio2f+0x230>
 8011cf8:	4a80      	ldr	r2, [pc, #512]	@ (8011efc <__ieee754_rem_pio2f+0x234>)
 8011cfa:	f023 030f 	bic.w	r3, r3, #15
 8011cfe:	dd18      	ble.n	8011d32 <__ieee754_rem_pio2f+0x6a>
 8011d00:	4293      	cmp	r3, r2
 8011d02:	ee70 7a47 	vsub.f32	s15, s0, s14
 8011d06:	bf09      	itett	eq
 8011d08:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8011f00 <__ieee754_rem_pio2f+0x238>
 8011d0c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8011f04 <__ieee754_rem_pio2f+0x23c>
 8011d10:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8011f08 <__ieee754_rem_pio2f+0x240>
 8011d14:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8011d18:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8011d1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d20:	ed80 7a00 	vstr	s14, [r0]
 8011d24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011d28:	edc0 7a01 	vstr	s15, [r0, #4]
 8011d2c:	2001      	movs	r0, #1
 8011d2e:	b007      	add	sp, #28
 8011d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d32:	4293      	cmp	r3, r2
 8011d34:	ee70 7a07 	vadd.f32	s15, s0, s14
 8011d38:	bf09      	itett	eq
 8011d3a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8011f00 <__ieee754_rem_pio2f+0x238>
 8011d3e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8011f04 <__ieee754_rem_pio2f+0x23c>
 8011d42:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8011f08 <__ieee754_rem_pio2f+0x240>
 8011d46:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8011d4a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011d4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d52:	ed80 7a00 	vstr	s14, [r0]
 8011d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011d5a:	edc0 7a01 	vstr	s15, [r0, #4]
 8011d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8011d62:	e7e4      	b.n	8011d2e <__ieee754_rem_pio2f+0x66>
 8011d64:	4b69      	ldr	r3, [pc, #420]	@ (8011f0c <__ieee754_rem_pio2f+0x244>)
 8011d66:	429d      	cmp	r5, r3
 8011d68:	d873      	bhi.n	8011e52 <__ieee754_rem_pio2f+0x18a>
 8011d6a:	f7ff fe57 	bl	8011a1c <fabsf>
 8011d6e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8011f10 <__ieee754_rem_pio2f+0x248>
 8011d72:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011d76:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011d82:	ee17 0a90 	vmov	r0, s15
 8011d86:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011ef8 <__ieee754_rem_pio2f+0x230>
 8011d8a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8011d8e:	281f      	cmp	r0, #31
 8011d90:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011f04 <__ieee754_rem_pio2f+0x23c>
 8011d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011d98:	eeb1 6a47 	vneg.f32	s12, s14
 8011d9c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011da0:	ee16 1a90 	vmov	r1, s13
 8011da4:	dc09      	bgt.n	8011dba <__ieee754_rem_pio2f+0xf2>
 8011da6:	4a5b      	ldr	r2, [pc, #364]	@ (8011f14 <__ieee754_rem_pio2f+0x24c>)
 8011da8:	1e47      	subs	r7, r0, #1
 8011daa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011dae:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8011db2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011db6:	4293      	cmp	r3, r2
 8011db8:	d107      	bne.n	8011dca <__ieee754_rem_pio2f+0x102>
 8011dba:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8011dbe:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8011dc2:	2a08      	cmp	r2, #8
 8011dc4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8011dc8:	dc14      	bgt.n	8011df4 <__ieee754_rem_pio2f+0x12c>
 8011dca:	6021      	str	r1, [r4, #0]
 8011dcc:	ed94 7a00 	vldr	s14, [r4]
 8011dd0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011dd4:	2e00      	cmp	r6, #0
 8011dd6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011dda:	ed84 0a01 	vstr	s0, [r4, #4]
 8011dde:	daa6      	bge.n	8011d2e <__ieee754_rem_pio2f+0x66>
 8011de0:	eeb1 7a47 	vneg.f32	s14, s14
 8011de4:	eeb1 0a40 	vneg.f32	s0, s0
 8011de8:	ed84 7a00 	vstr	s14, [r4]
 8011dec:	ed84 0a01 	vstr	s0, [r4, #4]
 8011df0:	4240      	negs	r0, r0
 8011df2:	e79c      	b.n	8011d2e <__ieee754_rem_pio2f+0x66>
 8011df4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8011f00 <__ieee754_rem_pio2f+0x238>
 8011df8:	eef0 6a40 	vmov.f32	s13, s0
 8011dfc:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011e00:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011e04:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011e08:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011f08 <__ieee754_rem_pio2f+0x240>
 8011e0c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011e10:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011e14:	ee15 2a90 	vmov	r2, s11
 8011e18:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011e1c:	1a5b      	subs	r3, r3, r1
 8011e1e:	2b19      	cmp	r3, #25
 8011e20:	dc04      	bgt.n	8011e2c <__ieee754_rem_pio2f+0x164>
 8011e22:	edc4 5a00 	vstr	s11, [r4]
 8011e26:	eeb0 0a66 	vmov.f32	s0, s13
 8011e2a:	e7cf      	b.n	8011dcc <__ieee754_rem_pio2f+0x104>
 8011e2c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8011f18 <__ieee754_rem_pio2f+0x250>
 8011e30:	eeb0 0a66 	vmov.f32	s0, s13
 8011e34:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011e38:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011e3c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8011f1c <__ieee754_rem_pio2f+0x254>
 8011e40:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011e44:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011e48:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011e4c:	ed84 7a00 	vstr	s14, [r4]
 8011e50:	e7bc      	b.n	8011dcc <__ieee754_rem_pio2f+0x104>
 8011e52:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8011e56:	d306      	bcc.n	8011e66 <__ieee754_rem_pio2f+0x19e>
 8011e58:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011e5c:	edc0 7a01 	vstr	s15, [r0, #4]
 8011e60:	edc0 7a00 	vstr	s15, [r0]
 8011e64:	e73e      	b.n	8011ce4 <__ieee754_rem_pio2f+0x1c>
 8011e66:	15ea      	asrs	r2, r5, #23
 8011e68:	3a86      	subs	r2, #134	@ 0x86
 8011e6a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8011e6e:	ee07 3a90 	vmov	s15, r3
 8011e72:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011e76:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8011f20 <__ieee754_rem_pio2f+0x258>
 8011e7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011e7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011e82:	ed8d 7a03 	vstr	s14, [sp, #12]
 8011e86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011e8a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011e8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011e92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011e96:	ed8d 7a04 	vstr	s14, [sp, #16]
 8011e9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011e9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ea6:	edcd 7a05 	vstr	s15, [sp, #20]
 8011eaa:	d11e      	bne.n	8011eea <__ieee754_rem_pio2f+0x222>
 8011eac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb4:	bf0c      	ite	eq
 8011eb6:	2301      	moveq	r3, #1
 8011eb8:	2302      	movne	r3, #2
 8011eba:	491a      	ldr	r1, [pc, #104]	@ (8011f24 <__ieee754_rem_pio2f+0x25c>)
 8011ebc:	9101      	str	r1, [sp, #4]
 8011ebe:	2102      	movs	r1, #2
 8011ec0:	9100      	str	r1, [sp, #0]
 8011ec2:	a803      	add	r0, sp, #12
 8011ec4:	4621      	mov	r1, r4
 8011ec6:	f000 f895 	bl	8011ff4 <__kernel_rem_pio2f>
 8011eca:	2e00      	cmp	r6, #0
 8011ecc:	f6bf af2f 	bge.w	8011d2e <__ieee754_rem_pio2f+0x66>
 8011ed0:	edd4 7a00 	vldr	s15, [r4]
 8011ed4:	eef1 7a67 	vneg.f32	s15, s15
 8011ed8:	edc4 7a00 	vstr	s15, [r4]
 8011edc:	edd4 7a01 	vldr	s15, [r4, #4]
 8011ee0:	eef1 7a67 	vneg.f32	s15, s15
 8011ee4:	edc4 7a01 	vstr	s15, [r4, #4]
 8011ee8:	e782      	b.n	8011df0 <__ieee754_rem_pio2f+0x128>
 8011eea:	2303      	movs	r3, #3
 8011eec:	e7e5      	b.n	8011eba <__ieee754_rem_pio2f+0x1f2>
 8011eee:	bf00      	nop
 8011ef0:	3f490fd8 	.word	0x3f490fd8
 8011ef4:	4016cbe3 	.word	0x4016cbe3
 8011ef8:	3fc90f80 	.word	0x3fc90f80
 8011efc:	3fc90fd0 	.word	0x3fc90fd0
 8011f00:	37354400 	.word	0x37354400
 8011f04:	37354443 	.word	0x37354443
 8011f08:	2e85a308 	.word	0x2e85a308
 8011f0c:	43490f80 	.word	0x43490f80
 8011f10:	3f22f984 	.word	0x3f22f984
 8011f14:	08017c98 	.word	0x08017c98
 8011f18:	2e85a300 	.word	0x2e85a300
 8011f1c:	248d3132 	.word	0x248d3132
 8011f20:	43800000 	.word	0x43800000
 8011f24:	08017d18 	.word	0x08017d18

08011f28 <scalbnf>:
 8011f28:	ee10 3a10 	vmov	r3, s0
 8011f2c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8011f30:	d02b      	beq.n	8011f8a <scalbnf+0x62>
 8011f32:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8011f36:	d302      	bcc.n	8011f3e <scalbnf+0x16>
 8011f38:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011f3c:	4770      	bx	lr
 8011f3e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8011f42:	d123      	bne.n	8011f8c <scalbnf+0x64>
 8011f44:	4b24      	ldr	r3, [pc, #144]	@ (8011fd8 <scalbnf+0xb0>)
 8011f46:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011fdc <scalbnf+0xb4>
 8011f4a:	4298      	cmp	r0, r3
 8011f4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011f50:	db17      	blt.n	8011f82 <scalbnf+0x5a>
 8011f52:	ee10 3a10 	vmov	r3, s0
 8011f56:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011f5a:	3a19      	subs	r2, #25
 8011f5c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011f60:	4288      	cmp	r0, r1
 8011f62:	dd15      	ble.n	8011f90 <scalbnf+0x68>
 8011f64:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011fe0 <scalbnf+0xb8>
 8011f68:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011fe4 <scalbnf+0xbc>
 8011f6c:	ee10 3a10 	vmov	r3, s0
 8011f70:	eeb0 7a67 	vmov.f32	s14, s15
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	bfb8      	it	lt
 8011f78:	eef0 7a66 	vmovlt.f32	s15, s13
 8011f7c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8011f80:	4770      	bx	lr
 8011f82:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011fe8 <scalbnf+0xc0>
 8011f86:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011f8a:	4770      	bx	lr
 8011f8c:	0dd2      	lsrs	r2, r2, #23
 8011f8e:	e7e5      	b.n	8011f5c <scalbnf+0x34>
 8011f90:	4410      	add	r0, r2
 8011f92:	28fe      	cmp	r0, #254	@ 0xfe
 8011f94:	dce6      	bgt.n	8011f64 <scalbnf+0x3c>
 8011f96:	2800      	cmp	r0, #0
 8011f98:	dd06      	ble.n	8011fa8 <scalbnf+0x80>
 8011f9a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011f9e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011fa2:	ee00 3a10 	vmov	s0, r3
 8011fa6:	4770      	bx	lr
 8011fa8:	f110 0f16 	cmn.w	r0, #22
 8011fac:	da09      	bge.n	8011fc2 <scalbnf+0x9a>
 8011fae:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8011fe8 <scalbnf+0xc0>
 8011fb2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011fec <scalbnf+0xc4>
 8011fb6:	ee10 3a10 	vmov	r3, s0
 8011fba:	eeb0 7a67 	vmov.f32	s14, s15
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	e7d9      	b.n	8011f76 <scalbnf+0x4e>
 8011fc2:	3019      	adds	r0, #25
 8011fc4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011fc8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011fcc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8011ff0 <scalbnf+0xc8>
 8011fd0:	ee07 3a90 	vmov	s15, r3
 8011fd4:	e7d7      	b.n	8011f86 <scalbnf+0x5e>
 8011fd6:	bf00      	nop
 8011fd8:	ffff3cb0 	.word	0xffff3cb0
 8011fdc:	4c000000 	.word	0x4c000000
 8011fe0:	7149f2ca 	.word	0x7149f2ca
 8011fe4:	f149f2ca 	.word	0xf149f2ca
 8011fe8:	0da24260 	.word	0x0da24260
 8011fec:	8da24260 	.word	0x8da24260
 8011ff0:	33000000 	.word	0x33000000

08011ff4 <__kernel_rem_pio2f>:
 8011ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff8:	ed2d 8b04 	vpush	{d8-d9}
 8011ffc:	b0d9      	sub	sp, #356	@ 0x164
 8011ffe:	4690      	mov	r8, r2
 8012000:	9001      	str	r0, [sp, #4]
 8012002:	4ab9      	ldr	r2, [pc, #740]	@ (80122e8 <__kernel_rem_pio2f+0x2f4>)
 8012004:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8012006:	f118 0f04 	cmn.w	r8, #4
 801200a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801200e:	460f      	mov	r7, r1
 8012010:	f103 3bff 	add.w	fp, r3, #4294967295
 8012014:	db27      	blt.n	8012066 <__kernel_rem_pio2f+0x72>
 8012016:	f1b8 0203 	subs.w	r2, r8, #3
 801201a:	bf48      	it	mi
 801201c:	f108 0204 	addmi.w	r2, r8, #4
 8012020:	10d2      	asrs	r2, r2, #3
 8012022:	1c55      	adds	r5, r2, #1
 8012024:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8012026:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80122f8 <__kernel_rem_pio2f+0x304>
 801202a:	00e8      	lsls	r0, r5, #3
 801202c:	eba2 060b 	sub.w	r6, r2, fp
 8012030:	9002      	str	r0, [sp, #8]
 8012032:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8012036:	eb0a 0c0b 	add.w	ip, sl, fp
 801203a:	ac1c      	add	r4, sp, #112	@ 0x70
 801203c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8012040:	2000      	movs	r0, #0
 8012042:	4560      	cmp	r0, ip
 8012044:	dd11      	ble.n	801206a <__kernel_rem_pio2f+0x76>
 8012046:	a91c      	add	r1, sp, #112	@ 0x70
 8012048:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801204c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8012050:	f04f 0c00 	mov.w	ip, #0
 8012054:	45d4      	cmp	ip, sl
 8012056:	dc27      	bgt.n	80120a8 <__kernel_rem_pio2f+0xb4>
 8012058:	f8dd e004 	ldr.w	lr, [sp, #4]
 801205c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80122f8 <__kernel_rem_pio2f+0x304>
 8012060:	4606      	mov	r6, r0
 8012062:	2400      	movs	r4, #0
 8012064:	e016      	b.n	8012094 <__kernel_rem_pio2f+0xa0>
 8012066:	2200      	movs	r2, #0
 8012068:	e7db      	b.n	8012022 <__kernel_rem_pio2f+0x2e>
 801206a:	42c6      	cmn	r6, r0
 801206c:	bf5d      	ittte	pl
 801206e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8012072:	ee07 1a90 	vmovpl	s15, r1
 8012076:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801207a:	eef0 7a47 	vmovmi.f32	s15, s14
 801207e:	ece4 7a01 	vstmia	r4!, {s15}
 8012082:	3001      	adds	r0, #1
 8012084:	e7dd      	b.n	8012042 <__kernel_rem_pio2f+0x4e>
 8012086:	ecfe 6a01 	vldmia	lr!, {s13}
 801208a:	ed96 7a00 	vldr	s14, [r6]
 801208e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012092:	3401      	adds	r4, #1
 8012094:	455c      	cmp	r4, fp
 8012096:	f1a6 0604 	sub.w	r6, r6, #4
 801209a:	ddf4      	ble.n	8012086 <__kernel_rem_pio2f+0x92>
 801209c:	ece9 7a01 	vstmia	r9!, {s15}
 80120a0:	f10c 0c01 	add.w	ip, ip, #1
 80120a4:	3004      	adds	r0, #4
 80120a6:	e7d5      	b.n	8012054 <__kernel_rem_pio2f+0x60>
 80120a8:	a908      	add	r1, sp, #32
 80120aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80120ae:	9104      	str	r1, [sp, #16]
 80120b0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80120b2:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80122f4 <__kernel_rem_pio2f+0x300>
 80120b6:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80122f0 <__kernel_rem_pio2f+0x2fc>
 80120ba:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80120be:	9203      	str	r2, [sp, #12]
 80120c0:	4654      	mov	r4, sl
 80120c2:	00a2      	lsls	r2, r4, #2
 80120c4:	9205      	str	r2, [sp, #20]
 80120c6:	aa58      	add	r2, sp, #352	@ 0x160
 80120c8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80120cc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80120d0:	a944      	add	r1, sp, #272	@ 0x110
 80120d2:	aa08      	add	r2, sp, #32
 80120d4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80120d8:	4694      	mov	ip, r2
 80120da:	4626      	mov	r6, r4
 80120dc:	2e00      	cmp	r6, #0
 80120de:	f1a0 0004 	sub.w	r0, r0, #4
 80120e2:	dc4c      	bgt.n	801217e <__kernel_rem_pio2f+0x18a>
 80120e4:	4628      	mov	r0, r5
 80120e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80120ea:	f7ff ff1d 	bl	8011f28 <scalbnf>
 80120ee:	eeb0 8a40 	vmov.f32	s16, s0
 80120f2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80120f6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80120fa:	f7ff fcdd 	bl	8011ab8 <floorf>
 80120fe:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8012102:	eea0 8a67 	vfms.f32	s16, s0, s15
 8012106:	2d00      	cmp	r5, #0
 8012108:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801210c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8012110:	ee17 9a90 	vmov	r9, s15
 8012114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012118:	ee38 8a67 	vsub.f32	s16, s16, s15
 801211c:	dd41      	ble.n	80121a2 <__kernel_rem_pio2f+0x1ae>
 801211e:	f104 3cff 	add.w	ip, r4, #4294967295
 8012122:	a908      	add	r1, sp, #32
 8012124:	f1c5 0e08 	rsb	lr, r5, #8
 8012128:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801212c:	fa46 f00e 	asr.w	r0, r6, lr
 8012130:	4481      	add	r9, r0
 8012132:	fa00 f00e 	lsl.w	r0, r0, lr
 8012136:	1a36      	subs	r6, r6, r0
 8012138:	f1c5 0007 	rsb	r0, r5, #7
 801213c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8012140:	4106      	asrs	r6, r0
 8012142:	2e00      	cmp	r6, #0
 8012144:	dd3c      	ble.n	80121c0 <__kernel_rem_pio2f+0x1cc>
 8012146:	f04f 0e00 	mov.w	lr, #0
 801214a:	f109 0901 	add.w	r9, r9, #1
 801214e:	4670      	mov	r0, lr
 8012150:	4574      	cmp	r4, lr
 8012152:	dc68      	bgt.n	8012226 <__kernel_rem_pio2f+0x232>
 8012154:	2d00      	cmp	r5, #0
 8012156:	dd03      	ble.n	8012160 <__kernel_rem_pio2f+0x16c>
 8012158:	2d01      	cmp	r5, #1
 801215a:	d074      	beq.n	8012246 <__kernel_rem_pio2f+0x252>
 801215c:	2d02      	cmp	r5, #2
 801215e:	d07d      	beq.n	801225c <__kernel_rem_pio2f+0x268>
 8012160:	2e02      	cmp	r6, #2
 8012162:	d12d      	bne.n	80121c0 <__kernel_rem_pio2f+0x1cc>
 8012164:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012168:	ee30 8a48 	vsub.f32	s16, s0, s16
 801216c:	b340      	cbz	r0, 80121c0 <__kernel_rem_pio2f+0x1cc>
 801216e:	4628      	mov	r0, r5
 8012170:	9306      	str	r3, [sp, #24]
 8012172:	f7ff fed9 	bl	8011f28 <scalbnf>
 8012176:	9b06      	ldr	r3, [sp, #24]
 8012178:	ee38 8a40 	vsub.f32	s16, s16, s0
 801217c:	e020      	b.n	80121c0 <__kernel_rem_pio2f+0x1cc>
 801217e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8012182:	3e01      	subs	r6, #1
 8012184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801218c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8012190:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012194:	ecac 0a01 	vstmia	ip!, {s0}
 8012198:	ed90 0a00 	vldr	s0, [r0]
 801219c:	ee37 0a80 	vadd.f32	s0, s15, s0
 80121a0:	e79c      	b.n	80120dc <__kernel_rem_pio2f+0xe8>
 80121a2:	d105      	bne.n	80121b0 <__kernel_rem_pio2f+0x1bc>
 80121a4:	1e60      	subs	r0, r4, #1
 80121a6:	a908      	add	r1, sp, #32
 80121a8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80121ac:	11f6      	asrs	r6, r6, #7
 80121ae:	e7c8      	b.n	8012142 <__kernel_rem_pio2f+0x14e>
 80121b0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80121b4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80121b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121bc:	da31      	bge.n	8012222 <__kernel_rem_pio2f+0x22e>
 80121be:	2600      	movs	r6, #0
 80121c0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80121c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121c8:	f040 8098 	bne.w	80122fc <__kernel_rem_pio2f+0x308>
 80121cc:	1e60      	subs	r0, r4, #1
 80121ce:	2200      	movs	r2, #0
 80121d0:	4550      	cmp	r0, sl
 80121d2:	da4b      	bge.n	801226c <__kernel_rem_pio2f+0x278>
 80121d4:	2a00      	cmp	r2, #0
 80121d6:	d065      	beq.n	80122a4 <__kernel_rem_pio2f+0x2b0>
 80121d8:	3c01      	subs	r4, #1
 80121da:	ab08      	add	r3, sp, #32
 80121dc:	3d08      	subs	r5, #8
 80121de:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d0f8      	beq.n	80121d8 <__kernel_rem_pio2f+0x1e4>
 80121e6:	4628      	mov	r0, r5
 80121e8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80121ec:	f7ff fe9c 	bl	8011f28 <scalbnf>
 80121f0:	1c63      	adds	r3, r4, #1
 80121f2:	aa44      	add	r2, sp, #272	@ 0x110
 80121f4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80122f4 <__kernel_rem_pio2f+0x300>
 80121f8:	0099      	lsls	r1, r3, #2
 80121fa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80121fe:	4623      	mov	r3, r4
 8012200:	2b00      	cmp	r3, #0
 8012202:	f280 80a9 	bge.w	8012358 <__kernel_rem_pio2f+0x364>
 8012206:	4623      	mov	r3, r4
 8012208:	2b00      	cmp	r3, #0
 801220a:	f2c0 80c7 	blt.w	801239c <__kernel_rem_pio2f+0x3a8>
 801220e:	aa44      	add	r2, sp, #272	@ 0x110
 8012210:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8012214:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80122ec <__kernel_rem_pio2f+0x2f8>
 8012218:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80122f8 <__kernel_rem_pio2f+0x304>
 801221c:	2000      	movs	r0, #0
 801221e:	1ae2      	subs	r2, r4, r3
 8012220:	e0b1      	b.n	8012386 <__kernel_rem_pio2f+0x392>
 8012222:	2602      	movs	r6, #2
 8012224:	e78f      	b.n	8012146 <__kernel_rem_pio2f+0x152>
 8012226:	f852 1b04 	ldr.w	r1, [r2], #4
 801222a:	b948      	cbnz	r0, 8012240 <__kernel_rem_pio2f+0x24c>
 801222c:	b121      	cbz	r1, 8012238 <__kernel_rem_pio2f+0x244>
 801222e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8012232:	f842 1c04 	str.w	r1, [r2, #-4]
 8012236:	2101      	movs	r1, #1
 8012238:	f10e 0e01 	add.w	lr, lr, #1
 801223c:	4608      	mov	r0, r1
 801223e:	e787      	b.n	8012150 <__kernel_rem_pio2f+0x15c>
 8012240:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8012244:	e7f5      	b.n	8012232 <__kernel_rem_pio2f+0x23e>
 8012246:	f104 3cff 	add.w	ip, r4, #4294967295
 801224a:	aa08      	add	r2, sp, #32
 801224c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012250:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8012254:	a908      	add	r1, sp, #32
 8012256:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801225a:	e781      	b.n	8012160 <__kernel_rem_pio2f+0x16c>
 801225c:	f104 3cff 	add.w	ip, r4, #4294967295
 8012260:	aa08      	add	r2, sp, #32
 8012262:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012266:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801226a:	e7f3      	b.n	8012254 <__kernel_rem_pio2f+0x260>
 801226c:	a908      	add	r1, sp, #32
 801226e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8012272:	3801      	subs	r0, #1
 8012274:	430a      	orrs	r2, r1
 8012276:	e7ab      	b.n	80121d0 <__kernel_rem_pio2f+0x1dc>
 8012278:	3201      	adds	r2, #1
 801227a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801227e:	2e00      	cmp	r6, #0
 8012280:	d0fa      	beq.n	8012278 <__kernel_rem_pio2f+0x284>
 8012282:	9905      	ldr	r1, [sp, #20]
 8012284:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8012288:	eb0d 0001 	add.w	r0, sp, r1
 801228c:	18e6      	adds	r6, r4, r3
 801228e:	a91c      	add	r1, sp, #112	@ 0x70
 8012290:	f104 0c01 	add.w	ip, r4, #1
 8012294:	384c      	subs	r0, #76	@ 0x4c
 8012296:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801229a:	4422      	add	r2, r4
 801229c:	4562      	cmp	r2, ip
 801229e:	da04      	bge.n	80122aa <__kernel_rem_pio2f+0x2b6>
 80122a0:	4614      	mov	r4, r2
 80122a2:	e70e      	b.n	80120c2 <__kernel_rem_pio2f+0xce>
 80122a4:	9804      	ldr	r0, [sp, #16]
 80122a6:	2201      	movs	r2, #1
 80122a8:	e7e7      	b.n	801227a <__kernel_rem_pio2f+0x286>
 80122aa:	9903      	ldr	r1, [sp, #12]
 80122ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80122b0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80122b4:	9105      	str	r1, [sp, #20]
 80122b6:	ee07 1a90 	vmov	s15, r1
 80122ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122be:	2400      	movs	r4, #0
 80122c0:	ece6 7a01 	vstmia	r6!, {s15}
 80122c4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80122f8 <__kernel_rem_pio2f+0x304>
 80122c8:	46b1      	mov	r9, r6
 80122ca:	455c      	cmp	r4, fp
 80122cc:	dd04      	ble.n	80122d8 <__kernel_rem_pio2f+0x2e4>
 80122ce:	ece0 7a01 	vstmia	r0!, {s15}
 80122d2:	f10c 0c01 	add.w	ip, ip, #1
 80122d6:	e7e1      	b.n	801229c <__kernel_rem_pio2f+0x2a8>
 80122d8:	ecfe 6a01 	vldmia	lr!, {s13}
 80122dc:	ed39 7a01 	vldmdb	r9!, {s14}
 80122e0:	3401      	adds	r4, #1
 80122e2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80122e6:	e7f0      	b.n	80122ca <__kernel_rem_pio2f+0x2d6>
 80122e8:	0801805c 	.word	0x0801805c
 80122ec:	08018030 	.word	0x08018030
 80122f0:	43800000 	.word	0x43800000
 80122f4:	3b800000 	.word	0x3b800000
 80122f8:	00000000 	.word	0x00000000
 80122fc:	9b02      	ldr	r3, [sp, #8]
 80122fe:	eeb0 0a48 	vmov.f32	s0, s16
 8012302:	eba3 0008 	sub.w	r0, r3, r8
 8012306:	f7ff fe0f 	bl	8011f28 <scalbnf>
 801230a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80122f0 <__kernel_rem_pio2f+0x2fc>
 801230e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8012312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012316:	db19      	blt.n	801234c <__kernel_rem_pio2f+0x358>
 8012318:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80122f4 <__kernel_rem_pio2f+0x300>
 801231c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012320:	aa08      	add	r2, sp, #32
 8012322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012326:	3508      	adds	r5, #8
 8012328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801232c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012334:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012338:	ee10 3a10 	vmov	r3, s0
 801233c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012340:	ee17 3a90 	vmov	r3, s15
 8012344:	3401      	adds	r4, #1
 8012346:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801234a:	e74c      	b.n	80121e6 <__kernel_rem_pio2f+0x1f2>
 801234c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012350:	aa08      	add	r2, sp, #32
 8012352:	ee10 3a10 	vmov	r3, s0
 8012356:	e7f6      	b.n	8012346 <__kernel_rem_pio2f+0x352>
 8012358:	a808      	add	r0, sp, #32
 801235a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801235e:	9001      	str	r0, [sp, #4]
 8012360:	ee07 0a90 	vmov	s15, r0
 8012364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012368:	3b01      	subs	r3, #1
 801236a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801236e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012372:	ed62 7a01 	vstmdb	r2!, {s15}
 8012376:	e743      	b.n	8012200 <__kernel_rem_pio2f+0x20c>
 8012378:	ecfc 6a01 	vldmia	ip!, {s13}
 801237c:	ecb5 7a01 	vldmia	r5!, {s14}
 8012380:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012384:	3001      	adds	r0, #1
 8012386:	4550      	cmp	r0, sl
 8012388:	dc01      	bgt.n	801238e <__kernel_rem_pio2f+0x39a>
 801238a:	4282      	cmp	r2, r0
 801238c:	daf4      	bge.n	8012378 <__kernel_rem_pio2f+0x384>
 801238e:	a858      	add	r0, sp, #352	@ 0x160
 8012390:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8012394:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8012398:	3b01      	subs	r3, #1
 801239a:	e735      	b.n	8012208 <__kernel_rem_pio2f+0x214>
 801239c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801239e:	2b02      	cmp	r3, #2
 80123a0:	dc09      	bgt.n	80123b6 <__kernel_rem_pio2f+0x3c2>
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	dc2b      	bgt.n	80123fe <__kernel_rem_pio2f+0x40a>
 80123a6:	d044      	beq.n	8012432 <__kernel_rem_pio2f+0x43e>
 80123a8:	f009 0007 	and.w	r0, r9, #7
 80123ac:	b059      	add	sp, #356	@ 0x164
 80123ae:	ecbd 8b04 	vpop	{d8-d9}
 80123b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80123b8:	2b03      	cmp	r3, #3
 80123ba:	d1f5      	bne.n	80123a8 <__kernel_rem_pio2f+0x3b4>
 80123bc:	aa30      	add	r2, sp, #192	@ 0xc0
 80123be:	1f0b      	subs	r3, r1, #4
 80123c0:	4413      	add	r3, r2
 80123c2:	461a      	mov	r2, r3
 80123c4:	4620      	mov	r0, r4
 80123c6:	2800      	cmp	r0, #0
 80123c8:	f1a2 0204 	sub.w	r2, r2, #4
 80123cc:	dc52      	bgt.n	8012474 <__kernel_rem_pio2f+0x480>
 80123ce:	4622      	mov	r2, r4
 80123d0:	2a01      	cmp	r2, #1
 80123d2:	f1a3 0304 	sub.w	r3, r3, #4
 80123d6:	dc5d      	bgt.n	8012494 <__kernel_rem_pio2f+0x4a0>
 80123d8:	ab30      	add	r3, sp, #192	@ 0xc0
 80123da:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80122f8 <__kernel_rem_pio2f+0x304>
 80123de:	440b      	add	r3, r1
 80123e0:	2c01      	cmp	r4, #1
 80123e2:	dc67      	bgt.n	80124b4 <__kernel_rem_pio2f+0x4c0>
 80123e4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80123e8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80123ec:	2e00      	cmp	r6, #0
 80123ee:	d167      	bne.n	80124c0 <__kernel_rem_pio2f+0x4cc>
 80123f0:	edc7 6a00 	vstr	s13, [r7]
 80123f4:	ed87 7a01 	vstr	s14, [r7, #4]
 80123f8:	edc7 7a02 	vstr	s15, [r7, #8]
 80123fc:	e7d4      	b.n	80123a8 <__kernel_rem_pio2f+0x3b4>
 80123fe:	ab30      	add	r3, sp, #192	@ 0xc0
 8012400:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80122f8 <__kernel_rem_pio2f+0x304>
 8012404:	440b      	add	r3, r1
 8012406:	4622      	mov	r2, r4
 8012408:	2a00      	cmp	r2, #0
 801240a:	da24      	bge.n	8012456 <__kernel_rem_pio2f+0x462>
 801240c:	b34e      	cbz	r6, 8012462 <__kernel_rem_pio2f+0x46e>
 801240e:	eef1 7a47 	vneg.f32	s15, s14
 8012412:	edc7 7a00 	vstr	s15, [r7]
 8012416:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801241a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801241e:	aa31      	add	r2, sp, #196	@ 0xc4
 8012420:	2301      	movs	r3, #1
 8012422:	429c      	cmp	r4, r3
 8012424:	da20      	bge.n	8012468 <__kernel_rem_pio2f+0x474>
 8012426:	b10e      	cbz	r6, 801242c <__kernel_rem_pio2f+0x438>
 8012428:	eef1 7a67 	vneg.f32	s15, s15
 801242c:	edc7 7a01 	vstr	s15, [r7, #4]
 8012430:	e7ba      	b.n	80123a8 <__kernel_rem_pio2f+0x3b4>
 8012432:	ab30      	add	r3, sp, #192	@ 0xc0
 8012434:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80122f8 <__kernel_rem_pio2f+0x304>
 8012438:	440b      	add	r3, r1
 801243a:	2c00      	cmp	r4, #0
 801243c:	da05      	bge.n	801244a <__kernel_rem_pio2f+0x456>
 801243e:	b10e      	cbz	r6, 8012444 <__kernel_rem_pio2f+0x450>
 8012440:	eef1 7a67 	vneg.f32	s15, s15
 8012444:	edc7 7a00 	vstr	s15, [r7]
 8012448:	e7ae      	b.n	80123a8 <__kernel_rem_pio2f+0x3b4>
 801244a:	ed33 7a01 	vldmdb	r3!, {s14}
 801244e:	3c01      	subs	r4, #1
 8012450:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012454:	e7f1      	b.n	801243a <__kernel_rem_pio2f+0x446>
 8012456:	ed73 7a01 	vldmdb	r3!, {s15}
 801245a:	3a01      	subs	r2, #1
 801245c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012460:	e7d2      	b.n	8012408 <__kernel_rem_pio2f+0x414>
 8012462:	eef0 7a47 	vmov.f32	s15, s14
 8012466:	e7d4      	b.n	8012412 <__kernel_rem_pio2f+0x41e>
 8012468:	ecb2 7a01 	vldmia	r2!, {s14}
 801246c:	3301      	adds	r3, #1
 801246e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012472:	e7d6      	b.n	8012422 <__kernel_rem_pio2f+0x42e>
 8012474:	edd2 7a00 	vldr	s15, [r2]
 8012478:	edd2 6a01 	vldr	s13, [r2, #4]
 801247c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012480:	3801      	subs	r0, #1
 8012482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012486:	ed82 7a00 	vstr	s14, [r2]
 801248a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801248e:	edc2 7a01 	vstr	s15, [r2, #4]
 8012492:	e798      	b.n	80123c6 <__kernel_rem_pio2f+0x3d2>
 8012494:	edd3 7a00 	vldr	s15, [r3]
 8012498:	edd3 6a01 	vldr	s13, [r3, #4]
 801249c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80124a0:	3a01      	subs	r2, #1
 80124a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80124a6:	ed83 7a00 	vstr	s14, [r3]
 80124aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80124ae:	edc3 7a01 	vstr	s15, [r3, #4]
 80124b2:	e78d      	b.n	80123d0 <__kernel_rem_pio2f+0x3dc>
 80124b4:	ed33 7a01 	vldmdb	r3!, {s14}
 80124b8:	3c01      	subs	r4, #1
 80124ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80124be:	e78f      	b.n	80123e0 <__kernel_rem_pio2f+0x3ec>
 80124c0:	eef1 6a66 	vneg.f32	s13, s13
 80124c4:	eeb1 7a47 	vneg.f32	s14, s14
 80124c8:	edc7 6a00 	vstr	s13, [r7]
 80124cc:	ed87 7a01 	vstr	s14, [r7, #4]
 80124d0:	eef1 7a67 	vneg.f32	s15, s15
 80124d4:	e790      	b.n	80123f8 <__kernel_rem_pio2f+0x404>
 80124d6:	bf00      	nop

080124d8 <_init>:
 80124d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124da:	bf00      	nop
 80124dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124de:	bc08      	pop	{r3}
 80124e0:	469e      	mov	lr, r3
 80124e2:	4770      	bx	lr

080124e4 <_fini>:
 80124e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124e6:	bf00      	nop
 80124e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124ea:	bc08      	pop	{r3}
 80124ec:	469e      	mov	lr, r3
 80124ee:	4770      	bx	lr
