
level2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000754c  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08007688  08007688  00008688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007900  08007900  00008900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007908  08007908  00008908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800790c  0800790c  0000890c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000024  20000008  08007910  00009008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  2000002c  08007934  0000902c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000064  08007969  00009064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  20000078  0800797a  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  0800797a  00009550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000a000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000a000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800797a  000091e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   000234a3  00000000  00000000  00009a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000051f0  00000000  00000000  0002cf3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000022a8  00000000  00000000  00032130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001a46  00000000  00000000  000343d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029ee3  00000000  00000000  00035e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00024207  00000000  00000000  0005fd01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f0ba8  00000000  00000000  00083f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00174ab0  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00008f2c  00000000  00000000  00174af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000046  00000000  00000000  0017da20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000078 	.word	0x20000078
 8000158:	00000000 	.word	0x00000000
 800015c:	08007670 	.word	0x08007670

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000007c 	.word	0x2000007c
 8000178:	08007670 	.word	0x08007670

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000192:	4b0b      	ldr	r3, [pc, #44]	@ (80001c0 <APPD_EnableCPU2+0x34>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	c403      	stmia	r4!, {r0, r1}
 80001a2:	8022      	strh	r2, [r4, #0]
 80001a4:	3402      	adds	r4, #2
 80001a6:	0c13      	lsrs	r3, r2, #16
 80001a8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001aa:	f005 fee9 	bl	8005f80 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f005 f97a 	bl	80054aa <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001b6:	bf00      	nop
}
 80001b8:	3720      	adds	r7, #32
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	08007688 	.word	0x08007688

080001c4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001cc:	4b07      	ldr	r3, [pc, #28]	@ (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80001d2:	f023 0207 	bic.w	r2, r3, #7
 80001d6:	4905      	ldr	r1, [pc, #20]	@ (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4313      	orrs	r3, r2
 80001dc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	58000400 	.word	0x58000400

080001f0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80001f8:	4b06      	ldr	r3, [pc, #24]	@ (8000214 <LL_EXTI_EnableIT_32_63+0x24>)
 80001fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80001fe:	4905      	ldr	r1, [pc, #20]	@ (8000214 <LL_EXTI_EnableIT_32_63+0x24>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4313      	orrs	r3, r2
 8000204:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	58000800 	.word	0x58000800

08000218 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000224:	4a0a      	ldr	r2, [pc, #40]	@ (8000250 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000226:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800022a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800022e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000232:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	021b      	lsls	r3, r3, #8
 800023a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800023e:	4313      	orrs	r3, r2
 8000240:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	cafecafe 	.word	0xcafecafe

08000254 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800025c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000266:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4313      	orrs	r3, r2
 800026e:	608b      	str	r3, [r1, #8]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000280:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <LL_DBGMCU_GetDeviceID+0x18>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000288:	4618      	mov	r0, r3
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	e0042000 	.word	0xe0042000

08000298 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800029c:	4b04      	ldr	r3, [pc, #16]	@ (80002b0 <LL_DBGMCU_GetRevisionID+0x18>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	0c1b      	lsrs	r3, r3, #16
 80002a2:	b29b      	uxth	r3, r3
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e0042000 	.word	0xe0042000

080002b4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	22ff      	movs	r2, #255	@ 0xff
 80002c0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80002c2:	bf00      	nop
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80002ce:	b480      	push	{r7}
 80002d0:	b083      	sub	sp, #12
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	22ca      	movs	r2, #202	@ 0xca
 80002da:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2253      	movs	r2, #83	@ 0x53
 80002e0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr

080002ee <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80002ee:	b480      	push	{r7}
 80002f0:	b083      	sub	sp, #12
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
 80002f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	f023 0207 	bic.w	r2, r3, #7
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	431a      	orrs	r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	609a      	str	r2, [r3, #8]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000318:	4b04      	ldr	r3, [pc, #16]	@ (800032c <MX_APPE_Config+0x18>)
 800031a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800031e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000320:	f000 f824 	bl	800036c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000324:	f000 f829 	bl	800037a <Config_HSE>

  return;
 8000328:	bf00      	nop
}
 800032a:	bd80      	pop	{r7, pc}
 800032c:	58004000 	.word	0x58004000

08000330 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000334:	f000 f835 	bl	80003a2 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000338:	f000 f84e 	bl	80003d8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800033c:	4903      	ldr	r1, [pc, #12]	@ (800034c <MX_APPE_Init+0x1c>)
 800033e:	2000      	movs	r0, #0
 8000340:	f000 fd76 	bl	8000e30 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000344:	f000 f856 	bl	80003f4 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000348:	bf00      	nop
}
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000170 	.word	0x20000170

08000350 <Init_Smps>:

void Init_Smps(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000354:	bf00      	nop
}
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr

0800035e <Init_Exti>:

void Init_Exti(void)
{
 800035e:	b580      	push	{r7, lr}
 8000360:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000362:	2050      	movs	r0, #80	@ 0x50
 8000364:	f7ff ff44 	bl	80001f0 <LL_EXTI_EnableIT_32_63>

  return;
 8000368:	bf00      	nop
}
 800036a:	bd80      	pop	{r7, pc}

0800036c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000370:	bf00      	nop
}
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	b082      	sub	sp, #8
 800037e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000380:	2000      	movs	r0, #0
 8000382:	f005 fe89 	bl	8006098 <OTP_Read>
 8000386:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d005      	beq.n	800039a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	799b      	ldrb	r3, [r3, #6]
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff40 	bl	8000218 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000398:	bf00      	nop
 800039a:	bf00      	nop
}
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}

080003a2 <System_Init>:

static void System_Init(void)
{
 80003a2:	b580      	push	{r7, lr}
 80003a4:	af00      	add	r7, sp, #0
  Init_Smps();
 80003a6:	f7ff ffd3 	bl	8000350 <Init_Smps>

  Init_Exti();
 80003aa:	f7ff ffd8 	bl	800035e <Init_Exti>

  Init_Rtc();
 80003ae:	f000 f803 	bl	80003b8 <Init_Rtc>

  return;
 80003b2:	bf00      	nop
}
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <Init_Rtc>:

static void Init_Rtc(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80003bc:	4805      	ldr	r0, [pc, #20]	@ (80003d4 <Init_Rtc+0x1c>)
 80003be:	f7ff ff86 	bl	80002ce <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80003c2:	2100      	movs	r1, #0
 80003c4:	4803      	ldr	r0, [pc, #12]	@ (80003d4 <Init_Rtc+0x1c>)
 80003c6:	f7ff ff92 	bl	80002ee <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80003ca:	4802      	ldr	r0, [pc, #8]	@ (80003d4 <Init_Rtc+0x1c>)
 80003cc:	f7ff ff72 	bl	80002b4 <LL_RTC_EnableWriteProtection>

  return;
 80003d0:	bf00      	nop
}
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40002800 	.word	0x40002800

080003d8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80003dc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80003e0:	f7ff ff38 	bl	8000254 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80003e4:	f006 fe8e 	bl	8007104 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80003e8:	2004      	movs	r0, #4
 80003ea:	f7ff feeb 	bl	80001c4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80003ee:	bf00      	nop
}
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80003fa:	f005 fc0b 	bl	8005c14 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80003fe:	4a11      	ldr	r2, [pc, #68]	@ (8000444 <appe_Tl_Init+0x50>)
 8000400:	2100      	movs	r1, #0
 8000402:	2004      	movs	r0, #4
 8000404:	f006 ffbc 	bl	8007380 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000408:	4b0f      	ldr	r3, [pc, #60]	@ (8000448 <appe_Tl_Init+0x54>)
 800040a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800040c:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <appe_Tl_Init+0x58>)
 800040e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000410:	463b      	mov	r3, r7
 8000412:	4619      	mov	r1, r3
 8000414:	480e      	ldr	r0, [pc, #56]	@ (8000450 <appe_Tl_Init+0x5c>)
 8000416:	f005 fabf 	bl	8005998 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800041a:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <appe_Tl_Init+0x60>)
 800041c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800041e:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <appe_Tl_Init+0x64>)
 8000420:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000422:	4b0e      	ldr	r3, [pc, #56]	@ (800045c <appe_Tl_Init+0x68>)
 8000424:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000426:	f240 533c 	movw	r3, #1340	@ 0x53c
 800042a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800042c:	f107 0308 	add.w	r3, r7, #8
 8000430:	4618      	mov	r0, r3
 8000432:	f005 fd31 	bl	8005e98 <TL_MM_Init>

  TL_Enable();
 8000436:	f005 fbe7 	bl	8005c08 <TL_Enable>

  return;
 800043a:	bf00      	nop
}
 800043c:	3720      	adds	r7, #32
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	080059d1 	.word	0x080059d1
 8000448:	20030734 	.word	0x20030734
 800044c:	08000461 	.word	0x08000461
 8000450:	08000479 	.word	0x08000479
 8000454:	2003094c 	.word	0x2003094c
 8000458:	20030840 	.word	0x20030840
 800045c:	200301f8 	.word	0x200301f8

08000460 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800046a:	bf00      	nop
}
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
	...

08000478 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	330b      	adds	r3, #11
 8000486:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	b29b      	uxth	r3, r3
 800048e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000492:	2b07      	cmp	r3, #7
 8000494:	d81f      	bhi.n	80004d6 <APPE_SysUserEvtRx+0x5e>
 8000496:	a201      	add	r2, pc, #4	@ (adr r2, 800049c <APPE_SysUserEvtRx+0x24>)
 8000498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800049c:	080004bd 	.word	0x080004bd
 80004a0:	080004cf 	.word	0x080004cf
 80004a4:	080004d7 	.word	0x080004d7
 80004a8:	080004d7 	.word	0x080004d7
 80004ac:	080004d7 	.word	0x080004d7
 80004b0:	080004d7 	.word	0x080004d7
 80004b4:	080004d7 	.word	0x080004d7
 80004b8:	080004d7 	.word	0x080004d7
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80004bc:	f107 030c 	add.w	r3, r7, #12
 80004c0:	4618      	mov	r0, r3
 80004c2:	f005 f81f 	bl	8005504 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	f000 f81b 	bl	8000502 <APPE_SysEvtReadyProcessing>
    break;
 80004cc:	e004      	b.n	80004d8 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f000 f806 	bl	80004e0 <APPE_SysEvtError>
    break;
 80004d4:	e000      	b.n	80004d8 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80004d6:	bf00      	nop
  }

  return;
 80004d8:	bf00      	nop
}
 80004da:	3720      	adds	r7, #32
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	330b      	adds	r3, #11
 80004ee:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	3302      	adds	r3, #2
 80004f4:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80004f6:	bf00      	nop
}
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b08a      	sub	sp, #40	@ 0x28
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800050a:	f107 0308 	add.w	r3, r7, #8
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000518:	2300      	movs	r3, #0
 800051a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800051c:	2300      	movs	r3, #0
 800051e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	330b      	adds	r3, #11
 8000526:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	3302      	adds	r3, #2
 800052c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800052e:	69bb      	ldr	r3, [r7, #24]
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d11d      	bne.n	8000572 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000536:	f7ff fe29 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800053a:	230f      	movs	r3, #15
 800053c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800053e:	237f      	movs	r3, #127	@ 0x7f
 8000540:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000542:	f7ff fea9 	bl	8000298 <LL_DBGMCU_GetRevisionID>
 8000546:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800054a:	b29b      	uxth	r3, r3
 800054c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800054e:	f7ff fe95 	bl	800027c <LL_DBGMCU_GetDeviceID>
 8000552:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000554:	6a3b      	ldr	r3, [r7, #32]
 8000556:	b29b      	uxth	r3, r3
 8000558:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800055a:	f107 0308 	add.w	r3, r7, #8
 800055e:	4618      	mov	r0, r3
 8000560:	f004 ffba 	bl	80054d8 <SHCI_C2_Config>

    APP_BLE_Init();
 8000564:	f005 fea2 	bl	80062ac <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000568:	2100      	movs	r1, #0
 800056a:	2001      	movs	r0, #1
 800056c:	f006 fddc 	bl	8007128 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000570:	e007      	b.n	8000582 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000572:	69bb      	ldr	r3, [r7, #24]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d103      	bne.n	8000582 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
  return;
 8000580:	bf00      	nop
 8000582:	bf00      	nop
}
 8000584:	3728      	adds	r7, #40	@ 0x28
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800058e:	f04f 30ff 	mov.w	r0, #4294967295
 8000592:	f006 fdf9 	bl	8007188 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}

0800059a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800059e:	bf00      	nop
}
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80005b2:	f04f 30ff 	mov.w	r0, #4294967295
 80005b6:	f006 fde7 	bl	8007188 <UTIL_SEQ_Run>
  return;
 80005ba:	bf00      	nop
}
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80005ca:	2100      	movs	r1, #0
 80005cc:	2004      	movs	r0, #4
 80005ce:	f006 fef9 	bl	80073c4 <UTIL_SEQ_SetTask>
  return;
 80005d2:	bf00      	nop
}
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80005e2:	2002      	movs	r0, #2
 80005e4:	f006 ff5a 	bl	800749c <UTIL_SEQ_SetEvt>
  return;
 80005e8:	bf00      	nop
}
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80005f8:	2002      	movs	r0, #2
 80005fa:	f006 ff6f 	bl	80074dc <UTIL_SEQ_WaitEvt>
  return;
 80005fe:	bf00      	nop
}
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <LL_EXTI_EnableIT_0_31>:
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <LL_EXTI_EnableIT_0_31+0x24>)
 8000612:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000616:	4905      	ldr	r1, [pc, #20]	@ (800062c <LL_EXTI_EnableIT_0_31+0x24>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4313      	orrs	r3, r2
 800061c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	58000800 	.word	0x58000800

08000630 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000638:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4904      	ldr	r1, [pc, #16]	@ (8000650 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4313      	orrs	r3, r2
 8000642:	600b      	str	r3, [r1, #0]

}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	58000800 	.word	0x58000800

08000654 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800065a:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <ReadRtcSsrValue+0x3c>)
 800065c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800065e:	b29b      	uxth	r3, r3
 8000660:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000662:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <ReadRtcSsrValue+0x3c>)
 8000664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000666:	b29b      	uxth	r3, r3
 8000668:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800066a:	e005      	b.n	8000678 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000670:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <ReadRtcSsrValue+0x3c>)
 8000672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000674:	b29b      	uxth	r3, r3
 8000676:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	429a      	cmp	r2, r3
 800067e:	d1f5      	bne.n	800066c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000680:	683b      	ldr	r3, [r7, #0]
}
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40002800 	.word	0x40002800

08000694 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	460a      	mov	r2, r1
 800069e:	71fb      	strb	r3, [r7, #7]
 80006a0:	4613      	mov	r3, r2
 80006a2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80006a4:	79ba      	ldrb	r2, [r7, #6]
 80006a6:	491d      	ldr	r1, [pc, #116]	@ (800071c <LinkTimerAfter+0x88>)
 80006a8:	4613      	mov	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4413      	add	r3, r2
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	440b      	add	r3, r1
 80006b2:	3315      	adds	r3, #21
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	2b06      	cmp	r3, #6
 80006bc:	d009      	beq.n	80006d2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80006be:	7bfa      	ldrb	r2, [r7, #15]
 80006c0:	4916      	ldr	r1, [pc, #88]	@ (800071c <LinkTimerAfter+0x88>)
 80006c2:	4613      	mov	r3, r2
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	4413      	add	r3, r2
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	440b      	add	r3, r1
 80006cc:	3314      	adds	r3, #20
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80006d2:	79fa      	ldrb	r2, [r7, #7]
 80006d4:	4911      	ldr	r1, [pc, #68]	@ (800071c <LinkTimerAfter+0x88>)
 80006d6:	4613      	mov	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	4413      	add	r3, r2
 80006dc:	00db      	lsls	r3, r3, #3
 80006de:	440b      	add	r3, r1
 80006e0:	3315      	adds	r3, #21
 80006e2:	7bfa      	ldrb	r2, [r7, #15]
 80006e4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80006e6:	79fa      	ldrb	r2, [r7, #7]
 80006e8:	490c      	ldr	r1, [pc, #48]	@ (800071c <LinkTimerAfter+0x88>)
 80006ea:	4613      	mov	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	4413      	add	r3, r2
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	440b      	add	r3, r1
 80006f4:	3314      	adds	r3, #20
 80006f6:	79ba      	ldrb	r2, [r7, #6]
 80006f8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80006fa:	79ba      	ldrb	r2, [r7, #6]
 80006fc:	4907      	ldr	r1, [pc, #28]	@ (800071c <LinkTimerAfter+0x88>)
 80006fe:	4613      	mov	r3, r2
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4413      	add	r3, r2
 8000704:	00db      	lsls	r3, r3, #3
 8000706:	440b      	add	r3, r1
 8000708:	3315      	adds	r3, #21
 800070a:	79fa      	ldrb	r2, [r7, #7]
 800070c:	701a      	strb	r2, [r3, #0]

  return;
 800070e:	bf00      	nop
}
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	20000094 	.word	0x20000094

08000720 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000730:	4b29      	ldr	r3, [pc, #164]	@ (80007d8 <LinkTimerBefore+0xb8>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	79ba      	ldrb	r2, [r7, #6]
 8000738:	429a      	cmp	r2, r3
 800073a:	d032      	beq.n	80007a2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800073c:	79ba      	ldrb	r2, [r7, #6]
 800073e:	4927      	ldr	r1, [pc, #156]	@ (80007dc <LinkTimerBefore+0xbc>)
 8000740:	4613      	mov	r3, r2
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	4413      	add	r3, r2
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	440b      	add	r3, r1
 800074a:	3314      	adds	r3, #20
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000750:	7bfa      	ldrb	r2, [r7, #15]
 8000752:	4922      	ldr	r1, [pc, #136]	@ (80007dc <LinkTimerBefore+0xbc>)
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	440b      	add	r3, r1
 800075e:	3315      	adds	r3, #21
 8000760:	79fa      	ldrb	r2, [r7, #7]
 8000762:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000764:	79fa      	ldrb	r2, [r7, #7]
 8000766:	491d      	ldr	r1, [pc, #116]	@ (80007dc <LinkTimerBefore+0xbc>)
 8000768:	4613      	mov	r3, r2
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	4413      	add	r3, r2
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	440b      	add	r3, r1
 8000772:	3315      	adds	r3, #21
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000778:	79fa      	ldrb	r2, [r7, #7]
 800077a:	4918      	ldr	r1, [pc, #96]	@ (80007dc <LinkTimerBefore+0xbc>)
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	440b      	add	r3, r1
 8000786:	3314      	adds	r3, #20
 8000788:	7bfa      	ldrb	r2, [r7, #15]
 800078a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800078c:	79ba      	ldrb	r2, [r7, #6]
 800078e:	4913      	ldr	r1, [pc, #76]	@ (80007dc <LinkTimerBefore+0xbc>)
 8000790:	4613      	mov	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4413      	add	r3, r2
 8000796:	00db      	lsls	r3, r3, #3
 8000798:	440b      	add	r3, r1
 800079a:	3314      	adds	r3, #20
 800079c:	79fa      	ldrb	r2, [r7, #7]
 800079e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80007a0:	e014      	b.n	80007cc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80007a2:	79fa      	ldrb	r2, [r7, #7]
 80007a4:	490d      	ldr	r1, [pc, #52]	@ (80007dc <LinkTimerBefore+0xbc>)
 80007a6:	4613      	mov	r3, r2
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	4413      	add	r3, r2
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	440b      	add	r3, r1
 80007b0:	3315      	adds	r3, #21
 80007b2:	79ba      	ldrb	r2, [r7, #6]
 80007b4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80007b6:	79ba      	ldrb	r2, [r7, #6]
 80007b8:	4908      	ldr	r1, [pc, #32]	@ (80007dc <LinkTimerBefore+0xbc>)
 80007ba:	4613      	mov	r3, r2
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	4413      	add	r3, r2
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	440b      	add	r3, r1
 80007c4:	3314      	adds	r3, #20
 80007c6:	79fa      	ldrb	r2, [r7, #7]
 80007c8:	701a      	strb	r2, [r3, #0]
  return;
 80007ca:	bf00      	nop
}
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000124 	.word	0x20000124
 80007dc:	20000094 	.word	0x20000094

080007e0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80007ea:	4b4e      	ldr	r3, [pc, #312]	@ (8000924 <linkTimer+0x144>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b06      	cmp	r3, #6
 80007f2:	d118      	bne.n	8000826 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80007f4:	4b4b      	ldr	r3, [pc, #300]	@ (8000924 <linkTimer+0x144>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b4b      	ldr	r3, [pc, #300]	@ (8000928 <linkTimer+0x148>)
 80007fc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80007fe:	4a49      	ldr	r2, [pc, #292]	@ (8000924 <linkTimer+0x144>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000804:	79fa      	ldrb	r2, [r7, #7]
 8000806:	4949      	ldr	r1, [pc, #292]	@ (800092c <linkTimer+0x14c>)
 8000808:	4613      	mov	r3, r2
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	4413      	add	r3, r2
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	440b      	add	r3, r1
 8000812:	3315      	adds	r3, #21
 8000814:	2206      	movs	r2, #6
 8000816:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000818:	4b45      	ldr	r3, [pc, #276]	@ (8000930 <linkTimer+0x150>)
 800081a:	f04f 32ff 	mov.w	r2, #4294967295
 800081e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	81fb      	strh	r3, [r7, #14]
 8000824:	e078      	b.n	8000918 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000826:	f000 f909 	bl	8000a3c <ReturnTimeElapsed>
 800082a:	4603      	mov	r3, r0
 800082c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	493e      	ldr	r1, [pc, #248]	@ (800092c <linkTimer+0x14c>)
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	3308      	adds	r3, #8
 800083e:	6819      	ldr	r1, [r3, #0]
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	79fa      	ldrb	r2, [r7, #7]
 8000844:	4419      	add	r1, r3
 8000846:	4839      	ldr	r0, [pc, #228]	@ (800092c <linkTimer+0x14c>)
 8000848:	4613      	mov	r3, r2
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	4413      	add	r3, r2
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	4403      	add	r3, r0
 8000852:	3308      	adds	r3, #8
 8000854:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000856:	79fa      	ldrb	r2, [r7, #7]
 8000858:	4934      	ldr	r1, [pc, #208]	@ (800092c <linkTimer+0x14c>)
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	3308      	adds	r3, #8
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800086a:	4b2e      	ldr	r3, [pc, #184]	@ (8000924 <linkTimer+0x144>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	4619      	mov	r1, r3
 8000872:	4a2e      	ldr	r2, [pc, #184]	@ (800092c <linkTimer+0x14c>)
 8000874:	460b      	mov	r3, r1
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	440b      	add	r3, r1
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	4413      	add	r3, r2
 800087e:	3308      	adds	r3, #8
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	429a      	cmp	r2, r3
 8000886:	d337      	bcc.n	80008f8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000888:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <linkTimer+0x144>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800088e:	7b7a      	ldrb	r2, [r7, #13]
 8000890:	4926      	ldr	r1, [pc, #152]	@ (800092c <linkTimer+0x14c>)
 8000892:	4613      	mov	r3, r2
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	4413      	add	r3, r2
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	440b      	add	r3, r1
 800089c:	3315      	adds	r3, #21
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80008a2:	e013      	b.n	80008cc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80008a4:	7b7a      	ldrb	r2, [r7, #13]
 80008a6:	4921      	ldr	r1, [pc, #132]	@ (800092c <linkTimer+0x14c>)
 80008a8:	4613      	mov	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	440b      	add	r3, r1
 80008b2:	3315      	adds	r3, #21
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80008b8:	7b7a      	ldrb	r2, [r7, #13]
 80008ba:	491c      	ldr	r1, [pc, #112]	@ (800092c <linkTimer+0x14c>)
 80008bc:	4613      	mov	r3, r2
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	4413      	add	r3, r2
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	440b      	add	r3, r1
 80008c6:	3315      	adds	r3, #21
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80008cc:	7b3b      	ldrb	r3, [r7, #12]
 80008ce:	2b06      	cmp	r3, #6
 80008d0:	d00b      	beq.n	80008ea <linkTimer+0x10a>
 80008d2:	7b3a      	ldrb	r2, [r7, #12]
 80008d4:	4915      	ldr	r1, [pc, #84]	@ (800092c <linkTimer+0x14c>)
 80008d6:	4613      	mov	r3, r2
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	4413      	add	r3, r2
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	440b      	add	r3, r1
 80008e0:	3308      	adds	r3, #8
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	68ba      	ldr	r2, [r7, #8]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d2dc      	bcs.n	80008a4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80008ea:	7b7a      	ldrb	r2, [r7, #13]
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fecf 	bl	8000694 <LinkTimerAfter>
 80008f6:	e00f      	b.n	8000918 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80008f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <linkTimer+0x144>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff ff0c 	bl	8000720 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <linkTimer+0x144>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <linkTimer+0x148>)
 8000910:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000912:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <linkTimer+0x144>)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000918:	89fb      	ldrh	r3, [r7, #14]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000124 	.word	0x20000124
 8000928:	20000125 	.word	0x20000125
 800092c:	20000094 	.word	0x20000094
 8000930:	20000128 	.word	0x20000128

08000934 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	460a      	mov	r2, r1
 800093e:	71fb      	strb	r3, [r7, #7]
 8000940:	4613      	mov	r3, r2
 8000942:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000944:	4b39      	ldr	r3, [pc, #228]	@ (8000a2c <UnlinkTimer+0xf8>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	429a      	cmp	r2, r3
 800094e:	d111      	bne.n	8000974 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000950:	4b36      	ldr	r3, [pc, #216]	@ (8000a2c <UnlinkTimer+0xf8>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b36      	ldr	r3, [pc, #216]	@ (8000a30 <UnlinkTimer+0xfc>)
 8000958:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800095a:	79fa      	ldrb	r2, [r7, #7]
 800095c:	4935      	ldr	r1, [pc, #212]	@ (8000a34 <UnlinkTimer+0x100>)
 800095e:	4613      	mov	r3, r2
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	4413      	add	r3, r2
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	440b      	add	r3, r1
 8000968:	3315      	adds	r3, #21
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a2c <UnlinkTimer+0xf8>)
 8000970:	701a      	strb	r2, [r3, #0]
 8000972:	e03e      	b.n	80009f2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000974:	79fa      	ldrb	r2, [r7, #7]
 8000976:	492f      	ldr	r1, [pc, #188]	@ (8000a34 <UnlinkTimer+0x100>)
 8000978:	4613      	mov	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4413      	add	r3, r2
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	440b      	add	r3, r1
 8000982:	3314      	adds	r3, #20
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000988:	79fa      	ldrb	r2, [r7, #7]
 800098a:	492a      	ldr	r1, [pc, #168]	@ (8000a34 <UnlinkTimer+0x100>)
 800098c:	4613      	mov	r3, r2
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	4413      	add	r3, r2
 8000992:	00db      	lsls	r3, r3, #3
 8000994:	440b      	add	r3, r1
 8000996:	3315      	adds	r3, #21
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800099c:	79f9      	ldrb	r1, [r7, #7]
 800099e:	7bfa      	ldrb	r2, [r7, #15]
 80009a0:	4824      	ldr	r0, [pc, #144]	@ (8000a34 <UnlinkTimer+0x100>)
 80009a2:	460b      	mov	r3, r1
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	440b      	add	r3, r1
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	4403      	add	r3, r0
 80009ac:	3315      	adds	r3, #21
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b2d8      	uxtb	r0, r3
 80009b2:	4920      	ldr	r1, [pc, #128]	@ (8000a34 <UnlinkTimer+0x100>)
 80009b4:	4613      	mov	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	4413      	add	r3, r2
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	440b      	add	r3, r1
 80009be:	3315      	adds	r3, #21
 80009c0:	4602      	mov	r2, r0
 80009c2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009c4:	7bbb      	ldrb	r3, [r7, #14]
 80009c6:	2b06      	cmp	r3, #6
 80009c8:	d013      	beq.n	80009f2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80009ca:	79f9      	ldrb	r1, [r7, #7]
 80009cc:	7bba      	ldrb	r2, [r7, #14]
 80009ce:	4819      	ldr	r0, [pc, #100]	@ (8000a34 <UnlinkTimer+0x100>)
 80009d0:	460b      	mov	r3, r1
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	440b      	add	r3, r1
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	4403      	add	r3, r0
 80009da:	3314      	adds	r3, #20
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b2d8      	uxtb	r0, r3
 80009e0:	4914      	ldr	r1, [pc, #80]	@ (8000a34 <UnlinkTimer+0x100>)
 80009e2:	4613      	mov	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	440b      	add	r3, r1
 80009ec:	3314      	adds	r3, #20
 80009ee:	4602      	mov	r2, r0
 80009f0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80009f2:	79fa      	ldrb	r2, [r7, #7]
 80009f4:	490f      	ldr	r1, [pc, #60]	@ (8000a34 <UnlinkTimer+0x100>)
 80009f6:	4613      	mov	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	4413      	add	r3, r2
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	440b      	add	r3, r1
 8000a00:	330c      	adds	r3, #12
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <UnlinkTimer+0xf8>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b06      	cmp	r3, #6
 8000a0e:	d107      	bne.n	8000a20 <UnlinkTimer+0xec>
 8000a10:	79bb      	ldrb	r3, [r7, #6]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d104      	bne.n	8000a20 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <UnlinkTimer+0x104>)
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000a1e:	bf00      	nop
 8000a20:	bf00      	nop
}
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	20000124 	.word	0x20000124
 8000a30:	20000125 	.word	0x20000125
 8000a34:	20000094 	.word	0x20000094
 8000a38:	20000128 	.word	0x20000128

08000a3c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000a42:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <ReturnTimeElapsed+0x70>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4a:	d026      	beq.n	8000a9a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000a4c:	f7ff fe02 	bl	8000654 <ReadRtcSsrValue>
 8000a50:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000a52:	4b16      	ldr	r3, [pc, #88]	@ (8000aac <ReturnTimeElapsed+0x70>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d805      	bhi.n	8000a68 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000a5c:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <ReturnTimeElapsed+0x70>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	e00a      	b.n	8000a7e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <ReturnTimeElapsed+0x74>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000a74:	4b0d      	ldr	r3, [pc, #52]	@ (8000aac <ReturnTimeElapsed+0x70>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <ReturnTimeElapsed+0x78>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	fb02 f303 	mul.w	r3, r2, r3
 8000a8a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <ReturnTimeElapsed+0x7c>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	40d3      	lsrs	r3, r2
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	e001      	b.n	8000a9e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	b29b      	uxth	r3, r3
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000128 	.word	0x20000128
 8000ab0:	20000130 	.word	0x20000130
 8000ab4:	2000012e 	.word	0x2000012e
 8000ab8:	2000012d 	.word	0x2000012d

08000abc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d108      	bne.n	8000ade <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000acc:	f7ff fdc2 	bl	8000654 <ReadRtcSsrValue>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	4a21      	ldr	r2, [pc, #132]	@ (8000b58 <RestartWakeupCounter+0x9c>)
 8000ad4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	f001 f8a5 	bl	8001c26 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000adc:	e039      	b.n	8000b52 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d803      	bhi.n	8000aec <RestartWakeupCounter+0x30>
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <RestartWakeupCounter+0xa0>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d002      	beq.n	8000af2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000af2:	bf00      	nop
 8000af4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <RestartWakeupCounter+0xa4>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0f8      	beq.n	8000af4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <RestartWakeupCounter+0xa4>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <RestartWakeupCounter+0xa4>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000b12:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b14:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <RestartWakeupCounter+0xa8>)
 8000b16:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000b1a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f001 f890 	bl	8001c42 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <RestartWakeupCounter+0xac>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	0c1b      	lsrs	r3, r3, #16
 8000b28:	041b      	lsls	r3, r3, #16
 8000b2a:	88fa      	ldrh	r2, [r7, #6]
 8000b2c:	490e      	ldr	r1, [pc, #56]	@ (8000b68 <RestartWakeupCounter+0xac>)
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b32:	f7ff fd8f 	bl	8000654 <ReadRtcSsrValue>
 8000b36:	4603      	mov	r3, r0
 8000b38:	4a07      	ldr	r2, [pc, #28]	@ (8000b58 <RestartWakeupCounter+0x9c>)
 8000b3a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000b3c:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <RestartWakeupCounter+0xa4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	689a      	ldr	r2, [r3, #8]
 8000b42:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <RestartWakeupCounter+0xa4>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000b4a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000b4c:	f3af 8000 	nop.w
  return ;
 8000b50:	bf00      	nop
}
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000128 	.word	0x20000128
 8000b5c:	2000012d 	.word	0x2000012d
 8000b60:	20000170 	.word	0x20000170
 8000b64:	58000800 	.word	0x58000800
 8000b68:	40002800 	.word	0x40002800

08000b6c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000b72:	4b45      	ldr	r3, [pc, #276]	@ (8000c88 <RescheduleTimerList+0x11c>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b7e:	d107      	bne.n	8000b90 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000b80:	bf00      	nop
 8000b82:	4b42      	ldr	r3, [pc, #264]	@ (8000c8c <RescheduleTimerList+0x120>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d1f8      	bne.n	8000b82 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000b90:	4b3e      	ldr	r3, [pc, #248]	@ (8000c8c <RescheduleTimerList+0x120>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	4b3d      	ldr	r3, [pc, #244]	@ (8000c8c <RescheduleTimerList+0x120>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000b9e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8000c90 <RescheduleTimerList+0x124>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000ba6:	7bfa      	ldrb	r2, [r7, #15]
 8000ba8:	493a      	ldr	r1, [pc, #232]	@ (8000c94 <RescheduleTimerList+0x128>)
 8000baa:	4613      	mov	r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	4413      	add	r3, r2
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	440b      	add	r3, r1
 8000bb4:	3308      	adds	r3, #8
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000bba:	f7ff ff3f 	bl	8000a3c <ReturnTimeElapsed>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	68ba      	ldr	r2, [r7, #8]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d205      	bcs.n	8000bd6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000bce:	4b32      	ldr	r3, [pc, #200]	@ (8000c98 <RescheduleTimerList+0x12c>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	701a      	strb	r2, [r3, #0]
 8000bd4:	e04d      	b.n	8000c72 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	4a30      	ldr	r2, [pc, #192]	@ (8000c9c <RescheduleTimerList+0x130>)
 8000bda:	8812      	ldrh	r2, [r2, #0]
 8000bdc:	b292      	uxth	r2, r2
 8000bde:	4413      	add	r3, r2
 8000be0:	461a      	mov	r2, r3
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d906      	bls.n	8000bf6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000be8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c9c <RescheduleTimerList+0x130>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000bee:	4b2a      	ldr	r3, [pc, #168]	@ (8000c98 <RescheduleTimerList+0x12c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
 8000bf4:	e03d      	b.n	8000c72 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c00:	4b25      	ldr	r3, [pc, #148]	@ (8000c98 <RescheduleTimerList+0x12c>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c06:	e034      	b.n	8000c72 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c08:	7bfa      	ldrb	r2, [r7, #15]
 8000c0a:	4922      	ldr	r1, [pc, #136]	@ (8000c94 <RescheduleTimerList+0x128>)
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	4413      	add	r3, r2
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	440b      	add	r3, r1
 8000c16:	3308      	adds	r3, #8
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d20a      	bcs.n	8000c36 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000c20:	7bfa      	ldrb	r2, [r7, #15]
 8000c22:	491c      	ldr	r1, [pc, #112]	@ (8000c94 <RescheduleTimerList+0x128>)
 8000c24:	4613      	mov	r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4413      	add	r3, r2
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	440b      	add	r3, r1
 8000c2e:	3308      	adds	r3, #8
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	e013      	b.n	8000c5e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000c36:	7bfa      	ldrb	r2, [r7, #15]
 8000c38:	4916      	ldr	r1, [pc, #88]	@ (8000c94 <RescheduleTimerList+0x128>)
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	440b      	add	r3, r1
 8000c44:	3308      	adds	r3, #8
 8000c46:	6819      	ldr	r1, [r3, #0]
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	7bfa      	ldrb	r2, [r7, #15]
 8000c4c:	1ac9      	subs	r1, r1, r3
 8000c4e:	4811      	ldr	r0, [pc, #68]	@ (8000c94 <RescheduleTimerList+0x128>)
 8000c50:	4613      	mov	r3, r2
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	4413      	add	r3, r2
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	4403      	add	r3, r0
 8000c5a:	3308      	adds	r3, #8
 8000c5c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000c5e:	7bfa      	ldrb	r2, [r7, #15]
 8000c60:	490c      	ldr	r1, [pc, #48]	@ (8000c94 <RescheduleTimerList+0x128>)
 8000c62:	4613      	mov	r3, r2
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	4413      	add	r3, r2
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	440b      	add	r3, r1
 8000c6c:	3315      	adds	r3, #21
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	2b06      	cmp	r3, #6
 8000c76:	d1c7      	bne.n	8000c08 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000c78:	89bb      	ldrh	r3, [r7, #12]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ff1e 	bl	8000abc <RestartWakeupCounter>

  return ;
 8000c80:	bf00      	nop
}
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40002800 	.word	0x40002800
 8000c8c:	20000170 	.word	0x20000170
 8000c90:	20000124 	.word	0x20000124
 8000c94:	20000094 	.word	0x20000094
 8000c98:	2000012c 	.word	0x2000012c
 8000c9c:	20000132 	.word	0x20000132

08000ca0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8000caa:	617b      	str	r3, [r7, #20]
  return(result);
 8000cac:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000cb4:	4b59      	ldr	r3, [pc, #356]	@ (8000e1c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	22ca      	movs	r2, #202	@ 0xca
 8000cba:	625a      	str	r2, [r3, #36]	@ 0x24
 8000cbc:	4b57      	ldr	r3, [pc, #348]	@ (8000e1c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2253      	movs	r2, #83	@ 0x53
 8000cc2:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000cc4:	4b55      	ldr	r3, [pc, #340]	@ (8000e1c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	4b54      	ldr	r3, [pc, #336]	@ (8000e1c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000cd2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000cd4:	4b52      	ldr	r3, [pc, #328]	@ (8000e20 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000cdc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000ce0:	4950      	ldr	r1, [pc, #320]	@ (8000e24 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	4413      	add	r3, r2
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	440b      	add	r3, r1
 8000cec:	330c      	adds	r3, #12
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d16e      	bne.n	8000dd4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000cf6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000cfa:	494a      	ldr	r1, [pc, #296]	@ (8000e24 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	4413      	add	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	440b      	add	r3, r1
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000d0a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d0e:	4945      	ldr	r1, [pc, #276]	@ (8000e24 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	440b      	add	r3, r1
 8000d1a:	3310      	adds	r3, #16
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000d20:	4b41      	ldr	r3, [pc, #260]	@ (8000e28 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d04c      	beq.n	8000dc4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000d2a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d2e:	493d      	ldr	r1, [pc, #244]	@ (8000e24 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d30:	4613      	mov	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4413      	add	r3, r2
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	440b      	add	r3, r1
 8000d3a:	330d      	adds	r3, #13
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d124      	bne.n	8000d8e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000d44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fdf2 	bl	8000934 <UnlinkTimer>
 8000d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d52:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	f383 8810 	msr	PRIMASK, r3
}
 8000d5a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000d5c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d60:	4930      	ldr	r1, [pc, #192]	@ (8000e24 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d62:	4613      	mov	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	4413      	add	r3, r2
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	440b      	add	r3, r1
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f9b8 	bl	80010ec <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000d7c:	4b27      	ldr	r3, [pc, #156]	@ (8000e1c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	22ca      	movs	r2, #202	@ 0xca
 8000d82:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d84:	4b25      	ldr	r3, [pc, #148]	@ (8000e1c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2253      	movs	r2, #83	@ 0x53
 8000d8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d8c:	e012      	b.n	8000db4 <HW_TS_RTC_Wakeup_Handler+0x114>
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f383 8810 	msr	PRIMASK, r3
}
 8000d98:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000d9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f920 	bl	8000fe4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000da4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e1c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	22ca      	movs	r2, #202	@ 0xca
 8000daa:	625a      	str	r2, [r3, #36]	@ 0x24
 8000dac:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2253      	movs	r2, #83	@ 0x53
 8000db2:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000db4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000db8:	69fa      	ldr	r2, [r7, #28]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	69b8      	ldr	r0, [r7, #24]
 8000dbe:	f000 fa1b 	bl	80011f8 <HW_TS_RTC_Int_AppNot>
 8000dc2:	e022      	b.n	8000e0a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8000dc4:	f7ff fed2 	bl	8000b6c <RescheduleTimerList>
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	f383 8810 	msr	PRIMASK, r3
}
 8000dd2:	e01a      	b.n	8000e0a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000dd4:	bf00      	nop
 8000dd6:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0f8      	beq.n	8000dd6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000de4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e1c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000df4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000df6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000df8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e00:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f383 8810 	msr	PRIMASK, r3
}
 8000e08:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8000e0a:	4b04      	ldr	r3, [pc, #16]	@ (8000e1c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	22ff      	movs	r2, #255	@ 0xff
 8000e10:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8000e12:	bf00      	nop
}
 8000e14:	3728      	adds	r7, #40	@ 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000170 	.word	0x20000170
 8000e20:	20000124 	.word	0x20000124
 8000e24:	20000094 	.word	0x20000094
 8000e28:	2000012c 	.word	0x2000012c
 8000e2c:	58000800 	.word	0x58000800

08000e30 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000e3c:	4b5e      	ldr	r3, [pc, #376]	@ (8000fb8 <HW_TS_Init+0x188>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	22ca      	movs	r2, #202	@ 0xca
 8000e42:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e44:	4b5c      	ldr	r3, [pc, #368]	@ (8000fb8 <HW_TS_Init+0x188>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2253      	movs	r2, #83	@ 0x53
 8000e4a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000e4c:	4b5b      	ldr	r3, [pc, #364]	@ (8000fbc <HW_TS_Init+0x18c>)
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	4a5a      	ldr	r2, [pc, #360]	@ (8000fbc <HW_TS_Init+0x18c>)
 8000e52:	f043 0320 	orr.w	r3, r3, #32
 8000e56:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000e58:	4b58      	ldr	r3, [pc, #352]	@ (8000fbc <HW_TS_Init+0x18c>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	f1c3 0304 	rsb	r3, r3, #4
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4b55      	ldr	r3, [pc, #340]	@ (8000fc0 <HW_TS_Init+0x190>)
 8000e6c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000e6e:	4b53      	ldr	r3, [pc, #332]	@ (8000fbc <HW_TS_Init+0x18c>)
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8000e76:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8000e7a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	fa92 f2a2 	rbit	r2, r2
 8000e82:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d101      	bne.n	8000e92 <HW_TS_Init+0x62>
  {
    return 32U;
 8000e8e:	2220      	movs	r2, #32
 8000e90:	e003      	b.n	8000e9a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	fab2 f282 	clz	r2, r2
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	40d3      	lsrs	r3, r2
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b48      	ldr	r3, [pc, #288]	@ (8000fc4 <HW_TS_Init+0x194>)
 8000ea4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000ea6:	4b45      	ldr	r3, [pc, #276]	@ (8000fbc <HW_TS_Init+0x18c>)
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	4b44      	ldr	r3, [pc, #272]	@ (8000fc8 <HW_TS_Init+0x198>)
 8000eb8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000eba:	4b43      	ldr	r3, [pc, #268]	@ (8000fc8 <HW_TS_Init+0x198>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	4a40      	ldr	r2, [pc, #256]	@ (8000fc4 <HW_TS_Init+0x194>)
 8000ec2:	7812      	ldrb	r2, [r2, #0]
 8000ec4:	fb02 f303 	mul.w	r3, r2, r3
 8000ec8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000ecc:	4a3c      	ldr	r2, [pc, #240]	@ (8000fc0 <HW_TS_Init+0x190>)
 8000ece:	7812      	ldrb	r2, [r2, #0]
 8000ed0:	40d3      	lsrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d904      	bls.n	8000ee8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000ede:	4b3b      	ldr	r3, [pc, #236]	@ (8000fcc <HW_TS_Init+0x19c>)
 8000ee0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ee4:	801a      	strh	r2, [r3, #0]
 8000ee6:	e003      	b.n	8000ef0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	4b37      	ldr	r3, [pc, #220]	@ (8000fcc <HW_TS_Init+0x19c>)
 8000eee:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000ef0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000ef4:	f7ff fb9c 	bl	8000630 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000ef8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000efc:	f7ff fb84 	bl	8000608 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d13d      	bne.n	8000f82 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f06:	4b32      	ldr	r3, [pc, #200]	@ (8000fd0 <HW_TS_Init+0x1a0>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f0c:	4b31      	ldr	r3, [pc, #196]	@ (8000fd4 <HW_TS_Init+0x1a4>)
 8000f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f12:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	77fb      	strb	r3, [r7, #31]
 8000f18:	e00c      	b.n	8000f34 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000f1a:	7ffa      	ldrb	r2, [r7, #31]
 8000f1c:	492e      	ldr	r1, [pc, #184]	@ (8000fd8 <HW_TS_Init+0x1a8>)
 8000f1e:	4613      	mov	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	440b      	add	r3, r1
 8000f28:	330c      	adds	r3, #12
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f2e:	7ffb      	ldrb	r3, [r7, #31]
 8000f30:	3301      	adds	r3, #1
 8000f32:	77fb      	strb	r3, [r7, #31]
 8000f34:	7ffb      	ldrb	r3, [r7, #31]
 8000f36:	2b05      	cmp	r3, #5
 8000f38:	d9ef      	bls.n	8000f1a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000f3a:	4b28      	ldr	r3, [pc, #160]	@ (8000fdc <HW_TS_Init+0x1ac>)
 8000f3c:	2206      	movs	r2, #6
 8000f3e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8000f40:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <HW_TS_Init+0x188>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb8 <HW_TS_Init+0x188>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000f4e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000f50:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <HW_TS_Init+0x188>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <HW_TS_Init+0x188>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000f60:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000f62:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe0 <HW_TS_Init+0x1b0>)
 8000f64:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f68:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f000 fe69 	bl	8001c42 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000f70:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <HW_TS_Init+0x188>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <HW_TS_Init+0x188>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	e009      	b.n	8000f96 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <HW_TS_Init+0x188>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f000 fe48 	bl	8001c26 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8000f96:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <HW_TS_Init+0x188>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	22ff      	movs	r2, #255	@ 0xff
 8000f9c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2103      	movs	r1, #3
 8000fa2:	2003      	movs	r0, #3
 8000fa4:	f000 fdfd 	bl	8001ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 fe14 	bl	8001bd6 <HAL_NVIC_EnableIRQ>

  return;
 8000fae:	bf00      	nop
}
 8000fb0:	3720      	adds	r7, #32
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000170 	.word	0x20000170
 8000fbc:	40002800 	.word	0x40002800
 8000fc0:	2000012d 	.word	0x2000012d
 8000fc4:	2000012e 	.word	0x2000012e
 8000fc8:	20000130 	.word	0x20000130
 8000fcc:	20000132 	.word	0x20000132
 8000fd0:	2000012c 	.word	0x2000012c
 8000fd4:	20000128 	.word	0x20000128
 8000fd8:	20000094 	.word	0x20000094
 8000fdc:	20000124 	.word	0x20000124
 8000fe0:	58000800 	.word	0x58000800

08000fe4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fee:	f3ef 8310 	mrs	r3, PRIMASK
 8000ff2:	60fb      	str	r3, [r7, #12]
  return(result);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000ff6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff8:	b672      	cpsid	i
}
 8000ffa:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f000 fdf8 	bl	8001bf2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001002:	4b34      	ldr	r3, [pc, #208]	@ (80010d4 <HW_TS_Stop+0xf0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	22ca      	movs	r2, #202	@ 0xca
 8001008:	625a      	str	r2, [r3, #36]	@ 0x24
 800100a:	4b32      	ldr	r3, [pc, #200]	@ (80010d4 <HW_TS_Stop+0xf0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2253      	movs	r2, #83	@ 0x53
 8001010:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001012:	79fa      	ldrb	r2, [r7, #7]
 8001014:	4930      	ldr	r1, [pc, #192]	@ (80010d8 <HW_TS_Stop+0xf4>)
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	440b      	add	r3, r1
 8001020:	330c      	adds	r3, #12
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d142      	bne.n	80010b0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fc80 	bl	8000934 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001034:	4b29      	ldr	r3, [pc, #164]	@ (80010dc <HW_TS_Stop+0xf8>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800103a:	7cfb      	ldrb	r3, [r7, #19]
 800103c:	2b06      	cmp	r3, #6
 800103e:	d12f      	bne.n	80010a0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001040:	4b27      	ldr	r3, [pc, #156]	@ (80010e0 <HW_TS_Stop+0xfc>)
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800104c:	d107      	bne.n	800105e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800104e:	bf00      	nop
 8001050:	4b20      	ldr	r3, [pc, #128]	@ (80010d4 <HW_TS_Stop+0xf0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f8      	bne.n	8001050 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800105e:	4b1d      	ldr	r3, [pc, #116]	@ (80010d4 <HW_TS_Stop+0xf0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	4b1b      	ldr	r3, [pc, #108]	@ (80010d4 <HW_TS_Stop+0xf0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800106c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800106e:	bf00      	nop
 8001070:	4b18      	ldr	r3, [pc, #96]	@ (80010d4 <HW_TS_Stop+0xf0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f8      	beq.n	8001070 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800107e:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <HW_TS_Stop+0xf0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <HW_TS_Stop+0xf0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800108e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001090:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <HW_TS_Stop+0x100>)
 8001092:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001096:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001098:	2003      	movs	r0, #3
 800109a:	f000 fdd2 	bl	8001c42 <HAL_NVIC_ClearPendingIRQ>
 800109e:	e007      	b.n	80010b0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80010a0:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <HW_TS_Stop+0x104>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	7cfa      	ldrb	r2, [r7, #19]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d001      	beq.n	80010b0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80010ac:	f7ff fd5e 	bl	8000b6c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <HW_TS_Stop+0xf0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	22ff      	movs	r2, #255	@ 0xff
 80010b6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 fd8c 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	f383 8810 	msr	PRIMASK, r3
}
 80010c8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80010ca:	bf00      	nop
}
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000170 	.word	0x20000170
 80010d8:	20000094 	.word	0x20000094
 80010dc:	20000124 	.word	0x20000124
 80010e0:	40002800 	.word	0x40002800
 80010e4:	58000800 	.word	0x58000800
 80010e8:	20000125 	.word	0x20000125

080010ec <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80010f8:	79fa      	ldrb	r2, [r7, #7]
 80010fa:	493b      	ldr	r1, [pc, #236]	@ (80011e8 <HW_TS_Start+0xfc>)
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	440b      	add	r3, r1
 8001106:	330c      	adds	r3, #12
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d103      	bne.n	8001118 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff66 	bl	8000fe4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001118:	f3ef 8310 	mrs	r3, PRIMASK
 800111c:	60fb      	str	r3, [r7, #12]
  return(result);
 800111e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001120:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001122:	b672      	cpsid	i
}
 8001124:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001126:	2003      	movs	r0, #3
 8001128:	f000 fd63 	bl	8001bf2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800112c:	4b2f      	ldr	r3, [pc, #188]	@ (80011ec <HW_TS_Start+0x100>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	22ca      	movs	r2, #202	@ 0xca
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
 8001134:	4b2d      	ldr	r3, [pc, #180]	@ (80011ec <HW_TS_Start+0x100>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2253      	movs	r2, #83	@ 0x53
 800113a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800113c:	79fa      	ldrb	r2, [r7, #7]
 800113e:	492a      	ldr	r1, [pc, #168]	@ (80011e8 <HW_TS_Start+0xfc>)
 8001140:	4613      	mov	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	440b      	add	r3, r1
 800114a:	330c      	adds	r3, #12
 800114c:	2202      	movs	r2, #2
 800114e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001150:	79fa      	ldrb	r2, [r7, #7]
 8001152:	4925      	ldr	r1, [pc, #148]	@ (80011e8 <HW_TS_Start+0xfc>)
 8001154:	4613      	mov	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4413      	add	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	440b      	add	r3, r1
 800115e:	3308      	adds	r3, #8
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001164:	79fa      	ldrb	r2, [r7, #7]
 8001166:	4920      	ldr	r1, [pc, #128]	@ (80011e8 <HW_TS_Start+0xfc>)
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	440b      	add	r3, r1
 8001172:	3304      	adds	r3, #4
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fb30 	bl	80007e0 <linkTimer>
 8001180:	4603      	mov	r3, r0
 8001182:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001184:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <HW_TS_Start+0x104>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800118a:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <HW_TS_Start+0x108>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	7c7a      	ldrb	r2, [r7, #17]
 8001192:	429a      	cmp	r2, r3
 8001194:	d002      	beq.n	800119c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001196:	f7ff fce9 	bl	8000b6c <RescheduleTimerList>
 800119a:	e013      	b.n	80011c4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800119c:	79fa      	ldrb	r2, [r7, #7]
 800119e:	4912      	ldr	r1, [pc, #72]	@ (80011e8 <HW_TS_Start+0xfc>)
 80011a0:	4613      	mov	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4413      	add	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	440b      	add	r3, r1
 80011aa:	3308      	adds	r3, #8
 80011ac:	6819      	ldr	r1, [r3, #0]
 80011ae:	8a7b      	ldrh	r3, [r7, #18]
 80011b0:	79fa      	ldrb	r2, [r7, #7]
 80011b2:	1ac9      	subs	r1, r1, r3
 80011b4:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <HW_TS_Start+0xfc>)
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	4403      	add	r3, r0
 80011c0:	3308      	adds	r3, #8
 80011c2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80011c4:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <HW_TS_Start+0x100>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	22ff      	movs	r2, #255	@ 0xff
 80011ca:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 fd02 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	f383 8810 	msr	PRIMASK, r3
}
 80011dc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80011de:	bf00      	nop
}
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000094 	.word	0x20000094
 80011ec:	20000170 	.word	0x20000170
 80011f0:	20000124 	.word	0x20000124
 80011f4:	20000125 	.word	0x20000125

080011f8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	460b      	mov	r3, r1
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4798      	blx	r3

  return;
 800120a:	bf00      	nop
}
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <LL_RCC_LSE_SetDriveCapability>:
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800121a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800121e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001222:	f023 0218 	bic.w	r2, r3, #24
 8001226:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4313      	orrs	r3, r2
 800122e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800123e:	b480      	push	{r7}
 8001240:	b085      	sub	sp, #20
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800124a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800124c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4313      	orrs	r3, r2
 8001254:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800125a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4013      	ands	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001262:	68fb      	ldr	r3, [r7, #12]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001274:	f000 fad4 	bl	8001820 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001278:	f7ff f84c 	bl	8000314 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127c:	f000 f810 	bl	80012a0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001280:	f000 f870 	bl	8001364 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001284:	f000 f88e 	bl	80013a4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001288:	f000 f8dc 	bl	8001444 <MX_GPIO_Init>
  MX_RTC_Init();
 800128c:	f000 f8a6 	bl	80013dc <MX_RTC_Init>
  MX_RF_Init();
 8001290:	f000 f89c 	bl	80013cc <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001294:	f7ff f84c 	bl	8000330 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001298:	f7ff f977 	bl	800058a <MX_APPE_Process>
 800129c:	e7fc      	b.n	8001298 <main+0x28>
	...

080012a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b09a      	sub	sp, #104	@ 0x68
 80012a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a6:	f107 0320 	add.w	r3, r7, #32
 80012aa:	2248      	movs	r2, #72	@ 0x48
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f006 f9a4 	bl	80075fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
 80012c2:	615a      	str	r2, [r3, #20]
 80012c4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012c6:	f000 ff2f 	bl	8002128 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80012ca:	2010      	movs	r0, #16
 80012cc:	f7ff ffa1 	bl	8001212 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d0:	4b23      	ldr	r3, [pc, #140]	@ (8001360 <SystemClock_Config+0xc0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012d8:	4a21      	ldr	r2, [pc, #132]	@ (8001360 <SystemClock_Config+0xc0>)
 80012da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001360 <SystemClock_Config+0xc0>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80012ec:	2327      	movs	r3, #39	@ 0x27
 80012ee:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012f6:	2301      	movs	r3, #1
 80012f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001300:	2301      	movs	r3, #1
 8001302:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001304:	2340      	movs	r3, #64	@ 0x40
 8001306:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001308:	2300      	movs	r3, #0
 800130a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800130c:	23a0      	movs	r3, #160	@ 0xa0
 800130e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001310:	2300      	movs	r3, #0
 8001312:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	4618      	mov	r0, r3
 800131a:	f001 fa81 	bl	8002820 <HAL_RCC_OscConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001324:	f000 f8f6 	bl	8001514 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001328:	236f      	movs	r3, #111	@ 0x6f
 800132a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2101      	movs	r1, #1
 8001348:	4618      	mov	r0, r3
 800134a:	f001 fddd 	bl	8002f08 <HAL_RCC_ClockConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001354:	f000 f8de 	bl	8001514 <Error_Handler>
  }
}
 8001358:	bf00      	nop
 800135a:	3768      	adds	r7, #104	@ 0x68
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	58000400 	.word	0x58000400

08001364 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b094      	sub	sp, #80	@ 0x50
 8001368:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800136a:	463b      	mov	r3, r7
 800136c:	2250      	movs	r2, #80	@ 0x50
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f006 f943 	bl	80075fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001376:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800137a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800137c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001380:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001382:	2300      	movs	r3, #0
 8001384:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001386:	2300      	movs	r3, #0
 8001388:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	4618      	mov	r0, r3
 800138e:	f002 f9cc 	bl	800372a <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001398:	f000 f8bc 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800139c:	bf00      	nop
 800139e:	3750      	adds	r7, #80	@ 0x50
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <MX_IPCC_Init+0x20>)
 80013aa:	4a07      	ldr	r2, [pc, #28]	@ (80013c8 <MX_IPCC_Init+0x24>)
 80013ac:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <MX_IPCC_Init+0x20>)
 80013b0:	f000 fe34 	bl	800201c <HAL_IPCC_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80013ba:	f000 f8ab 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000134 	.word	0x20000134
 80013c8:	58000c00 	.word	0x58000c00

080013cc <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013e0:	4b16      	ldr	r3, [pc, #88]	@ (800143c <MX_RTC_Init+0x60>)
 80013e2:	4a17      	ldr	r2, [pc, #92]	@ (8001440 <MX_RTC_Init+0x64>)
 80013e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <MX_RTC_Init+0x60>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <MX_RTC_Init+0x60>)
 80013ee:	220f      	movs	r2, #15
 80013f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80013f2:	4b12      	ldr	r3, [pc, #72]	@ (800143c <MX_RTC_Init+0x60>)
 80013f4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80013f8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013fa:	4b10      	ldr	r3, [pc, #64]	@ (800143c <MX_RTC_Init+0x60>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001400:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <MX_RTC_Init+0x60>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001406:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <MX_RTC_Init+0x60>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800140c:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <MX_RTC_Init+0x60>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001412:	480a      	ldr	r0, [pc, #40]	@ (800143c <MX_RTC_Init+0x60>)
 8001414:	f002 fc10 	bl	8003c38 <HAL_RTC_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800141e:	f000 f879 	bl	8001514 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	4805      	ldr	r0, [pc, #20]	@ (800143c <MX_RTC_Init+0x60>)
 8001428:	f002 fd06 	bl	8003e38 <HAL_RTCEx_SetWakeUpTimer_IT>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001432:	f000 f86f 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000170 	.word	0x20000170
 8001440:	40002800 	.word	0x40002800

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001458:	2004      	movs	r0, #4
 800145a:	f7ff fef0 	bl	800123e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	2002      	movs	r0, #2
 8001460:	f7ff feed 	bl	800123e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001464:	2001      	movs	r0, #1
 8001466:	f7ff feea 	bl	800123e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800146a:	2008      	movs	r0, #8
 800146c:	f7ff fee7 	bl	800123e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2123      	movs	r1, #35	@ 0x23
 8001474:	4824      	ldr	r0, [pc, #144]	@ (8001508 <MX_GPIO_Init+0xc4>)
 8001476:	f000 fd7b 	bl	8001f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800147a:	2310      	movs	r3, #16
 800147c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001482:	2301      	movs	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4820      	ldr	r0, [pc, #128]	@ (800150c <MX_GPIO_Init+0xc8>)
 800148c:	f000 fbe8 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001490:	2323      	movs	r3, #35	@ 0x23
 8001492:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001494:	2301      	movs	r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4818      	ldr	r0, [pc, #96]	@ (8001508 <MX_GPIO_Init+0xc4>)
 80014a6:	f000 fbdb 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80014aa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80014ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80014bc:	230a      	movs	r3, #10
 80014be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c8:	f000 fbca 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80014cc:	2303      	movs	r3, #3
 80014ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	480c      	ldr	r0, [pc, #48]	@ (8001510 <MX_GPIO_Init+0xcc>)
 80014de:	f000 fbbf 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014e2:	23c0      	movs	r3, #192	@ 0xc0
 80014e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014f2:	2307      	movs	r3, #7
 80014f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	4619      	mov	r1, r3
 80014fa:	4803      	ldr	r0, [pc, #12]	@ (8001508 <MX_GPIO_Init+0xc4>)
 80014fc:	f000 fbb0 	bl	8001c60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001500:	bf00      	nop
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	48000400 	.word	0x48000400
 800150c:	48000800 	.word	0x48000800
 8001510:	48000c00 	.word	0x48000c00

08001514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001518:	b672      	cpsid	i
}
 800151a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <Error_Handler+0x8>

08001520 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800152c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001530:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001542:	b480      	push	{r7}
 8001544:	b085      	sub	sp, #20
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800154a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800154e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001550:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4313      	orrs	r3, r2
 8001558:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800155a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800155e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4013      	ands	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001580:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001582:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4313      	orrs	r3, r2
 800158a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800158c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001590:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4013      	ands	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001598:	68fb      	ldr	r3, [r7, #12]
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80015aa:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80015ae:	f7ff ffc8 	bl	8001542 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	202e      	movs	r0, #46	@ 0x2e
 80015b8:	f000 faf3 	bl	8001ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80015bc:	202e      	movs	r0, #46	@ 0x2e
 80015be:	f000 fb0a 	bl	8001bd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0d      	ldr	r2, [pc, #52]	@ (800160c <HAL_IPCC_MspInit+0x44>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d113      	bne.n	8001602 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80015da:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80015de:	f7ff ffb0 	bl	8001542 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	202c      	movs	r0, #44	@ 0x2c
 80015e8:	f000 fadb 	bl	8001ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80015ec:	202c      	movs	r0, #44	@ 0x2c
 80015ee:	f000 faf2 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	202d      	movs	r0, #45	@ 0x2d
 80015f8:	f000 fad3 	bl	8001ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80015fc:	202d      	movs	r0, #45	@ 0x2d
 80015fe:	f000 faea 	bl	8001bd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	58000c00 	.word	0x58000c00

08001610 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b096      	sub	sp, #88	@ 0x58
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001618:	f107 0308 	add.w	r3, r7, #8
 800161c:	2250      	movs	r2, #80	@ 0x50
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f005 ffeb 	bl	80075fc <memset>
  if(hrtc->Instance==RTC)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a12      	ldr	r2, [pc, #72]	@ (8001674 <HAL_RTC_MspInit+0x64>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d11d      	bne.n	800166c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001630:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001634:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001636:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800163a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800163c:	f107 0308 	add.w	r3, r7, #8
 8001640:	4618      	mov	r0, r3
 8001642:	f002 f872 	bl	800372a <HAL_RCCEx_PeriphCLKConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800164c:	f7ff ff62 	bl	8001514 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001650:	f7ff ff66 	bl	8001520 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001654:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001658:	f7ff ff8c 	bl	8001574 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	2100      	movs	r1, #0
 8001660:	2003      	movs	r0, #3
 8001662:	f000 fa9e 	bl	8001ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001666:	2003      	movs	r0, #3
 8001668:	f000 fab5 	bl	8001bd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800166c:	bf00      	nop
 800166e:	3758      	adds	r7, #88	@ 0x58
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40002800 	.word	0x40002800

08001678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <NMI_Handler+0x4>

08001680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <HardFault_Handler+0x4>

08001688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <MemManage_Handler+0x4>

08001690 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <BusFault_Handler+0x4>

08001698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <UsageFault_Handler+0x4>

080016a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ce:	f000 f901 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80016da:	f7ff fae1 	bl	8000ca0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80016e6:	f005 fbcf 	bl	8006e88 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}

080016ee <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80016f2:	f005 fbff 	bl	8006ef4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80016fe:	f000 fc69 	bl	8001fd4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800170c:	4b24      	ldr	r3, [pc, #144]	@ (80017a0 <SystemInit+0x98>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001712:	4a23      	ldr	r2, [pc, #140]	@ (80017a0 <SystemInit+0x98>)
 8001714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800171c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800172c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001730:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001734:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001740:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <SystemInit+0x9c>)
 8001742:	4013      	ands	r3, r2
 8001744:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800174a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800174e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001752:	f023 0305 	bic.w	r3, r3, #5
 8001756:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800175a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800175e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001762:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800176e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001772:	4a0d      	ldr	r2, [pc, #52]	@ (80017a8 <SystemInit+0xa0>)
 8001774:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800177a:	4a0b      	ldr	r2, [pc, #44]	@ (80017a8 <SystemInit+0xa0>)
 800177c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800177e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001788:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800178c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800178e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00
 80017a4:	faf6fefb 	.word	0xfaf6fefb
 80017a8:	22041000 	.word	0x22041000

080017ac <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80017ac:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ae:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b0:	3304      	adds	r3, #4

080017b2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80017b6:	d3f9      	bcc.n	80017ac <CopyDataInit>
  bx lr
 80017b8:	4770      	bx	lr

080017ba <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80017ba:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80017bc:	3004      	adds	r0, #4

080017be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80017be:	4288      	cmp	r0, r1
  bcc FillZerobss
 80017c0:	d3fb      	bcc.n	80017ba <FillZerobss>
  bx lr
 80017c2:	4770      	bx	lr

080017c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017c4:	480c      	ldr	r0, [pc, #48]	@ (80017f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017c8:	f7ff ff9e 	bl	8001708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80017cc:	480b      	ldr	r0, [pc, #44]	@ (80017fc <LoopForever+0x6>)
 80017ce:	490c      	ldr	r1, [pc, #48]	@ (8001800 <LoopForever+0xa>)
 80017d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001804 <LoopForever+0xe>)
 80017d2:	2300      	movs	r3, #0
 80017d4:	f7ff ffed 	bl	80017b2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80017d8:	480b      	ldr	r0, [pc, #44]	@ (8001808 <LoopForever+0x12>)
 80017da:	490c      	ldr	r1, [pc, #48]	@ (800180c <LoopForever+0x16>)
 80017dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001810 <LoopForever+0x1a>)
 80017de:	2300      	movs	r3, #0
 80017e0:	f7ff ffe7 	bl	80017b2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80017e4:	480b      	ldr	r0, [pc, #44]	@ (8001814 <LoopForever+0x1e>)
 80017e6:	490c      	ldr	r1, [pc, #48]	@ (8001818 <LoopForever+0x22>)
 80017e8:	2300      	movs	r3, #0
 80017ea:	f7ff ffe8 	bl	80017be <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017ee:	f005 ff0d 	bl	800760c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80017f2:	f7ff fd3d 	bl	8001270 <main>

080017f6 <LoopForever>:

LoopForever:
  b LoopForever
 80017f6:	e7fe      	b.n	80017f6 <LoopForever>
  ldr   r0, =_estack
 80017f8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80017fc:	20000008 	.word	0x20000008
 8001800:	2000002c 	.word	0x2000002c
 8001804:	08007910 	.word	0x08007910
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001808:	200301e4 	.word	0x200301e4
 800180c:	20030a67 	.word	0x20030a67
 8001810:	0800797a 	.word	0x0800797a
  INIT_BSS _sbss, _ebss
 8001814:	20000078 	.word	0x20000078
 8001818:	20000550 	.word	0x20000550

0800181c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC1_IRQHandler>
	...

08001820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800182a:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <HAL_Init+0x3c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a0b      	ldr	r2, [pc, #44]	@ (800185c <HAL_Init+0x3c>)
 8001830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001834:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001836:	2003      	movs	r0, #3
 8001838:	f000 f9a8 	bl	8001b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800183c:	2000      	movs	r0, #0
 800183e:	f000 f80f 	bl	8001860 <HAL_InitTick>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	71fb      	strb	r3, [r7, #7]
 800184c:	e001      	b.n	8001852 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800184e:	f7ff feaa 	bl	80015a6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001852:	79fb      	ldrb	r3, [r7, #7]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	58004000 	.word	0x58004000

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800186c:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <HAL_InitTick+0x6c>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d024      	beq.n	80018be <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001874:	f001 fcf4 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8001878:	4602      	mov	r2, r0
 800187a:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <HAL_InitTick+0x6c>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	4619      	mov	r1, r3
 8001880:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001884:	fbb3 f3f1 	udiv	r3, r3, r1
 8001888:	fbb2 f3f3 	udiv	r3, r2, r3
 800188c:	4618      	mov	r0, r3
 800188e:	f000 f9be 	bl	8001c0e <HAL_SYSTICK_Config>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10f      	bne.n	80018b8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b0f      	cmp	r3, #15
 800189c:	d809      	bhi.n	80018b2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189e:	2200      	movs	r2, #0
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	f04f 30ff 	mov.w	r0, #4294967295
 80018a6:	f000 f97c 	bl	8001ba2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018aa:	4a09      	ldr	r2, [pc, #36]	@ (80018d0 <HAL_InitTick+0x70>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	e007      	b.n	80018c2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
 80018b6:	e004      	b.n	80018c2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
 80018bc:	e001      	b.n	80018c2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000010 	.word	0x20000010
 80018d0:	2000000c 	.word	0x2000000c

080018d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_IncTick+0x20>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <HAL_IncTick+0x24>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a04      	ldr	r2, [pc, #16]	@ (80018f8 <HAL_IncTick+0x24>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000010 	.word	0x20000010
 80018f8:	20000194 	.word	0x20000194

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000194 	.word	0x20000194

08001914 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001918:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <HAL_GetTickPrio+0x14>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	2000000c 	.word	0x2000000c

0800192c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800193c:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001948:	4013      	ands	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001954:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800195c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195e:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	60d3      	str	r3, [r2, #12]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001978:	4b04      	ldr	r3, [pc, #16]	@ (800198c <__NVIC_GetPriorityGrouping+0x18>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f003 0307 	and.w	r3, r3, #7
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	db0b      	blt.n	80019ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	f003 021f 	and.w	r2, r3, #31
 80019a8:	4907      	ldr	r1, [pc, #28]	@ (80019c8 <__NVIC_EnableIRQ+0x38>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	2001      	movs	r0, #1
 80019b2:	fa00 f202 	lsl.w	r2, r0, r2
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000e100 	.word	0xe000e100

080019cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db12      	blt.n	8001a04 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	490a      	ldr	r1, [pc, #40]	@ (8001a10 <__NVIC_DisableIRQ+0x44>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	2001      	movs	r0, #1
 80019ee:	fa00 f202 	lsl.w	r2, r0, r2
 80019f2:	3320      	adds	r3, #32
 80019f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80019f8:	f3bf 8f4f 	dsb	sy
}
 80019fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019fe:	f3bf 8f6f 	isb	sy
}
 8001a02:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000e100 	.word	0xe000e100

08001a14 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	db0c      	blt.n	8001a40 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f003 021f 	and.w	r2, r3, #31
 8001a2c:	4907      	ldr	r1, [pc, #28]	@ (8001a4c <__NVIC_SetPendingIRQ+0x38>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	2001      	movs	r0, #1
 8001a36:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3a:	3340      	adds	r3, #64	@ 0x40
 8001a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000e100 	.word	0xe000e100

08001a50 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	db0c      	blt.n	8001a7c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	f003 021f 	and.w	r2, r3, #31
 8001a68:	4907      	ldr	r1, [pc, #28]	@ (8001a88 <__NVIC_ClearPendingIRQ+0x38>)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	095b      	lsrs	r3, r3, #5
 8001a70:	2001      	movs	r0, #1
 8001a72:	fa00 f202 	lsl.w	r2, r0, r2
 8001a76:	3360      	adds	r3, #96	@ 0x60
 8001a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000e100 	.word	0xe000e100

08001a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	6039      	str	r1, [r7, #0]
 8001a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	db0a      	blt.n	8001ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	490c      	ldr	r1, [pc, #48]	@ (8001ad8 <__NVIC_SetPriority+0x4c>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	0112      	lsls	r2, r2, #4
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	440b      	add	r3, r1
 8001ab0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab4:	e00a      	b.n	8001acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4908      	ldr	r1, [pc, #32]	@ (8001adc <__NVIC_SetPriority+0x50>)
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	3b04      	subs	r3, #4
 8001ac4:	0112      	lsls	r2, r2, #4
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	440b      	add	r3, r1
 8001aca:	761a      	strb	r2, [r3, #24]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000e100 	.word	0xe000e100
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	@ 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f1c3 0307 	rsb	r3, r3, #7
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	bf28      	it	cs
 8001afe:	2304      	movcs	r3, #4
 8001b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3304      	adds	r3, #4
 8001b06:	2b06      	cmp	r3, #6
 8001b08:	d902      	bls.n	8001b10 <NVIC_EncodePriority+0x30>
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3b03      	subs	r3, #3
 8001b0e:	e000      	b.n	8001b12 <NVIC_EncodePriority+0x32>
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	f04f 32ff 	mov.w	r2, #4294967295
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	401a      	ands	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b28:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	43d9      	mvns	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	4313      	orrs	r3, r2
         );
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3724      	adds	r7, #36	@ 0x24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b58:	d301      	bcc.n	8001b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00f      	b.n	8001b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <SysTick_Config+0x40>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b66:	210f      	movs	r1, #15
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6c:	f7ff ff8e 	bl	8001a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b70:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <SysTick_Config+0x40>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b76:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <SysTick_Config+0x40>)
 8001b78:	2207      	movs	r2, #7
 8001b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	e000e010 	.word	0xe000e010

08001b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff fec9 	bl	800192c <__NVIC_SetPriorityGrouping>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb0:	f7ff fee0 	bl	8001974 <__NVIC_GetPriorityGrouping>
 8001bb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	f7ff ff90 	bl	8001ae0 <NVIC_EncodePriority>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff5f 	bl	8001a8c <__NVIC_SetPriority>
}
 8001bce:	bf00      	nop
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fed3 	bl	8001990 <__NVIC_EnableIRQ>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fee3 	bl	80019cc <__NVIC_DisableIRQ>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ff96 	bl	8001b48 <SysTick_Config>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff feed 	bl	8001a14 <__NVIC_SetPendingIRQ>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fefd 	bl	8001a50 <__NVIC_ClearPendingIRQ>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6e:	e14c      	b.n	8001f0a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2101      	movs	r1, #1
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 813e 	beq.w	8001f04 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d005      	beq.n	8001ca0 <HAL_GPIO_Init+0x40>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d130      	bne.n	8001d02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	091b      	lsrs	r3, r3, #4
 8001cec:	f003 0201 	and.w	r2, r3, #1
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d017      	beq.n	8001d3e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	2203      	movs	r2, #3
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d123      	bne.n	8001d92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	08da      	lsrs	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3208      	adds	r2, #8
 8001d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	220f      	movs	r2, #15
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	691a      	ldr	r2, [r3, #16]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	08da      	lsrs	r2, r3, #3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3208      	adds	r2, #8
 8001d8c:	6939      	ldr	r1, [r7, #16]
 8001d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 0203 	and.w	r2, r3, #3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8098 	beq.w	8001f04 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001dd4:	4a54      	ldr	r2, [pc, #336]	@ (8001f28 <HAL_GPIO_Init+0x2c8>)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220f      	movs	r2, #15
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dfe:	d019      	beq.n	8001e34 <HAL_GPIO_Init+0x1d4>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a4a      	ldr	r2, [pc, #296]	@ (8001f2c <HAL_GPIO_Init+0x2cc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d013      	beq.n	8001e30 <HAL_GPIO_Init+0x1d0>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a49      	ldr	r2, [pc, #292]	@ (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00d      	beq.n	8001e2c <HAL_GPIO_Init+0x1cc>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a48      	ldr	r2, [pc, #288]	@ (8001f34 <HAL_GPIO_Init+0x2d4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d007      	beq.n	8001e28 <HAL_GPIO_Init+0x1c8>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a47      	ldr	r2, [pc, #284]	@ (8001f38 <HAL_GPIO_Init+0x2d8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d101      	bne.n	8001e24 <HAL_GPIO_Init+0x1c4>
 8001e20:	2304      	movs	r3, #4
 8001e22:	e008      	b.n	8001e36 <HAL_GPIO_Init+0x1d6>
 8001e24:	2307      	movs	r3, #7
 8001e26:	e006      	b.n	8001e36 <HAL_GPIO_Init+0x1d6>
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e004      	b.n	8001e36 <HAL_GPIO_Init+0x1d6>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e002      	b.n	8001e36 <HAL_GPIO_Init+0x1d6>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <HAL_GPIO_Init+0x1d6>
 8001e34:	2300      	movs	r3, #0
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	f002 0203 	and.w	r2, r2, #3
 8001e3c:	0092      	lsls	r2, r2, #2
 8001e3e:	4093      	lsls	r3, r2
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e46:	4938      	ldr	r1, [pc, #224]	@ (8001f28 <HAL_GPIO_Init+0x2c8>)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e54:	4b39      	ldr	r3, [pc, #228]	@ (8001f3c <HAL_GPIO_Init+0x2dc>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e78:	4a30      	ldr	r2, [pc, #192]	@ (8001f3c <HAL_GPIO_Init+0x2dc>)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f3c <HAL_GPIO_Init+0x2dc>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ea2:	4a26      	ldr	r2, [pc, #152]	@ (8001f3c <HAL_GPIO_Init+0x2dc>)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ea8:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <HAL_GPIO_Init+0x2dc>)
 8001eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ece:	4a1b      	ldr	r2, [pc, #108]	@ (8001f3c <HAL_GPIO_Init+0x2dc>)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8001ed6:	4b19      	ldr	r3, [pc, #100]	@ (8001f3c <HAL_GPIO_Init+0x2dc>)
 8001ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001efc:	4a0f      	ldr	r2, [pc, #60]	@ (8001f3c <HAL_GPIO_Init+0x2dc>)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f47f aeab 	bne.w	8001c70 <HAL_GPIO_Init+0x10>
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	bf00      	nop
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40010000 	.word	0x40010000
 8001f2c:	48000400 	.word	0x48000400
 8001f30:	48000800 	.word	0x48000800
 8001f34:	48000c00 	.word	0x48000c00
 8001f38:	48001000 	.word	0x48001000
 8001f3c:	58000800 	.word	0x58000800

08001f40 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	887b      	ldrh	r3, [r7, #2]
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	e001      	b.n	8001f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	807b      	strh	r3, [r7, #2]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f80:	787b      	ldrb	r3, [r7, #1]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f8c:	e002      	b.n	8001f94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fb2:	887a      	ldrh	r2, [r7, #2]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	041a      	lsls	r2, r3, #16
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	43d9      	mvns	r1, r3
 8001fbe:	887b      	ldrh	r3, [r7, #2]
 8001fc0:	400b      	ands	r3, r1
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	619a      	str	r2, [r3, #24]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001fda:	4b0a      	ldr	r3, [pc, #40]	@ (8002004 <HAL_HSEM_IRQHandler+0x30>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001fe0:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <HAL_HSEM_IRQHandler+0x30>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	4906      	ldr	r1, [pc, #24]	@ (8002004 <HAL_HSEM_IRQHandler+0x30>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001fee:	4a05      	ldr	r2, [pc, #20]	@ (8002004 <HAL_HSEM_IRQHandler+0x30>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f807 	bl	8002008 <HAL_HSEM_FreeCallback>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	58001500 	.word	0x58001500

08002008 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d01e      	beq.n	800206c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800202e:	4b13      	ldr	r3, [pc, #76]	@ (800207c <HAL_IPCC_Init+0x60>)
 8002030:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d102      	bne.n	8002044 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff fac2 	bl	80015c8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002044:	68b8      	ldr	r0, [r7, #8]
 8002046:	f000 f85b 	bl	8002100 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f82c 	bl	80020b4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800206a:	e001      	b.n	8002070 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	58000c00 	.word	0x58000c00

08002080 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	4613      	mov	r3, r2
 800208c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800209a:	b480      	push	{r7}
 800209c:	b085      	sub	sp, #20
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	4613      	mov	r3, r2
 80020a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e00f      	b.n	80020e2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	4a0b      	ldr	r2, [pc, #44]	@ (80020f8 <IPCC_SetDefaultCallbacks+0x44>)
 80020cc:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3306      	adds	r3, #6
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	4a08      	ldr	r2, [pc, #32]	@ (80020fc <IPCC_SetDefaultCallbacks+0x48>)
 80020da:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3301      	adds	r3, #1
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d9ec      	bls.n	80020c2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	08002081 	.word	0x08002081
 80020fc:	0800209b 	.word	0x0800209b

08002100 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8002114:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	223f      	movs	r2, #63	@ 0x3f
 800211a:	609a      	str	r2, [r3, #8]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a04      	ldr	r2, [pc, #16]	@ (8002144 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	58000400 	.word	0x58000400

08002148 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800214c:	4b04      	ldr	r3, [pc, #16]	@ (8002160 <HAL_PWREx_GetVoltageRange+0x18>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	58000400 	.word	0x58000400

08002164 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002172:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002176:	d101      	bne.n	800217c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <LL_RCC_HSE_Enable>:
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800218c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002196:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800219a:	6013      	str	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <LL_RCC_HSE_Disable>:
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80021aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_RCC_HSE_IsReady>:
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80021c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80021d6:	d101      	bne.n	80021dc <LL_RCC_HSE_IsReady+0x18>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <LL_RCC_HSE_IsReady+0x1a>
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_RCC_HSI_Enable>:
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80021ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fa:	6013      	str	r3, [r2, #0]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <LL_RCC_HSI_Disable>:
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800220a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002218:	6013      	str	r3, [r2, #0]
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_RCC_HSI_IsReady>:
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002236:	d101      	bne.n	800223c <LL_RCC_HSI_IsReady+0x18>
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <LL_RCC_HSI_IsReady+0x1a>
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	061b      	lsls	r3, r3, #24
 800225e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002262:	4313      	orrs	r3, r2
 8002264:	604b      	str	r3, [r1, #4]
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <LL_RCC_HSI48_Enable>:
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800227a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800227e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800228a:	bf00      	nop
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_RCC_HSI48_Disable>:
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800229c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_RCC_HSI48_IsReady>:
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80022ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d101      	bne.n	80022ce <LL_RCC_HSI48_IsReady+0x18>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <LL_RCC_HSI48_IsReady+0x1a>
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <LL_RCC_LSE_Enable>:
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80022de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_RCC_LSE_Disable>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002308:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <LL_RCC_LSE_EnableBypass>:
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800232a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800232e:	f043 0304 	orr.w	r3, r3, #4
 8002332:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_RCC_LSE_DisableBypass>:
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002350:	f023 0304 	bic.w	r3, r3, #4
 8002354:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <LL_RCC_LSE_IsReady>:
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b02      	cmp	r3, #2
 8002374:	d101      	bne.n	800237a <LL_RCC_LSE_IsReady+0x18>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <LL_RCC_LSE_IsReady+0x1a>
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <LL_RCC_LSI1_Enable>:
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800238a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800238e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002392:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_RCC_LSI1_Disable>:
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80023ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <LL_RCC_LSI1_IsReady>:
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80023ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d101      	bne.n	80023e2 <LL_RCC_LSI1_IsReady+0x18>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <LL_RCC_LSI1_IsReady+0x1a>
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <LL_RCC_LSI2_Enable>:
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80023f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023fe:	f043 0304 	orr.w	r3, r3, #4
 8002402:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <LL_RCC_LSI2_Disable>:
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002414:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002418:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800241c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <LL_RCC_LSI2_IsReady>:
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800243a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b08      	cmp	r3, #8
 8002444:	d101      	bne.n	800244a <LL_RCC_LSI2_IsReady+0x18>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <LL_RCC_LSI2_IsReady+0x1a>
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <LL_RCC_LSI2_SetTrimming>:
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800245e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002466:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	021b      	lsls	r3, r3, #8
 800246e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_RCC_MSI_Enable>:
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002488:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6013      	str	r3, [r2, #0]
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <LL_RCC_MSI_Disable>:
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80024a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	6013      	str	r3, [r2, #0]
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_RCC_MSI_IsReady>:
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80024c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d101      	bne.n	80024d6 <LL_RCC_MSI_IsReady+0x16>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <LL_RCC_MSI_IsReady+0x18>
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <LL_RCC_MSI_SetRange>:
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80024ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <LL_RCC_MSI_GetRange>:
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800251a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2bb0      	cmp	r3, #176	@ 0xb0
 8002520:	d901      	bls.n	8002526 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002522:	23b0      	movs	r3, #176	@ 0xb0
 8002524:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002526:	687b      	ldr	r3, [r7, #4]
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800253c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800254e:	4313      	orrs	r3, r2
 8002550:	604b      	str	r3, [r1, #4]
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <LL_RCC_SetSysClkSource>:
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f023 0203 	bic.w	r2, r3, #3
 8002570:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <LL_RCC_GetSysClkSource>:
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800258a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 030c 	and.w	r3, r3, #12
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <LL_RCC_SetAHBPrescaler>:
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80025a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80025ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80025d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <LL_RCC_SetAHB4Prescaler>:
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80025fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002602:	f023 020f 	bic.w	r2, r3, #15
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_RCC_SetAPB1Prescaler>:
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002632:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4313      	orrs	r3, r2
 800263a:	608b      	str	r3, [r1, #8]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_RCC_SetAPB2Prescaler>:
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800265a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4313      	orrs	r3, r2
 8002662:	608b      	str	r3, [r1, #8]
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <LL_RCC_GetAHBPrescaler>:
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800267e:	4618      	mov	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_RCC_GetAHB4Prescaler>:
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800268c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002690:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80026a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80026c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026d4:	6013      	str	r3, [r2, #0]
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80026e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026f2:	d101      	bne.n	80026f8 <LL_RCC_PLL_IsReady+0x18>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <LL_RCC_PLL_IsReady+0x1a>
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002722:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800273a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0303 	and.w	r3, r3, #3
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800276a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002778:	d101      	bne.n	800277e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800278e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002792:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800279e:	d101      	bne.n	80027a4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80027b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80027bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c4:	d101      	bne.n	80027ca <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80027da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027e8:	d101      	bne.n	80027ee <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80027fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002808:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800280c:	d101      	bne.n	8002812 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b08d      	sub	sp, #52	@ 0x34
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e363      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 808d 	beq.w	800295a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002840:	f7ff fea1 	bl	8002586 <LL_RCC_GetSysClkSource>
 8002844:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002846:	f7ff ff82 	bl	800274e <LL_RCC_PLL_GetMainSource>
 800284a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800284c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_RCC_OscConfig+0x3e>
 8002852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002854:	2b0c      	cmp	r3, #12
 8002856:	d147      	bne.n	80028e8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285a:	2b01      	cmp	r3, #1
 800285c:	d144      	bne.n	80028e8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e347      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800286e:	f7ff fe4c 	bl	800250a <LL_RCC_MSI_GetRange>
 8002872:	4603      	mov	r3, r0
 8002874:	429c      	cmp	r4, r3
 8002876:	d914      	bls.n	80028a2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fd03 	bl	8003288 <RCC_SetFlashLatencyFromMSIRange>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e336      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fe26 	bl	80024e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fe4a 	bl	8002534 <LL_RCC_MSI_SetCalibTrimming>
 80028a0:	e013      	b.n	80028ca <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fe1b 	bl	80024e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fe3f 	bl	8002534 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 fce4 	bl	8003288 <RCC_SetFlashLatencyFromMSIRange>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e317      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80028ca:	f000 fcc9 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 80028ce:	4603      	mov	r3, r0
 80028d0:	4aa4      	ldr	r2, [pc, #656]	@ (8002b64 <HAL_RCC_OscConfig+0x344>)
 80028d2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028d4:	4ba4      	ldr	r3, [pc, #656]	@ (8002b68 <HAL_RCC_OscConfig+0x348>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe ffc1 	bl	8001860 <HAL_InitTick>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d039      	beq.n	8002958 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e308      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01e      	beq.n	800292e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028f0:	f7ff fdc8 	bl	8002484 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028f4:	f7ff f802 	bl	80018fc <HAL_GetTick>
 80028f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028fc:	f7fe fffe 	bl	80018fc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e2f5      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800290e:	f7ff fdd7 	bl	80024c0 <LL_RCC_MSI_IsReady>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f1      	beq.n	80028fc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fde0 	bl	80024e2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fe04 	bl	8002534 <LL_RCC_MSI_SetCalibTrimming>
 800292c:	e015      	b.n	800295a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800292e:	f7ff fdb8 	bl	80024a2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002932:	f7fe ffe3 	bl	80018fc <HAL_GetTick>
 8002936:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800293a:	f7fe ffdf 	bl	80018fc <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e2d6      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800294c:	f7ff fdb8 	bl	80024c0 <LL_RCC_MSI_IsReady>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f1      	bne.n	800293a <HAL_RCC_OscConfig+0x11a>
 8002956:	e000      	b.n	800295a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002958:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d047      	beq.n	80029f6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002966:	f7ff fe0e 	bl	8002586 <LL_RCC_GetSysClkSource>
 800296a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800296c:	f7ff feef 	bl	800274e <LL_RCC_PLL_GetMainSource>
 8002970:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	2b08      	cmp	r3, #8
 8002976:	d005      	beq.n	8002984 <HAL_RCC_OscConfig+0x164>
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	2b0c      	cmp	r3, #12
 800297c:	d108      	bne.n	8002990 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	2b03      	cmp	r3, #3
 8002982:	d105      	bne.n	8002990 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d134      	bne.n	80029f6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e2b4      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002998:	d102      	bne.n	80029a0 <HAL_RCC_OscConfig+0x180>
 800299a:	f7ff fbf5 	bl	8002188 <LL_RCC_HSE_Enable>
 800299e:	e001      	b.n	80029a4 <HAL_RCC_OscConfig+0x184>
 80029a0:	f7ff fc01 	bl	80021a6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d012      	beq.n	80029d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7fe ffa6 	bl	80018fc <HAL_GetTick>
 80029b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b4:	f7fe ffa2 	bl	80018fc <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	@ 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e299      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80029c6:	f7ff fbfd 	bl	80021c4 <LL_RCC_HSE_IsReady>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f1      	beq.n	80029b4 <HAL_RCC_OscConfig+0x194>
 80029d0:	e011      	b.n	80029f6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d2:	f7fe ff93 	bl	80018fc <HAL_GetTick>
 80029d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029da:	f7fe ff8f 	bl	80018fc <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b64      	cmp	r3, #100	@ 0x64
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e286      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80029ec:	f7ff fbea 	bl	80021c4 <LL_RCC_HSE_IsReady>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f1      	bne.n	80029da <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d04c      	beq.n	8002a9c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a02:	f7ff fdc0 	bl	8002586 <LL_RCC_GetSysClkSource>
 8002a06:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a08:	f7ff fea1 	bl	800274e <LL_RCC_PLL_GetMainSource>
 8002a0c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_OscConfig+0x200>
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2b0c      	cmp	r3, #12
 8002a18:	d10e      	bne.n	8002a38 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d10b      	bne.n	8002a38 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e266      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fc09 	bl	8002248 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002a36:	e031      	b.n	8002a9c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d019      	beq.n	8002a74 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a40:	f7ff fbd2 	bl	80021e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe ff5a 	bl	80018fc <HAL_GetTick>
 8002a48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4c:	f7fe ff56 	bl	80018fc <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e24d      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002a5e:	f7ff fbe1 	bl	8002224 <LL_RCC_HSI_IsReady>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f1      	beq.n	8002a4c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fbeb 	bl	8002248 <LL_RCC_HSI_SetCalibTrimming>
 8002a72:	e013      	b.n	8002a9c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a74:	f7ff fbc7 	bl	8002206 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe ff40 	bl	80018fc <HAL_GetTick>
 8002a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a80:	f7fe ff3c 	bl	80018fc <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e233      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002a92:	f7ff fbc7 	bl	8002224 <LL_RCC_HSI_IsReady>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f1      	bne.n	8002a80 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80a3 	beq.w	8002bfc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d076      	beq.n	8002bac <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d046      	beq.n	8002b58 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002aca:	f7ff fc7e 	bl	80023ca <LL_RCC_LSI1_IsReady>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d113      	bne.n	8002afc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002ad4:	f7ff fc57 	bl	8002386 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ad8:	f7fe ff10 	bl	80018fc <HAL_GetTick>
 8002adc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002ae0:	f7fe ff0c 	bl	80018fc <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e203      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002af2:	f7ff fc6a 	bl	80023ca <LL_RCC_LSI1_IsReady>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f1      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002afc:	f7ff fc77 	bl	80023ee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7fe fefc 	bl	80018fc <HAL_GetTick>
 8002b04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002b08:	f7fe fef8 	bl	80018fc <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e1ef      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002b1a:	f7ff fc8a 	bl	8002432 <LL_RCC_LSI2_IsReady>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f1      	beq.n	8002b08 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fc94 	bl	8002456 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002b2e:	f7ff fc3b 	bl	80023a8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b32:	f7fe fee3 	bl	80018fc <HAL_GetTick>
 8002b36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002b3a:	f7fe fedf 	bl	80018fc <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e1d6      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002b4c:	f7ff fc3d 	bl	80023ca <LL_RCC_LSI1_IsReady>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f1      	bne.n	8002b3a <HAL_RCC_OscConfig+0x31a>
 8002b56:	e051      	b.n	8002bfc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002b58:	f7ff fc15 	bl	8002386 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fece 	bl	80018fc <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002b62:	e00c      	b.n	8002b7e <HAL_RCC_OscConfig+0x35e>
 8002b64:	20000008 	.word	0x20000008
 8002b68:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002b6c:	f7fe fec6 	bl	80018fc <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e1bd      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002b7e:	f7ff fc24 	bl	80023ca <LL_RCC_LSI1_IsReady>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0f1      	beq.n	8002b6c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002b88:	f7ff fc42 	bl	8002410 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002b8e:	f7fe feb5 	bl	80018fc <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e1ac      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002ba0:	f7ff fc47 	bl	8002432 <LL_RCC_LSI2_IsReady>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f1      	bne.n	8002b8e <HAL_RCC_OscConfig+0x36e>
 8002baa:	e027      	b.n	8002bfc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002bac:	f7ff fc30 	bl	8002410 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb0:	f7fe fea4 	bl	80018fc <HAL_GetTick>
 8002bb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002bb8:	f7fe fea0 	bl	80018fc <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e197      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002bca:	f7ff fc32 	bl	8002432 <LL_RCC_LSI2_IsReady>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f1      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002bd4:	f7ff fbe8 	bl	80023a8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd8:	f7fe fe90 	bl	80018fc <HAL_GetTick>
 8002bdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002be0:	f7fe fe8c 	bl	80018fc <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e183      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002bf2:	f7ff fbea 	bl	80023ca <LL_RCC_LSI1_IsReady>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f1      	bne.n	8002be0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d05b      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c08:	4ba7      	ldr	r3, [pc, #668]	@ (8002ea8 <HAL_RCC_OscConfig+0x688>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d114      	bne.n	8002c3e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002c14:	f7ff fa88 	bl	8002128 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c18:	f7fe fe70 	bl	80018fc <HAL_GetTick>
 8002c1c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c20:	f7fe fe6c 	bl	80018fc <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e163      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c32:	4b9d      	ldr	r3, [pc, #628]	@ (8002ea8 <HAL_RCC_OscConfig+0x688>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d102      	bne.n	8002c4c <HAL_RCC_OscConfig+0x42c>
 8002c46:	f7ff fb48 	bl	80022da <LL_RCC_LSE_Enable>
 8002c4a:	e00c      	b.n	8002c66 <HAL_RCC_OscConfig+0x446>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b05      	cmp	r3, #5
 8002c52:	d104      	bne.n	8002c5e <HAL_RCC_OscConfig+0x43e>
 8002c54:	f7ff fb63 	bl	800231e <LL_RCC_LSE_EnableBypass>
 8002c58:	f7ff fb3f 	bl	80022da <LL_RCC_LSE_Enable>
 8002c5c:	e003      	b.n	8002c66 <HAL_RCC_OscConfig+0x446>
 8002c5e:	f7ff fb4d 	bl	80022fc <LL_RCC_LSE_Disable>
 8002c62:	f7ff fb6d 	bl	8002340 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d014      	beq.n	8002c98 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6e:	f7fe fe45 	bl	80018fc <HAL_GetTick>
 8002c72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002c74:	e00a      	b.n	8002c8c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c76:	f7fe fe41 	bl	80018fc <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e136      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002c8c:	f7ff fb69 	bl	8002362 <LL_RCC_LSE_IsReady>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0ef      	beq.n	8002c76 <HAL_RCC_OscConfig+0x456>
 8002c96:	e013      	b.n	8002cc0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c98:	f7fe fe30 	bl	80018fc <HAL_GetTick>
 8002c9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7fe fe2c 	bl	80018fc <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e121      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002cb6:	f7ff fb54 	bl	8002362 <LL_RCC_LSE_IsReady>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1ef      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d02c      	beq.n	8002d26 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d014      	beq.n	8002cfe <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cd4:	f7ff facd 	bl	8002272 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7fe fe10 	bl	80018fc <HAL_GetTick>
 8002cdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ce0:	f7fe fe0c 	bl	80018fc <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e103      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002cf2:	f7ff fae0 	bl	80022b6 <LL_RCC_HSI48_IsReady>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f1      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x4c0>
 8002cfc:	e013      	b.n	8002d26 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cfe:	f7ff fac9 	bl	8002294 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d02:	f7fe fdfb 	bl	80018fc <HAL_GetTick>
 8002d06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d0a:	f7fe fdf7 	bl	80018fc <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e0ee      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002d1c:	f7ff facb 	bl	80022b6 <LL_RCC_HSI48_IsReady>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f1      	bne.n	8002d0a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 80e4 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d30:	f7ff fc29 	bl	8002586 <LL_RCC_GetSysClkSource>
 8002d34:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	f040 80b4 	bne.w	8002eb0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 0203 	and.w	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d123      	bne.n	8002d9e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d11c      	bne.n	8002d9e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d114      	bne.n	8002d9e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d10d      	bne.n	8002d9e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d05d      	beq.n	8002e5a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d058      	beq.n	8002e56 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002da4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0a1      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002db6:	f7ff fc84 	bl	80026c2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dba:	f7fe fd9f 	bl	80018fc <HAL_GetTick>
 8002dbe:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc2:	f7fe fd9b 	bl	80018fc <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e092      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1ef      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	4b30      	ldr	r3, [pc, #192]	@ (8002eac <HAL_RCC_OscConfig+0x68c>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002df4:	4311      	orrs	r1, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002dfa:	0212      	lsls	r2, r2, #8
 8002dfc:	4311      	orrs	r1, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e02:	4311      	orrs	r1, r2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e08:	4311      	orrs	r1, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e18:	f7ff fc44 	bl	80026a4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e2c:	f7fe fd66 	bl	80018fc <HAL_GetTick>
 8002e30:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e34:	f7fe fd62 	bl	80018fc <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e059      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0ef      	beq.n	8002e34 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e54:	e050      	b.n	8002ef8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e04f      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d147      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e68:	f7ff fc1c 	bl	80026a4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e7c:	f7fe fd3e 	bl	80018fc <HAL_GetTick>
 8002e80:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe fd3a 	bl	80018fc <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e031      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0ef      	beq.n	8002e84 <HAL_RCC_OscConfig+0x664>
 8002ea4:	e028      	b.n	8002ef8 <HAL_RCC_OscConfig+0x6d8>
 8002ea6:	bf00      	nop
 8002ea8:	58000400 	.word	0x58000400
 8002eac:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b0c      	cmp	r3, #12
 8002eb4:	d01e      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb6:	f7ff fc04 	bl	80026c2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eba:	f7fe fd1f 	bl	80018fc <HAL_GetTick>
 8002ebe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec2:	f7fe fd1b 	bl	80018fc <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e012      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1ef      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002ee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002eec:	4b05      	ldr	r3, [pc, #20]	@ (8002f04 <HAL_RCC_OscConfig+0x6e4>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	60cb      	str	r3, [r1, #12]
 8002ef2:	e001      	b.n	8002ef8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3734      	adds	r7, #52	@ 0x34
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd90      	pop	{r4, r7, pc}
 8002f02:	bf00      	nop
 8002f04:	eefefffc 	.word	0xeefefffc

08002f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e12d      	b.n	8003178 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b98      	ldr	r3, [pc, #608]	@ (8003180 <HAL_RCC_ClockConfig+0x278>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d91b      	bls.n	8002f62 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b95      	ldr	r3, [pc, #596]	@ (8003180 <HAL_RCC_ClockConfig+0x278>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 0207 	bic.w	r2, r3, #7
 8002f32:	4993      	ldr	r1, [pc, #588]	@ (8003180 <HAL_RCC_ClockConfig+0x278>)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f3a:	f7fe fcdf 	bl	80018fc <HAL_GetTick>
 8002f3e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f42:	f7fe fcdb 	bl	80018fc <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e111      	b.n	8003178 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f54:	4b8a      	ldr	r3, [pc, #552]	@ (8003180 <HAL_RCC_ClockConfig+0x278>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d1ef      	bne.n	8002f42 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d016      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fb13 	bl	800259e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f78:	f7fe fcc0 	bl	80018fc <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f80:	f7fe fcbc 	bl	80018fc <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e0f2      	b.n	8003178 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002f92:	f7ff fbe8 	bl	8002766 <LL_RCC_IsActiveFlag_HPRE>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0f1      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d016      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fb0a 	bl	80025c6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002fb2:	f7fe fca3 	bl	80018fc <HAL_GetTick>
 8002fb6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002fba:	f7fe fc9f 	bl	80018fc <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e0d5      	b.n	8003178 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002fcc:	f7ff fbdd 	bl	800278a <LL_RCC_IsActiveFlag_C2HPRE>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f1      	beq.n	8002fba <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d016      	beq.n	8003010 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff fb03 	bl	80025f2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002fec:	f7fe fc86 	bl	80018fc <HAL_GetTick>
 8002ff0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ff4:	f7fe fc82 	bl	80018fc <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e0b8      	b.n	8003178 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003006:	f7ff fbd3 	bl	80027b0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f1      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d016      	beq.n	800304a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fafd 	bl	8002620 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003026:	f7fe fc69 	bl	80018fc <HAL_GetTick>
 800302a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800302c:	e008      	b.n	8003040 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800302e:	f7fe fc65 	bl	80018fc <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e09b      	b.n	8003178 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003040:	f7ff fbc9 	bl	80027d6 <LL_RCC_IsActiveFlag_PPRE1>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f1      	beq.n	800302e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d017      	beq.n	8003086 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff faf3 	bl	8002648 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003062:	f7fe fc4b 	bl	80018fc <HAL_GetTick>
 8003066:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800306a:	f7fe fc47 	bl	80018fc <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e07d      	b.n	8003178 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800307c:	f7ff fbbd 	bl	80027fa <LL_RCC_IsActiveFlag_PPRE2>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f1      	beq.n	800306a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d043      	beq.n	800311a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d106      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800309a:	f7ff f893 	bl	80021c4 <LL_RCC_HSE_IsReady>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d11e      	bne.n	80030e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e067      	b.n	8003178 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d106      	bne.n	80030be <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80030b0:	f7ff fb16 	bl	80026e0 <LL_RCC_PLL_IsReady>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d113      	bne.n	80030e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e05c      	b.n	8003178 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80030c6:	f7ff f9fb 	bl	80024c0 <LL_RCC_MSI_IsReady>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d108      	bne.n	80030e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e051      	b.n	8003178 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80030d4:	f7ff f8a6 	bl	8002224 <LL_RCC_HSI_IsReady>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e04a      	b.n	8003178 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff fa39 	bl	800255e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ec:	f7fe fc06 	bl	80018fc <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f2:	e00a      	b.n	800310a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f4:	f7fe fc02 	bl	80018fc <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d901      	bls.n	800310a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e036      	b.n	8003178 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	f7ff fa3c 	bl	8002586 <LL_RCC_GetSysClkSource>
 800310e:	4602      	mov	r2, r0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	429a      	cmp	r2, r3
 8003118:	d1ec      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800311a:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <HAL_RCC_ClockConfig+0x278>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d21b      	bcs.n	8003160 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003128:	4b15      	ldr	r3, [pc, #84]	@ (8003180 <HAL_RCC_ClockConfig+0x278>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 0207 	bic.w	r2, r3, #7
 8003130:	4913      	ldr	r1, [pc, #76]	@ (8003180 <HAL_RCC_ClockConfig+0x278>)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	4313      	orrs	r3, r2
 8003136:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003138:	f7fe fbe0 	bl	80018fc <HAL_GetTick>
 800313c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	e008      	b.n	8003152 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003140:	f7fe fbdc 	bl	80018fc <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e012      	b.n	8003178 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	4b0b      	ldr	r3, [pc, #44]	@ (8003180 <HAL_RCC_ClockConfig+0x278>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d1ef      	bne.n	8003140 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003160:	f000 f87e 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8003164:	4603      	mov	r3, r0
 8003166:	4a07      	ldr	r2, [pc, #28]	@ (8003184 <HAL_RCC_ClockConfig+0x27c>)
 8003168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800316a:	f7fe fbd3 	bl	8001914 <HAL_GetTickPrio>
 800316e:	4603      	mov	r3, r0
 8003170:	4618      	mov	r0, r3
 8003172:	f7fe fb75 	bl	8001860 <HAL_InitTick>
 8003176:	4603      	mov	r3, r0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	58004000 	.word	0x58004000
 8003184:	20000008 	.word	0x20000008

08003188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800318e:	f7ff f9fa 	bl	8002586 <LL_RCC_GetSysClkSource>
 8003192:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10a      	bne.n	80031b0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800319a:	f7ff f9b6 	bl	800250a <LL_RCC_MSI_GetRange>
 800319e:	4603      	mov	r3, r0
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003254 <HAL_RCC_GetSysClockFreq+0xcc>)
 80031a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	e04b      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d102      	bne.n	80031bc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031b6:	4b28      	ldr	r3, [pc, #160]	@ (8003258 <HAL_RCC_GetSysClockFreq+0xd0>)
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	e045      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d10a      	bne.n	80031d8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80031c2:	f7fe ffcf 	bl	8002164 <LL_RCC_HSE_IsEnabledDiv2>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d102      	bne.n	80031d2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80031cc:	4b22      	ldr	r3, [pc, #136]	@ (8003258 <HAL_RCC_GetSysClockFreq+0xd0>)
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	e03a      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80031d2:	4b22      	ldr	r3, [pc, #136]	@ (800325c <HAL_RCC_GetSysClockFreq+0xd4>)
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	e037      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80031d8:	f7ff fab9 	bl	800274e <LL_RCC_PLL_GetMainSource>
 80031dc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d003      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x64>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d003      	beq.n	80031f2 <HAL_RCC_GetSysClockFreq+0x6a>
 80031ea:	e00d      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80031ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003258 <HAL_RCC_GetSysClockFreq+0xd0>)
 80031ee:	60bb      	str	r3, [r7, #8]
        break;
 80031f0:	e015      	b.n	800321e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80031f2:	f7fe ffb7 	bl	8002164 <LL_RCC_HSE_IsEnabledDiv2>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d102      	bne.n	8003202 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80031fc:	4b16      	ldr	r3, [pc, #88]	@ (8003258 <HAL_RCC_GetSysClockFreq+0xd0>)
 80031fe:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003200:	e00d      	b.n	800321e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003202:	4b16      	ldr	r3, [pc, #88]	@ (800325c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003204:	60bb      	str	r3, [r7, #8]
        break;
 8003206:	e00a      	b.n	800321e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003208:	f7ff f97f 	bl	800250a <LL_RCC_MSI_GetRange>
 800320c:	4603      	mov	r3, r0
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	4a0f      	ldr	r2, [pc, #60]	@ (8003254 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800321a:	60bb      	str	r3, [r7, #8]
        break;
 800321c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800321e:	f7ff fa71 	bl	8002704 <LL_RCC_PLL_GetN>
 8003222:	4602      	mov	r2, r0
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	fb03 f402 	mul.w	r4, r3, r2
 800322a:	f7ff fa84 	bl	8002736 <LL_RCC_PLL_GetDivider>
 800322e:	4603      	mov	r3, r0
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	3301      	adds	r3, #1
 8003234:	fbb4 f4f3 	udiv	r4, r4, r3
 8003238:	f7ff fa71 	bl	800271e <LL_RCC_PLL_GetR>
 800323c:	4603      	mov	r3, r0
 800323e:	0f5b      	lsrs	r3, r3, #29
 8003240:	3301      	adds	r3, #1
 8003242:	fbb4 f3f3 	udiv	r3, r4, r3
 8003246:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003248:	68fb      	ldr	r3, [r7, #12]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bd90      	pop	{r4, r7, pc}
 8003252:	bf00      	nop
 8003254:	08007888 	.word	0x08007888
 8003258:	00f42400 	.word	0x00f42400
 800325c:	01e84800 	.word	0x01e84800

08003260 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003260:	b598      	push	{r3, r4, r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003264:	f7ff ff90 	bl	8003188 <HAL_RCC_GetSysClockFreq>
 8003268:	4604      	mov	r4, r0
 800326a:	f7ff fa01 	bl	8002670 <LL_RCC_GetAHBPrescaler>
 800326e:	4603      	mov	r3, r0
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	4a03      	ldr	r2, [pc, #12]	@ (8003284 <HAL_RCC_GetHCLKFreq+0x24>)
 8003278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003280:	4618      	mov	r0, r3
 8003282:	bd98      	pop	{r3, r4, r7, pc}
 8003284:	08007848 	.word	0x08007848

08003288 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2bb0      	cmp	r3, #176	@ 0xb0
 8003294:	d903      	bls.n	800329e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003296:	4b15      	ldr	r3, [pc, #84]	@ (80032ec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	e007      	b.n	80032ae <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	4a11      	ldr	r2, [pc, #68]	@ (80032ec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80032a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ac:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80032ae:	f7ff f9eb 	bl	8002688 <LL_RCC_GetAHB4Prescaler>
 80032b2:	4603      	mov	r3, r0
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	4a0d      	ldr	r2, [pc, #52]	@ (80032f0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80032bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4a0a      	ldr	r2, [pc, #40]	@ (80032f4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	0c9c      	lsrs	r4, r3, #18
 80032d2:	f7fe ff39 	bl	8002148 <HAL_PWREx_GetVoltageRange>
 80032d6:	4603      	mov	r3, r0
 80032d8:	4619      	mov	r1, r3
 80032da:	4620      	mov	r0, r4
 80032dc:	f000 f80c 	bl	80032f8 <RCC_SetFlashLatency>
 80032e0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd90      	pop	{r4, r7, pc}
 80032ea:	bf00      	nop
 80032ec:	08007888 	.word	0x08007888
 80032f0:	08007848 	.word	0x08007848
 80032f4:	431bde83 	.word	0x431bde83

080032f8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b093      	sub	sp, #76	@ 0x4c
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003302:	4b37      	ldr	r3, [pc, #220]	@ (80033e0 <RCC_SetFlashLatency+0xe8>)
 8003304:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003308:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800330a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800330e:	4a35      	ldr	r2, [pc, #212]	@ (80033e4 <RCC_SetFlashLatency+0xec>)
 8003310:	f107 031c 	add.w	r3, r7, #28
 8003314:	ca07      	ldmia	r2, {r0, r1, r2}
 8003316:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800331a:	4b33      	ldr	r3, [pc, #204]	@ (80033e8 <RCC_SetFlashLatency+0xf0>)
 800331c:	f107 040c 	add.w	r4, r7, #12
 8003320:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003322:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003326:	2300      	movs	r3, #0
 8003328:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003330:	d11a      	bne.n	8003368 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003332:	2300      	movs	r3, #0
 8003334:	643b      	str	r3, [r7, #64]	@ 0x40
 8003336:	e013      	b.n	8003360 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	3348      	adds	r3, #72	@ 0x48
 800333e:	443b      	add	r3, r7
 8003340:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	d807      	bhi.n	800335a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800334a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	3348      	adds	r3, #72	@ 0x48
 8003350:	443b      	add	r3, r7
 8003352:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003356:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003358:	e020      	b.n	800339c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800335a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800335c:	3301      	adds	r3, #1
 800335e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003360:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003362:	2b03      	cmp	r3, #3
 8003364:	d9e8      	bls.n	8003338 <RCC_SetFlashLatency+0x40>
 8003366:	e019      	b.n	800339c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003368:	2300      	movs	r3, #0
 800336a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800336c:	e013      	b.n	8003396 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800336e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	3348      	adds	r3, #72	@ 0x48
 8003374:	443b      	add	r3, r7
 8003376:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	429a      	cmp	r2, r3
 800337e:	d807      	bhi.n	8003390 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	3348      	adds	r3, #72	@ 0x48
 8003386:	443b      	add	r3, r7
 8003388:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800338c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800338e:	e005      	b.n	800339c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003392:	3301      	adds	r3, #1
 8003394:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003398:	2b02      	cmp	r3, #2
 800339a:	d9e8      	bls.n	800336e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800339c:	4b13      	ldr	r3, [pc, #76]	@ (80033ec <RCC_SetFlashLatency+0xf4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f023 0207 	bic.w	r2, r3, #7
 80033a4:	4911      	ldr	r1, [pc, #68]	@ (80033ec <RCC_SetFlashLatency+0xf4>)
 80033a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033a8:	4313      	orrs	r3, r2
 80033aa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80033ac:	f7fe faa6 	bl	80018fc <HAL_GetTick>
 80033b0:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80033b2:	e008      	b.n	80033c6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80033b4:	f7fe faa2 	bl	80018fc <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e007      	b.n	80033d6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80033c6:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <RCC_SetFlashLatency+0xf4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d1ef      	bne.n	80033b4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	374c      	adds	r7, #76	@ 0x4c
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd90      	pop	{r4, r7, pc}
 80033de:	bf00      	nop
 80033e0:	080076a4 	.word	0x080076a4
 80033e4:	080076b4 	.word	0x080076b4
 80033e8:	080076c0 	.word	0x080076c0
 80033ec:	58004000 	.word	0x58004000

080033f0 <LL_RCC_LSE_IsEnabled>:
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80033f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <LL_RCC_LSE_IsEnabled+0x18>
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <LL_RCC_LSE_IsEnabled+0x1a>
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <LL_RCC_LSE_IsReady>:
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b02      	cmp	r3, #2
 8003426:	d101      	bne.n	800342c <LL_RCC_LSE_IsReady+0x18>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <LL_RCC_LSE_IsReady+0x1a>
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <LL_RCC_SetRFWKPClockSource>:
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003440:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003448:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800344c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <LL_RCC_SetSMPSClockSource>:
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800346c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	f023 0203 	bic.w	r2, r3, #3
 8003476:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4313      	orrs	r3, r2
 800347e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <LL_RCC_SetSMPSPrescaler>:
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800349e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_RCC_SetUSARTClockSource>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80034bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c4:	f023 0203 	bic.w	r2, r3, #3
 80034c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <LL_RCC_SetLPUARTClockSource>:
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80034e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <LL_RCC_SetI2CClockSource>:
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003514:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003518:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	091b      	lsrs	r3, r3, #4
 8003520:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003524:	43db      	mvns	r3, r3
 8003526:	401a      	ands	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003530:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <LL_RCC_SetLPTIMClockSource>:
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800354e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003552:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	0c1b      	lsrs	r3, r3, #16
 800355a:	041b      	lsls	r3, r3, #16
 800355c:	43db      	mvns	r3, r3
 800355e:	401a      	ands	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	041b      	lsls	r3, r3, #16
 8003564:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <LL_RCC_SetSAIClockSource>:
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800358e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <LL_RCC_SetRNGClockSource>:
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80035ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80035ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <LL_RCC_SetCLK48ClockSource>:
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80035da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <LL_RCC_SetUSBClockSource>:
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff ffe3 	bl	80035d2 <LL_RCC_SetCLK48ClockSource>
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <LL_RCC_SetADCClockSource>:
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800361c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003624:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003628:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <LL_RCC_SetRTCClockSource>:
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003650:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003654:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <LL_RCC_GetRTCClockSource>:
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003678:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <LL_RCC_ForceBackupDomainReset>:
{
 8003686:	b480      	push	{r7}
 8003688:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800368a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003692:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003696:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800369a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800369e:	bf00      	nop
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80036ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <LL_RCC_PLLSAI1_Enable>:
{
 80036ca:	b480      	push	{r7}
 80036cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80036ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036dc:	6013      	str	r3, [r2, #0]
}
 80036de:	bf00      	nop
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <LL_RCC_PLLSAI1_Disable>:
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80036ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80036fa:	6013      	str	r3, [r2, #0]
}
 80036fc:	bf00      	nop
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <LL_RCC_PLLSAI1_IsReady>:
{
 8003706:	b480      	push	{r7}
 8003708:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800370a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003714:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003718:	d101      	bne.n	800371e <LL_RCC_PLLSAI1_IsReady+0x18>
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b088      	sub	sp, #32
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003732:	2300      	movs	r3, #0
 8003734:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003736:	2300      	movs	r3, #0
 8003738:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d034      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800374e:	d021      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003750:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003754:	d81b      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003756:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800375a:	d01d      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800375c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003760:	d815      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003766:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800376a:	d110      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800376c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800377a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800377c:	e00d      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3304      	adds	r3, #4
 8003782:	4618      	mov	r0, r3
 8003784:	f000 f947 	bl	8003a16 <RCCEx_PLLSAI1_ConfigNP>
 8003788:	4603      	mov	r3, r0
 800378a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800378c:	e005      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	77fb      	strb	r3, [r7, #31]
        break;
 8003792:	e002      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003794:	bf00      	nop
 8003796:	e000      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800379a:	7ffb      	ldrb	r3, [r7, #31]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d105      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fee8 	bl	800357a <LL_RCC_SetSAIClockSource>
 80037aa:	e001      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ac:	7ffb      	ldrb	r3, [r7, #31]
 80037ae:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d046      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80037bc:	f7ff ff56 	bl	800366c <LL_RCC_GetRTCClockSource>
 80037c0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d03c      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80037cc:	f7fe fcac 	bl	8002128 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d105      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff ff30 	bl	8003640 <LL_RCC_SetRTCClockSource>
 80037e0:	e02e      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80037e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ea:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80037ec:	f7ff ff4b 	bl	8003686 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80037f0:	f7ff ff5a 	bl	80036a8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003802:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800380c:	f7ff fdf0 	bl	80033f0 <LL_RCC_LSE_IsEnabled>
 8003810:	4603      	mov	r3, r0
 8003812:	2b01      	cmp	r3, #1
 8003814:	d114      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003816:	f7fe f871 	bl	80018fc <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800381c:	e00b      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7fe f86d 	bl	80018fc <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d902      	bls.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	77fb      	strb	r3, [r7, #31]
              break;
 8003834:	e004      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003836:	f7ff fded 	bl	8003414 <LL_RCC_LSE_IsReady>
 800383a:	4603      	mov	r3, r0
 800383c:	2b01      	cmp	r3, #1
 800383e:	d1ee      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003840:	7ffb      	ldrb	r3, [r7, #31]
 8003842:	77bb      	strb	r3, [r7, #30]
 8003844:	e001      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003846:	7ffb      	ldrb	r3, [r7, #31]
 8003848:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d004      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fe2a 	bl	80034b4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d004      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fe35 	bl	80034e0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	d004      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fe5d 	bl	8003546 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d004      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff fe52 	bl	8003546 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d004      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff fe2a 	bl	800350c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fe1f 	bl	800350c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d022      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff fe8d 	bl	80035fe <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038ec:	d107      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80038ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038fc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003902:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003906:	d10b      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	4618      	mov	r0, r3
 800390e:	f000 f8dd 	bl	8003acc <RCCEx_PLLSAI1_ConfigNQ>
 8003912:	4603      	mov	r3, r0
 8003914:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003916:	7ffb      	ldrb	r3, [r7, #31]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800391c:	7ffb      	ldrb	r3, [r7, #31]
 800391e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003928:	2b00      	cmp	r3, #0
 800392a:	d02b      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003934:	d008      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800393e:	d003      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003944:	2b00      	cmp	r3, #0
 8003946:	d105      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fe2a 	bl	80035a6 <LL_RCC_SetRNGClockSource>
 8003952:	e00a      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003958:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	2000      	movs	r0, #0
 8003960:	f7ff fe21 	bl	80035a6 <LL_RCC_SetRNGClockSource>
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f7ff fe34 	bl	80035d2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003972:	d107      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800397e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003982:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800398c:	2b00      	cmp	r3, #0
 800398e:	d022      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff fe3d 	bl	8003614 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a2:	d107      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039b2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039bc:	d10b      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3304      	adds	r3, #4
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f8dd 	bl	8003b82 <RCCEx_PLLSAI1_ConfigNR>
 80039c8:	4603      	mov	r3, r0
 80039ca:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80039cc:	7ffb      	ldrb	r3, [r7, #31]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80039d2:	7ffb      	ldrb	r3, [r7, #31]
 80039d4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d004      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff fd26 	bl	8003438 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d009      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fd45 	bl	800348c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fd2c 	bl	8003464 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003a0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003a22:	f7ff fe61 	bl	80036e8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a26:	f7fd ff69 	bl	80018fc <HAL_GetTick>
 8003a2a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a2c:	e009      	b.n	8003a42 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a2e:	f7fd ff65 	bl	80018fc <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d902      	bls.n	8003a42 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a40:	e004      	b.n	8003a4c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a42:	f7ff fe60 	bl	8003706 <LL_RCC_PLLSAI1_IsReady>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f0      	bne.n	8003a2e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d137      	bne.n	8003ac2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003a52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	021b      	lsls	r3, r3, #8
 8003a62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a66:	4313      	orrs	r3, r2
 8003a68:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003a6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003a80:	f7ff fe23 	bl	80036ca <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a84:	f7fd ff3a 	bl	80018fc <HAL_GetTick>
 8003a88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a8a:	e009      	b.n	8003aa0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a8c:	f7fd ff36 	bl	80018fc <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d902      	bls.n	8003aa0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a9e:	e004      	b.n	8003aaa <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003aa0:	f7ff fe31 	bl	8003706 <LL_RCC_PLLSAI1_IsReady>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d1f0      	bne.n	8003a8c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d108      	bne.n	8003ac2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003ad8:	f7ff fe06 	bl	80036e8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003adc:	f7fd ff0e 	bl	80018fc <HAL_GetTick>
 8003ae0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003ae2:	e009      	b.n	8003af8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ae4:	f7fd ff0a 	bl	80018fc <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d902      	bls.n	8003af8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	73fb      	strb	r3, [r7, #15]
      break;
 8003af6:	e004      	b.n	8003b02 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003af8:	f7ff fe05 	bl	8003706 <LL_RCC_PLLSAI1_IsReady>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d137      	bne.n	8003b78 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003b20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b32:	4313      	orrs	r3, r2
 8003b34:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003b36:	f7ff fdc8 	bl	80036ca <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b3a:	f7fd fedf 	bl	80018fc <HAL_GetTick>
 8003b3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b40:	e009      	b.n	8003b56 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b42:	f7fd fedb 	bl	80018fc <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d902      	bls.n	8003b56 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	73fb      	strb	r3, [r7, #15]
        break;
 8003b54:	e004      	b.n	8003b60 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b56:	f7ff fdd6 	bl	8003706 <LL_RCC_PLLSAI1_IsReady>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d1f0      	bne.n	8003b42 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d108      	bne.n	8003b78 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b74:	4313      	orrs	r3, r2
 8003b76:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b084      	sub	sp, #16
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003b8e:	f7ff fdab 	bl	80036e8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003b92:	f7fd feb3 	bl	80018fc <HAL_GetTick>
 8003b96:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003b98:	e009      	b.n	8003bae <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b9a:	f7fd feaf 	bl	80018fc <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d902      	bls.n	8003bae <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	73fb      	strb	r3, [r7, #15]
      break;
 8003bac:	e004      	b.n	8003bb8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003bae:	f7ff fdaa 	bl	8003706 <LL_RCC_PLLSAI1_IsReady>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f0      	bne.n	8003b9a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d137      	bne.n	8003c2e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	021b      	lsls	r3, r3, #8
 8003bce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003be8:	4313      	orrs	r3, r2
 8003bea:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003bec:	f7ff fd6d 	bl	80036ca <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf0:	f7fd fe84 	bl	80018fc <HAL_GetTick>
 8003bf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003bf6:	e009      	b.n	8003c0c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bf8:	f7fd fe80 	bl	80018fc <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d902      	bls.n	8003c0c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	73fb      	strb	r3, [r7, #15]
        break;
 8003c0a:	e004      	b.n	8003c16 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003c0c:	f7ff fd7b 	bl	8003706 <LL_RCC_PLLSAI1_IsReady>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d1f0      	bne.n	8003bf8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d108      	bne.n	8003c2e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e09f      	b.n	8003d8a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fd fcd6 	bl	8001610 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003c6c:	4b49      	ldr	r3, [pc, #292]	@ (8003d94 <HAL_RTC_Init+0x15c>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d07e      	beq.n	8003d76 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	22ca      	movs	r2, #202	@ 0xca
 8003c7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2253      	movs	r2, #83	@ 0x53
 8003c86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f8ab 	bl	8003de4 <RTC_EnterInitMode>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	22ff      	movs	r2, #255	@ 0xff
 8003c9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]
 8003ca8:	e067      	b.n	8003d7a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003cb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cbc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6899      	ldr	r1, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	68d2      	ldr	r2, [r2, #12]
 8003ce4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6919      	ldr	r1, [r3, #16]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	041a      	lsls	r2, r3, #16
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d08:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0203 	bic.w	r2, r2, #3
 8003d18:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69da      	ldr	r2, [r3, #28]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d113      	bne.n	8003d68 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f829 	bl	8003d98 <HAL_RTC_WaitForSynchro>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00d      	beq.n	8003d68 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	22ff      	movs	r2, #255	@ 0xff
 8003d52:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2204      	movs	r2, #4
 8003d58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e010      	b.n	8003d8a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	22ff      	movs	r2, #255	@ 0xff
 8003d6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	73fb      	strb	r3, [r7, #15]
 8003d74:	e001      	b.n	8003d7a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d103      	bne.n	8003d88 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40002800 	.word	0x40002800

08003d98 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003dae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003db0:	f7fd fda4 	bl	80018fc <HAL_GetTick>
 8003db4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003db6:	e009      	b.n	8003dcc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003db8:	f7fd fda0 	bl	80018fc <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003dc6:	d901      	bls.n	8003dcc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e007      	b.n	8003ddc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0ee      	beq.n	8003db8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d119      	bne.n	8003e2e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8003e02:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003e04:	f7fd fd7a 	bl	80018fc <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003e0a:	e009      	b.n	8003e20 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003e0c:	f7fd fd76 	bl	80018fc <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e1a:	d901      	bls.n	8003e20 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e007      	b.n	8003e30 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0ee      	beq.n	8003e0c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d101      	bne.n	8003e52 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e0a8      	b.n	8003fa4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	22ca      	movs	r2, #202	@ 0xca
 8003e68:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2253      	movs	r2, #83	@ 0x53
 8003e70:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d020      	beq.n	8003ec2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8003e80:	f7fd fd3c 	bl	80018fc <HAL_GetTick>
 8003e84:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003e86:	e015      	b.n	8003eb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e88:	f7fd fd38 	bl	80018fc <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e96:	d90d      	bls.n	8003eb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	22ff      	movs	r2, #255	@ 0xff
 8003e9e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e077      	b.n	8003fa4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e2      	bne.n	8003e88 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ed0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003ee2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003ee4:	f7fd fd0a 	bl	80018fc <HAL_GetTick>
 8003ee8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003eea:	e015      	b.n	8003f18 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003eec:	f7fd fd06 	bl	80018fc <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003efa:	d90d      	bls.n	8003f18 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	22ff      	movs	r2, #255	@ 0xff
 8003f02:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2203      	movs	r2, #3
 8003f08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e045      	b.n	8003fa4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0e2      	beq.n	8003eec <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0207 	bic.w	r2, r2, #7
 8003f3c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6899      	ldr	r1, [r3, #8]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003f4e:	4b17      	ldr	r3, [pc, #92]	@ (8003fac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f54:	4a15      	ldr	r2, [pc, #84]	@ (8003fac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003f56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f5a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003f5e:	4b13      	ldr	r3, [pc, #76]	@ (8003fac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a12      	ldr	r2, [pc, #72]	@ (8003fac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003f64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f68:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f78:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f88:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	22ff      	movs	r2, #255	@ 0xff
 8003f90:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	58000800 	.word	0x58000800

08003fb0 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003fba:	f107 0308 	add.w	r3, r7, #8
 8003fbe:	2218      	movs	r2, #24
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f001 f92d 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003fc8:	233f      	movs	r3, #63	@ 0x3f
 8003fca:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8003fcc:	2381      	movs	r3, #129	@ 0x81
 8003fce:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003fd0:	1dfb      	adds	r3, r7, #7
 8003fd2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003fd8:	f107 0308 	add.w	r3, r7, #8
 8003fdc:	2100      	movs	r1, #0
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f001 fba8 	bl	8005734 <hci_send_req>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	da01      	bge.n	8003fee <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8003fea:	23ff      	movs	r3, #255	@ 0xff
 8003fec:	e000      	b.n	8003ff0 <aci_gap_set_non_discoverable+0x40>
  return status;
 8003fee:	79fb      	ldrb	r3, [r7, #7]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8003ff8:	b5b0      	push	{r4, r5, r7, lr}
 8003ffa:	b0ce      	sub	sp, #312	@ 0x138
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4605      	mov	r5, r0
 8004000:	460c      	mov	r4, r1
 8004002:	4610      	mov	r0, r2
 8004004:	4619      	mov	r1, r3
 8004006:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800400a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800400e:	462a      	mov	r2, r5
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004016:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800401a:	4622      	mov	r2, r4
 800401c:	801a      	strh	r2, [r3, #0]
 800401e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004022:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8004026:	4602      	mov	r2, r0
 8004028:	801a      	strh	r2, [r3, #0]
 800402a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800402e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8004032:	460a      	mov	r2, r1
 8004034:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8004036:	f107 0310 	add.w	r3, r7, #16
 800403a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800403e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8004042:	3308      	adds	r3, #8
 8004044:	f107 0210 	add.w	r2, r7, #16
 8004048:	4413      	add	r3, r2
 800404a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800404e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8004052:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8004056:	4413      	add	r3, r2
 8004058:	3309      	adds	r3, #9
 800405a:	f107 0210 	add.w	r2, r7, #16
 800405e:	4413      	add	r3, r2
 8004060:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004064:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004068:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8004076:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800407a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800407e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8004082:	7812      	ldrb	r2, [r2, #0]
 8004084:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004086:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800408a:	3301      	adds	r3, #1
 800408c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8004090:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004094:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004098:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800409c:	8812      	ldrh	r2, [r2, #0]
 800409e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80040a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80040a6:	3302      	adds	r3, #2
 80040a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80040ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80040b0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80040b4:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80040b8:	8812      	ldrh	r2, [r2, #0]
 80040ba:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80040be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80040c2:	3302      	adds	r3, #2
 80040c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80040c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80040cc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80040d0:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80040d4:	7812      	ldrb	r2, [r2, #0]
 80040d6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80040d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80040dc:	3301      	adds	r3, #1
 80040de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80040e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80040e6:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80040ea:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80040ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80040f0:	3301      	adds	r3, #1
 80040f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80040f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80040fa:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80040fe:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8004100:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004104:	3301      	adds	r3, #1
 8004106:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800410a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800410e:	3308      	adds	r3, #8
 8004110:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8004114:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8004118:	4618      	mov	r0, r3
 800411a:	f001 f872 	bl	8005202 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800411e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8004122:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004126:	4413      	add	r3, r2
 8004128:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800412c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004130:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8004134:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004136:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800413a:	3301      	adds	r3, #1
 800413c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8004140:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004144:	3301      	adds	r3, #1
 8004146:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800414a:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800414e:	4618      	mov	r0, r3
 8004150:	f001 f857 	bl	8005202 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8004154:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8004158:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800415c:	4413      	add	r3, r2
 800415e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8004162:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004166:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800416a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800416c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004170:	3302      	adds	r3, #2
 8004172:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8004176:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800417a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800417e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8004180:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004184:	3302      	adds	r3, #2
 8004186:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800418a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800418e:	2218      	movs	r2, #24
 8004190:	2100      	movs	r1, #0
 8004192:	4618      	mov	r0, r3
 8004194:	f001 f845 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004198:	233f      	movs	r3, #63	@ 0x3f
 800419a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800419e:	2383      	movs	r3, #131	@ 0x83
 80041a0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80041a4:	f107 0310 	add.w	r3, r7, #16
 80041a8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80041ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80041b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80041b4:	f107 030f 	add.w	r3, r7, #15
 80041b8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80041bc:	2301      	movs	r3, #1
 80041be:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80041c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80041c6:	2100      	movs	r1, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f001 fab3 	bl	8005734 <hci_send_req>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	da01      	bge.n	80041d8 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80041d4:	23ff      	movs	r3, #255	@ 0xff
 80041d6:	e004      	b.n	80041e2 <aci_gap_set_discoverable+0x1ea>
  return status;
 80041d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80041dc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80041e0:	781b      	ldrb	r3, [r3, #0]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bdb0      	pop	{r4, r5, r7, pc}

080041ec <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b0cc      	sub	sp, #304	@ 0x130
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4602      	mov	r2, r0
 80041f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80041f8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80041fc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80041fe:	f107 0310 	add.w	r3, r7, #16
 8004202:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004206:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800420a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800420e:	2200      	movs	r2, #0
 8004210:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8004218:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800421c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004220:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8004224:	7812      	ldrb	r2, [r2, #0]
 8004226:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004228:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800422c:	3301      	adds	r3, #1
 800422e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004232:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004236:	2218      	movs	r2, #24
 8004238:	2100      	movs	r1, #0
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fff1 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004240:	233f      	movs	r3, #63	@ 0x3f
 8004242:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8004246:	2385      	movs	r3, #133	@ 0x85
 8004248:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800424c:	f107 0310 	add.w	r3, r7, #16
 8004250:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004254:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004258:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800425c:	f107 030f 	add.w	r3, r7, #15
 8004260:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8004264:	2301      	movs	r3, #1
 8004266:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800426a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800426e:	2100      	movs	r1, #0
 8004270:	4618      	mov	r0, r3
 8004272:	f001 fa5f 	bl	8005734 <hci_send_req>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	da01      	bge.n	8004280 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800427c:	23ff      	movs	r3, #255	@ 0xff
 800427e:	e004      	b.n	800428a <aci_gap_set_io_capability+0x9e>
  return status;
 8004280:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004284:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004288:	781b      	ldrb	r3, [r3, #0]
}
 800428a:	4618      	mov	r0, r3
 800428c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8004294:	b5b0      	push	{r4, r5, r7, lr}
 8004296:	b0cc      	sub	sp, #304	@ 0x130
 8004298:	af00      	add	r7, sp, #0
 800429a:	4605      	mov	r5, r0
 800429c:	460c      	mov	r4, r1
 800429e:	4610      	mov	r0, r2
 80042a0:	4619      	mov	r1, r3
 80042a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80042a6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80042aa:	462a      	mov	r2, r5
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80042b2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80042b6:	4622      	mov	r2, r4
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80042be:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80042c2:	4602      	mov	r2, r0
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80042ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80042ce:	460a      	mov	r2, r1
 80042d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80042d2:	f107 0310 	add.w	r3, r7, #16
 80042d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80042da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80042de:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80042e2:	2200      	movs	r2, #0
 80042e4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80042e6:	2300      	movs	r3, #0
 80042e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80042ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80042f0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80042f4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80042f8:	7812      	ldrb	r2, [r2, #0]
 80042fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80042fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004300:	3301      	adds	r3, #1
 8004302:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8004306:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800430a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800430e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8004312:	7812      	ldrb	r2, [r2, #0]
 8004314:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004316:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800431a:	3301      	adds	r3, #1
 800431c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8004320:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004324:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004328:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800432c:	7812      	ldrb	r2, [r2, #0]
 800432e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004330:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004334:	3301      	adds	r3, #1
 8004336:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800433a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800433e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004342:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8004346:	7812      	ldrb	r2, [r2, #0]
 8004348:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800434a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800434e:	3301      	adds	r3, #1
 8004350:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8004354:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004358:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800435c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800435e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004362:	3301      	adds	r3, #1
 8004364:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8004368:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800436c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8004370:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004372:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004376:	3301      	adds	r3, #1
 8004378:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800437c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004380:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8004384:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004386:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800438a:	3301      	adds	r3, #1
 800438c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8004390:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004394:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8004398:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800439c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80043a0:	3304      	adds	r3, #4
 80043a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80043a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80043aa:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80043ae:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80043b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80043b4:	3301      	adds	r3, #1
 80043b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80043ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80043be:	2218      	movs	r2, #24
 80043c0:	2100      	movs	r1, #0
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 ff2d 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x3f;
 80043c8:	233f      	movs	r3, #63	@ 0x3f
 80043ca:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 80043ce:	2386      	movs	r3, #134	@ 0x86
 80043d0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80043d4:	f107 0310 	add.w	r3, r7, #16
 80043d8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80043dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80043e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80043e4:	f107 030f 	add.w	r3, r7, #15
 80043e8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80043f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f001 f99b 	bl	8005734 <hci_send_req>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	da01      	bge.n	8004408 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8004404:	23ff      	movs	r3, #255	@ 0xff
 8004406:	e004      	b.n	8004412 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8004408:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800440c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004410:	781b      	ldrb	r3, [r3, #0]
}
 8004412:	4618      	mov	r0, r3
 8004414:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004418:	46bd      	mov	sp, r7
 800441a:	bdb0      	pop	{r4, r5, r7, pc}

0800441c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b0cc      	sub	sp, #304	@ 0x130
 8004420:	af00      	add	r7, sp, #0
 8004422:	4602      	mov	r2, r0
 8004424:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004428:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800442c:	6019      	str	r1, [r3, #0]
 800442e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004432:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8004436:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8004438:	f107 0310 	add.w	r3, r7, #16
 800443c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004440:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004444:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8004452:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004456:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800445a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800445e:	8812      	ldrh	r2, [r2, #0]
 8004460:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004462:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004466:	3302      	adds	r3, #2
 8004468:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800446c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004470:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004474:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8004478:	6812      	ldr	r2, [r2, #0]
 800447a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800447e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004482:	3304      	adds	r3, #4
 8004484:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004488:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800448c:	2218      	movs	r2, #24
 800448e:	2100      	movs	r1, #0
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fec6 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004496:	233f      	movs	r3, #63	@ 0x3f
 8004498:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800449c:	2388      	movs	r3, #136	@ 0x88
 800449e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80044a2:	f107 0310 	add.w	r3, r7, #16
 80044a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80044aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80044ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80044b2:	f107 030f 	add.w	r3, r7, #15
 80044b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80044c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80044c4:	2100      	movs	r1, #0
 80044c6:	4618      	mov	r0, r3
 80044c8:	f001 f934 	bl	8005734 <hci_send_req>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	da01      	bge.n	80044d6 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80044d2:	23ff      	movs	r3, #255	@ 0xff
 80044d4:	e004      	b.n	80044e0 <aci_gap_pass_key_resp+0xc4>
  return status;
 80044d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80044da:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80044de:	781b      	ldrb	r3, [r3, #0]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80044ea:	b590      	push	{r4, r7, lr}
 80044ec:	b0cd      	sub	sp, #308	@ 0x134
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	4604      	mov	r4, r0
 80044f2:	4608      	mov	r0, r1
 80044f4:	4611      	mov	r1, r2
 80044f6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80044fa:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004504:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8004508:	4622      	mov	r2, r4
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004510:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8004514:	4602      	mov	r2, r0
 8004516:	701a      	strb	r2, [r3, #0]
 8004518:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800451c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8004520:	460a      	mov	r2, r1
 8004522:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8004524:	f107 0310 	add.w	r3, r7, #16
 8004528:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800452c:	f107 0308 	add.w	r3, r7, #8
 8004530:	2207      	movs	r2, #7
 8004532:	2100      	movs	r1, #0
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fe74 	bl	8005222 <Osal_MemSet>
  int index_input = 0;
 800453a:	2300      	movs	r3, #0
 800453c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8004540:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004544:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004548:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800454c:	7812      	ldrb	r2, [r2, #0]
 800454e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004550:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004554:	3301      	adds	r3, #1
 8004556:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800455a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800455e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004562:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8004566:	7812      	ldrb	r2, [r2, #0]
 8004568:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800456a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800456e:	3301      	adds	r3, #1
 8004570:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8004574:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004578:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800457c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8004580:	7812      	ldrb	r2, [r2, #0]
 8004582:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004584:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004588:	3301      	adds	r3, #1
 800458a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800458e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004592:	2218      	movs	r2, #24
 8004594:	2100      	movs	r1, #0
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fe43 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x3f;
 800459c:	233f      	movs	r3, #63	@ 0x3f
 800459e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 80045a2:	238a      	movs	r3, #138	@ 0x8a
 80045a4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80045a8:	f107 0310 	add.w	r3, r7, #16
 80045ac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80045b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80045b4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80045b8:	f107 0308 	add.w	r3, r7, #8
 80045bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80045c0:	2307      	movs	r3, #7
 80045c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80045c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80045ca:	2100      	movs	r1, #0
 80045cc:	4618      	mov	r0, r3
 80045ce:	f001 f8b1 	bl	8005734 <hci_send_req>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	da01      	bge.n	80045dc <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80045d8:	23ff      	movs	r3, #255	@ 0xff
 80045da:	e02e      	b.n	800463a <aci_gap_init+0x150>
  if ( resp.Status )
 80045dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80045e0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <aci_gap_init+0x10c>
    return resp.Status;
 80045ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80045ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	e021      	b.n	800463a <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80045f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80045fa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80045fe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004602:	b29a      	uxth	r2, r3
 8004604:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004608:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8004610:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004614:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004618:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800461c:	b29a      	uxth	r2, r3
 800461e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004622:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8004624:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004628:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800462c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004630:	b29a      	uxth	r2, r3
 8004632:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004636:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8004640:	46bd      	mov	sp, r7
 8004642:	bd90      	pop	{r4, r7, pc}

08004644 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b0cc      	sub	sp, #304	@ 0x130
 8004648:	af00      	add	r7, sp, #0
 800464a:	4602      	mov	r2, r0
 800464c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004650:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004654:	6019      	str	r1, [r3, #0]
 8004656:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800465a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800465e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8004660:	f107 0310 	add.w	r3, r7, #16
 8004664:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004668:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800466c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004670:	2200      	movs	r2, #0
 8004672:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800467a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800467e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004682:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8004686:	7812      	ldrb	r2, [r2, #0]
 8004688:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800468a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800468e:	3301      	adds	r3, #1
 8004690:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8004694:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004698:	1c58      	adds	r0, r3, #1
 800469a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800469e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80046a2:	781a      	ldrb	r2, [r3, #0]
 80046a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80046a8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80046ac:	6819      	ldr	r1, [r3, #0]
 80046ae:	f000 fda8 	bl	8005202 <Osal_MemCpy>
  index_input += AdvDataLen;
 80046b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80046b6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80046c0:	4413      	add	r3, r2
 80046c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80046c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80046ca:	2218      	movs	r2, #24
 80046cc:	2100      	movs	r1, #0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fda7 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x3f;
 80046d4:	233f      	movs	r3, #63	@ 0x3f
 80046d6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80046da:	238e      	movs	r3, #142	@ 0x8e
 80046dc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80046e0:	f107 0310 	add.w	r3, r7, #16
 80046e4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80046e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80046ec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80046f0:	f107 030f 	add.w	r3, r7, #15
 80046f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80046f8:	2301      	movs	r3, #1
 80046fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80046fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004702:	2100      	movs	r1, #0
 8004704:	4618      	mov	r0, r3
 8004706:	f001 f815 	bl	8005734 <hci_send_req>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	da01      	bge.n	8004714 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8004710:	23ff      	movs	r3, #255	@ 0xff
 8004712:	e004      	b.n	800471e <aci_gap_update_adv_data+0xda>
  return status;
 8004714:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004718:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800471c:	781b      	ldrb	r3, [r3, #0]
}
 800471e:	4618      	mov	r0, r3
 8004720:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004732:	f107 0308 	add.w	r3, r7, #8
 8004736:	2218      	movs	r2, #24
 8004738:	2100      	movs	r1, #0
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fd71 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004740:	233f      	movs	r3, #63	@ 0x3f
 8004742:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8004744:	2392      	movs	r3, #146	@ 0x92
 8004746:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004748:	1dfb      	adds	r3, r7, #7
 800474a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800474c:	2301      	movs	r3, #1
 800474e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004750:	f107 0308 	add.w	r3, r7, #8
 8004754:	2100      	movs	r1, #0
 8004756:	4618      	mov	r0, r3
 8004758:	f000 ffec 	bl	8005734 <hci_send_req>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	da01      	bge.n	8004766 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004762:	23ff      	movs	r3, #255	@ 0xff
 8004764:	e000      	b.n	8004768 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8004766:	79fb      	ldrb	r3, [r7, #7]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3720      	adds	r7, #32
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b0cc      	sub	sp, #304	@ 0x130
 8004774:	af00      	add	r7, sp, #0
 8004776:	4602      	mov	r2, r0
 8004778:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800477c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8004780:	801a      	strh	r2, [r3, #0]
 8004782:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004786:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800478a:	460a      	mov	r2, r1
 800478c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800478e:	f107 0310 	add.w	r3, r7, #16
 8004792:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004796:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800479a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800479e:	2200      	movs	r2, #0
 80047a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80047a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80047ac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80047b0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80047b4:	8812      	ldrh	r2, [r2, #0]
 80047b6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80047b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80047bc:	3302      	adds	r3, #2
 80047be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80047c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80047c6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80047ca:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80047ce:	7812      	ldrb	r2, [r2, #0]
 80047d0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80047d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80047d6:	3301      	adds	r3, #1
 80047d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80047dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80047e0:	2218      	movs	r2, #24
 80047e2:	2100      	movs	r1, #0
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fd1c 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x3f;
 80047ea:	233f      	movs	r3, #63	@ 0x3f
 80047ec:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80047f0:	23a5      	movs	r3, #165	@ 0xa5
 80047f2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80047f6:	f107 0310 	add.w	r3, r7, #16
 80047fa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80047fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004802:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8004806:	f107 030f 	add.w	r3, r7, #15
 800480a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800480e:	2301      	movs	r3, #1
 8004810:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004814:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004818:	2100      	movs	r1, #0
 800481a:	4618      	mov	r0, r3
 800481c:	f000 ff8a 	bl	8005734 <hci_send_req>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	da01      	bge.n	800482a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8004826:	23ff      	movs	r3, #255	@ 0xff
 8004828:	e004      	b.n	8004834 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800482a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800482e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004832:	781b      	ldrb	r3, [r3, #0]
}
 8004834:	4618      	mov	r0, r3
 8004836:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b088      	sub	sp, #32
 8004842:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004844:	2300      	movs	r3, #0
 8004846:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004848:	f107 0308 	add.w	r3, r7, #8
 800484c:	2218      	movs	r2, #24
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fce6 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004856:	233f      	movs	r3, #63	@ 0x3f
 8004858:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800485a:	f240 1301 	movw	r3, #257	@ 0x101
 800485e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004860:	1dfb      	adds	r3, r7, #7
 8004862:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004864:	2301      	movs	r3, #1
 8004866:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004868:	f107 0308 	add.w	r3, r7, #8
 800486c:	2100      	movs	r1, #0
 800486e:	4618      	mov	r0, r3
 8004870:	f000 ff60 	bl	8005734 <hci_send_req>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	da01      	bge.n	800487e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800487a:	23ff      	movs	r3, #255	@ 0xff
 800487c:	e000      	b.n	8004880 <aci_gatt_init+0x42>
  return status;
 800487e:	79fb      	ldrb	r3, [r7, #7]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3720      	adds	r7, #32
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8004888:	b590      	push	{r4, r7, lr}
 800488a:	b0cf      	sub	sp, #316	@ 0x13c
 800488c:	af00      	add	r7, sp, #0
 800488e:	4604      	mov	r4, r0
 8004890:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8004894:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8004898:	6001      	str	r1, [r0, #0]
 800489a:	4610      	mov	r0, r2
 800489c:	4619      	mov	r1, r3
 800489e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80048a2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80048a6:	4622      	mov	r2, r4
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80048ae:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80048b2:	4602      	mov	r2, r0
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80048ba:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80048be:	460a      	mov	r2, r1
 80048c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80048c2:	f107 0310 	add.w	r3, r7, #16
 80048c6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80048ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80048ce:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d00a      	beq.n	80048ee <aci_gatt_add_service+0x66>
 80048d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80048dc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d101      	bne.n	80048ea <aci_gatt_add_service+0x62>
 80048e6:	2311      	movs	r3, #17
 80048e8:	e002      	b.n	80048f0 <aci_gatt_add_service+0x68>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <aci_gatt_add_service+0x68>
 80048ee:	2303      	movs	r3, #3
 80048f0:	f107 0210 	add.w	r2, r7, #16
 80048f4:	4413      	add	r3, r2
 80048f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80048fa:	f107 030c 	add.w	r3, r7, #12
 80048fe:	2203      	movs	r2, #3
 8004900:	2100      	movs	r1, #0
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fc8d 	bl	8005222 <Osal_MemSet>
  int index_input = 0;
 8004908:	2300      	movs	r3, #0
 800490a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800490e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004912:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004916:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800491a:	7812      	ldrb	r2, [r2, #0]
 800491c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800491e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004922:	3301      	adds	r3, #1
 8004924:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8004928:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800492c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d002      	beq.n	800493c <aci_gatt_add_service+0xb4>
 8004936:	2b02      	cmp	r3, #2
 8004938:	d004      	beq.n	8004944 <aci_gatt_add_service+0xbc>
 800493a:	e007      	b.n	800494c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800493c:	2302      	movs	r3, #2
 800493e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8004942:	e005      	b.n	8004950 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8004944:	2310      	movs	r3, #16
 8004946:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800494a:	e001      	b.n	8004950 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800494c:	2397      	movs	r3, #151	@ 0x97
 800494e:	e06c      	b.n	8004a2a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8004950:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004954:	1c58      	adds	r0, r3, #1
 8004956:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800495a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800495e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004962:	6819      	ldr	r1, [r3, #0]
 8004964:	f000 fc4d 	bl	8005202 <Osal_MemCpy>
    index_input += size;
 8004968:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800496c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004970:	4413      	add	r3, r2
 8004972:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8004976:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800497a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800497e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8004982:	7812      	ldrb	r2, [r2, #0]
 8004984:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004986:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800498a:	3301      	adds	r3, #1
 800498c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8004990:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004994:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004998:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800499c:	7812      	ldrb	r2, [r2, #0]
 800499e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80049a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80049a4:	3301      	adds	r3, #1
 80049a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80049aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049ae:	2218      	movs	r2, #24
 80049b0:	2100      	movs	r1, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fc35 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x3f;
 80049b8:	233f      	movs	r3, #63	@ 0x3f
 80049ba:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 80049be:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80049c2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80049c6:	f107 0310 	add.w	r3, r7, #16
 80049ca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80049ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80049d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80049d6:	f107 030c 	add.w	r3, r7, #12
 80049da:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80049de:	2303      	movs	r3, #3
 80049e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80049e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049e8:	2100      	movs	r1, #0
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fea2 	bl	8005734 <hci_send_req>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	da01      	bge.n	80049fa <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80049f6:	23ff      	movs	r3, #255	@ 0xff
 80049f8:	e017      	b.n	8004a2a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80049fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80049fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8004a08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004a0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	e00a      	b.n	8004a2a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8004a14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004a18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004a1c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8004a26:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd90      	pop	{r4, r7, pc}

08004a34 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b0d1      	sub	sp, #324	@ 0x144
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8004a42:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8004a46:	600a      	str	r2, [r1, #0]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004a4e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8004a52:	4622      	mov	r2, r4
 8004a54:	801a      	strh	r2, [r3, #0]
 8004a56:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004a5a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8004a5e:	4602      	mov	r2, r0
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004a66:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8004a6a:	460a      	mov	r2, r1
 8004a6c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8004a6e:	f107 0318 	add.w	r3, r7, #24
 8004a72:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004a76:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004a7a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d00a      	beq.n	8004a9a <aci_gatt_add_char+0x66>
 8004a84:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004a88:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d101      	bne.n	8004a96 <aci_gatt_add_char+0x62>
 8004a92:	2313      	movs	r3, #19
 8004a94:	e002      	b.n	8004a9c <aci_gatt_add_char+0x68>
 8004a96:	2303      	movs	r3, #3
 8004a98:	e000      	b.n	8004a9c <aci_gatt_add_char+0x68>
 8004a9a:	2305      	movs	r3, #5
 8004a9c:	f107 0218 	add.w	r2, r7, #24
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004aa6:	f107 0314 	add.w	r3, r7, #20
 8004aaa:	2203      	movs	r2, #3
 8004aac:	2100      	movs	r1, #0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fbb7 	bl	8005222 <Osal_MemSet>
  int index_input = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8004aba:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004abe:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8004ac2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8004ac6:	8812      	ldrh	r2, [r2, #0]
 8004ac8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004aca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004ace:	3302      	adds	r3, #2
 8004ad0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8004ad4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004ad8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8004adc:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8004ae0:	7812      	ldrb	r2, [r2, #0]
 8004ae2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004ae4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004ae8:	3301      	adds	r3, #1
 8004aea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8004aee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004af2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d002      	beq.n	8004b02 <aci_gatt_add_char+0xce>
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d004      	beq.n	8004b0a <aci_gatt_add_char+0xd6>
 8004b00:	e007      	b.n	8004b12 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8004b02:	2302      	movs	r3, #2
 8004b04:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8004b08:	e005      	b.n	8004b16 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8004b0a:	2310      	movs	r3, #16
 8004b0c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8004b10:	e001      	b.n	8004b16 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8004b12:	2397      	movs	r3, #151	@ 0x97
 8004b14:	e091      	b.n	8004c3a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8004b16:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004b1a:	1cd8      	adds	r0, r3, #3
 8004b1c:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8004b20:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004b24:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004b28:	6819      	ldr	r1, [r3, #0]
 8004b2a:	f000 fb6a 	bl	8005202 <Osal_MemCpy>
    index_input += size;
 8004b2e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8004b32:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8004b36:	4413      	add	r3, r2
 8004b38:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8004b3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004b40:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8004b44:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8004b48:	8812      	ldrh	r2, [r2, #0]
 8004b4a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004b4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004b50:	3302      	adds	r3, #2
 8004b52:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8004b56:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004b5a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8004b5e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8004b60:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004b64:	3301      	adds	r3, #1
 8004b66:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8004b6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004b6e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8004b72:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8004b74:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004b78:	3301      	adds	r3, #1
 8004b7a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8004b7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004b82:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8004b86:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8004b88:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8004b92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004b96:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8004b9a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8004b9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8004ba6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004baa:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8004bae:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8004bb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004bba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004bbe:	2218      	movs	r2, #24
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fb2d 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004bc8:	233f      	movs	r3, #63	@ 0x3f
 8004bca:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8004bce:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8004bd2:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8004bd6:	f107 0318 	add.w	r3, r7, #24
 8004bda:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8004bde:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004be2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8004be6:	f107 0314 	add.w	r3, r7, #20
 8004bea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8004bee:	2303      	movs	r3, #3
 8004bf0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004bf4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fd9a 	bl	8005734 <hci_send_req>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	da01      	bge.n	8004c0a <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8004c06:	23ff      	movs	r3, #255	@ 0xff
 8004c08:	e017      	b.n	8004c3a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8004c0a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004c0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8004c18:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004c1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	e00a      	b.n	8004c3a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8004c24:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004c28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004c2c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004c36:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd90      	pop	{r4, r7, pc}

08004c44 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8004c44:	b5b0      	push	{r4, r5, r7, lr}
 8004c46:	b0cc      	sub	sp, #304	@ 0x130
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4605      	mov	r5, r0
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	4610      	mov	r0, r2
 8004c50:	4619      	mov	r1, r3
 8004c52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c56:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8004c5a:	462a      	mov	r2, r5
 8004c5c:	801a      	strh	r2, [r3, #0]
 8004c5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c62:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004c66:	4622      	mov	r2, r4
 8004c68:	801a      	strh	r2, [r3, #0]
 8004c6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c6e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8004c72:	4602      	mov	r2, r0
 8004c74:	701a      	strb	r2, [r3, #0]
 8004c76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c7a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8004c7e:	460a      	mov	r2, r1
 8004c80:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8004c82:	f107 0310 	add.w	r3, r7, #16
 8004c86:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004c8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c8e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004c92:	2200      	movs	r2, #0
 8004c94:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8004c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004ca0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004ca4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8004ca8:	8812      	ldrh	r2, [r2, #0]
 8004caa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004cac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004cb0:	3302      	adds	r3, #2
 8004cb2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8004cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004cba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004cbe:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8004cc2:	8812      	ldrh	r2, [r2, #0]
 8004cc4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8004cc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004cca:	3302      	adds	r3, #2
 8004ccc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8004cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004cd4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004cd8:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8004cdc:	7812      	ldrb	r2, [r2, #0]
 8004cde:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004ce0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8004cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004cee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004cf2:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8004cf6:	7812      	ldrb	r2, [r2, #0]
 8004cf8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004cfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004cfe:	3301      	adds	r3, #1
 8004d00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8004d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004d08:	1d98      	adds	r0, r3, #6
 8004d0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004d0e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004d1a:	f000 fa72 	bl	8005202 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8004d1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004d22:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004d32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004d36:	2218      	movs	r2, #24
 8004d38:	2100      	movs	r1, #0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fa71 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004d40:	233f      	movs	r3, #63	@ 0x3f
 8004d42:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8004d46:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8004d4a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004d4e:	f107 0310 	add.w	r3, r7, #16
 8004d52:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004d56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004d5a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8004d5e:	f107 030f 	add.w	r3, r7, #15
 8004d62:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004d6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004d70:	2100      	movs	r1, #0
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fcde 	bl	8005734 <hci_send_req>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	da01      	bge.n	8004d82 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8004d7e:	23ff      	movs	r3, #255	@ 0xff
 8004d80:	e004      	b.n	8004d8c <aci_gatt_update_char_value+0x148>
  return status;
 8004d82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004d86:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004d8a:	781b      	ldrb	r3, [r3, #0]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bdb0      	pop	{r4, r5, r7, pc}

08004d96 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b0cc      	sub	sp, #304	@ 0x130
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004da2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8004da6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8004da8:	f107 0310 	add.w	r3, r7, #16
 8004dac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004db0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004db4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004db8:	2200      	movs	r2, #0
 8004dba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8004dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004dc6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004dca:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8004dce:	8812      	ldrh	r2, [r2, #0]
 8004dd0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004dd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004dd6:	3302      	adds	r3, #2
 8004dd8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004ddc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004de0:	2218      	movs	r2, #24
 8004de2:	2100      	movs	r1, #0
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fa1c 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004dea:	233f      	movs	r3, #63	@ 0x3f
 8004dec:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8004df0:	f240 1325 	movw	r3, #293	@ 0x125
 8004df4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004df8:	f107 0310 	add.w	r3, r7, #16
 8004dfc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004e00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004e04:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8004e08:	f107 030f 	add.w	r3, r7, #15
 8004e0c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004e16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fc89 	bl	8005734 <hci_send_req>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	da01      	bge.n	8004e2c <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8004e28:	23ff      	movs	r3, #255	@ 0xff
 8004e2a:	e004      	b.n	8004e36 <aci_gatt_confirm_indication+0xa0>
  return status;
 8004e2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004e30:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004e34:	781b      	ldrb	r3, [r3, #0]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b0cc      	sub	sp, #304	@ 0x130
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004e4a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004e54:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8004e58:	4602      	mov	r2, r0
 8004e5a:	701a      	strb	r2, [r3, #0]
 8004e5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004e60:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8004e64:	460a      	mov	r2, r1
 8004e66:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8004e68:	f107 0310 	add.w	r3, r7, #16
 8004e6c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004e70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004e74:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8004e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004e86:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004e8a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8004e8e:	7812      	ldrb	r2, [r2, #0]
 8004e90:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004e92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004e96:	3301      	adds	r3, #1
 8004e98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8004e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004ea0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004ea4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8004ea8:	7812      	ldrb	r2, [r2, #0]
 8004eaa:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004eac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8004eb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004eba:	1c98      	adds	r0, r3, #2
 8004ebc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004ec0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8004ec4:	781a      	ldrb	r2, [r3, #0]
 8004ec6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004eca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004ece:	6819      	ldr	r1, [r3, #0]
 8004ed0:	f000 f997 	bl	8005202 <Osal_MemCpy>
  index_input += Length;
 8004ed4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004ed8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004ee8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004eec:	2218      	movs	r2, #24
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 f996 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004ef6:	233f      	movs	r3, #63	@ 0x3f
 8004ef8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8004efc:	230c      	movs	r3, #12
 8004efe:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004f02:	f107 0310 	add.w	r3, r7, #16
 8004f06:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004f0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004f0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8004f12:	f107 030f 	add.w	r3, r7, #15
 8004f16:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004f20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f24:	2100      	movs	r1, #0
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fc04 	bl	8005734 <hci_send_req>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	da01      	bge.n	8004f36 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8004f32:	23ff      	movs	r3, #255	@ 0xff
 8004f34:	e004      	b.n	8004f40 <aci_hal_write_config_data+0x100>
  return status;
 8004f36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004f3a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004f3e:	781b      	ldrb	r3, [r3, #0]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b0cc      	sub	sp, #304	@ 0x130
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	4602      	mov	r2, r0
 8004f52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004f56:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004f60:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8004f64:	460a      	mov	r2, r1
 8004f66:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8004f68:	f107 0310 	add.w	r3, r7, #16
 8004f6c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004f70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004f74:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8004f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004f86:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004f8a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8004f8e:	7812      	ldrb	r2, [r2, #0]
 8004f90:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004f92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004f96:	3301      	adds	r3, #1
 8004f98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8004f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004fa0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004fa4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8004fa8:	7812      	ldrb	r2, [r2, #0]
 8004faa:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004fac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004fb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004fba:	2218      	movs	r2, #24
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 f92f 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004fc4:	233f      	movs	r3, #63	@ 0x3f
 8004fc6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8004fca:	230f      	movs	r3, #15
 8004fcc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004fd0:	f107 0310 	add.w	r3, r7, #16
 8004fd4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004fd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004fdc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8004fe0:	f107 030f 	add.w	r3, r7, #15
 8004fe4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004fee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fb9d 	bl	8005734 <hci_send_req>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	da01      	bge.n	8005004 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8005000:	23ff      	movs	r3, #255	@ 0xff
 8005002:	e004      	b.n	800500e <aci_hal_set_tx_power_level+0xc4>
  return status;
 8005004:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005008:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800500c:	781b      	ldrb	r3, [r3, #0]
}
 800500e:	4618      	mov	r0, r3
 8005010:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b0cc      	sub	sp, #304	@ 0x130
 800501c:	af00      	add	r7, sp, #0
 800501e:	4602      	mov	r2, r0
 8005020:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005024:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005028:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800502a:	f107 0310 	add.w	r3, r7, #16
 800502e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005032:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005036:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800503a:	2200      	movs	r2, #0
 800503c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800503e:	2300      	movs	r3, #0
 8005040:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8005044:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005048:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800504c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005050:	8812      	ldrh	r2, [r2, #0]
 8005052:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005054:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005058:	3302      	adds	r3, #2
 800505a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800505e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005062:	2218      	movs	r2, #24
 8005064:	2100      	movs	r1, #0
 8005066:	4618      	mov	r0, r3
 8005068:	f000 f8db 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x3f;
 800506c:	233f      	movs	r3, #63	@ 0x3f
 800506e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8005072:	2318      	movs	r3, #24
 8005074:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005078:	f107 0310 	add.w	r3, r7, #16
 800507c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005080:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005084:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005088:	f107 030f 	add.w	r3, r7, #15
 800508c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005090:	2301      	movs	r3, #1
 8005092:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005096:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fb49 	bl	8005734 <hci_send_req>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	da01      	bge.n	80050ac <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80050a8:	23ff      	movs	r3, #255	@ 0xff
 80050aa:	e004      	b.n	80050b6 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80050ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80050b0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80050b4:	781b      	ldrb	r3, [r3, #0]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80050c6:	2300      	movs	r3, #0
 80050c8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80050ca:	f107 0308 	add.w	r3, r7, #8
 80050ce:	2218      	movs	r2, #24
 80050d0:	2100      	movs	r1, #0
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 f8a5 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x03;
 80050d8:	2303      	movs	r3, #3
 80050da:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80050dc:	2303      	movs	r3, #3
 80050de:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80050e0:	1dfb      	adds	r3, r7, #7
 80050e2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80050e4:	2301      	movs	r3, #1
 80050e6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80050e8:	f107 0308 	add.w	r3, r7, #8
 80050ec:	2100      	movs	r1, #0
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fb20 	bl	8005734 <hci_send_req>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	da01      	bge.n	80050fe <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80050fa:	23ff      	movs	r3, #255	@ 0xff
 80050fc:	e000      	b.n	8005100 <hci_reset+0x40>
  return status;
 80050fe:	79fb      	ldrb	r3, [r7, #7]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3720      	adds	r7, #32
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8005108:	b590      	push	{r4, r7, lr}
 800510a:	b0cd      	sub	sp, #308	@ 0x134
 800510c:	af00      	add	r7, sp, #0
 800510e:	4604      	mov	r4, r0
 8005110:	4608      	mov	r0, r1
 8005112:	4611      	mov	r1, r2
 8005114:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005118:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800511c:	4622      	mov	r2, r4
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005124:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005128:	4602      	mov	r2, r0
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005130:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005134:	460a      	mov	r2, r1
 8005136:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8005138:	f107 0310 	add.w	r3, r7, #16
 800513c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005140:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005144:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005148:	2200      	movs	r2, #0
 800514a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800514c:	2300      	movs	r3, #0
 800514e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8005152:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005156:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800515a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800515e:	7812      	ldrb	r2, [r2, #0]
 8005160:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005162:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005166:	3301      	adds	r3, #1
 8005168:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800516c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005170:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005174:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005178:	7812      	ldrb	r2, [r2, #0]
 800517a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800517c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005180:	3301      	adds	r3, #1
 8005182:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8005186:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800518a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800518e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005192:	7812      	ldrb	r2, [r2, #0]
 8005194:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005196:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800519a:	3301      	adds	r3, #1
 800519c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80051a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80051a4:	2218      	movs	r2, #24
 80051a6:	2100      	movs	r1, #0
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 f83a 	bl	8005222 <Osal_MemSet>
  rq.ogf = 0x08;
 80051ae:	2308      	movs	r3, #8
 80051b0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 80051b4:	2331      	movs	r3, #49	@ 0x31
 80051b6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80051ba:	f107 0310 	add.w	r3, r7, #16
 80051be:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80051c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80051c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80051ca:	f107 030f 	add.w	r3, r7, #15
 80051ce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80051d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80051dc:	2100      	movs	r1, #0
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 faa8 	bl	8005734 <hci_send_req>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	da01      	bge.n	80051ee <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80051ea:	23ff      	movs	r3, #255	@ 0xff
 80051ec:	e004      	b.n	80051f8 <hci_le_set_default_phy+0xf0>
  return status;
 80051ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80051f2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80051f6:	781b      	ldrb	r3, [r3, #0]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd90      	pop	{r4, r7, pc}

08005202 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b084      	sub	sp, #16
 8005206:	af00      	add	r7, sp, #0
 8005208:	60f8      	str	r0, [r7, #12]
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	68b9      	ldr	r1, [r7, #8]
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f002 fa1e 	bl	8007654 <memcpy>
 8005218:	4603      	mov	r3, r0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f002 f9e2 	bl	80075fc <memset>
 8005238:	4603      	mov	r3, r0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8005242:	b480      	push	{r7}
 8005244:	af00      	add	r7, sp, #0
  return;
 8005246:	bf00      	nop
}
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  return;
 8005254:	bf00      	nop
}
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800525e:	b480      	push	{r7}
 8005260:	af00      	add	r7, sp, #0
  return;
 8005262:	bf00      	nop
}
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  return;
 8005270:	bf00      	nop
}
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800527a:	b480      	push	{r7}
 800527c:	af00      	add	r7, sp, #0
  return;
 800527e:	bf00      	nop
}
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  return;
 800528c:	bf00      	nop
}
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8005296:	b480      	push	{r7}
 8005298:	af00      	add	r7, sp, #0
  return;
 800529a:	bf00      	nop
}
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  return;
 80052a8:	bf00      	nop
}
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80052b2:	b480      	push	{r7}
 80052b4:	af00      	add	r7, sp, #0
  return;
 80052b6:	bf00      	nop
}
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  return;
 80052c4:	bf00      	nop
}
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80052ce:	b480      	push	{r7}
 80052d0:	af00      	add	r7, sp, #0
  return;
 80052d2:	bf00      	nop
}
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  return;
 80052e0:	bf00      	nop
}
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80052ea:	b480      	push	{r7}
 80052ec:	af00      	add	r7, sp, #0
  return;
 80052ee:	bf00      	nop
}
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  return;
 80052fc:	bf00      	nop
}
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8005306:	b480      	push	{r7}
 8005308:	af00      	add	r7, sp, #0
  return;
 800530a:	bf00      	nop
}
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  return;
 8005318:	bf00      	nop
}
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8005322:	b480      	push	{r7}
 8005324:	af00      	add	r7, sp, #0
  return;
 8005326:	bf00      	nop
}
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8005334:	4b04      	ldr	r3, [pc, #16]	@ (8005348 <SVCCTL_Init+0x18>)
 8005336:	2200      	movs	r2, #0
 8005338:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800533a:	4b04      	ldr	r3, [pc, #16]	@ (800534c <SVCCTL_Init+0x1c>)
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8005340:	f000 f806 	bl	8005350 <SVCCTL_SvcInit>

  return;
 8005344:	bf00      	nop
}
 8005346:	bd80      	pop	{r7, pc}
 8005348:	2000002c 	.word	0x2000002c
 800534c:	2000004c 	.word	0x2000004c

08005350 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  BAS_Init();
 8005354:	f7ff ff75 	bl	8005242 <BAS_Init>

  BLS_Init();
 8005358:	f7ff ff7a 	bl	8005250 <BLS_Init>

  CRS_STM_Init();
 800535c:	f7ff ff7f 	bl	800525e <CRS_STM_Init>

  DIS_Init();
 8005360:	f7ff ff84 	bl	800526c <DIS_Init>

  EDS_STM_Init();
 8005364:	f7ff ff89 	bl	800527a <EDS_STM_Init>

  HIDS_Init();
 8005368:	f7ff ff8e 	bl	8005288 <HIDS_Init>

  HRS_Init();
 800536c:	f7ff ff93 	bl	8005296 <HRS_Init>

  HTS_Init();
 8005370:	f7ff ff98 	bl	80052a4 <HTS_Init>

  IAS_Init();
 8005374:	f7ff ff9d 	bl	80052b2 <IAS_Init>

  LLS_Init();
 8005378:	f7ff ffa2 	bl	80052c0 <LLS_Init>

  TPS_Init();
 800537c:	f7ff ffa7 	bl	80052ce <TPS_Init>

  MOTENV_STM_Init();
 8005380:	f7ff ffac 	bl	80052dc <MOTENV_STM_Init>

  P2PS_STM_Init();
 8005384:	f7ff ffb1 	bl	80052ea <P2PS_STM_Init>

  ZDD_STM_Init();
 8005388:	f7ff ffb6 	bl	80052f8 <ZDD_STM_Init>

  OTAS_STM_Init();
 800538c:	f7ff ffbb 	bl	8005306 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8005390:	f7ff ffc7 	bl	8005322 <BVOPUS_STM_Init>

  MESH_Init();
 8005394:	f7ff ffbe 	bl	8005314 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8005398:	f001 fb82 	bl	8006aa0 <SVCCTL_InitCustomSvc>
  
  return;
 800539c:	bf00      	nop
}
 800539e:	bd80      	pop	{r7, pc}

080053a0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80053a8:	4b09      	ldr	r3, [pc, #36]	@ (80053d0 <SVCCTL_RegisterSvcHandler+0x30>)
 80053aa:	7f1b      	ldrb	r3, [r3, #28]
 80053ac:	4619      	mov	r1, r3
 80053ae:	4a08      	ldr	r2, [pc, #32]	@ (80053d0 <SVCCTL_RegisterSvcHandler+0x30>)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80053b6:	4b06      	ldr	r3, [pc, #24]	@ (80053d0 <SVCCTL_RegisterSvcHandler+0x30>)
 80053b8:	7f1b      	ldrb	r3, [r3, #28]
 80053ba:	3301      	adds	r3, #1
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	4b04      	ldr	r3, [pc, #16]	@ (80053d0 <SVCCTL_RegisterSvcHandler+0x30>)
 80053c0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80053c2:	bf00      	nop
}
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	2000002c 	.word	0x2000002c

080053d4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3301      	adds	r3, #1
 80053e0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80053e2:	2300      	movs	r3, #0
 80053e4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2bff      	cmp	r3, #255	@ 0xff
 80053ec:	d125      	bne.n	800543a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	3302      	adds	r3, #2
 80053f2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80053fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005402:	d118      	bne.n	8005436 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005404:	2300      	movs	r3, #0
 8005406:	757b      	strb	r3, [r7, #21]
 8005408:	e00d      	b.n	8005426 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800540a:	7d7b      	ldrb	r3, [r7, #21]
 800540c:	4a1a      	ldr	r2, [pc, #104]	@ (8005478 <SVCCTL_UserEvtRx+0xa4>)
 800540e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	4798      	blx	r3
 8005416:	4603      	mov	r3, r0
 8005418:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800541a:	7dfb      	ldrb	r3, [r7, #23]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d108      	bne.n	8005432 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005420:	7d7b      	ldrb	r3, [r7, #21]
 8005422:	3301      	adds	r3, #1
 8005424:	757b      	strb	r3, [r7, #21]
 8005426:	4b14      	ldr	r3, [pc, #80]	@ (8005478 <SVCCTL_UserEvtRx+0xa4>)
 8005428:	7f1b      	ldrb	r3, [r3, #28]
 800542a:	7d7a      	ldrb	r2, [r7, #21]
 800542c:	429a      	cmp	r2, r3
 800542e:	d3ec      	bcc.n	800540a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8005430:	e002      	b.n	8005438 <SVCCTL_UserEvtRx+0x64>
              break;
 8005432:	bf00      	nop
          break;
 8005434:	e000      	b.n	8005438 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8005436:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8005438:	e000      	b.n	800543c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800543a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800543c:	7dfb      	ldrb	r3, [r7, #23]
 800543e:	2b02      	cmp	r3, #2
 8005440:	d00f      	beq.n	8005462 <SVCCTL_UserEvtRx+0x8e>
 8005442:	2b02      	cmp	r3, #2
 8005444:	dc10      	bgt.n	8005468 <SVCCTL_UserEvtRx+0x94>
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <SVCCTL_UserEvtRx+0x7c>
 800544a:	2b01      	cmp	r3, #1
 800544c:	d006      	beq.n	800545c <SVCCTL_UserEvtRx+0x88>
 800544e:	e00b      	b.n	8005468 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 ff8f 	bl	8006374 <SVCCTL_App_Notification>
 8005456:	4603      	mov	r3, r0
 8005458:	75bb      	strb	r3, [r7, #22]
      break;
 800545a:	e008      	b.n	800546e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800545c:	2301      	movs	r3, #1
 800545e:	75bb      	strb	r3, [r7, #22]
      break;
 8005460:	e005      	b.n	800546e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8005462:	2300      	movs	r3, #0
 8005464:	75bb      	strb	r3, [r7, #22]
      break;
 8005466:	e002      	b.n	800546e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8005468:	2301      	movs	r3, #1
 800546a:	75bb      	strb	r3, [r7, #22]
      break;
 800546c:	bf00      	nop
  }

  return (return_status);
 800546e:	7dbb      	ldrb	r3, [r7, #22]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	2000002c 	.word	0x2000002c

0800547c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005484:	f107 030c 	add.w	r3, r7, #12
 8005488:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	212e      	movs	r1, #46	@ 0x2e
 8005494:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8005498:	f000 fae8 	bl	8005a6c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	330b      	adds	r3, #11
 80054a0:	78db      	ldrb	r3, [r3, #3]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b088      	sub	sp, #32
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80054b2:	f107 030c 	add.w	r3, r7, #12
 80054b6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	210f      	movs	r1, #15
 80054c2:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 80054c6:	f000 fad1 	bl	8005a6c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	330b      	adds	r3, #11
 80054ce:	78db      	ldrb	r3, [r3, #3]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80054e0:	f107 030c 	add.w	r3, r7, #12
 80054e4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	2110      	movs	r1, #16
 80054ec:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 80054f0:	f000 fabc 	bl	8005a6c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	330b      	adds	r3, #11
 80054f8:	78db      	ldrb	r3, [r3, #3]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3720      	adds	r7, #32
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8005504:	b480      	push	{r7}
 8005506:	b08b      	sub	sp, #44	@ 0x2c
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8005510:	2300      	movs	r3, #0
 8005512:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8005520:	2300      	movs	r3, #0
 8005522:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8005528:	2300      	movs	r3, #0
 800552a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800552c:	4b4a      	ldr	r3, [pc, #296]	@ (8005658 <SHCI_GetWirelessFwInfo+0x154>)
 800552e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005530:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005534:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800553e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a44      	ldr	r2, [pc, #272]	@ (800565c <SHCI_GetWirelessFwInfo+0x158>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d10f      	bne.n	8005570 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	e01a      	b.n	80055a6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8005578:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800557c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80055a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a8:	0e1b      	lsrs	r3, r3, #24
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80055b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b2:	0c1b      	lsrs	r3, r3, #16
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	0a1b      	lsrs	r3, r3, #8
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c6:	091b      	lsrs	r3, r3, #4
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80055d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	f003 030f 	and.w	r3, r3, #15
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	0e1b      	lsrs	r3, r3, #24
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	0c1b      	lsrs	r3, r3, #16
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	0a1b      	lsrs	r3, r3, #8
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	b2da      	uxtb	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	b2da      	uxtb	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	0e1b      	lsrs	r3, r3, #24
 8005614:	b2da      	uxtb	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	0c1b      	lsrs	r3, r3, #16
 800561e:	b2da      	uxtb	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	0a1b      	lsrs	r3, r3, #8
 8005628:	b2da      	uxtb	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	0e1b      	lsrs	r3, r3, #24
 8005632:	b2da      	uxtb	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	0c1b      	lsrs	r3, r3, #16
 800563c:	b2da      	uxtb	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	b2da      	uxtb	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	372c      	adds	r7, #44	@ 0x2c
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	58004000 	.word	0x58004000
 800565c:	a94656b9 	.word	0xa94656b9

08005660 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	4a08      	ldr	r2, [pc, #32]	@ (8005690 <hci_init+0x30>)
 8005670:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8005672:	4a08      	ldr	r2, [pc, #32]	@ (8005694 <hci_init+0x34>)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8005678:	4806      	ldr	r0, [pc, #24]	@ (8005694 <hci_init+0x34>)
 800567a:	f000 f979 	bl	8005970 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 f8da 	bl	800583c <TlInit>

  return;
 8005688:	bf00      	nop
}
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	200001c0 	.word	0x200001c0
 8005694:	20000198 	.word	0x20000198

08005698 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800569e:	4822      	ldr	r0, [pc, #136]	@ (8005728 <hci_user_evt_proc+0x90>)
 80056a0:	f000 fd32 	bl	8006108 <LST_is_empty>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d12b      	bne.n	8005702 <hci_user_evt_proc+0x6a>
 80056aa:	4b20      	ldr	r3, [pc, #128]	@ (800572c <hci_user_evt_proc+0x94>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d027      	beq.n	8005702 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80056b2:	f107 030c 	add.w	r3, r7, #12
 80056b6:	4619      	mov	r1, r3
 80056b8:	481b      	ldr	r0, [pc, #108]	@ (8005728 <hci_user_evt_proc+0x90>)
 80056ba:	f000 fdb4 	bl	8006226 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80056be:	4b1c      	ldr	r3, [pc, #112]	@ (8005730 <hci_user_evt_proc+0x98>)
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00c      	beq.n	80056e0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80056ca:	2301      	movs	r3, #1
 80056cc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80056ce:	4b18      	ldr	r3, [pc, #96]	@ (8005730 <hci_user_evt_proc+0x98>)
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	1d3a      	adds	r2, r7, #4
 80056d4:	4610      	mov	r0, r2
 80056d6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80056d8:	793a      	ldrb	r2, [r7, #4]
 80056da:	4b14      	ldr	r3, [pc, #80]	@ (800572c <hci_user_evt_proc+0x94>)
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	e002      	b.n	80056e6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80056e0:	4b12      	ldr	r3, [pc, #72]	@ (800572c <hci_user_evt_proc+0x94>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80056e6:	4b11      	ldr	r3, [pc, #68]	@ (800572c <hci_user_evt_proc+0x94>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d004      	beq.n	80056f8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fc0d 	bl	8005f10 <TL_MM_EvtDone>
 80056f6:	e004      	b.n	8005702 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4619      	mov	r1, r3
 80056fc:	480a      	ldr	r0, [pc, #40]	@ (8005728 <hci_user_evt_proc+0x90>)
 80056fe:	f000 fd25 	bl	800614c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8005702:	4809      	ldr	r0, [pc, #36]	@ (8005728 <hci_user_evt_proc+0x90>)
 8005704:	f000 fd00 	bl	8006108 <LST_is_empty>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d107      	bne.n	800571e <hci_user_evt_proc+0x86>
 800570e:	4b07      	ldr	r3, [pc, #28]	@ (800572c <hci_user_evt_proc+0x94>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8005716:	4804      	ldr	r0, [pc, #16]	@ (8005728 <hci_user_evt_proc+0x90>)
 8005718:	f001 f852 	bl	80067c0 <hci_notify_asynch_evt>
  }


  return;
 800571c:	bf00      	nop
 800571e:	bf00      	nop
}
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000054 	.word	0x20000054
 800572c:	20000060 	.word	0x20000060
 8005730:	20000198 	.word	0x20000198

08005734 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8005740:	2000      	movs	r0, #0
 8005742:	f000 f8d1 	bl	80058e8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8005746:	2300      	movs	r3, #0
 8005748:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	885b      	ldrh	r3, [r3, #2]
 800574e:	b21b      	sxth	r3, r3
 8005750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005754:	b21a      	sxth	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	029b      	lsls	r3, r3, #10
 800575c:	b21b      	sxth	r3, r3
 800575e:	4313      	orrs	r3, r2
 8005760:	b21b      	sxth	r3, r3
 8005762:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8005764:	4b33      	ldr	r3, [pc, #204]	@ (8005834 <hci_send_req+0x100>)
 8005766:	2201      	movs	r2, #1
 8005768:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	b2d9      	uxtb	r1, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	8bbb      	ldrh	r3, [r7, #28]
 8005776:	4618      	mov	r0, r3
 8005778:	f000 f890 	bl	800589c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800577c:	e04e      	b.n	800581c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800577e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8005782:	f001 f834 	bl	80067ee <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005786:	e043      	b.n	8005810 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8005788:	f107 030c 	add.w	r3, r7, #12
 800578c:	4619      	mov	r1, r3
 800578e:	482a      	ldr	r0, [pc, #168]	@ (8005838 <hci_send_req+0x104>)
 8005790:	f000 fd49 	bl	8006226 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	7a5b      	ldrb	r3, [r3, #9]
 8005798:	2b0f      	cmp	r3, #15
 800579a:	d114      	bne.n	80057c6 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	330b      	adds	r3, #11
 80057a0:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	885b      	ldrh	r3, [r3, #2]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	8bba      	ldrh	r2, [r7, #28]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d104      	bne.n	80057b8 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	7812      	ldrb	r2, [r2, #0]
 80057b6:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	785b      	ldrb	r3, [r3, #1]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d027      	beq.n	8005810 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80057c0:	2301      	movs	r3, #1
 80057c2:	77fb      	strb	r3, [r7, #31]
 80057c4:	e024      	b.n	8005810 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	330b      	adds	r3, #11
 80057ca:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	8bba      	ldrh	r2, [r7, #28]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d114      	bne.n	8005804 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	7a9b      	ldrb	r3, [r3, #10]
 80057de:	3b03      	subs	r3, #3
 80057e0:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	7dfb      	ldrb	r3, [r7, #23]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	bfa8      	it	ge
 80057ec:	461a      	movge	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6918      	ldr	r0, [r3, #16]
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	1cd9      	adds	r1, r3, #3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	461a      	mov	r2, r3
 8005800:	f001 ff28 	bl	8007654 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800580c:	2301      	movs	r3, #1
 800580e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005810:	4809      	ldr	r0, [pc, #36]	@ (8005838 <hci_send_req+0x104>)
 8005812:	f000 fc79 	bl	8006108 <LST_is_empty>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0b5      	beq.n	8005788 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800581c:	7ffb      	ldrb	r3, [r7, #31]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0ad      	beq.n	800577e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8005822:	2001      	movs	r0, #1
 8005824:	f000 f860 	bl	80058e8 <NotifyCmdStatus>

  return 0;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3720      	adds	r7, #32
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	200001c4 	.word	0x200001c4
 8005838:	200001b8 	.word	0x200001b8

0800583c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8005844:	480f      	ldr	r0, [pc, #60]	@ (8005884 <TlInit+0x48>)
 8005846:	f000 fc4f 	bl	80060e8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800584a:	4a0f      	ldr	r2, [pc, #60]	@ (8005888 <TlInit+0x4c>)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8005850:	480e      	ldr	r0, [pc, #56]	@ (800588c <TlInit+0x50>)
 8005852:	f000 fc49 	bl	80060e8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005856:	4b0e      	ldr	r3, [pc, #56]	@ (8005890 <TlInit+0x54>)
 8005858:	2201      	movs	r2, #1
 800585a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800585c:	4b0d      	ldr	r3, [pc, #52]	@ (8005894 <TlInit+0x58>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8005868:	4b0b      	ldr	r3, [pc, #44]	@ (8005898 <TlInit+0x5c>)
 800586a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800586c:	4b09      	ldr	r3, [pc, #36]	@ (8005894 <TlInit+0x58>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f107 0208 	add.w	r2, r7, #8
 8005874:	4610      	mov	r0, r2
 8005876:	4798      	blx	r3
  }

  return;
 8005878:	bf00      	nop
 800587a:	bf00      	nop
}
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	200001b8 	.word	0x200001b8
 8005888:	2000005c 	.word	0x2000005c
 800588c:	20000054 	.word	0x20000054
 8005890:	20000060 	.word	0x20000060
 8005894:	20000198 	.word	0x20000198
 8005898:	08005929 	.word	0x08005929

0800589c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	4603      	mov	r3, r0
 80058a4:	603a      	str	r2, [r7, #0]
 80058a6:	80fb      	strh	r3, [r7, #6]
 80058a8:	460b      	mov	r3, r1
 80058aa:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80058ac:	4b0c      	ldr	r3, [pc, #48]	@ (80058e0 <SendCmd+0x44>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	88fa      	ldrh	r2, [r7, #6]
 80058b2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80058b6:	4b0a      	ldr	r3, [pc, #40]	@ (80058e0 <SendCmd+0x44>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	797a      	ldrb	r2, [r7, #5]
 80058bc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80058be:	4b08      	ldr	r3, [pc, #32]	@ (80058e0 <SendCmd+0x44>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	330c      	adds	r3, #12
 80058c4:	797a      	ldrb	r2, [r7, #5]
 80058c6:	6839      	ldr	r1, [r7, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 fec3 	bl	8007654 <memcpy>

  hciContext.io.Send(0,0);
 80058ce:	4b05      	ldr	r3, [pc, #20]	@ (80058e4 <SendCmd+0x48>)
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2100      	movs	r1, #0
 80058d4:	2000      	movs	r0, #0
 80058d6:	4798      	blx	r3

  return;
 80058d8:	bf00      	nop
}
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	2000005c 	.word	0x2000005c
 80058e4:	20000198 	.word	0x20000198

080058e8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	4603      	mov	r3, r0
 80058f0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80058f2:	79fb      	ldrb	r3, [r7, #7]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d108      	bne.n	800590a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80058f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005924 <NotifyCmdStatus+0x3c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00d      	beq.n	800591c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8005900:	4b08      	ldr	r3, [pc, #32]	@ (8005924 <NotifyCmdStatus+0x3c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2000      	movs	r0, #0
 8005906:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8005908:	e008      	b.n	800591c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800590a:	4b06      	ldr	r3, [pc, #24]	@ (8005924 <NotifyCmdStatus+0x3c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d004      	beq.n	800591c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8005912:	4b04      	ldr	r3, [pc, #16]	@ (8005924 <NotifyCmdStatus+0x3c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2001      	movs	r0, #1
 8005918:	4798      	blx	r3
  return;
 800591a:	bf00      	nop
 800591c:	bf00      	nop
}
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	200001c0 	.word	0x200001c0

08005928 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	7a5b      	ldrb	r3, [r3, #9]
 8005934:	2b0f      	cmp	r3, #15
 8005936:	d003      	beq.n	8005940 <TlEvtReceived+0x18>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	7a5b      	ldrb	r3, [r3, #9]
 800593c:	2b0e      	cmp	r3, #14
 800593e:	d107      	bne.n	8005950 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	4809      	ldr	r0, [pc, #36]	@ (8005968 <TlEvtReceived+0x40>)
 8005944:	f000 fc28 	bl	8006198 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8005948:	2000      	movs	r0, #0
 800594a:	f000 ff45 	bl	80067d8 <hci_cmd_resp_release>
 800594e:	e006      	b.n	800595e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	4806      	ldr	r0, [pc, #24]	@ (800596c <TlEvtReceived+0x44>)
 8005954:	f000 fc20 	bl	8006198 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005958:	4804      	ldr	r0, [pc, #16]	@ (800596c <TlEvtReceived+0x44>)
 800595a:	f000 ff31 	bl	80067c0 <hci_notify_asynch_evt>
  }

  return;
 800595e:	bf00      	nop
}
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	200001b8 	.word	0x200001b8
 800596c:	20000054 	.word	0x20000054

08005970 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a05      	ldr	r2, [pc, #20]	@ (8005990 <hci_register_io_bus+0x20>)
 800597c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a04      	ldr	r2, [pc, #16]	@ (8005994 <hci_register_io_bus+0x24>)
 8005982:	611a      	str	r2, [r3, #16]

  return;
 8005984:	bf00      	nop
}
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	08005c89 	.word	0x08005c89
 8005994:	08005cf1 	.word	0x08005cf1

08005998 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	4a08      	ldr	r2, [pc, #32]	@ (80059c8 <shci_init+0x30>)
 80059a8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80059aa:	4a08      	ldr	r2, [pc, #32]	@ (80059cc <shci_init+0x34>)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80059b0:	4806      	ldr	r0, [pc, #24]	@ (80059cc <shci_init+0x34>)
 80059b2:	f000 f915 	bl	8005be0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 f898 	bl	8005af0 <TlInit>

  return;
 80059c0:	bf00      	nop
}
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	200001e8 	.word	0x200001e8
 80059cc:	200001c8 	.word	0x200001c8

080059d0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80059d6:	4822      	ldr	r0, [pc, #136]	@ (8005a60 <shci_user_evt_proc+0x90>)
 80059d8:	f000 fb96 	bl	8006108 <LST_is_empty>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d12b      	bne.n	8005a3a <shci_user_evt_proc+0x6a>
 80059e2:	4b20      	ldr	r3, [pc, #128]	@ (8005a64 <shci_user_evt_proc+0x94>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d027      	beq.n	8005a3a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80059ea:	f107 030c 	add.w	r3, r7, #12
 80059ee:	4619      	mov	r1, r3
 80059f0:	481b      	ldr	r0, [pc, #108]	@ (8005a60 <shci_user_evt_proc+0x90>)
 80059f2:	f000 fc18 	bl	8006226 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80059f6:	4b1c      	ldr	r3, [pc, #112]	@ (8005a68 <shci_user_evt_proc+0x98>)
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00c      	beq.n	8005a18 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8005a02:	2301      	movs	r3, #1
 8005a04:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005a06:	4b18      	ldr	r3, [pc, #96]	@ (8005a68 <shci_user_evt_proc+0x98>)
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	1d3a      	adds	r2, r7, #4
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8005a10:	793a      	ldrb	r2, [r7, #4]
 8005a12:	4b14      	ldr	r3, [pc, #80]	@ (8005a64 <shci_user_evt_proc+0x94>)
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	e002      	b.n	8005a1e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005a18:	4b12      	ldr	r3, [pc, #72]	@ (8005a64 <shci_user_evt_proc+0x94>)
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8005a1e:	4b11      	ldr	r3, [pc, #68]	@ (8005a64 <shci_user_evt_proc+0x94>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d004      	beq.n	8005a30 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 fa71 	bl	8005f10 <TL_MM_EvtDone>
 8005a2e:	e004      	b.n	8005a3a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4619      	mov	r1, r3
 8005a34:	480a      	ldr	r0, [pc, #40]	@ (8005a60 <shci_user_evt_proc+0x90>)
 8005a36:	f000 fb89 	bl	800614c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005a3a:	4809      	ldr	r0, [pc, #36]	@ (8005a60 <shci_user_evt_proc+0x90>)
 8005a3c:	f000 fb64 	bl	8006108 <LST_is_empty>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d107      	bne.n	8005a56 <shci_user_evt_proc+0x86>
 8005a46:	4b07      	ldr	r3, [pc, #28]	@ (8005a64 <shci_user_evt_proc+0x94>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8005a4e:	4804      	ldr	r0, [pc, #16]	@ (8005a60 <shci_user_evt_proc+0x90>)
 8005a50:	f7fa fdb7 	bl	80005c2 <shci_notify_asynch_evt>
  }


  return;
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
}
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20000064 	.word	0x20000064
 8005a64:	20000074 	.word	0x20000074
 8005a68:	200001c8 	.word	0x200001c8

08005a6c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60ba      	str	r2, [r7, #8]
 8005a74:	607b      	str	r3, [r7, #4]
 8005a76:	4603      	mov	r3, r0
 8005a78:	81fb      	strh	r3, [r7, #14]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8005a7e:	2000      	movs	r0, #0
 8005a80:	f000 f868 	bl	8005b54 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8005a84:	4b17      	ldr	r3, [pc, #92]	@ (8005ae4 <shci_send+0x78>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	89fa      	ldrh	r2, [r7, #14]
 8005a8a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8005a8e:	4b15      	ldr	r3, [pc, #84]	@ (8005ae4 <shci_send+0x78>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	7b7a      	ldrb	r2, [r7, #13]
 8005a94:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8005a96:	4b13      	ldr	r3, [pc, #76]	@ (8005ae4 <shci_send+0x78>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	7b7a      	ldrb	r2, [r7, #13]
 8005a9e:	68b9      	ldr	r1, [r7, #8]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f001 fdd7 	bl	8007654 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8005aa6:	4b10      	ldr	r3, [pc, #64]	@ (8005ae8 <shci_send+0x7c>)
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8005aac:	4b0f      	ldr	r3, [pc, #60]	@ (8005aec <shci_send+0x80>)
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8005ab6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8005aba:	f7fa fd99 	bl	80005f0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f103 0008 	add.w	r0, r3, #8
 8005ac4:	4b07      	ldr	r3, [pc, #28]	@ (8005ae4 <shci_send+0x78>)
 8005ac6:	6819      	ldr	r1, [r3, #0]
 8005ac8:	4b06      	ldr	r3, [pc, #24]	@ (8005ae4 <shci_send+0x78>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	789b      	ldrb	r3, [r3, #2]
 8005ace:	3303      	adds	r3, #3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f001 fdbf 	bl	8007654 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	f000 f83c 	bl	8005b54 <Cmd_SetStatus>

  return;
 8005adc:	bf00      	nop
}
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	20000070 	.word	0x20000070
 8005ae8:	200001ec 	.word	0x200001ec
 8005aec:	200001c8 	.word	0x200001c8

08005af0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8005af8:	4a10      	ldr	r2, [pc, #64]	@ (8005b3c <TlInit+0x4c>)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8005afe:	4810      	ldr	r0, [pc, #64]	@ (8005b40 <TlInit+0x50>)
 8005b00:	f000 faf2 	bl	80060e8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005b04:	2001      	movs	r0, #1
 8005b06:	f000 f825 	bl	8005b54 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8005b44 <TlInit+0x54>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8005b10:	4b0d      	ldr	r3, [pc, #52]	@ (8005b48 <TlInit+0x58>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00c      	beq.n	8005b32 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b4c <TlInit+0x5c>)
 8005b1e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005b20:	4b0b      	ldr	r3, [pc, #44]	@ (8005b50 <TlInit+0x60>)
 8005b22:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8005b24:	4b08      	ldr	r3, [pc, #32]	@ (8005b48 <TlInit+0x58>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f107 020c 	add.w	r2, r7, #12
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	4798      	blx	r3
  }

  return;
 8005b30:	bf00      	nop
 8005b32:	bf00      	nop
}
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20000070 	.word	0x20000070
 8005b40:	20000064 	.word	0x20000064
 8005b44:	20000074 	.word	0x20000074
 8005b48:	200001c8 	.word	0x200001c8
 8005b4c:	08005ba5 	.word	0x08005ba5
 8005b50:	08005bbd 	.word	0x08005bbd

08005b54 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10b      	bne.n	8005b7c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8005b64:	4b0d      	ldr	r3, [pc, #52]	@ (8005b9c <Cmd_SetStatus+0x48>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b9c <Cmd_SetStatus+0x48>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2000      	movs	r0, #0
 8005b72:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005b74:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba0 <Cmd_SetStatus+0x4c>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8005b7a:	e00b      	b.n	8005b94 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8005b7c:	4b08      	ldr	r3, [pc, #32]	@ (8005ba0 <Cmd_SetStatus+0x4c>)
 8005b7e:	2201      	movs	r2, #1
 8005b80:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8005b82:	4b06      	ldr	r3, [pc, #24]	@ (8005b9c <Cmd_SetStatus+0x48>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d004      	beq.n	8005b94 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8005b8a:	4b04      	ldr	r3, [pc, #16]	@ (8005b9c <Cmd_SetStatus+0x48>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2001      	movs	r0, #1
 8005b90:	4798      	blx	r3
  return;
 8005b92:	bf00      	nop
 8005b94:	bf00      	nop
}
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	200001e8 	.word	0x200001e8
 8005ba0:	2000006c 	.word	0x2000006c

08005ba4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8005bac:	2000      	movs	r0, #0
 8005bae:	f7fa fd14 	bl	80005da <shci_cmd_resp_release>

  return;
 8005bb2:	bf00      	nop
}
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	4805      	ldr	r0, [pc, #20]	@ (8005bdc <TlUserEvtReceived+0x20>)
 8005bc8:	f000 fae6 	bl	8006198 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005bcc:	4803      	ldr	r0, [pc, #12]	@ (8005bdc <TlUserEvtReceived+0x20>)
 8005bce:	f7fa fcf8 	bl	80005c2 <shci_notify_asynch_evt>

  return;
 8005bd2:	bf00      	nop
}
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000064 	.word	0x20000064

08005be0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a05      	ldr	r2, [pc, #20]	@ (8005c00 <shci_register_io_bus+0x20>)
 8005bec:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a04      	ldr	r2, [pc, #16]	@ (8005c04 <shci_register_io_bus+0x24>)
 8005bf2:	611a      	str	r2, [r3, #16]

  return;
 8005bf4:	bf00      	nop
}
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	08005d9d 	.word	0x08005d9d
 8005c04:	08005df1 	.word	0x08005df1

08005c08 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8005c0c:	f001 f9a8 	bl	8006f60 <HW_IPCC_Enable>

  return;
 8005c10:	bf00      	nop
}
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <TL_Init>:


void TL_Init( void )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005c18:	4b10      	ldr	r3, [pc, #64]	@ (8005c5c <TL_Init+0x48>)
 8005c1a:	4a11      	ldr	r2, [pc, #68]	@ (8005c60 <TL_Init+0x4c>)
 8005c1c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8005c5c <TL_Init+0x48>)
 8005c20:	4a10      	ldr	r2, [pc, #64]	@ (8005c64 <TL_Init+0x50>)
 8005c22:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005c24:	4b0d      	ldr	r3, [pc, #52]	@ (8005c5c <TL_Init+0x48>)
 8005c26:	4a10      	ldr	r2, [pc, #64]	@ (8005c68 <TL_Init+0x54>)
 8005c28:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c5c <TL_Init+0x48>)
 8005c2c:	4a0f      	ldr	r2, [pc, #60]	@ (8005c6c <TL_Init+0x58>)
 8005c2e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8005c30:	4b0a      	ldr	r3, [pc, #40]	@ (8005c5c <TL_Init+0x48>)
 8005c32:	4a0f      	ldr	r2, [pc, #60]	@ (8005c70 <TL_Init+0x5c>)
 8005c34:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8005c36:	4b09      	ldr	r3, [pc, #36]	@ (8005c5c <TL_Init+0x48>)
 8005c38:	4a0e      	ldr	r2, [pc, #56]	@ (8005c74 <TL_Init+0x60>)
 8005c3a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005c3c:	4b07      	ldr	r3, [pc, #28]	@ (8005c5c <TL_Init+0x48>)
 8005c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8005c78 <TL_Init+0x64>)
 8005c40:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8005c42:	4b06      	ldr	r3, [pc, #24]	@ (8005c5c <TL_Init+0x48>)
 8005c44:	4a0d      	ldr	r2, [pc, #52]	@ (8005c7c <TL_Init+0x68>)
 8005c46:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005c48:	4b04      	ldr	r3, [pc, #16]	@ (8005c5c <TL_Init+0x48>)
 8005c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8005c80 <TL_Init+0x6c>)
 8005c4c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005c4e:	4b03      	ldr	r3, [pc, #12]	@ (8005c5c <TL_Init+0x48>)
 8005c50:	4a0c      	ldr	r2, [pc, #48]	@ (8005c84 <TL_Init+0x70>)
 8005c52:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8005c54:	f001 f998 	bl	8006f88 <HW_IPCC_Init>

  return;
 8005c58:	bf00      	nop
}
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	20030000 	.word	0x20030000
 8005c60:	20030028 	.word	0x20030028
 8005c64:	20030048 	.word	0x20030048
 8005c68:	20030058 	.word	0x20030058
 8005c6c:	20030068 	.word	0x20030068
 8005c70:	20030070 	.word	0x20030070
 8005c74:	20030078 	.word	0x20030078
 8005c78:	20030080 	.word	0x20030080
 8005c7c:	2003009c 	.word	0x2003009c
 8005c80:	200300a0 	.word	0x200300a0
 8005c84:	200300ac 	.word	0x200300ac

08005c88 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8005c94:	4811      	ldr	r0, [pc, #68]	@ (8005cdc <TL_BLE_Init+0x54>)
 8005c96:	f000 fa27 	bl	80060e8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8005c9a:	4b11      	ldr	r3, [pc, #68]	@ (8005ce0 <TL_BLE_Init+0x58>)
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8005ce4 <TL_BLE_Init+0x5c>)
 8005cb4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4a08      	ldr	r2, [pc, #32]	@ (8005cdc <TL_BLE_Init+0x54>)
 8005cba:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8005cbc:	f001 f97a 	bl	8006fb4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a08      	ldr	r2, [pc, #32]	@ (8005ce8 <TL_BLE_Init+0x60>)
 8005cc6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	4a07      	ldr	r2, [pc, #28]	@ (8005cec <TL_BLE_Init+0x64>)
 8005cce:	6013      	str	r3, [r2, #0]

  return 0;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	200300c8 	.word	0x200300c8
 8005ce0:	20030000 	.word	0x20030000
 8005ce4:	20030a58 	.word	0x20030a58
 8005ce8:	200001f8 	.word	0x200001f8
 8005cec:	200001fc 	.word	0x200001fc

08005cf0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8005cfc:	4b09      	ldr	r3, [pc, #36]	@ (8005d24 <TL_BLE_SendCmd+0x34>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2201      	movs	r2, #1
 8005d04:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8005d06:	4b07      	ldr	r3, [pc, #28]	@ (8005d24 <TL_BLE_SendCmd+0x34>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	2001      	movs	r0, #1
 8005d10:	f000 f96c 	bl	8005fec <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8005d14:	f001 f958 	bl	8006fc8 <HW_IPCC_BLE_SendCmd>

  return 0;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20030000 	.word	0x20030000

08005d28 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8005d2e:	e01c      	b.n	8005d6a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8005d30:	1d3b      	adds	r3, r7, #4
 8005d32:	4619      	mov	r1, r3
 8005d34:	4812      	ldr	r0, [pc, #72]	@ (8005d80 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005d36:	f000 fa76 	bl	8006226 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	7a5b      	ldrb	r3, [r3, #9]
 8005d3e:	2b0f      	cmp	r3, #15
 8005d40:	d003      	beq.n	8005d4a <HW_IPCC_BLE_RxEvtNot+0x22>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	7a5b      	ldrb	r3, [r3, #9]
 8005d46:	2b0e      	cmp	r3, #14
 8005d48:	d105      	bne.n	8005d56 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	2002      	movs	r0, #2
 8005d50:	f000 f94c 	bl	8005fec <OutputDbgTrace>
 8005d54:	e004      	b.n	8005d60 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	2003      	movs	r0, #3
 8005d5c:	f000 f946 	bl	8005fec <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8005d60:	4b08      	ldr	r3, [pc, #32]	@ (8005d84 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	4610      	mov	r0, r2
 8005d68:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8005d6a:	4805      	ldr	r0, [pc, #20]	@ (8005d80 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005d6c:	f000 f9cc 	bl	8006108 <LST_is_empty>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0dc      	beq.n	8005d30 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8005d76:	bf00      	nop
}
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	200300c8 	.word	0x200300c8
 8005d84:	200001f8 	.word	0x200001f8

08005d88 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8005d8c:	4b02      	ldr	r3, [pc, #8]	@ (8005d98 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4798      	blx	r3

  return;
 8005d92:	bf00      	nop
}
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	200001fc 	.word	0x200001fc

08005d9c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8005da8:	480d      	ldr	r0, [pc, #52]	@ (8005de0 <TL_SYS_Init+0x44>)
 8005daa:	f000 f99d 	bl	80060e8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8005dae:	4b0d      	ldr	r3, [pc, #52]	@ (8005de4 <TL_SYS_Init+0x48>)
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4a08      	ldr	r2, [pc, #32]	@ (8005de0 <TL_SYS_Init+0x44>)
 8005dc0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8005dc2:	f001 f923 	bl	800700c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a07      	ldr	r2, [pc, #28]	@ (8005de8 <TL_SYS_Init+0x4c>)
 8005dcc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	4a06      	ldr	r2, [pc, #24]	@ (8005dec <TL_SYS_Init+0x50>)
 8005dd4:	6013      	str	r3, [r2, #0]

  return 0;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	200300d0 	.word	0x200300d0
 8005de4:	20030000 	.word	0x20030000
 8005de8:	20000200 	.word	0x20000200
 8005dec:	20000204 	.word	0x20000204

08005df0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8005dfc:	4b09      	ldr	r3, [pc, #36]	@ (8005e24 <TL_SYS_SendCmd+0x34>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2210      	movs	r2, #16
 8005e04:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8005e06:	4b07      	ldr	r3, [pc, #28]	@ (8005e24 <TL_SYS_SendCmd+0x34>)
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	2004      	movs	r0, #4
 8005e10:	f000 f8ec 	bl	8005fec <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8005e14:	f001 f904 	bl	8007020 <HW_IPCC_SYS_SendCmd>

  return 0;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20030000 	.word	0x20030000

08005e28 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005e2c:	4b07      	ldr	r3, [pc, #28]	@ (8005e4c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4619      	mov	r1, r3
 8005e34:	2005      	movs	r0, #5
 8005e36:	f000 f8d9 	bl	8005fec <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005e3a:	4b05      	ldr	r3, [pc, #20]	@ (8005e50 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a03      	ldr	r2, [pc, #12]	@ (8005e4c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005e40:	68d2      	ldr	r2, [r2, #12]
 8005e42:	6812      	ldr	r2, [r2, #0]
 8005e44:	4610      	mov	r0, r2
 8005e46:	4798      	blx	r3

  return;
 8005e48:	bf00      	nop
}
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	20030000 	.word	0x20030000
 8005e50:	20000200 	.word	0x20000200

08005e54 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005e5a:	e00e      	b.n	8005e7a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8005e5c:	1d3b      	adds	r3, r7, #4
 8005e5e:	4619      	mov	r1, r3
 8005e60:	480b      	ldr	r0, [pc, #44]	@ (8005e90 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005e62:	f000 f9e0 	bl	8006226 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	2006      	movs	r0, #6
 8005e6c:	f000 f8be 	bl	8005fec <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005e70:	4b08      	ldr	r3, [pc, #32]	@ (8005e94 <HW_IPCC_SYS_EvtNot+0x40>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	4610      	mov	r0, r2
 8005e78:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005e7a:	4805      	ldr	r0, [pc, #20]	@ (8005e90 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005e7c:	f000 f944 	bl	8006108 <LST_is_empty>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0ea      	beq.n	8005e5c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8005e86:	bf00      	nop
}
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	200300d0 	.word	0x200300d0
 8005e94:	20000204 	.word	0x20000204

08005e98 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8005ea0:	4817      	ldr	r0, [pc, #92]	@ (8005f00 <TL_MM_Init+0x68>)
 8005ea2:	f000 f921 	bl	80060e8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8005ea6:	4817      	ldr	r0, [pc, #92]	@ (8005f04 <TL_MM_Init+0x6c>)
 8005ea8:	f000 f91e 	bl	80060e8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005eac:	4b16      	ldr	r3, [pc, #88]	@ (8005f08 <TL_MM_Init+0x70>)
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	4a16      	ldr	r2, [pc, #88]	@ (8005f0c <TL_MM_Init+0x74>)
 8005eb2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005eb4:	4b15      	ldr	r3, [pc, #84]	@ (8005f0c <TL_MM_Init+0x74>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6892      	ldr	r2, [r2, #8]
 8005ebc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8005ebe:	4b13      	ldr	r3, [pc, #76]	@ (8005f0c <TL_MM_Init+0x74>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	68d2      	ldr	r2, [r2, #12]
 8005ec6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005ec8:	4b10      	ldr	r3, [pc, #64]	@ (8005f0c <TL_MM_Init+0x74>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8005f00 <TL_MM_Init+0x68>)
 8005ece:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8005f0c <TL_MM_Init+0x74>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6812      	ldr	r2, [r2, #0]
 8005ed8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005eda:	4b0c      	ldr	r3, [pc, #48]	@ (8005f0c <TL_MM_Init+0x74>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6852      	ldr	r2, [r2, #4]
 8005ee2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005ee4:	4b09      	ldr	r3, [pc, #36]	@ (8005f0c <TL_MM_Init+0x74>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	6912      	ldr	r2, [r2, #16]
 8005eec:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8005eee:	4b07      	ldr	r3, [pc, #28]	@ (8005f0c <TL_MM_Init+0x74>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6952      	ldr	r2, [r2, #20]
 8005ef6:	619a      	str	r2, [r3, #24]

  return;
 8005ef8:	bf00      	nop
}
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	200300b8 	.word	0x200300b8
 8005f04:	200001f0 	.word	0x200001f0
 8005f08:	20030000 	.word	0x20030000
 8005f0c:	20000208 	.word	0x20000208

08005f10 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	4807      	ldr	r0, [pc, #28]	@ (8005f38 <TL_MM_EvtDone+0x28>)
 8005f1c:	f000 f93c 	bl	8006198 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	2000      	movs	r0, #0
 8005f24:	f000 f862 	bl	8005fec <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8005f28:	4804      	ldr	r0, [pc, #16]	@ (8005f3c <TL_MM_EvtDone+0x2c>)
 8005f2a:	f001 f89f 	bl	800706c <HW_IPCC_MM_SendFreeBuf>

  return;
 8005f2e:	bf00      	nop
}
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	200001f0 	.word	0x200001f0
 8005f3c:	08005f41 	.word	0x08005f41

08005f40 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005f46:	e00c      	b.n	8005f62 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8005f48:	1d3b      	adds	r3, r7, #4
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	480a      	ldr	r0, [pc, #40]	@ (8005f78 <SendFreeBuf+0x38>)
 8005f4e:	f000 f96a 	bl	8006226 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8005f52:	4b0a      	ldr	r3, [pc, #40]	@ (8005f7c <SendFreeBuf+0x3c>)
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 f91b 	bl	8006198 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005f62:	4805      	ldr	r0, [pc, #20]	@ (8005f78 <SendFreeBuf+0x38>)
 8005f64:	f000 f8d0 	bl	8006108 <LST_is_empty>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0ec      	beq.n	8005f48 <SendFreeBuf+0x8>
  }

  return;
 8005f6e:	bf00      	nop
}
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	200001f0 	.word	0x200001f0
 8005f7c:	20030000 	.word	0x20030000

08005f80 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8005f84:	4805      	ldr	r0, [pc, #20]	@ (8005f9c <TL_TRACES_Init+0x1c>)
 8005f86:	f000 f8af 	bl	80060e8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8005f8a:	4b05      	ldr	r3, [pc, #20]	@ (8005fa0 <TL_TRACES_Init+0x20>)
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	4a03      	ldr	r2, [pc, #12]	@ (8005f9c <TL_TRACES_Init+0x1c>)
 8005f90:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8005f92:	f001 f8a1 	bl	80070d8 <HW_IPCC_TRACES_Init>

  return;
 8005f96:	bf00      	nop
}
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	200300c0 	.word	0x200300c0
 8005fa0:	20030000 	.word	0x20030000

08005fa4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8005faa:	e008      	b.n	8005fbe <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8005fac:	1d3b      	adds	r3, r7, #4
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4808      	ldr	r0, [pc, #32]	@ (8005fd4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8005fb2:	f000 f938 	bl	8006226 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 f80d 	bl	8005fd8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8005fbe:	4805      	ldr	r0, [pc, #20]	@ (8005fd4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8005fc0:	f000 f8a2 	bl	8006108 <LST_is_empty>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0f0      	beq.n	8005fac <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8005fca:	bf00      	nop
}
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	200300c0 	.word	0x200300c0

08005fd8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	6039      	str	r1, [r7, #0]
 8005ff6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8005ff8:	79fb      	ldrb	r3, [r7, #7]
 8005ffa:	2b06      	cmp	r3, #6
 8005ffc:	d845      	bhi.n	800608a <OutputDbgTrace+0x9e>
 8005ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8006004 <OutputDbgTrace+0x18>)
 8006000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006004:	08006021 	.word	0x08006021
 8006008:	08006045 	.word	0x08006045
 800600c:	0800604b 	.word	0x0800604b
 8006010:	0800605f 	.word	0x0800605f
 8006014:	0800606b 	.word	0x0800606b
 8006018:	08006071 	.word	0x08006071
 800601c:	0800607f 	.word	0x0800607f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	7a5b      	ldrb	r3, [r3, #9]
 8006028:	2bff      	cmp	r3, #255	@ 0xff
 800602a:	d005      	beq.n	8006038 <OutputDbgTrace+0x4c>
 800602c:	2bff      	cmp	r3, #255	@ 0xff
 800602e:	dc05      	bgt.n	800603c <OutputDbgTrace+0x50>
 8006030:	2b0e      	cmp	r3, #14
 8006032:	d005      	beq.n	8006040 <OutputDbgTrace+0x54>
 8006034:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8006036:	e001      	b.n	800603c <OutputDbgTrace+0x50>
          break;
 8006038:	bf00      	nop
 800603a:	e027      	b.n	800608c <OutputDbgTrace+0xa0>
          break;
 800603c:	bf00      	nop
 800603e:	e025      	b.n	800608c <OutputDbgTrace+0xa0>
          break;
 8006040:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8006042:	e023      	b.n	800608c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8006048:	e020      	b.n	800608c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	7a5b      	ldrb	r3, [r3, #9]
 8006052:	2b0e      	cmp	r3, #14
 8006054:	d001      	beq.n	800605a <OutputDbgTrace+0x6e>
 8006056:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8006058:	e000      	b.n	800605c <OutputDbgTrace+0x70>
          break;
 800605a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800605c:	e016      	b.n	800608c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	7a5b      	ldrb	r3, [r3, #9]
 8006066:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006068:	e010      	b.n	800608c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800606e:	e00d      	b.n	800608c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	7a5b      	ldrb	r3, [r3, #9]
 8006078:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800607a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800607c:	e006      	b.n	800608c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	7a5b      	ldrb	r3, [r3, #9]
 8006086:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006088:	e000      	b.n	800608c <OutputDbgTrace+0xa0>

    default:
      break;
 800608a:	bf00      	nop
  }

  return;
 800608c:	bf00      	nop
}
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	4603      	mov	r3, r0
 80060a0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80060a2:	4b0f      	ldr	r3, [pc, #60]	@ (80060e0 <OTP_Read+0x48>)
 80060a4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80060a6:	e002      	b.n	80060ae <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	3b08      	subs	r3, #8
 80060ac:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3307      	adds	r3, #7
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	79fa      	ldrb	r2, [r7, #7]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d003      	beq.n	80060c2 <OTP_Read+0x2a>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4a09      	ldr	r2, [pc, #36]	@ (80060e4 <OTP_Read+0x4c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d1f2      	bne.n	80060a8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3307      	adds	r3, #7
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	79fa      	ldrb	r2, [r7, #7]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d001      	beq.n	80060d2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80060ce:	2300      	movs	r3, #0
 80060d0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80060d2:	68fb      	ldr	r3, [r7, #12]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	1fff73f8 	.word	0x1fff73f8
 80060e4:	1fff7000 	.word	0x1fff7000

080060e8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	605a      	str	r2, [r3, #4]
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006110:	f3ef 8310 	mrs	r3, PRIMASK
 8006114:	60fb      	str	r3, [r7, #12]
  return(result);
 8006116:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800611a:	b672      	cpsid	i
}
 800611c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	429a      	cmp	r2, r3
 8006126:	d102      	bne.n	800612e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8006128:	2301      	movs	r3, #1
 800612a:	75fb      	strb	r3, [r7, #23]
 800612c:	e001      	b.n	8006132 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800612e:	2300      	movs	r3, #0
 8006130:	75fb      	strb	r3, [r7, #23]
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f383 8810 	msr	PRIMASK, r3
}
 800613c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800613e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006140:	4618      	mov	r0, r3
 8006142:	371c      	adds	r7, #28
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006156:	f3ef 8310 	mrs	r3, PRIMASK
 800615a:	60fb      	str	r3, [r7, #12]
  return(result);
 800615c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800615e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006160:	b672      	cpsid	i
}
 8006162:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	605a      	str	r2, [r3, #4]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f383 8810 	msr	PRIMASK, r3
}
 800618a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800618c:	bf00      	nop
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061a2:	f3ef 8310 	mrs	r3, PRIMASK
 80061a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80061a8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80061aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80061ac:	b672      	cpsid	i
}
 80061ae:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f383 8810 	msr	PRIMASK, r3
}
 80061d6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80061d8:	bf00      	nop
 80061da:	371c      	adds	r7, #28
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ec:	f3ef 8310 	mrs	r3, PRIMASK
 80061f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80061f2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80061f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80061f6:	b672      	cpsid	i
}
 80061f8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6852      	ldr	r2, [r2, #4]
 800620c:	605a      	str	r2, [r3, #4]
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f383 8810 	msr	PRIMASK, r3
}
 8006218:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800621a:	bf00      	nop
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b086      	sub	sp, #24
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006230:	f3ef 8310 	mrs	r3, PRIMASK
 8006234:	60fb      	str	r3, [r7, #12]
  return(result);
 8006236:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006238:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800623a:	b672      	cpsid	i
}
 800623c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff ffca 	bl	80061e4 <LST_remove_node>
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f383 8810 	msr	PRIMASK, r3
}
 800625a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800625c:	bf00      	nop
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8006264:	b480      	push	{r7}
 8006266:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8006268:	4b03      	ldr	r3, [pc, #12]	@ (8006278 <LL_FLASH_GetUDN+0x14>)
 800626a:	681b      	ldr	r3, [r3, #0]
}
 800626c:	4618      	mov	r0, r3
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	1fff7580 	.word	0x1fff7580

0800627c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8006280:	4b03      	ldr	r3, [pc, #12]	@ (8006290 <LL_FLASH_GetDeviceID+0x14>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	b2db      	uxtb	r3, r3
}
 8006286:	4618      	mov	r0, r3
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	1fff7584 	.word	0x1fff7584

08006294 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8006294:	b480      	push	{r7}
 8006296:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8006298:	4b03      	ldr	r3, [pc, #12]	@ (80062a8 <LL_FLASH_GetSTCompanyID+0x14>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	0a1b      	lsrs	r3, r3, #8
}
 800629e:	4618      	mov	r0, r3
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	1fff7584 	.word	0x1fff7584

080062ac <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80062ac:	b5b0      	push	{r4, r5, r7, lr}
 80062ae:	b090      	sub	sp, #64	@ 0x40
 80062b0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80062b2:	2392      	movs	r3, #146	@ 0x92
 80062b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 80062b8:	4a29      	ldr	r2, [pc, #164]	@ (8006360 <APP_BLE_Init+0xb4>)
 80062ba:	2100      	movs	r1, #0
 80062bc:	2008      	movs	r0, #8
 80062be:	f001 f85f 	bl	8007380 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 80062c2:	2100      	movs	r1, #0
 80062c4:	2008      	movs	r0, #8
 80062c6:	f001 f87d 	bl	80073c4 <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80062ca:	4b26      	ldr	r3, [pc, #152]	@ (8006364 <APP_BLE_Init+0xb8>)
 80062cc:	1d3c      	adds	r4, r7, #4
 80062ce:	461d      	mov	r5, r3
 80062d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80062e0:	c403      	stmia	r4!, {r0, r1}
 80062e2:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80062e4:	f000 f914 	bl	8006510 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80062e8:	2101      	movs	r1, #1
 80062ea:	2002      	movs	r0, #2
 80062ec:	f000 ff1c 	bl	8007128 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80062f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006368 <APP_BLE_Init+0xbc>)
 80062f2:	2100      	movs	r1, #0
 80062f4:	2002      	movs	r0, #2
 80062f6:	f001 f843 	bl	8007380 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80062fa:	1d3b      	adds	r3, r7, #4
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff f8bd 	bl	800547c <SHCI_C2_BLE_Init>
 8006302:	4603      	mov	r3, r0
 8006304:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8006308:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8006310:	f7fb f900 	bl	8001514 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8006314:	f000 f912 	bl	800653c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8006318:	f7ff f80a 	bl	8005330 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800631c:	4b13      	ldr	r3, [pc, #76]	@ (800636c <APP_BLE_Init+0xc0>)
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8006324:	4b11      	ldr	r3, [pc, #68]	@ (800636c <APP_BLE_Init+0xc0>)
 8006326:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800632a:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800632c:	4a10      	ldr	r2, [pc, #64]	@ (8006370 <APP_BLE_Init+0xc4>)
 800632e:	2100      	movs	r1, #0
 8006330:	2001      	movs	r0, #1
 8006332:	f001 f825 	bl	8007380 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8006336:	2006      	movs	r0, #6
 8006338:	f7fe fe6e 	bl	8005018 <aci_hal_set_radio_activity_mask>
 800633c:	4603      	mov	r3, r0
 800633e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8006342:	f000 fae9 	bl	8006918 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8006346:	4b09      	ldr	r3, [pc, #36]	@ (800636c <APP_BLE_Init+0xc0>)
 8006348:	2200      	movs	r2, #0
 800634a:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800634c:	4b07      	ldr	r3, [pc, #28]	@ (800636c <APP_BLE_Init+0xc0>)
 800634e:	2200      	movs	r2, #0
 8006350:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8006352:	2001      	movs	r0, #1
 8006354:	f000 f9a6 	bl	80066a4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8006358:	bf00      	nop
}
 800635a:	3740      	adds	r7, #64	@ 0x40
 800635c:	46bd      	mov	sp, r7
 800635e:	bdb0      	pop	{r4, r5, r7, pc}
 8006360:	08006875 	.word	0x08006875
 8006364:	080076d0 	.word	0x080076d0
 8006368:	08005699 	.word	0x08005699
 800636c:	20000214 	.word	0x20000214
 8006370:	0800678d 	.word	0x0800678d

08006374 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b08a      	sub	sp, #40	@ 0x28
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800637c:	2392      	movs	r3, #146	@ 0x92
 800637e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3301      	adds	r3, #1
 8006386:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2bff      	cmp	r3, #255	@ 0xff
 800638e:	d053      	beq.n	8006438 <SVCCTL_App_Notification+0xc4>
 8006390:	2bff      	cmp	r3, #255	@ 0xff
 8006392:	f300 80af 	bgt.w	80064f4 <SVCCTL_App_Notification+0x180>
 8006396:	2b05      	cmp	r3, #5
 8006398:	d002      	beq.n	80063a0 <SVCCTL_App_Notification+0x2c>
 800639a:	2b3e      	cmp	r3, #62	@ 0x3e
 800639c:	d020      	beq.n	80063e0 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800639e:	e0a9      	b.n	80064f4 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	3302      	adds	r3, #2
 80063a4:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	4b55      	ldr	r3, [pc, #340]	@ (8006504 <SVCCTL_App_Notification+0x190>)
 80063b0:	8adb      	ldrh	r3, [r3, #22]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d106      	bne.n	80063c4 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80063b6:	4b53      	ldr	r3, [pc, #332]	@ (8006504 <SVCCTL_App_Notification+0x190>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80063bc:	4b51      	ldr	r3, [pc, #324]	@ (8006504 <SVCCTL_App_Notification+0x190>)
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80063c4:	2001      	movs	r0, #1
 80063c6:	f000 f96d 	bl	80066a4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80063ca:	4b4f      	ldr	r3, [pc, #316]	@ (8006508 <SVCCTL_App_Notification+0x194>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80063d0:	4b4c      	ldr	r3, [pc, #304]	@ (8006504 <SVCCTL_App_Notification+0x190>)
 80063d2:	8ada      	ldrh	r2, [r3, #22]
 80063d4:	4b4c      	ldr	r3, [pc, #304]	@ (8006508 <SVCCTL_App_Notification+0x194>)
 80063d6:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80063d8:	484b      	ldr	r0, [pc, #300]	@ (8006508 <SVCCTL_App_Notification+0x194>)
 80063da:	f000 fa89 	bl	80068f0 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80063de:	e08c      	b.n	80064fa <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	3302      	adds	r3, #2
 80063e4:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d001      	beq.n	80063f2 <SVCCTL_App_Notification+0x7e>
 80063ee:	2b03      	cmp	r3, #3
          break;
 80063f0:	e021      	b.n	8006436 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	3301      	adds	r3, #1
 80063f6:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80063f8:	4b42      	ldr	r3, [pc, #264]	@ (8006504 <SVCCTL_App_Notification+0x190>)
 80063fa:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d104      	bne.n	800640c <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8006402:	4b40      	ldr	r3, [pc, #256]	@ (8006504 <SVCCTL_App_Notification+0x190>)
 8006404:	2206      	movs	r2, #6
 8006406:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800640a:	e003      	b.n	8006414 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800640c:	4b3d      	ldr	r3, [pc, #244]	@ (8006504 <SVCCTL_App_Notification+0x190>)
 800640e:	2205      	movs	r2, #5
 8006410:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800641a:	b29a      	uxth	r2, r3
 800641c:	4b39      	ldr	r3, [pc, #228]	@ (8006504 <SVCCTL_App_Notification+0x190>)
 800641e:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8006420:	4b39      	ldr	r3, [pc, #228]	@ (8006508 <SVCCTL_App_Notification+0x194>)
 8006422:	2200      	movs	r2, #0
 8006424:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8006426:	4b37      	ldr	r3, [pc, #220]	@ (8006504 <SVCCTL_App_Notification+0x190>)
 8006428:	8ada      	ldrh	r2, [r3, #22]
 800642a:	4b37      	ldr	r3, [pc, #220]	@ (8006508 <SVCCTL_App_Notification+0x194>)
 800642c:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800642e:	4836      	ldr	r0, [pc, #216]	@ (8006508 <SVCCTL_App_Notification+0x194>)
 8006430:	f000 fa5e 	bl	80068f0 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8006434:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8006436:	e060      	b.n	80064fa <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	3302      	adds	r3, #2
 800643c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	b29b      	uxth	r3, r3
 8006444:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8006448:	4293      	cmp	r3, r2
 800644a:	d047      	beq.n	80064dc <SVCCTL_App_Notification+0x168>
 800644c:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8006450:	4293      	cmp	r3, r2
 8006452:	dc51      	bgt.n	80064f8 <SVCCTL_App_Notification+0x184>
 8006454:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006458:	d046      	beq.n	80064e8 <SVCCTL_App_Notification+0x174>
 800645a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800645e:	dc4b      	bgt.n	80064f8 <SVCCTL_App_Notification+0x184>
 8006460:	2b04      	cmp	r3, #4
 8006462:	d043      	beq.n	80064ec <SVCCTL_App_Notification+0x178>
 8006464:	2b04      	cmp	r3, #4
 8006466:	db47      	blt.n	80064f8 <SVCCTL_App_Notification+0x184>
 8006468:	f240 420a 	movw	r2, #1034	@ 0x40a
 800646c:	4293      	cmp	r3, r2
 800646e:	dc43      	bgt.n	80064f8 <SVCCTL_App_Notification+0x184>
 8006470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006474:	dd40      	ble.n	80064f8 <SVCCTL_App_Notification+0x184>
 8006476:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800647a:	2b09      	cmp	r3, #9
 800647c:	d83c      	bhi.n	80064f8 <SVCCTL_App_Notification+0x184>
 800647e:	a201      	add	r2, pc, #4	@ (adr r2, 8006484 <SVCCTL_App_Notification+0x110>)
 8006480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006484:	080064d5 	.word	0x080064d5
 8006488:	080064ad 	.word	0x080064ad
 800648c:	080064f9 	.word	0x080064f9
 8006490:	080064f9 	.word	0x080064f9
 8006494:	080064f9 	.word	0x080064f9
 8006498:	080064f9 	.word	0x080064f9
 800649c:	080064f1 	.word	0x080064f1
 80064a0:	080064f9 	.word	0x080064f9
 80064a4:	080064c1 	.word	0x080064c1
 80064a8:	080064f1 	.word	0x080064f1
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80064ac:	4b15      	ldr	r3, [pc, #84]	@ (8006504 <SVCCTL_App_Notification+0x190>)
 80064ae:	8adb      	ldrh	r3, [r3, #22]
 80064b0:	4916      	ldr	r1, [pc, #88]	@ (800650c <SVCCTL_App_Notification+0x198>)
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fd ffb2 	bl	800441c <aci_gap_pass_key_resp>
 80064b8:	4603      	mov	r3, r0
 80064ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 80064be:	e018      	b.n	80064f2 <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80064c0:	4b10      	ldr	r3, [pc, #64]	@ (8006504 <SVCCTL_App_Notification+0x190>)
 80064c2:	8adb      	ldrh	r3, [r3, #22]
 80064c4:	2101      	movs	r1, #1
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe f952 	bl	8004770 <aci_gap_numeric_comparison_value_confirm_yesno>
 80064cc:	4603      	mov	r3, r0
 80064ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 80064d2:	e00e      	b.n	80064f2 <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	3302      	adds	r3, #2
 80064d8:	61bb      	str	r3, [r7, #24]
          break;
 80064da:	e00a      	b.n	80064f2 <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80064dc:	4b09      	ldr	r3, [pc, #36]	@ (8006504 <SVCCTL_App_Notification+0x190>)
 80064de:	8adb      	ldrh	r3, [r3, #22]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fe fc58 	bl	8004d96 <aci_gatt_confirm_indication>
        break;
 80064e6:	e004      	b.n	80064f2 <SVCCTL_App_Notification+0x17e>
          break;
 80064e8:	bf00      	nop
 80064ea:	e005      	b.n	80064f8 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80064ec:	bf00      	nop
 80064ee:	e003      	b.n	80064f8 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80064f0:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80064f2:	e001      	b.n	80064f8 <SVCCTL_App_Notification+0x184>
      break;
 80064f4:	bf00      	nop
 80064f6:	e000      	b.n	80064fa <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80064f8:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80064fa:	2301      	movs	r3, #1
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3728      	adds	r7, #40	@ 0x28
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000214 	.word	0x20000214
 8006508:	20000298 	.word	0x20000298
 800650c:	0001b207 	.word	0x0001b207

08006510 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8006516:	4b06      	ldr	r3, [pc, #24]	@ (8006530 <Ble_Tl_Init+0x20>)
 8006518:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800651a:	4b06      	ldr	r3, [pc, #24]	@ (8006534 <Ble_Tl_Init+0x24>)
 800651c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800651e:	463b      	mov	r3, r7
 8006520:	4619      	mov	r1, r3
 8006522:	4805      	ldr	r0, [pc, #20]	@ (8006538 <Ble_Tl_Init+0x28>)
 8006524:	f7ff f89c 	bl	8005660 <hci_init>

  return;
 8006528:	bf00      	nop
}
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	200300d8 	.word	0x200300d8
 8006534:	0800683d 	.word	0x0800683d
 8006538:	08006805 	.word	0x08006805

0800653c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800653c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800653e:	b08d      	sub	sp, #52	@ 0x34
 8006540:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8006542:	2300      	movs	r3, #0
 8006544:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006546:	2392      	movs	r3, #146	@ 0x92
 8006548:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800654a:	f7fe fdb9 	bl	80050c0 <hci_reset>
 800654e:	4603      	mov	r3, r0
 8006550:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8006552:	f000 f8d7 	bl	8006704 <BleGetBdAddress>
 8006556:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	2106      	movs	r1, #6
 800655c:	2000      	movs	r0, #0
 800655e:	f7fe fc6f 	bl	8004e40 <aci_hal_write_config_data>
 8006562:	4603      	mov	r3, r0
 8006564:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8006566:	4a4a      	ldr	r2, [pc, #296]	@ (8006690 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8006568:	2110      	movs	r1, #16
 800656a:	2018      	movs	r0, #24
 800656c:	f7fe fc68 	bl	8004e40 <aci_hal_write_config_data>
 8006570:	4603      	mov	r3, r0
 8006572:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8006574:	4a47      	ldr	r2, [pc, #284]	@ (8006694 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8006576:	2110      	movs	r1, #16
 8006578:	2008      	movs	r0, #8
 800657a:	f7fe fc61 	bl	8004e40 <aci_hal_write_config_data>
 800657e:	4603      	mov	r3, r0
 8006580:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8006582:	2118      	movs	r1, #24
 8006584:	2001      	movs	r0, #1
 8006586:	f7fe fce0 	bl	8004f4a <aci_hal_set_tx_power_level>
 800658a:	4603      	mov	r3, r0
 800658c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800658e:	f7fe f956 	bl	800483e <aci_gatt_init>
 8006592:	4603      	mov	r3, r0
 8006594:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8006596:	2300      	movs	r3, #0
 8006598:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	f043 0301 	orr.w	r3, r3, #1
 80065a0:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80065a2:	7bfb      	ldrb	r3, [r7, #15]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d01f      	beq.n	80065e8 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80065a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006698 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 80065aa:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80065ac:	1dba      	adds	r2, r7, #6
 80065ae:	7bf8      	ldrb	r0, [r7, #15]
 80065b0:	1cbb      	adds	r3, r7, #2
 80065b2:	9301      	str	r3, [sp, #4]
 80065b4:	1d3b      	adds	r3, r7, #4
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	4613      	mov	r3, r2
 80065ba:	2208      	movs	r2, #8
 80065bc:	2100      	movs	r1, #0
 80065be:	f7fd ff94 	bl	80044ea <aci_gap_init>
 80065c2:	4603      	mov	r3, r0
 80065c4:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80065c6:	88fc      	ldrh	r4, [r7, #6]
 80065c8:	88bd      	ldrh	r5, [r7, #4]
 80065ca:	68b8      	ldr	r0, [r7, #8]
 80065cc:	f7f9 fdd6 	bl	800017c <strlen>
 80065d0:	4603      	mov	r3, r0
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	4613      	mov	r3, r2
 80065da:	2200      	movs	r2, #0
 80065dc:	4629      	mov	r1, r5
 80065de:	4620      	mov	r0, r4
 80065e0:	f7fe fb30 	bl	8004c44 <aci_gatt_update_char_value>
 80065e4:	4603      	mov	r3, r0
 80065e6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80065e8:	88f8      	ldrh	r0, [r7, #6]
 80065ea:	8879      	ldrh	r1, [r7, #2]
 80065ec:	463b      	mov	r3, r7
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	2302      	movs	r3, #2
 80065f2:	2200      	movs	r2, #0
 80065f4:	f7fe fb26 	bl	8004c44 <aci_gatt_update_char_value>
 80065f8:	4603      	mov	r3, r0
 80065fa:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80065fc:	2202      	movs	r2, #2
 80065fe:	2102      	movs	r1, #2
 8006600:	2000      	movs	r0, #0
 8006602:	f7fe fd81 	bl	8005108 <hci_le_set_default_phy>
 8006606:	4603      	mov	r3, r0
 8006608:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800660a:	4b24      	ldr	r3, [pc, #144]	@ (800669c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800660c:	2201      	movs	r2, #1
 800660e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8006610:	4b22      	ldr	r3, [pc, #136]	@ (800669c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	4618      	mov	r0, r3
 8006616:	f7fd fde9 	bl	80041ec <aci_gap_set_io_capability>
 800661a:	4603      	mov	r3, r0
 800661c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800661e:	4b1f      	ldr	r3, [pc, #124]	@ (800669c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006620:	2201      	movs	r2, #1
 8006622:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8006624:	4b1d      	ldr	r3, [pc, #116]	@ (800669c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006626:	2208      	movs	r2, #8
 8006628:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800662a:	4b1c      	ldr	r3, [pc, #112]	@ (800669c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800662c:	2210      	movs	r2, #16
 800662e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8006630:	4b1a      	ldr	r3, [pc, #104]	@ (800669c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006632:	2200      	movs	r2, #0
 8006634:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8006636:	4b19      	ldr	r3, [pc, #100]	@ (800669c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006638:	4a19      	ldr	r2, [pc, #100]	@ (80066a0 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800663a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800663c:	4b17      	ldr	r3, [pc, #92]	@ (800669c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800663e:	2200      	movs	r2, #0
 8006640:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8006642:	4b16      	ldr	r3, [pc, #88]	@ (800669c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006644:	789c      	ldrb	r4, [r3, #2]
 8006646:	4b15      	ldr	r3, [pc, #84]	@ (800669c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006648:	785d      	ldrb	r5, [r3, #1]
 800664a:	4b14      	ldr	r3, [pc, #80]	@ (800669c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800664c:	791b      	ldrb	r3, [r3, #4]
 800664e:	4a13      	ldr	r2, [pc, #76]	@ (800669c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006650:	7952      	ldrb	r2, [r2, #5]
 8006652:	4912      	ldr	r1, [pc, #72]	@ (800669c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006654:	78c9      	ldrb	r1, [r1, #3]
 8006656:	4811      	ldr	r0, [pc, #68]	@ (800669c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006658:	6880      	ldr	r0, [r0, #8]
 800665a:	2600      	movs	r6, #0
 800665c:	9604      	str	r6, [sp, #16]
 800665e:	9003      	str	r0, [sp, #12]
 8006660:	9102      	str	r1, [sp, #8]
 8006662:	9201      	str	r2, [sp, #4]
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	2300      	movs	r3, #0
 8006668:	2201      	movs	r2, #1
 800666a:	4629      	mov	r1, r5
 800666c:	4620      	mov	r0, r4
 800666e:	f7fd fe11 	bl	8004294 <aci_gap_set_authentication_requirement>
 8006672:	4603      	mov	r3, r0
 8006674:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8006676:	4b09      	ldr	r3, [pc, #36]	@ (800669c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006678:	789b      	ldrb	r3, [r3, #2]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800667e:	f7fe f853 	bl	8004728 <aci_gap_configure_filter_accept_list>
 8006682:	4603      	mov	r3, r0
 8006684:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8006686:	bf00      	nop
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800668e:	bf00      	nop
 8006690:	080078d0 	.word	0x080078d0
 8006694:	080078e0 	.word	0x080078e0
 8006698:	0800770c 	.word	0x0800770c
 800669c:	20000214 	.word	0x20000214
 80066a0:	0001b207 	.word	0x0001b207

080066a4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b08c      	sub	sp, #48	@ 0x30
 80066a8:	af08      	add	r7, sp, #32
 80066aa:	4603      	mov	r3, r0
 80066ac:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80066ae:	2392      	movs	r3, #146	@ 0x92
 80066b0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80066b2:	4a12      	ldr	r2, [pc, #72]	@ (80066fc <Adv_Request+0x58>)
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80066ba:	2300      	movs	r3, #0
 80066bc:	9306      	str	r3, [sp, #24]
 80066be:	2300      	movs	r3, #0
 80066c0:	9305      	str	r3, [sp, #20]
 80066c2:	2300      	movs	r3, #0
 80066c4:	9304      	str	r3, [sp, #16]
 80066c6:	2300      	movs	r3, #0
 80066c8:	9303      	str	r3, [sp, #12]
 80066ca:	2300      	movs	r3, #0
 80066cc:	9302      	str	r3, [sp, #8]
 80066ce:	2300      	movs	r3, #0
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	2300      	movs	r3, #0
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	2300      	movs	r3, #0
 80066d8:	22a0      	movs	r2, #160	@ 0xa0
 80066da:	2180      	movs	r1, #128	@ 0x80
 80066dc:	2000      	movs	r0, #0
 80066de:	f7fd fc8b 	bl	8003ff8 <aci_gap_set_discoverable>
 80066e2:	4603      	mov	r3, r0
 80066e4:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80066e6:	4906      	ldr	r1, [pc, #24]	@ (8006700 <Adv_Request+0x5c>)
 80066e8:	200b      	movs	r0, #11
 80066ea:	f7fd ffab 	bl	8004644 <aci_gap_update_adv_data>
 80066ee:	4603      	mov	r3, r0
 80066f0:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80066f2:	bf00      	nop
}
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20000214 	.word	0x20000214
 8006700:	20000014 	.word	0x20000014

08006704 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800670a:	f7ff fdab 	bl	8006264 <LL_FLASH_GetUDN>
 800670e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006716:	d023      	beq.n	8006760 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8006718:	f7ff fdbc 	bl	8006294 <LL_FLASH_GetSTCompanyID>
 800671c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800671e:	f7ff fdad 	bl	800627c <LL_FLASH_GetDeviceID>
 8006722:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	b2da      	uxtb	r2, r3
 8006728:	4b16      	ldr	r3, [pc, #88]	@ (8006784 <BleGetBdAddress+0x80>)
 800672a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	0a1b      	lsrs	r3, r3, #8
 8006730:	b2da      	uxtb	r2, r3
 8006732:	4b14      	ldr	r3, [pc, #80]	@ (8006784 <BleGetBdAddress+0x80>)
 8006734:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	b2da      	uxtb	r2, r3
 800673a:	4b12      	ldr	r3, [pc, #72]	@ (8006784 <BleGetBdAddress+0x80>)
 800673c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	b2da      	uxtb	r2, r3
 8006742:	4b10      	ldr	r3, [pc, #64]	@ (8006784 <BleGetBdAddress+0x80>)
 8006744:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	0a1b      	lsrs	r3, r3, #8
 800674a:	b2da      	uxtb	r2, r3
 800674c:	4b0d      	ldr	r3, [pc, #52]	@ (8006784 <BleGetBdAddress+0x80>)
 800674e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	0c1b      	lsrs	r3, r3, #16
 8006754:	b2da      	uxtb	r2, r3
 8006756:	4b0b      	ldr	r3, [pc, #44]	@ (8006784 <BleGetBdAddress+0x80>)
 8006758:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800675a:	4b0a      	ldr	r3, [pc, #40]	@ (8006784 <BleGetBdAddress+0x80>)
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	e00b      	b.n	8006778 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8006760:	2000      	movs	r0, #0
 8006762:	f7ff fc99 	bl	8006098 <OTP_Read>
 8006766:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	617b      	str	r3, [r7, #20]
 8006772:	e001      	b.n	8006778 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8006774:	4b04      	ldr	r3, [pc, #16]	@ (8006788 <BleGetBdAddress+0x84>)
 8006776:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8006778:	697b      	ldr	r3, [r7, #20]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	2000020c 	.word	0x2000020c
 8006788:	080078c8 	.word	0x080078c8

0800678c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8006792:	4b0a      	ldr	r3, [pc, #40]	@ (80067bc <Adv_Cancel+0x30>)
 8006794:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006798:	2b05      	cmp	r3, #5
 800679a:	d00a      	beq.n	80067b2 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800679c:	2392      	movs	r3, #146	@ 0x92
 800679e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80067a0:	f7fd fc06 	bl	8003fb0 <aci_gap_set_non_discoverable>
 80067a4:	4603      	mov	r3, r0
 80067a6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80067a8:	4b04      	ldr	r3, [pc, #16]	@ (80067bc <Adv_Cancel+0x30>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80067b0:	bf00      	nop
 80067b2:	bf00      	nop
}
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20000214 	.word	0x20000214

080067c0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80067c8:	2100      	movs	r1, #0
 80067ca:	2002      	movs	r0, #2
 80067cc:	f000 fdfa 	bl	80073c4 <UTIL_SEQ_SetTask>

  return;
 80067d0:	bf00      	nop
}
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80067e0:	2001      	movs	r0, #1
 80067e2:	f000 fe5b 	bl	800749c <UTIL_SEQ_SetEvt>

  return;
 80067e6:	bf00      	nop
}
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b082      	sub	sp, #8
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80067f6:	2001      	movs	r0, #1
 80067f8:	f000 fe70 	bl	80074dc <UTIL_SEQ_WaitEvt>

  return;
 80067fc:	bf00      	nop
}
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	3308      	adds	r3, #8
 8006816:	4618      	mov	r0, r3
 8006818:	f7fe fddc 	bl	80053d4 <SVCCTL_UserEvtRx>
 800681c:	4603      	mov	r3, r0
 800681e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8006820:	7afb      	ldrb	r3, [r7, #11]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2201      	movs	r2, #1
 800682a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800682c:	e003      	b.n	8006836 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	701a      	strb	r2, [r3, #0]
  return;
 8006834:	bf00      	nop
}
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8006846:	79fb      	ldrb	r3, [r7, #7]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <BLE_StatusNot+0x16>
 800684c:	2b01      	cmp	r3, #1
 800684e:	d006      	beq.n	800685e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8006850:	e00b      	b.n	800686a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8006852:	2303      	movs	r3, #3
 8006854:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 fde0 	bl	800741c <UTIL_SEQ_PauseTask>
      break;
 800685c:	e005      	b.n	800686a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800685e:	2303      	movs	r3, #3
 8006860:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 fdfa 	bl	800745c <UTIL_SEQ_ResumeTask>
      break;
 8006868:	bf00      	nop
  }

  return;
 800686a:	bf00      	nop
}
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <myTask>:
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8006878:	2110      	movs	r1, #16
 800687a:	480c      	ldr	r0, [pc, #48]	@ (80068ac <myTask+0x38>)
 800687c:	f7fb fb60 	bl	8001f40 <HAL_GPIO_ReadPin>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10c      	bne.n	80068a0 <myTask+0x2c>
   {
 	  UpdateCharData[0] ^= 0x1;
 8006886:	4b0a      	ldr	r3, [pc, #40]	@ (80068b0 <myTask+0x3c>)
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	f083 0301 	eor.w	r3, r3, #1
 800688e:	b2da      	uxtb	r2, r3
 8006890:	4b07      	ldr	r3, [pc, #28]	@ (80068b0 <myTask+0x3c>)
 8006892:	701a      	strb	r2, [r3, #0]
 	  Custom_Mycharnotify_Update_Char();
 8006894:	f000 f848 	bl	8006928 <Custom_Mycharnotify_Update_Char>
 	  HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8006898:	2120      	movs	r1, #32
 800689a:	4806      	ldr	r0, [pc, #24]	@ (80068b4 <myTask+0x40>)
 800689c:	f7fb fb80 	bl	8001fa0 <HAL_GPIO_TogglePin>
   }
   UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 80068a0:	2100      	movs	r1, #0
 80068a2:	2008      	movs	r0, #8
 80068a4:	f000 fd8e 	bl	80073c4 <UTIL_SEQ_SetTask>
}
 80068a8:	bf00      	nop
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	48000800 	.word	0x48000800
 80068b0:	2000029c 	.word	0x2000029c
 80068b4:	48000400 	.word	0x48000400

080068b8 <Custom_STM_App_Notification>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d80b      	bhi.n	80068e0 <Custom_STM_App_Notification+0x28>
 80068c8:	a201      	add	r2, pc, #4	@ (adr r2, 80068d0 <Custom_STM_App_Notification+0x18>)
 80068ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ce:	bf00      	nop
 80068d0:	080068e1 	.word	0x080068e1
 80068d4:	080068e1 	.word	0x080068e1
 80068d8:	080068e1 	.word	0x080068e1
 80068dc:	080068e1 	.word	0x080068e1

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 80068e0:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80068e2:	bf00      	nop
}
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop

080068f0 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <Custom_APP_Notification+0x16>
 8006900:	2b01      	cmp	r3, #1
 8006902:	d002      	beq.n	800690a <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8006904:	e002      	b.n	800690c <Custom_APP_Notification+0x1c>
      break;
 8006906:	bf00      	nop
 8006908:	e000      	b.n	800690c <Custom_APP_Notification+0x1c>
      break;
 800690a:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800690c:	bf00      	nop
}
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800691c:	bf00      	nop
}
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

/* mySvc */
__USED void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
  uint8_t updateflag = 1;
 800692e:	2301      	movs	r3, #1
 8006930:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Mycharnotify_UC_1*/

  /* USER CODE END Mycharnotify_UC_1*/

  if (updateflag != 0)
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <Custom_Mycharnotify_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 8006938:	4904      	ldr	r1, [pc, #16]	@ (800694c <Custom_Mycharnotify_Update_Char+0x24>)
 800693a:	2001      	movs	r0, #1
 800693c:	f000 f960 	bl	8006c00 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Mycharnotify_UC_Last*/

  /* USER CODE END Mycharnotify_UC_Last*/
  return;
 8006940:	bf00      	nop
 8006942:	bf00      	nop
}
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	2000029c 	.word	0x2000029c

08006950 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08c      	sub	sp, #48	@ 0x30
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8006958:	2300      	movs	r3, #0
 800695a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	3301      	adds	r3, #1
 8006962:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8006964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2bff      	cmp	r3, #255	@ 0xff
 800696a:	f040 808e 	bne.w	8006a8a <Custom_STM_Event_Handler+0x13a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800696e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006970:	3302      	adds	r3, #2
 8006972:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8006974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800697e:	2b1a      	cmp	r3, #26
 8006980:	d87f      	bhi.n	8006a82 <Custom_STM_Event_Handler+0x132>
 8006982:	a201      	add	r2, pc, #4	@ (adr r2, 8006988 <Custom_STM_Event_Handler+0x38>)
 8006984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006988:	080069f5 	.word	0x080069f5
 800698c:	08006a83 	.word	0x08006a83
 8006990:	08006a83 	.word	0x08006a83
 8006994:	08006a83 	.word	0x08006a83
 8006998:	08006a83 	.word	0x08006a83
 800699c:	08006a83 	.word	0x08006a83
 80069a0:	08006a83 	.word	0x08006a83
 80069a4:	08006a83 	.word	0x08006a83
 80069a8:	08006a83 	.word	0x08006a83
 80069ac:	08006a83 	.word	0x08006a83
 80069b0:	08006a83 	.word	0x08006a83
 80069b4:	08006a83 	.word	0x08006a83
 80069b8:	08006a83 	.word	0x08006a83
 80069bc:	08006a83 	.word	0x08006a83
 80069c0:	08006a83 	.word	0x08006a83
 80069c4:	08006a83 	.word	0x08006a83
 80069c8:	08006a83 	.word	0x08006a83
 80069cc:	08006a83 	.word	0x08006a83
 80069d0:	08006a83 	.word	0x08006a83
 80069d4:	08006a83 	.word	0x08006a83
 80069d8:	08006a83 	.word	0x08006a83
 80069dc:	08006a83 	.word	0x08006a83
 80069e0:	08006a83 	.word	0x08006a83
 80069e4:	08006a83 	.word	0x08006a83
 80069e8:	08006a83 	.word	0x08006a83
 80069ec:	08006a83 	.word	0x08006a83
 80069f0:	08006a65 	.word	0x08006a65
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80069f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f6:	3302      	adds	r3, #2
 80069f8:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	885b      	ldrh	r3, [r3, #2]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	461a      	mov	r2, r3
 8006a02:	4b25      	ldr	r3, [pc, #148]	@ (8006a98 <Custom_STM_Event_Handler+0x148>)
 8006a04:	889b      	ldrh	r3, [r3, #4]
 8006a06:	3302      	adds	r3, #2
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d119      	bne.n	8006a40 <Custom_STM_Event_Handler+0xf0>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	7a1b      	ldrb	r3, [r3, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <Custom_STM_Event_Handler+0xd0>
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d008      	beq.n	8006a30 <Custom_STM_Event_Handler+0xe0>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 8006a1e:	e020      	b.n	8006a62 <Custom_STM_Event_Handler+0x112>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 8006a20:	2302      	movs	r3, #2
 8006a22:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8006a24:	f107 0308 	add.w	r3, r7, #8
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff ff45 	bl	80068b8 <Custom_STM_App_Notification>
                break;
 8006a2e:	e018      	b.n	8006a62 <Custom_STM_Event_Handler+0x112>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 8006a30:	2301      	movs	r3, #1
 8006a32:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8006a34:	f107 0308 	add.w	r3, r7, #8
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff ff3d 	bl	80068b8 <Custom_STM_App_Notification>
                break;
 8006a3e:	e010      	b.n	8006a62 <Custom_STM_Event_Handler+0x112>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	885b      	ldrh	r3, [r3, #2]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	461a      	mov	r2, r3
 8006a48:	4b13      	ldr	r3, [pc, #76]	@ (8006a98 <Custom_STM_Event_Handler+0x148>)
 8006a4a:	885b      	ldrh	r3, [r3, #2]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d119      	bne.n	8006a86 <Custom_STM_Event_Handler+0x136>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8006a52:	2301      	movs	r3, #1
 8006a54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8006a58:	2101      	movs	r1, #1
 8006a5a:	4810      	ldr	r0, [pc, #64]	@ (8006a9c <Custom_STM_Event_Handler+0x14c>)
 8006a5c:	f7fb faa0 	bl	8001fa0 <HAL_GPIO_TogglePin>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8006a60:	e011      	b.n	8006a86 <Custom_STM_Event_Handler+0x136>
 8006a62:	e010      	b.n	8006a86 <Custom_STM_Event_Handler+0x136>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8006a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a66:	3302      	adds	r3, #2
 8006a68:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8006a76:	f107 0308 	add.w	r3, r7, #8
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff ff1c 	bl	80068b8 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8006a80:	e002      	b.n	8006a88 <Custom_STM_Event_Handler+0x138>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8006a82:	bf00      	nop
 8006a84:	e002      	b.n	8006a8c <Custom_STM_Event_Handler+0x13c>
          break;
 8006a86:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006a88:	e000      	b.n	8006a8c <Custom_STM_Event_Handler+0x13c>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8006a8a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8006a8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8006a90:	4618      	mov	r0, r3
 8006a92:	3730      	adds	r7, #48	@ 0x30
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	2000049c 	.word	0x2000049c
 8006a9c:	48000400 	.word	0x48000400

08006aa0 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08c      	sub	sp, #48	@ 0x30
 8006aa4:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006aa6:	2392      	movs	r3, #146	@ 0x92
 8006aa8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8006aaa:	484f      	ldr	r0, [pc, #316]	@ (8006be8 <SVCCTL_InitCustomSvc+0x148>)
 8006aac:	f7fe fc78 	bl	80053a0 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8006ab0:	2306      	movs	r3, #6
 8006ab2:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 8006ab4:	238f      	movs	r3, #143	@ 0x8f
 8006ab6:	713b      	strb	r3, [r7, #4]
 8006ab8:	23e5      	movs	r3, #229	@ 0xe5
 8006aba:	717b      	strb	r3, [r7, #5]
 8006abc:	23b3      	movs	r3, #179	@ 0xb3
 8006abe:	71bb      	strb	r3, [r7, #6]
 8006ac0:	23d5      	movs	r3, #213	@ 0xd5
 8006ac2:	71fb      	strb	r3, [r7, #7]
 8006ac4:	232e      	movs	r3, #46	@ 0x2e
 8006ac6:	723b      	strb	r3, [r7, #8]
 8006ac8:	237f      	movs	r3, #127	@ 0x7f
 8006aca:	727b      	strb	r3, [r7, #9]
 8006acc:	234a      	movs	r3, #74	@ 0x4a
 8006ace:	72bb      	strb	r3, [r7, #10]
 8006ad0:	2398      	movs	r3, #152	@ 0x98
 8006ad2:	72fb      	strb	r3, [r7, #11]
 8006ad4:	232a      	movs	r3, #42	@ 0x2a
 8006ad6:	733b      	strb	r3, [r7, #12]
 8006ad8:	2348      	movs	r3, #72	@ 0x48
 8006ada:	737b      	strb	r3, [r7, #13]
 8006adc:	237a      	movs	r3, #122	@ 0x7a
 8006ade:	73bb      	strb	r3, [r7, #14]
 8006ae0:	23cc      	movs	r3, #204	@ 0xcc
 8006ae2:	73fb      	strb	r3, [r7, #15]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	743b      	strb	r3, [r7, #16]
 8006ae8:	2300      	movs	r3, #0
 8006aea:	747b      	strb	r3, [r7, #17]
 8006aec:	2300      	movs	r3, #0
 8006aee:	74bb      	strb	r3, [r7, #18]
 8006af0:	2300      	movs	r3, #0
 8006af2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8006af4:	7dbb      	ldrb	r3, [r7, #22]
 8006af6:	1d39      	adds	r1, r7, #4
 8006af8:	4a3c      	ldr	r2, [pc, #240]	@ (8006bec <SVCCTL_InitCustomSvc+0x14c>)
 8006afa:	9200      	str	r2, [sp, #0]
 8006afc:	2201      	movs	r2, #1
 8006afe:	2002      	movs	r0, #2
 8006b00:	f7fd fec2 	bl	8004888 <aci_gatt_add_service>
 8006b04:	4603      	mov	r3, r0
 8006b06:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8006b08:	2319      	movs	r3, #25
 8006b0a:	713b      	strb	r3, [r7, #4]
 8006b0c:	23ed      	movs	r3, #237	@ 0xed
 8006b0e:	717b      	strb	r3, [r7, #5]
 8006b10:	2382      	movs	r3, #130	@ 0x82
 8006b12:	71bb      	strb	r3, [r7, #6]
 8006b14:	23ae      	movs	r3, #174	@ 0xae
 8006b16:	71fb      	strb	r3, [r7, #7]
 8006b18:	23ed      	movs	r3, #237	@ 0xed
 8006b1a:	723b      	strb	r3, [r7, #8]
 8006b1c:	2321      	movs	r3, #33	@ 0x21
 8006b1e:	727b      	strb	r3, [r7, #9]
 8006b20:	234c      	movs	r3, #76	@ 0x4c
 8006b22:	72bb      	strb	r3, [r7, #10]
 8006b24:	239d      	movs	r3, #157	@ 0x9d
 8006b26:	72fb      	strb	r3, [r7, #11]
 8006b28:	2341      	movs	r3, #65	@ 0x41
 8006b2a:	733b      	strb	r3, [r7, #12]
 8006b2c:	2345      	movs	r3, #69	@ 0x45
 8006b2e:	737b      	strb	r3, [r7, #13]
 8006b30:	2322      	movs	r3, #34	@ 0x22
 8006b32:	73bb      	strb	r3, [r7, #14]
 8006b34:	238e      	movs	r3, #142	@ 0x8e
 8006b36:	73fb      	strb	r3, [r7, #15]
 8006b38:	2300      	movs	r3, #0
 8006b3a:	743b      	strb	r3, [r7, #16]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	747b      	strb	r3, [r7, #17]
 8006b40:	2300      	movs	r3, #0
 8006b42:	74bb      	strb	r3, [r7, #18]
 8006b44:	2300      	movs	r3, #0
 8006b46:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8006b48:	4b28      	ldr	r3, [pc, #160]	@ (8006bec <SVCCTL_InitCustomSvc+0x14c>)
 8006b4a:	8818      	ldrh	r0, [r3, #0]
 8006b4c:	4b28      	ldr	r3, [pc, #160]	@ (8006bf0 <SVCCTL_InitCustomSvc+0x150>)
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	1d3a      	adds	r2, r7, #4
 8006b52:	4928      	ldr	r1, [pc, #160]	@ (8006bf4 <SVCCTL_InitCustomSvc+0x154>)
 8006b54:	9105      	str	r1, [sp, #20]
 8006b56:	2100      	movs	r1, #0
 8006b58:	9104      	str	r1, [sp, #16]
 8006b5a:	2110      	movs	r1, #16
 8006b5c:	9103      	str	r1, [sp, #12]
 8006b5e:	2101      	movs	r1, #1
 8006b60:	9102      	str	r1, [sp, #8]
 8006b62:	2100      	movs	r1, #0
 8006b64:	9101      	str	r1, [sp, #4]
 8006b66:	2108      	movs	r1, #8
 8006b68:	9100      	str	r1, [sp, #0]
 8006b6a:	2102      	movs	r1, #2
 8006b6c:	f7fd ff62 	bl	8004a34 <aci_gatt_add_char>
 8006b70:	4603      	mov	r3, r0
 8006b72:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 8006b74:	2319      	movs	r3, #25
 8006b76:	713b      	strb	r3, [r7, #4]
 8006b78:	23ed      	movs	r3, #237	@ 0xed
 8006b7a:	717b      	strb	r3, [r7, #5]
 8006b7c:	2382      	movs	r3, #130	@ 0x82
 8006b7e:	71bb      	strb	r3, [r7, #6]
 8006b80:	23ae      	movs	r3, #174	@ 0xae
 8006b82:	71fb      	strb	r3, [r7, #7]
 8006b84:	23ed      	movs	r3, #237	@ 0xed
 8006b86:	723b      	strb	r3, [r7, #8]
 8006b88:	2321      	movs	r3, #33	@ 0x21
 8006b8a:	727b      	strb	r3, [r7, #9]
 8006b8c:	234c      	movs	r3, #76	@ 0x4c
 8006b8e:	72bb      	strb	r3, [r7, #10]
 8006b90:	239d      	movs	r3, #157	@ 0x9d
 8006b92:	72fb      	strb	r3, [r7, #11]
 8006b94:	2341      	movs	r3, #65	@ 0x41
 8006b96:	733b      	strb	r3, [r7, #12]
 8006b98:	2345      	movs	r3, #69	@ 0x45
 8006b9a:	737b      	strb	r3, [r7, #13]
 8006b9c:	2322      	movs	r3, #34	@ 0x22
 8006b9e:	73bb      	strb	r3, [r7, #14]
 8006ba0:	238e      	movs	r3, #142	@ 0x8e
 8006ba2:	73fb      	strb	r3, [r7, #15]
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	743b      	strb	r3, [r7, #16]
 8006ba8:	2300      	movs	r3, #0
 8006baa:	747b      	strb	r3, [r7, #17]
 8006bac:	2300      	movs	r3, #0
 8006bae:	74bb      	strb	r3, [r7, #18]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8006bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8006bec <SVCCTL_InitCustomSvc+0x14c>)
 8006bb6:	8818      	ldrh	r0, [r3, #0]
 8006bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf8 <SVCCTL_InitCustomSvc+0x158>)
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	1d3a      	adds	r2, r7, #4
 8006bbe:	490f      	ldr	r1, [pc, #60]	@ (8006bfc <SVCCTL_InitCustomSvc+0x15c>)
 8006bc0:	9105      	str	r1, [sp, #20]
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	9104      	str	r1, [sp, #16]
 8006bc6:	2110      	movs	r1, #16
 8006bc8:	9103      	str	r1, [sp, #12]
 8006bca:	2101      	movs	r1, #1
 8006bcc:	9102      	str	r1, [sp, #8]
 8006bce:	2100      	movs	r1, #0
 8006bd0:	9101      	str	r1, [sp, #4]
 8006bd2:	2110      	movs	r1, #16
 8006bd4:	9100      	str	r1, [sp, #0]
 8006bd6:	2102      	movs	r1, #2
 8006bd8:	f7fd ff2c 	bl	8004a34 <aci_gatt_add_char>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8006be0:	bf00      	nop
}
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	08006951 	.word	0x08006951
 8006bec:	2000049c 	.word	0x2000049c
 8006bf0:	20000020 	.word	0x20000020
 8006bf4:	2000049e 	.word	0x2000049e
 8006bf8:	20000022 	.word	0x20000022
 8006bfc:	200004a0 	.word	0x200004a0

08006c00 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af02      	add	r7, sp, #8
 8006c06:	4603      	mov	r3, r0
 8006c08:	6039      	str	r1, [r7, #0]
 8006c0a:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006c0c:	2392      	movs	r3, #146	@ 0x92
 8006c0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8006c10:	79fb      	ldrb	r3, [r7, #7]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d002      	beq.n	8006c1c <Custom_STM_App_Update_Char+0x1c>
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d010      	beq.n	8006c3c <Custom_STM_App_Update_Char+0x3c>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 8006c1a:	e01f      	b.n	8006c5c <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 8006c1c:	4b12      	ldr	r3, [pc, #72]	@ (8006c68 <Custom_STM_App_Update_Char+0x68>)
 8006c1e:	8818      	ldrh	r0, [r3, #0]
 8006c20:	4b11      	ldr	r3, [pc, #68]	@ (8006c68 <Custom_STM_App_Update_Char+0x68>)
 8006c22:	8859      	ldrh	r1, [r3, #2]
 8006c24:	4b11      	ldr	r3, [pc, #68]	@ (8006c6c <Custom_STM_App_Update_Char+0x6c>)
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	2200      	movs	r2, #0
 8006c32:	f7fe f807 	bl	8004c44 <aci_gatt_update_char_value>
 8006c36:	4603      	mov	r3, r0
 8006c38:	73fb      	strb	r3, [r7, #15]
      break;
 8006c3a:	e00f      	b.n	8006c5c <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 8006c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c68 <Custom_STM_App_Update_Char+0x68>)
 8006c3e:	8818      	ldrh	r0, [r3, #0]
 8006c40:	4b09      	ldr	r3, [pc, #36]	@ (8006c68 <Custom_STM_App_Update_Char+0x68>)
 8006c42:	8899      	ldrh	r1, [r3, #4]
 8006c44:	4b0a      	ldr	r3, [pc, #40]	@ (8006c70 <Custom_STM_App_Update_Char+0x70>)
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	2200      	movs	r2, #0
 8006c52:	f7fd fff7 	bl	8004c44 <aci_gatt_update_char_value>
 8006c56:	4603      	mov	r3, r0
 8006c58:	73fb      	strb	r3, [r7, #15]
      break;
 8006c5a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	2000049c 	.word	0x2000049c
 8006c6c:	20000020 	.word	0x20000020
 8006c70:	20000022 	.word	0x20000022

08006c74 <LL_PWR_EnableBootC2>:
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8006c78:	4b05      	ldr	r3, [pc, #20]	@ (8006c90 <LL_PWR_EnableBootC2+0x1c>)
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	4a04      	ldr	r2, [pc, #16]	@ (8006c90 <LL_PWR_EnableBootC2+0x1c>)
 8006c7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c82:	60d3      	str	r3, [r2, #12]
}
 8006c84:	bf00      	nop
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	58000400 	.word	0x58000400

08006c94 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8006c9c:	4b06      	ldr	r3, [pc, #24]	@ (8006cb8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006c9e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006ca2:	4905      	ldr	r1, [pc, #20]	@ (8006cb8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	58000800 	.word	0x58000800

08006cbc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006cc4:	4b05      	ldr	r3, [pc, #20]	@ (8006cdc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006cc6:	6a1a      	ldr	r2, [r3, #32]
 8006cc8:	4904      	ldr	r1, [pc, #16]	@ (8006cdc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	620b      	str	r3, [r1, #32]
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	58000800 	.word	0x58000800

08006ce0 <LL_AHB3_GRP1_EnableClock>:
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4013      	ands	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006d04:	68fb      	ldr	r3, [r7, #12]
}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b085      	sub	sp, #20
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8006d1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d1e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8006d22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8006d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d32:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4013      	ands	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
}
 8006d3e:	bf00      	nop
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	601a      	str	r2, [r3, #0]
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f043 0201 	orr.w	r2, r3, #1
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	601a      	str	r2, [r3, #0]
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	041b      	lsls	r3, r3, #16
 8006d9c:	43db      	mvns	r3, r3
 8006d9e:	401a      	ands	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	605a      	str	r2, [r3, #4]
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	041b      	lsls	r3, r3, #16
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	605a      	str	r2, [r3, #4]
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	43db      	mvns	r3, r3
 8006de6:	401a      	ands	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	605a      	str	r2, [r3, #4]
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	609a      	str	r2, [r3, #8]
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	041a      	lsls	r2, r3, #16
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	609a      	str	r2, [r3, #8]
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	4013      	ands	r3, r2
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d101      	bne.n	8006e4e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e000      	b.n	8006e50 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69da      	ldr	r2, [r3, #28]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d101      	bne.n	8006e78 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8006e74:	2301      	movs	r3, #1
 8006e76:	e000      	b.n	8006e7a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
	...

08006e88 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8006e8c:	2102      	movs	r1, #2
 8006e8e:	4818      	ldr	r0, [pc, #96]	@ (8006ef0 <HW_IPCC_Rx_Handler+0x68>)
 8006e90:	f7ff ffe4 	bl	8006e5c <LL_C2_IPCC_IsActiveFlag_CHx>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d008      	beq.n	8006eac <HW_IPCC_Rx_Handler+0x24>
 8006e9a:	4b15      	ldr	r3, [pc, #84]	@ (8006ef0 <HW_IPCC_Rx_Handler+0x68>)
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d102      	bne.n	8006eac <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8006ea6:	f000 f8d5 	bl	8007054 <HW_IPCC_SYS_EvtHandler>
 8006eaa:	e01e      	b.n	8006eea <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8006eac:	2101      	movs	r1, #1
 8006eae:	4810      	ldr	r0, [pc, #64]	@ (8006ef0 <HW_IPCC_Rx_Handler+0x68>)
 8006eb0:	f7ff ffd4 	bl	8006e5c <LL_C2_IPCC_IsActiveFlag_CHx>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d008      	beq.n	8006ecc <HW_IPCC_Rx_Handler+0x44>
 8006eba:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef0 <HW_IPCC_Rx_Handler+0x68>)
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d102      	bne.n	8006ecc <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8006ec6:	f000 f889 	bl	8006fdc <HW_IPCC_BLE_EvtHandler>
 8006eca:	e00e      	b.n	8006eea <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8006ecc:	2108      	movs	r1, #8
 8006ece:	4808      	ldr	r0, [pc, #32]	@ (8006ef0 <HW_IPCC_Rx_Handler+0x68>)
 8006ed0:	f7ff ffc4 	bl	8006e5c <LL_C2_IPCC_IsActiveFlag_CHx>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d008      	beq.n	8006eec <HW_IPCC_Rx_Handler+0x64>
 8006eda:	4b05      	ldr	r3, [pc, #20]	@ (8006ef0 <HW_IPCC_Rx_Handler+0x68>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f003 0308 	and.w	r3, r3, #8
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d102      	bne.n	8006eec <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8006ee6:	f000 f901 	bl	80070ec <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8006eea:	bf00      	nop
 8006eec:	bf00      	nop
}
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	58000c00 	.word	0x58000c00

08006ef4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8006ef8:	2102      	movs	r1, #2
 8006efa:	4818      	ldr	r0, [pc, #96]	@ (8006f5c <HW_IPCC_Tx_Handler+0x68>)
 8006efc:	f7ff ff99 	bl	8006e32 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d108      	bne.n	8006f18 <HW_IPCC_Tx_Handler+0x24>
 8006f06:	4b15      	ldr	r3, [pc, #84]	@ (8006f5c <HW_IPCC_Tx_Handler+0x68>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d102      	bne.n	8006f18 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8006f12:	f000 f893 	bl	800703c <HW_IPCC_SYS_CmdEvtHandler>
 8006f16:	e01e      	b.n	8006f56 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8006f18:	2108      	movs	r1, #8
 8006f1a:	4810      	ldr	r0, [pc, #64]	@ (8006f5c <HW_IPCC_Tx_Handler+0x68>)
 8006f1c:	f7ff ff89 	bl	8006e32 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d108      	bne.n	8006f38 <HW_IPCC_Tx_Handler+0x44>
 8006f26:	4b0d      	ldr	r3, [pc, #52]	@ (8006f5c <HW_IPCC_Tx_Handler+0x68>)
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d102      	bne.n	8006f38 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8006f32:	f000 f8bd 	bl	80070b0 <HW_IPCC_MM_FreeBufHandler>
 8006f36:	e00e      	b.n	8006f56 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8006f38:	2120      	movs	r1, #32
 8006f3a:	4808      	ldr	r0, [pc, #32]	@ (8006f5c <HW_IPCC_Tx_Handler+0x68>)
 8006f3c:	f7ff ff79 	bl	8006e32 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d108      	bne.n	8006f58 <HW_IPCC_Tx_Handler+0x64>
 8006f46:	4b05      	ldr	r3, [pc, #20]	@ (8006f5c <HW_IPCC_Tx_Handler+0x68>)
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d102      	bne.n	8006f58 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8006f52:	f000 f84f 	bl	8006ff4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8006f56:	bf00      	nop
 8006f58:	bf00      	nop
}
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	58000c00 	.word	0x58000c00

08006f60 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8006f64:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006f68:	f7ff fed3 	bl	8006d12 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8006f6c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006f70:	f7ff fea4 	bl	8006cbc <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8006f74:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006f78:	f7ff fe8c 	bl	8006c94 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8006f7c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8006f7e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8006f80:	f7ff fe78 	bl	8006c74 <LL_PWR_EnableBootC2>

  return;
 8006f84:	bf00      	nop
}
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8006f8c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006f90:	f7ff fea6 	bl	8006ce0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8006f94:	4806      	ldr	r0, [pc, #24]	@ (8006fb0 <HW_IPCC_Init+0x28>)
 8006f96:	f7ff fee8 	bl	8006d6a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8006f9a:	4805      	ldr	r0, [pc, #20]	@ (8006fb0 <HW_IPCC_Init+0x28>)
 8006f9c:	f7ff fed5 	bl	8006d4a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006fa0:	202c      	movs	r0, #44	@ 0x2c
 8006fa2:	f7fa fe18 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006fa6:	202d      	movs	r0, #45	@ 0x2d
 8006fa8:	f7fa fe15 	bl	8001bd6 <HAL_NVIC_EnableIRQ>

  return;
 8006fac:	bf00      	nop
}
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	58000c00 	.word	0x58000c00

08006fb4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006fb8:	2101      	movs	r1, #1
 8006fba:	4802      	ldr	r0, [pc, #8]	@ (8006fc4 <HW_IPCC_BLE_Init+0x10>)
 8006fbc:	f7ff ff0a 	bl	8006dd4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006fc0:	bf00      	nop
}
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	58000c00 	.word	0x58000c00

08006fc8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8006fcc:	2101      	movs	r1, #1
 8006fce:	4802      	ldr	r0, [pc, #8]	@ (8006fd8 <HW_IPCC_BLE_SendCmd+0x10>)
 8006fd0:	f7ff ff20 	bl	8006e14 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006fd4:	bf00      	nop
}
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	58000c00 	.word	0x58000c00

08006fdc <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8006fe0:	f7fe fea2 	bl	8005d28 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	4802      	ldr	r0, [pc, #8]	@ (8006ff0 <HW_IPCC_BLE_EvtHandler+0x14>)
 8006fe8:	f7ff ff06 	bl	8006df8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006fec:	bf00      	nop
}
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	58000c00 	.word	0x58000c00

08006ff4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8006ff8:	2120      	movs	r1, #32
 8006ffa:	4803      	ldr	r0, [pc, #12]	@ (8007008 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8006ffc:	f7ff fed8 	bl	8006db0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8007000:	f7fe fec2 	bl	8005d88 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8007004:	bf00      	nop
}
 8007006:	bd80      	pop	{r7, pc}
 8007008:	58000c00 	.word	0x58000c00

0800700c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007010:	2102      	movs	r1, #2
 8007012:	4802      	ldr	r0, [pc, #8]	@ (800701c <HW_IPCC_SYS_Init+0x10>)
 8007014:	f7ff fede 	bl	8006dd4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007018:	bf00      	nop
}
 800701a:	bd80      	pop	{r7, pc}
 800701c:	58000c00 	.word	0x58000c00

08007020 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007024:	2102      	movs	r1, #2
 8007026:	4804      	ldr	r0, [pc, #16]	@ (8007038 <HW_IPCC_SYS_SendCmd+0x18>)
 8007028:	f7ff fef4 	bl	8006e14 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800702c:	2102      	movs	r1, #2
 800702e:	4802      	ldr	r0, [pc, #8]	@ (8007038 <HW_IPCC_SYS_SendCmd+0x18>)
 8007030:	f7ff feab 	bl	8006d8a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8007034:	bf00      	nop
}
 8007036:	bd80      	pop	{r7, pc}
 8007038:	58000c00 	.word	0x58000c00

0800703c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007040:	2102      	movs	r1, #2
 8007042:	4803      	ldr	r0, [pc, #12]	@ (8007050 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8007044:	f7ff feb4 	bl	8006db0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8007048:	f7fe feee 	bl	8005e28 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800704c:	bf00      	nop
}
 800704e:	bd80      	pop	{r7, pc}
 8007050:	58000c00 	.word	0x58000c00

08007054 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8007058:	f7fe fefc 	bl	8005e54 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800705c:	2102      	movs	r1, #2
 800705e:	4802      	ldr	r0, [pc, #8]	@ (8007068 <HW_IPCC_SYS_EvtHandler+0x14>)
 8007060:	f7ff feca 	bl	8006df8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007064:	bf00      	nop
}
 8007066:	bd80      	pop	{r7, pc}
 8007068:	58000c00 	.word	0x58000c00

0800706c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8007074:	2108      	movs	r1, #8
 8007076:	480c      	ldr	r0, [pc, #48]	@ (80070a8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007078:	f7ff fedb 	bl	8006e32 <LL_C1_IPCC_IsActiveFlag_CHx>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d007      	beq.n	8007092 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8007082:	4a0a      	ldr	r2, [pc, #40]	@ (80070ac <HW_IPCC_MM_SendFreeBuf+0x40>)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007088:	2108      	movs	r1, #8
 800708a:	4807      	ldr	r0, [pc, #28]	@ (80070a8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800708c:	f7ff fe7d 	bl	8006d8a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8007090:	e006      	b.n	80070a0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007096:	2108      	movs	r1, #8
 8007098:	4803      	ldr	r0, [pc, #12]	@ (80070a8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800709a:	f7ff febb 	bl	8006e14 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800709e:	bf00      	nop
}
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	58000c00 	.word	0x58000c00
 80070ac:	200004a4 	.word	0x200004a4

080070b0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80070b4:	2108      	movs	r1, #8
 80070b6:	4806      	ldr	r0, [pc, #24]	@ (80070d0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80070b8:	f7ff fe7a 	bl	8006db0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80070bc:	4b05      	ldr	r3, [pc, #20]	@ (80070d4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80070c2:	2108      	movs	r1, #8
 80070c4:	4802      	ldr	r0, [pc, #8]	@ (80070d0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80070c6:	f7ff fea5 	bl	8006e14 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80070ca:	bf00      	nop
}
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	58000c00 	.word	0x58000c00
 80070d4:	200004a4 	.word	0x200004a4

080070d8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80070dc:	2108      	movs	r1, #8
 80070de:	4802      	ldr	r0, [pc, #8]	@ (80070e8 <HW_IPCC_TRACES_Init+0x10>)
 80070e0:	f7ff fe78 	bl	8006dd4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80070e4:	bf00      	nop
}
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	58000c00 	.word	0x58000c00

080070ec <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80070f0:	f7fe ff58 	bl	8005fa4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80070f4:	2108      	movs	r1, #8
 80070f6:	4802      	ldr	r0, [pc, #8]	@ (8007100 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80070f8:	f7ff fe7e 	bl	8006df8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80070fc:	bf00      	nop
}
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	58000c00 	.word	0x58000c00

08007104 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8007108:	4b05      	ldr	r3, [pc, #20]	@ (8007120 <UTIL_LPM_Init+0x1c>)
 800710a:	2200      	movs	r2, #0
 800710c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800710e:	4b05      	ldr	r3, [pc, #20]	@ (8007124 <UTIL_LPM_Init+0x20>)
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8007114:	bf00      	nop
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	200004a8 	.word	0x200004a8
 8007124:	200004ac 	.word	0x200004ac

08007128 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007134:	f3ef 8310 	mrs	r3, PRIMASK
 8007138:	613b      	str	r3, [r7, #16]
  return(result);
 800713a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800713c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800713e:	b672      	cpsid	i
}
 8007140:	bf00      	nop
  
  switch(state)
 8007142:	78fb      	ldrb	r3, [r7, #3]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d008      	beq.n	800715a <UTIL_LPM_SetOffMode+0x32>
 8007148:	2b01      	cmp	r3, #1
 800714a:	d10e      	bne.n	800716a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800714c:	4b0d      	ldr	r3, [pc, #52]	@ (8007184 <UTIL_LPM_SetOffMode+0x5c>)
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4313      	orrs	r3, r2
 8007154:	4a0b      	ldr	r2, [pc, #44]	@ (8007184 <UTIL_LPM_SetOffMode+0x5c>)
 8007156:	6013      	str	r3, [r2, #0]
      break;
 8007158:	e008      	b.n	800716c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	43da      	mvns	r2, r3
 800715e:	4b09      	ldr	r3, [pc, #36]	@ (8007184 <UTIL_LPM_SetOffMode+0x5c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4013      	ands	r3, r2
 8007164:	4a07      	ldr	r2, [pc, #28]	@ (8007184 <UTIL_LPM_SetOffMode+0x5c>)
 8007166:	6013      	str	r3, [r2, #0]
      break;
 8007168:	e000      	b.n	800716c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800716a:	bf00      	nop
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f383 8810 	msr	PRIMASK, r3
}
 8007176:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8007178:	bf00      	nop
 800717a:	371c      	adds	r7, #28
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	200004ac 	.word	0x200004ac

08007188 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b090      	sub	sp, #64	@ 0x40
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8007190:	4b73      	ldr	r3, [pc, #460]	@ (8007360 <UTIL_SEQ_Run+0x1d8>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8007196:	4b72      	ldr	r3, [pc, #456]	@ (8007360 <UTIL_SEQ_Run+0x1d8>)
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4013      	ands	r3, r2
 800719e:	4a70      	ldr	r2, [pc, #448]	@ (8007360 <UTIL_SEQ_Run+0x1d8>)
 80071a0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80071a2:	4b70      	ldr	r3, [pc, #448]	@ (8007364 <UTIL_SEQ_Run+0x1dc>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80071a8:	4b6f      	ldr	r3, [pc, #444]	@ (8007368 <UTIL_SEQ_Run+0x1e0>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80071ae:	4b6f      	ldr	r3, [pc, #444]	@ (800736c <UTIL_SEQ_Run+0x1e4>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80071b4:	4b6e      	ldr	r3, [pc, #440]	@ (8007370 <UTIL_SEQ_Run+0x1e8>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80071ba:	e08d      	b.n	80072d8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80071c0:	e002      	b.n	80071c8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80071c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c4:	3301      	adds	r3, #1
 80071c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80071c8:	4a6a      	ldr	r2, [pc, #424]	@ (8007374 <UTIL_SEQ_Run+0x1ec>)
 80071ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	401a      	ands	r2, r3
 80071d4:	4b62      	ldr	r3, [pc, #392]	@ (8007360 <UTIL_SEQ_Run+0x1d8>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4013      	ands	r3, r2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0f1      	beq.n	80071c2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80071de:	4a65      	ldr	r2, [pc, #404]	@ (8007374 <UTIL_SEQ_Run+0x1ec>)
 80071e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071e2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	401a      	ands	r2, r3
 80071ea:	4b5d      	ldr	r3, [pc, #372]	@ (8007360 <UTIL_SEQ_Run+0x1d8>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4013      	ands	r3, r2
 80071f0:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80071f2:	4a60      	ldr	r2, [pc, #384]	@ (8007374 <UTIL_SEQ_Run+0x1ec>)
 80071f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	4413      	add	r3, r2
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fe:	4013      	ands	r3, r2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d106      	bne.n	8007212 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8007204:	4a5b      	ldr	r2, [pc, #364]	@ (8007374 <UTIL_SEQ_Run+0x1ec>)
 8007206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007208:	00db      	lsls	r3, r3, #3
 800720a:	4413      	add	r3, r2
 800720c:	f04f 32ff 	mov.w	r2, #4294967295
 8007210:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8007212:	4a58      	ldr	r2, [pc, #352]	@ (8007374 <UTIL_SEQ_Run+0x1ec>)
 8007214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007216:	00db      	lsls	r3, r3, #3
 8007218:	4413      	add	r3, r2
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721e:	4013      	ands	r3, r2
 8007220:	4618      	mov	r0, r3
 8007222:	f000 f9b3 	bl	800758c <SEQ_BitPosition>
 8007226:	4603      	mov	r3, r0
 8007228:	461a      	mov	r2, r3
 800722a:	4b53      	ldr	r3, [pc, #332]	@ (8007378 <UTIL_SEQ_Run+0x1f0>)
 800722c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800722e:	4a51      	ldr	r2, [pc, #324]	@ (8007374 <UTIL_SEQ_Run+0x1ec>)
 8007230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	4413      	add	r3, r2
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	4b4f      	ldr	r3, [pc, #316]	@ (8007378 <UTIL_SEQ_Run+0x1f0>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2101      	movs	r1, #1
 800723e:	fa01 f303 	lsl.w	r3, r1, r3
 8007242:	43db      	mvns	r3, r3
 8007244:	401a      	ands	r2, r3
 8007246:	494b      	ldr	r1, [pc, #300]	@ (8007374 <UTIL_SEQ_Run+0x1ec>)
 8007248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	440b      	add	r3, r1
 800724e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007250:	f3ef 8310 	mrs	r3, PRIMASK
 8007254:	61bb      	str	r3, [r7, #24]
  return(result);
 8007256:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007258:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800725a:	b672      	cpsid	i
}
 800725c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800725e:	4b46      	ldr	r3, [pc, #280]	@ (8007378 <UTIL_SEQ_Run+0x1f0>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2201      	movs	r2, #1
 8007264:	fa02 f303 	lsl.w	r3, r2, r3
 8007268:	43da      	mvns	r2, r3
 800726a:	4b3e      	ldr	r3, [pc, #248]	@ (8007364 <UTIL_SEQ_Run+0x1dc>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4013      	ands	r3, r2
 8007270:	4a3c      	ldr	r2, [pc, #240]	@ (8007364 <UTIL_SEQ_Run+0x1dc>)
 8007272:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8007274:	2302      	movs	r3, #2
 8007276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007278:	e013      	b.n	80072a2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800727a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800727c:	3b01      	subs	r3, #1
 800727e:	4a3d      	ldr	r2, [pc, #244]	@ (8007374 <UTIL_SEQ_Run+0x1ec>)
 8007280:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8007284:	4b3c      	ldr	r3, [pc, #240]	@ (8007378 <UTIL_SEQ_Run+0x1f0>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2201      	movs	r2, #1
 800728a:	fa02 f303 	lsl.w	r3, r2, r3
 800728e:	43da      	mvns	r2, r3
 8007290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007292:	3b01      	subs	r3, #1
 8007294:	400a      	ands	r2, r1
 8007296:	4937      	ldr	r1, [pc, #220]	@ (8007374 <UTIL_SEQ_Run+0x1ec>)
 8007298:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800729c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800729e:	3b01      	subs	r3, #1
 80072a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e8      	bne.n	800727a <UTIL_SEQ_Run+0xf2>
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f383 8810 	msr	PRIMASK, r3
}
 80072b2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80072b4:	4b30      	ldr	r3, [pc, #192]	@ (8007378 <UTIL_SEQ_Run+0x1f0>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a30      	ldr	r2, [pc, #192]	@ (800737c <UTIL_SEQ_Run+0x1f4>)
 80072ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072be:	4798      	blx	r3

    local_taskset = TaskSet;
 80072c0:	4b28      	ldr	r3, [pc, #160]	@ (8007364 <UTIL_SEQ_Run+0x1dc>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80072c6:	4b28      	ldr	r3, [pc, #160]	@ (8007368 <UTIL_SEQ_Run+0x1e0>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80072cc:	4b27      	ldr	r3, [pc, #156]	@ (800736c <UTIL_SEQ_Run+0x1e4>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80072d2:	4b27      	ldr	r3, [pc, #156]	@ (8007370 <UTIL_SEQ_Run+0x1e8>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80072d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072dc:	401a      	ands	r2, r3
 80072de:	4b20      	ldr	r3, [pc, #128]	@ (8007360 <UTIL_SEQ_Run+0x1d8>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4013      	ands	r3, r2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d005      	beq.n	80072f4 <UTIL_SEQ_Run+0x16c>
 80072e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ec:	4013      	ands	r3, r2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f43f af64 	beq.w	80071bc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80072f4:	4b20      	ldr	r3, [pc, #128]	@ (8007378 <UTIL_SEQ_Run+0x1f0>)
 80072f6:	f04f 32ff 	mov.w	r2, #4294967295
 80072fa:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80072fc:	f000 f938 	bl	8007570 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007300:	f3ef 8310 	mrs	r3, PRIMASK
 8007304:	613b      	str	r3, [r7, #16]
  return(result);
 8007306:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8007308:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800730a:	b672      	cpsid	i
}
 800730c:	bf00      	nop
  local_taskset = TaskSet;
 800730e:	4b15      	ldr	r3, [pc, #84]	@ (8007364 <UTIL_SEQ_Run+0x1dc>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8007314:	4b14      	ldr	r3, [pc, #80]	@ (8007368 <UTIL_SEQ_Run+0x1e0>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800731a:	4b14      	ldr	r3, [pc, #80]	@ (800736c <UTIL_SEQ_Run+0x1e4>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8007320:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007324:	401a      	ands	r2, r3
 8007326:	4b0e      	ldr	r3, [pc, #56]	@ (8007360 <UTIL_SEQ_Run+0x1d8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4013      	ands	r3, r2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d107      	bne.n	8007340 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8007330:	4b0f      	ldr	r3, [pc, #60]	@ (8007370 <UTIL_SEQ_Run+0x1e8>)
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007336:	4013      	ands	r3, r2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800733c:	f7f9 f92d 	bl	800059a <UTIL_SEQ_Idle>
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f383 8810 	msr	PRIMASK, r3
}
 800734a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800734c:	f000 f917 	bl	800757e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8007350:	4a03      	ldr	r2, [pc, #12]	@ (8007360 <UTIL_SEQ_Run+0x1d8>)
 8007352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007354:	6013      	str	r3, [r2, #0]

  return;
 8007356:	bf00      	nop
}
 8007358:	3740      	adds	r7, #64	@ 0x40
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000028 	.word	0x20000028
 8007364:	200004b0 	.word	0x200004b0
 8007368:	200004b4 	.word	0x200004b4
 800736c:	20000024 	.word	0x20000024
 8007370:	200004b8 	.word	0x200004b8
 8007374:	20000540 	.word	0x20000540
 8007378:	200004bc 	.word	0x200004bc
 800737c:	200004c0 	.word	0x200004c0

08007380 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b088      	sub	sp, #32
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800738c:	f3ef 8310 	mrs	r3, PRIMASK
 8007390:	617b      	str	r3, [r7, #20]
  return(result);
 8007392:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8007394:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8007396:	b672      	cpsid	i
}
 8007398:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 f8f6 	bl	800758c <SEQ_BitPosition>
 80073a0:	4603      	mov	r3, r0
 80073a2:	4619      	mov	r1, r3
 80073a4:	4a06      	ldr	r2, [pc, #24]	@ (80073c0 <UTIL_SEQ_RegTask+0x40>)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	f383 8810 	msr	PRIMASK, r3
}
 80073b6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80073b8:	bf00      	nop
}
 80073ba:	3720      	adds	r7, #32
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	200004c0 	.word	0x200004c0

080073c4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073ce:	f3ef 8310 	mrs	r3, PRIMASK
 80073d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80073d4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80073d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80073d8:	b672      	cpsid	i
}
 80073da:	bf00      	nop

  TaskSet |= TaskId_bm;
 80073dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007414 <UTIL_SEQ_SetTask+0x50>)
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	4a0b      	ldr	r2, [pc, #44]	@ (8007414 <UTIL_SEQ_SetTask+0x50>)
 80073e6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80073e8:	4a0b      	ldr	r2, [pc, #44]	@ (8007418 <UTIL_SEQ_SetTask+0x54>)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	431a      	orrs	r2, r3
 80073f4:	4908      	ldr	r1, [pc, #32]	@ (8007418 <UTIL_SEQ_SetTask+0x54>)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f383 8810 	msr	PRIMASK, r3
}
 8007406:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007408:	bf00      	nop
}
 800740a:	371c      	adds	r7, #28
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	200004b0 	.word	0x200004b0
 8007418:	20000540 	.word	0x20000540

0800741c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007424:	f3ef 8310 	mrs	r3, PRIMASK
 8007428:	60fb      	str	r3, [r7, #12]
  return(result);
 800742a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800742c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800742e:	b672      	cpsid	i
}
 8007430:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	43da      	mvns	r2, r3
 8007436:	4b08      	ldr	r3, [pc, #32]	@ (8007458 <UTIL_SEQ_PauseTask+0x3c>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4013      	ands	r3, r2
 800743c:	4a06      	ldr	r2, [pc, #24]	@ (8007458 <UTIL_SEQ_PauseTask+0x3c>)
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f383 8810 	msr	PRIMASK, r3
}
 800744a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800744c:	bf00      	nop
}
 800744e:	371c      	adds	r7, #28
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	20000024 	.word	0x20000024

0800745c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800745c:	b480      	push	{r7}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007464:	f3ef 8310 	mrs	r3, PRIMASK
 8007468:	60fb      	str	r3, [r7, #12]
  return(result);
 800746a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800746c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800746e:	b672      	cpsid	i
}
 8007470:	bf00      	nop

  TaskMask |= TaskId_bm;
 8007472:	4b09      	ldr	r3, [pc, #36]	@ (8007498 <UTIL_SEQ_ResumeTask+0x3c>)
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4313      	orrs	r3, r2
 800747a:	4a07      	ldr	r2, [pc, #28]	@ (8007498 <UTIL_SEQ_ResumeTask+0x3c>)
 800747c:	6013      	str	r3, [r2, #0]
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	f383 8810 	msr	PRIMASK, r3
}
 8007488:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800748a:	bf00      	nop
}
 800748c:	371c      	adds	r7, #28
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	20000024 	.word	0x20000024

0800749c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800749c:	b480      	push	{r7}
 800749e:	b087      	sub	sp, #28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074a4:	f3ef 8310 	mrs	r3, PRIMASK
 80074a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80074aa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80074ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80074ae:	b672      	cpsid	i
}
 80074b0:	bf00      	nop

  EvtSet |= EvtId_bm;
 80074b2:	4b09      	ldr	r3, [pc, #36]	@ (80074d8 <UTIL_SEQ_SetEvt+0x3c>)
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	4a07      	ldr	r2, [pc, #28]	@ (80074d8 <UTIL_SEQ_SetEvt+0x3c>)
 80074bc:	6013      	str	r3, [r2, #0]
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	f383 8810 	msr	PRIMASK, r3
}
 80074c8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80074ca:	bf00      	nop
}
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	200004b4 	.word	0x200004b4

080074dc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b088      	sub	sp, #32
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80074e4:	4b1f      	ldr	r3, [pc, #124]	@ (8007564 <UTIL_SEQ_WaitEvt+0x88>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80074ea:	4b1e      	ldr	r3, [pc, #120]	@ (8007564 <UTIL_SEQ_WaitEvt+0x88>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f2:	d102      	bne.n	80074fa <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80074f4:	2300      	movs	r3, #0
 80074f6:	61fb      	str	r3, [r7, #28]
 80074f8:	e005      	b.n	8007506 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80074fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007564 <UTIL_SEQ_WaitEvt+0x88>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2201      	movs	r2, #1
 8007500:	fa02 f303 	lsl.w	r3, r2, r3
 8007504:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8007506:	4b18      	ldr	r3, [pc, #96]	@ (8007568 <UTIL_SEQ_WaitEvt+0x8c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800750c:	4a16      	ldr	r2, [pc, #88]	@ (8007568 <UTIL_SEQ_WaitEvt+0x8c>)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8007512:	e003      	b.n	800751c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8007514:	6879      	ldr	r1, [r7, #4]
 8007516:	69f8      	ldr	r0, [r7, #28]
 8007518:	f7f9 f846 	bl	80005a8 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800751c:	4b13      	ldr	r3, [pc, #76]	@ (800756c <UTIL_SEQ_WaitEvt+0x90>)
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4013      	ands	r3, r2
 8007524:	2b00      	cmp	r3, #0
 8007526:	d0f5      	beq.n	8007514 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8007528:	4a0e      	ldr	r2, [pc, #56]	@ (8007564 <UTIL_SEQ_WaitEvt+0x88>)
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800752e:	f3ef 8310 	mrs	r3, PRIMASK
 8007532:	60bb      	str	r3, [r7, #8]
  return(result);
 8007534:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007536:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007538:	b672      	cpsid	i
}
 800753a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	43da      	mvns	r2, r3
 8007540:	4b0a      	ldr	r3, [pc, #40]	@ (800756c <UTIL_SEQ_WaitEvt+0x90>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4013      	ands	r3, r2
 8007546:	4a09      	ldr	r2, [pc, #36]	@ (800756c <UTIL_SEQ_WaitEvt+0x90>)
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f383 8810 	msr	PRIMASK, r3
}
 8007554:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8007556:	4a04      	ldr	r2, [pc, #16]	@ (8007568 <UTIL_SEQ_WaitEvt+0x8c>)
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	6013      	str	r3, [r2, #0]
  return;
 800755c:	bf00      	nop
}
 800755e:	3720      	adds	r7, #32
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	200004bc 	.word	0x200004bc
 8007568:	200004b8 	.word	0x200004b8
 800756c:	200004b4 	.word	0x200004b4

08007570 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8007570:	b480      	push	{r7}
 8007572:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007574:	bf00      	nop
}
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800757e:	b480      	push	{r7}
 8007580:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007582:	bf00      	nop
}
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075a2:	d204      	bcs.n	80075ae <SEQ_BitPosition+0x22>
 80075a4:	2310      	movs	r3, #16
 80075a6:	73fb      	strb	r3, [r7, #15]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	041b      	lsls	r3, r3, #16
 80075ac:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075b4:	d205      	bcs.n	80075c2 <SEQ_BitPosition+0x36>
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
 80075b8:	3308      	adds	r3, #8
 80075ba:	73fb      	strb	r3, [r7, #15]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	021b      	lsls	r3, r3, #8
 80075c0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075c8:	d205      	bcs.n	80075d6 <SEQ_BitPosition+0x4a>
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
 80075cc:	3304      	adds	r3, #4
 80075ce:	73fb      	strb	r3, [r7, #15]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	011b      	lsls	r3, r3, #4
 80075d4:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	0f1b      	lsrs	r3, r3, #28
 80075da:	4a07      	ldr	r2, [pc, #28]	@ (80075f8 <SEQ_BitPosition+0x6c>)
 80075dc:	5cd2      	ldrb	r2, [r2, r3]
 80075de:	7bfb      	ldrb	r3, [r7, #15]
 80075e0:	4413      	add	r3, r2
 80075e2:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	f1c3 031f 	rsb	r3, r3, #31
 80075ea:	b2db      	uxtb	r3, r3
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr
 80075f8:	080078f0 	.word	0x080078f0

080075fc <memset>:
 80075fc:	4402      	add	r2, r0
 80075fe:	4603      	mov	r3, r0
 8007600:	4293      	cmp	r3, r2
 8007602:	d100      	bne.n	8007606 <memset+0xa>
 8007604:	4770      	bx	lr
 8007606:	f803 1b01 	strb.w	r1, [r3], #1
 800760a:	e7f9      	b.n	8007600 <memset+0x4>

0800760c <__libc_init_array>:
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	4d0d      	ldr	r5, [pc, #52]	@ (8007644 <__libc_init_array+0x38>)
 8007610:	4c0d      	ldr	r4, [pc, #52]	@ (8007648 <__libc_init_array+0x3c>)
 8007612:	1b64      	subs	r4, r4, r5
 8007614:	10a4      	asrs	r4, r4, #2
 8007616:	2600      	movs	r6, #0
 8007618:	42a6      	cmp	r6, r4
 800761a:	d109      	bne.n	8007630 <__libc_init_array+0x24>
 800761c:	4d0b      	ldr	r5, [pc, #44]	@ (800764c <__libc_init_array+0x40>)
 800761e:	4c0c      	ldr	r4, [pc, #48]	@ (8007650 <__libc_init_array+0x44>)
 8007620:	f000 f826 	bl	8007670 <_init>
 8007624:	1b64      	subs	r4, r4, r5
 8007626:	10a4      	asrs	r4, r4, #2
 8007628:	2600      	movs	r6, #0
 800762a:	42a6      	cmp	r6, r4
 800762c:	d105      	bne.n	800763a <__libc_init_array+0x2e>
 800762e:	bd70      	pop	{r4, r5, r6, pc}
 8007630:	f855 3b04 	ldr.w	r3, [r5], #4
 8007634:	4798      	blx	r3
 8007636:	3601      	adds	r6, #1
 8007638:	e7ee      	b.n	8007618 <__libc_init_array+0xc>
 800763a:	f855 3b04 	ldr.w	r3, [r5], #4
 800763e:	4798      	blx	r3
 8007640:	3601      	adds	r6, #1
 8007642:	e7f2      	b.n	800762a <__libc_init_array+0x1e>
 8007644:	08007908 	.word	0x08007908
 8007648:	08007908 	.word	0x08007908
 800764c:	08007908 	.word	0x08007908
 8007650:	0800790c 	.word	0x0800790c

08007654 <memcpy>:
 8007654:	440a      	add	r2, r1
 8007656:	4291      	cmp	r1, r2
 8007658:	f100 33ff 	add.w	r3, r0, #4294967295
 800765c:	d100      	bne.n	8007660 <memcpy+0xc>
 800765e:	4770      	bx	lr
 8007660:	b510      	push	{r4, lr}
 8007662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800766a:	4291      	cmp	r1, r2
 800766c:	d1f9      	bne.n	8007662 <memcpy+0xe>
 800766e:	bd10      	pop	{r4, pc}

08007670 <_init>:
 8007670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007672:	bf00      	nop
 8007674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007676:	bc08      	pop	{r3}
 8007678:	469e      	mov	lr, r3
 800767a:	4770      	bx	lr

0800767c <_fini>:
 800767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767e:	bf00      	nop
 8007680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007682:	bc08      	pop	{r3}
 8007684:	469e      	mov	lr, r3
 8007686:	4770      	bx	lr
